/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPClient } from "./http";
import { RetryConfig } from "./retries";
import { Params, pathToFunc } from "./url";

export const ServerProduction = "production";
export const ServerSandbox = "sandbox";
/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = {
    [ServerProduction]: "https://api.{gr4vy_id}.gr4vy.app",
    [ServerSandbox]: "https://api.sandbox.{gr4vy_id}.gr4vy.app",
} as const;

export type SDKOptions = {
    bearerAuth?: string | (() => Promise<string>);

    httpClient?: HTTPClient;
    /**
     * Allows overriding the default server used by the SDK
     */
    server?: keyof typeof ServerList;
    /**
     * Allows setting the gr4vy_id variable for url substitution
     */
    gr4vyId?: string;
    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: RetryConfig;
};

export function serverURLFromOptions(options: SDKOptions): URL | null {
    let serverURL = options.serverURL;

    const serverParams: Record<string, Params> = {
        production: {
            gr4vy_id: options.gr4vyId ?? "plantly",
        },
        sandbox: {
            gr4vy_id: options.gr4vyId ?? "plantly",
        },
    };

    let params: Params = {};

    if (!serverURL) {
        const server = options.server ?? ServerProduction;
        serverURL = ServerList[server] || "";
        params = serverParams[server] || {};
    }

    const u = pathToFunc(serverURL)(params);
    return new URL(u);
}

export const SDK_METADATA = {
    language: "typescript",
    openapiDocVersion: "1.1.0-beta",
    sdkVersion: "0.2.0",
    genVersion: "2.314.0",
    userAgent: "speakeasy-sdk/typescript 0.2.0 2.314.0 1.1.0-beta @gr4vy/sdk",
} as const;
