/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Gr4vyCore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Get checkout session
 *
 * @remarks
 * Retrieve the information stored on a checkout session.
 */
export function checkoutSessionsGet(
  client: Gr4vyCore,
  sessionId: string,
  timeoutInSeconds?: number | undefined,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.CheckoutSession,
    | errors.Error400
    | errors.Error401
    | errors.GetCheckoutSessionResponse403GetCheckoutSession
    | errors.Error404
    | errors.Error405
    | errors.Error409
    | errors.Error425
    | errors.Error429
    | errors.Error500
    | errors.Error502
    | errors.Error504
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    sessionId,
    timeoutInSeconds,
    options,
  ));
}

async function $do(
  client: Gr4vyCore,
  sessionId: string,
  timeoutInSeconds?: number | undefined,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.CheckoutSession,
      | errors.Error400
      | errors.Error401
      | errors.GetCheckoutSessionResponse403GetCheckoutSession
      | errors.Error404
      | errors.Error405
      | errors.Error409
      | errors.Error425
      | errors.Error429
      | errors.Error500
      | errors.Error502
      | errors.Error504
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const input: operations.GetCheckoutSessionRequest = {
    sessionId: sessionId,
    timeoutInSeconds: timeoutInSeconds,
  };

  const parsed = safeParse(
    input,
    (value) => operations.GetCheckoutSessionRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    session_id: encodeSimple("session_id", payload.session_id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/checkout/sessions/{session_id}")(pathParams);

  const query = encodeFormQuery({
    "timeout_in_seconds": payload.timeout_in_seconds,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.bearerAuth);
  const securityInput = secConfig == null ? {} : { bearerAuth: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "get_checkout_session",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.bearerAuth,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [
      "400",
      "401",
      "403",
      "404",
      "405",
      "409",
      "422",
      "425",
      "429",
      "4XX",
      "500",
      "502",
      "504",
      "5XX",
    ],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.CheckoutSession,
    | errors.Error400
    | errors.Error401
    | errors.GetCheckoutSessionResponse403GetCheckoutSession
    | errors.Error404
    | errors.Error405
    | errors.Error409
    | errors.Error425
    | errors.Error429
    | errors.Error500
    | errors.Error502
    | errors.Error504
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.CheckoutSession$inboundSchema),
    M.jsonErr(400, errors.Error400$inboundSchema),
    M.jsonErr(401, errors.Error401$inboundSchema),
    M.jsonErr(
      403,
      errors.GetCheckoutSessionResponse403GetCheckoutSession$inboundSchema,
    ),
    M.jsonErr(404, errors.Error404$inboundSchema),
    M.jsonErr(405, errors.Error405$inboundSchema),
    M.jsonErr(409, errors.Error409$inboundSchema),
    M.jsonErr(425, errors.Error425$inboundSchema),
    M.jsonErr(429, errors.Error429$inboundSchema),
    M.jsonErr(500, errors.Error500$inboundSchema),
    M.jsonErr(502, errors.Error502$inboundSchema),
    M.jsonErr(504, errors.Error504$inboundSchema),
    M.fail([422, "4XX"]),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
