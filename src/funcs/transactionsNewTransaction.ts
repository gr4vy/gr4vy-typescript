/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Gr4vyCore } from "../core.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * New transaction
 *
 * @remarks
 * Attempts to create an authorization for a payment method. In some cases it is
 * not possible to create the authorization without redirecting the user for
 * their authorization. In these cases the status is set to
 * indicate buyer approval is pending and an approval URL is returned.
 *
 * Duplicated gift card numbers are not supported. This includes both stored gift
 * cards, as well as those directly provided via the request.
 *
 */
export async function transactionsNewTransaction(
    client$: Gr4vyCore,
    idempotencyKey?: string | undefined,
    transactionRequest?: components.TransactionRequest | undefined,
    options?: RequestOptions
): Promise<
    Result<
        components.Transaction,
        | errors.Error400BadRequest
        | errors.Error401Unauthorized
        | errors.Error409DuplicateRecord
        | errors.Error429TooManyRequests
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$: operations.NewTransactionRequest = {
        idempotencyKey: idempotencyKey,
        transactionRequest: transactionRequest,
    };

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => operations.NewTransactionRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = encodeJSON$("body", payload$.TransactionRequest, { explode: true });

    const path$ = pathToFunc("/transactions")();

    const headers$ = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json",
        "Idempotency-Key": encodeSimple$("Idempotency-Key", payload$["Idempotency-Key"], {
            explode: false,
            charEncoding: "none",
        }),
    });

    const bearerAuth$ = await extractSecurity(client$.options$.bearerAuth);
    const security$ = bearerAuth$ == null ? {} : { bearerAuth: bearerAuth$ };
    const context = {
        operationID: "new-transaction",
        oAuth2Scopes: [],
        securitySource: client$.options$.bearerAuth,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "409", "429", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const responseFields$ = {
        HttpMeta: { Response: response, Request: request$ },
    };

    const [result$] = await m$.match<
        components.Transaction,
        | errors.Error400BadRequest
        | errors.Error401Unauthorized
        | errors.Error409DuplicateRecord
        | errors.Error429TooManyRequests
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(201, components.Transaction$inboundSchema),
        m$.jsonErr(400, errors.Error400BadRequest$inboundSchema),
        m$.jsonErr(401, errors.Error401Unauthorized$inboundSchema),
        m$.jsonErr(409, errors.Error409DuplicateRecord$inboundSchema),
        m$.jsonErr(429, errors.Error429TooManyRequests$inboundSchema),
        m$.fail(["4XX", "5XX"])
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
