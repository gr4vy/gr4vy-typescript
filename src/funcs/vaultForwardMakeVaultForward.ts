/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Gr4vyCore } from "../core.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";
import * as z from "zod";

/**
 * Forward PCI data
 *
 * @remarks
 * Forward an API call to a PCI endpoint. The request body is evaluated and any template fields are replaced by the card data before the request is sent to the given destination.
 */
export async function vaultForwardMakeVaultForward(
    client$: Gr4vyCore,
    request: operations.MakeVaultForwardRequest,
    options?: RequestOptions
): Promise<
    Result<
        string,
        | errors.Error400BadRequest
        | errors.Error401Unauthorized
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => operations.MakeVaultForwardRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = payload$.RequestBody;

    const path$ = pathToFunc("/vault-forward")();

    const headers$ = new Headers({
        "Content-Type": "*/*",
        Accept: "*/*",
        "x-vault-forward-authentications": encodeSimple$(
            "x-vault-forward-authentications",
            payload$["x-vault-forward-authentications"],
            { explode: false, charEncoding: "none" }
        ),
        "x-vault-forward-header-{HEADER_NAME}": encodeSimple$(
            "x-vault-forward-header-{HEADER_NAME}",
            payload$["x-vault-forward-header-{HEADER_NAME}"],
            { explode: false, charEncoding: "none" }
        ),
        "x-vault-forward-http-method": encodeSimple$(
            "x-vault-forward-http-method",
            payload$["x-vault-forward-http-method"],
            { explode: false, charEncoding: "none" }
        ),
        "x-vault-forward-payment-methods": encodeSimple$(
            "x-vault-forward-payment-methods",
            payload$["x-vault-forward-payment-methods"],
            { explode: false, charEncoding: "none" }
        ),
        "x-vault-forward-timeout": encodeSimple$(
            "x-vault-forward-timeout",
            payload$["x-vault-forward-timeout"],
            { explode: false, charEncoding: "none" }
        ),
        "x-vault-forward-url": encodeSimple$(
            "x-vault-forward-url",
            payload$["x-vault-forward-url"],
            { explode: false, charEncoding: "none" }
        ),
    });

    const bearerAuth$ = await extractSecurity(client$.options$.bearerAuth);
    const security$ = bearerAuth$ == null ? {} : { bearerAuth: bearerAuth$ };
    const context = {
        operationID: "make-vault-forward",
        oAuth2Scopes: [],
        securitySource: client$.options$.bearerAuth,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const responseFields$ = {
        HttpMeta: { Response: response, Request: request$ },
    };

    const [result$] = await m$.match<
        string,
        | errors.Error400BadRequest
        | errors.Error401Unauthorized
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.text(200, z.string(), { ctype: "*/*" }),
        m$.jsonErr(400, errors.Error400BadRequest$inboundSchema),
        m$.jsonErr(401, errors.Error401Unauthorized$inboundSchema),
        m$.fail(["4XX", "5XX"])
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
