/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Gr4vyCore } from "../core.js";
import { dlv } from "../lib/dlv.js";
import { encodeFormQuery as encodeFormQuery$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";
import { createPageIterator, haltIterator, PageIterator, Paginator } from "../types/operations.js";

/**
 * Browse
 *
 * @remarks
 * Browse the list of transactions.
 */
export async function listTransactions(
    client$: Gr4vyCore,
    request: operations.ListTransactionsRequest,
    options?: RequestOptions
): Promise<
    PageIterator<
        Result<
            operations.ListTransactionsResponse,
            | errors.HTTPValidationError
            | SDKError
            | SDKValidationError
            | UnexpectedClientError
            | InvalidRequestError
            | RequestAbortedError
            | RequestTimeoutError
            | ConnectionError
        >
    >
> {
    const input$ = typeof request === "undefined" ? {} : request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => operations.ListTransactionsRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return haltIterator(parsed$);
    }
    const payload$ = parsed$.value;
    const body$ = null;

    const path$ = pathToFunc("/transactions")();

    const query$ = encodeFormQuery$({
        after_created_at: payload$.after_created_at,
        after_updated_at: payload$.after_updated_at,
        amount_eq: payload$.amount_eq,
        amount_gte: payload$.amount_gte,
        amount_lte: payload$.amount_lte,
        before_created_at: payload$.before_created_at,
        before_updated_at: payload$.before_updated_at,
        buyer_email_address: payload$.buyer_email_address,
        buyer_external_identifier: payload$.buyer_external_identifier,
        buyer_id: payload$.buyer_id,
        checkout_session_id: payload$.checkout_session_id,
        created_at_gte: payload$.created_at_gte,
        created_at_lte: payload$.created_at_lte,
        currency: payload$.currency,
        cursor: payload$.cursor,
        error_code: payload$.error_code,
        external_identifier: payload$.external_identifier,
        gift_card_id: payload$.gift_card_id,
        gift_card_last4: payload$.gift_card_last4,
        has_gift_card_redemptions: payload$.has_gift_card_redemptions,
        has_refunds: payload$.has_refunds,
        id: payload$.id,
        limit: payload$.limit,
        metadata: payload$.metadata,
        method: payload$.method,
        payment_method_fingerprint: payload$.payment_method_fingerprint,
        payment_method_id: payload$.payment_method_id,
        payment_method_label: payload$.payment_method_label,
        payment_service_id: payload$.payment_service_id,
        payment_service_transaction_id: payload$.payment_service_transaction_id,
        pending_review: payload$.pending_review,
        reconciliation_id: payload$.reconciliation_id,
        search: payload$.search,
        status: payload$.status,
        transaction_status: payload$.transaction_status,
        updated_at_gte: payload$.updated_at_gte,
        updated_at_lte: payload$.updated_at_lte,
    });

    const headers$ = new Headers({
        Accept: "application/json",
    });

    const oAuth2PasswordBearer$ = await extractSecurity(client$.options$.oAuth2PasswordBearer);
    const security$ =
        oAuth2PasswordBearer$ == null ? {} : { oAuth2PasswordBearer: oAuth2PasswordBearer$ };
    const context = {
        operationID: "list_transactions",
        oAuth2Scopes: [],
        securitySource: client$.options$.oAuth2PasswordBearer,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return haltIterator(requestRes);
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return haltIterator(doResult);
    }
    const response = doResult.value;

    const responseFields$ = {
        HttpMeta: { Response: response, Request: request$ },
    };

    const [result$, raw$] = await m$.match<
        operations.ListTransactionsResponse,
        | errors.HTTPValidationError
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(200, operations.ListTransactionsResponse$inboundSchema, { key: "Result" }),
        m$.jsonErr(422, errors.HTTPValidationError$inboundSchema),
        m$.fail(["4XX", "5XX"])
    )(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return haltIterator(result$);
    }

    const nextFunc = (
        responseData: unknown
    ): Paginator<
        Result<
            operations.ListTransactionsResponse,
            | errors.HTTPValidationError
            | SDKError
            | SDKValidationError
            | UnexpectedClientError
            | InvalidRequestError
            | RequestAbortedError
            | RequestTimeoutError
            | ConnectionError
        >
    > => {
        const nextCursor = dlv(responseData, "next_cursor");

        if (nextCursor == null) {
            return () => null;
        }

        return () =>
            listTransactions(
                client$,
                {
                    ...input$,
                    cursor: nextCursor,
                },
                options
            );
    };

    const page$ = { ...result$, next: nextFunc(raw$) };
    return { ...page$, ...createPageIterator(page$, (v) => !v.ok) };
}
