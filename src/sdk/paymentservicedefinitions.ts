/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentServiceDefinitionsCreatePaymentServiceDefinitionSession } from "../funcs/paymentServiceDefinitionsCreatePaymentServiceDefinitionSession.js";
import { paymentServiceDefinitionsGetPaymentServiceDefinition } from "../funcs/paymentServiceDefinitionsGetPaymentServiceDefinition.js";
import { paymentServiceDefinitionsListPaymentServiceDefinitions } from "../funcs/paymentServiceDefinitionsListPaymentServiceDefinitions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaymentServiceDefinitions extends ClientSDK {
    /**
     * List payment service definitions
     *
     * @remarks
     * Returns a list of all available payment service definitions.
     */
    async listPaymentServiceDefinitions(
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceDefinitions> {
        return unwrapAsync(
            paymentServiceDefinitionsListPaymentServiceDefinitions(this, limit, cursor, options)
        );
    }

    /**
     * Get payment service definition
     *
     * @remarks
     * Gets the definition for a payment service.
     */
    async getPaymentServiceDefinition(
        paymentServiceDefinitionId: string,
        options?: RequestOptions
    ): Promise<components.PaymentServiceDefinition> {
        return unwrapAsync(
            paymentServiceDefinitionsGetPaymentServiceDefinition(
                this,
                paymentServiceDefinitionId,
                options
            )
        );
    }

    /**
     * Create a session for a payment service
     *
     * @remarks
     * Creates a session for a payment service. This endpoint directly
     * passes the request through to the relevant payment service for processing,
     * and so the schema will differ based on the service used.
     *
     * If the downstream service returns an error, this API will return a successful response
     * with the status code in the response.
     */
    async createPaymentServiceDefinitionSession(
        paymentServiceDefinitionId: string,
        requestBody?: { [k: string]: any } | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceSession> {
        return unwrapAsync(
            paymentServiceDefinitionsCreatePaymentServiceDefinitionSession(
                this,
                paymentServiceDefinitionId,
                requestBody,
                options
            )
        );
    }
}
