/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";

export class PaymentServiceDefinitions extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List payment service definitions
     *
     * @remarks
     * Returns a list of all available payment service definitions.
     */
    async listPaymentServiceDefinitions(
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceDefinitions> {
        const input$: operations.ListPaymentServiceDefinitionsRequest = {
            limit: limit,
            cursor: cursor,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ListPaymentServiceDefinitionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/payment-service-definitions")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
            limit: payload$.limit,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-payment-service-definitions",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.PaymentServiceDefinitions>()
            .json(200, components.PaymentServiceDefinitions$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get payment service definition
     *
     * @remarks
     * Gets the definition for a payment service.
     */
    async getPaymentServiceDefinition(
        paymentServiceDefinitionId: string,
        options?: RequestOptions
    ): Promise<components.PaymentServiceDefinition> {
        const input$: operations.GetPaymentServiceDefinitionRequest = {
            paymentServiceDefinitionId: paymentServiceDefinitionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetPaymentServiceDefinitionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            payment_service_definition_id: encodeSimple$(
                "payment_service_definition_id",
                payload$.payment_service_definition_id,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/payment-service-definitions/{payment_service_definition_id}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-payment-service-definition",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.PaymentServiceDefinition>()
            .json(200, components.PaymentServiceDefinition$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a session for a payment service
     *
     * @remarks
     * Creates a session for a payment service. This endpoint directly
     * passes the request through to the relevant payment service for processing,
     * and so the schema will differ based on the service used.
     *
     * If the downstream service returns an error, this API will return a successful response
     * with the status code in the response.
     */
    async createPaymentServiceDefinitionSession(
        paymentServiceDefinitionId: string,
        requestBody?: { [k: string]: any } | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceSession> {
        const input$: operations.CreatePaymentServiceDefinitionSessionRequest = {
            paymentServiceDefinitionId: paymentServiceDefinitionId,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.CreatePaymentServiceDefinitionSessionRequest$outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            payment_service_definition_id: encodeSimple$(
                "payment_service_definition_id",
                payload$.payment_service_definition_id,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/payment-service-definitions/{payment_service_definition_id}/sessions"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "create-payment-service-definition-session",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.PaymentServiceSession>()
            .json(200, components.PaymentServiceSession$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
