/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { merchantAccountsDeleteMerchantAccuont } from "../funcs/merchantAccountsDeleteMerchantAccuont.js";
import { merchantAccountsGetMerchantAccount } from "../funcs/merchantAccountsGetMerchantAccount.js";
import { merchantAccountsListMerchantAccounts } from "../funcs/merchantAccountsListMerchantAccounts.js";
import { merchantAccountsNewMerchantAccount } from "../funcs/merchantAccountsNewMerchantAccount.js";
import { merchantAccountsUpdateMerchantAccount } from "../funcs/merchantAccountsUpdateMerchantAccount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MerchantAccounts extends ClientSDK {
    /**
     * List merchant accounts
     *
     * @remarks
     * Lists all merchant accounts in an instance.
     */
    async listMerchantAccounts(options?: RequestOptions): Promise<components.MerchantAccounts> {
        return unwrapAsync(merchantAccountsListMerchantAccounts(this, options));
    }

    /**
     * New merchant account
     *
     * @remarks
     * Create a merchant account. Optionally, provide an `outbound_webhook_url`, and
     * if HTTP Basic Authentication is required, provide the
     * `outbound_webhook_username` and `outbound_webhook_password`. When retrieving
     * a Merchant Account the `outbound_webhook_password` will be omitted.
     *
     * Optionally provide Network Tokens configuration per scheme. If done, all
     * parameters for the same scheme must be provided.
     */
    async newMerchantAccount(
        request?: components.MerchantAccountCreate | undefined,
        options?: RequestOptions
    ): Promise<components.MerchantAccount> {
        return unwrapAsync(merchantAccountsNewMerchantAccount(this, request, options));
    }

    /**
     * Get merchant account
     *
     * @remarks
     * Retrieves details of a merchant account.
     */
    async getMerchantAccount(
        merchantAccountId: string,
        options?: RequestOptions
    ): Promise<components.MerchantAccount> {
        return unwrapAsync(merchantAccountsGetMerchantAccount(this, merchantAccountId, options));
    }

    /**
     * Update merchant account
     *
     * @remarks
     * Update an existing merchant account. Optionally, provide an
     * `outbound_webhook_url`, and if HTTP Basic Authentication is required, provide
     * the `outbound_webhook_username` and `outbound_webhook_password`. When
     * retrieving a Merchant Account the `outbound_webhook_password` will be omitted.
     *
     * Optionally provide Network Tokens configuration per scheme. If done, all
     * parameters for the same scheme must be provided.
     */
    async updateMerchantAccount(
        merchantAccountId: string,
        merchantAccountUpdate?: components.MerchantAccountUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.MerchantAccount> {
        return unwrapAsync(
            merchantAccountsUpdateMerchantAccount(
                this,
                merchantAccountId,
                merchantAccountUpdate,
                options
            )
        );
    }

    /**
     * Delete merchant account
     *
     * @remarks
     * Deletes a specific merchant account.
     */
    async deleteMerchantAccuont(
        merchantAccountId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(merchantAccountsDeleteMerchantAccuont(this, merchantAccountId, options));
    }
}
