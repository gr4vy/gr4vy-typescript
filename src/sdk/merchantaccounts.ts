/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { merchantAccountsCreate } from "../funcs/merchantAccountsCreate.js";
import { merchantAccountsGet } from "../funcs/merchantAccountsGet.js";
import { merchantAccountsList } from "../funcs/merchantAccountsList.js";
import { merchantAccountsUpdate } from "../funcs/merchantAccountsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class MerchantAccounts extends ClientSDK {
  /**
   * List all merchant accounts
   *
   * @remarks
   * List all merchant accounts in an instance.
   */
  async list(
    cursor?: string | null | undefined,
    limit?: number | undefined,
    search?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.ListMerchantAccountsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(merchantAccountsList(
      this,
      cursor,
      limit,
      search,
      options,
    ));
  }

  /**
   * Create a merchant account
   *
   * @remarks
   * Create a new merchant account in an instance.
   */
  async create(
    request: components.MerchantAccountCreate,
    options?: RequestOptions,
  ): Promise<components.MerchantAccount> {
    return unwrapAsync(merchantAccountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a merchant account
   *
   * @remarks
   * Get info about a merchant account in an instance.
   */
  async get(
    merchantAccountId: string,
    options?: RequestOptions,
  ): Promise<components.MerchantAccount> {
    return unwrapAsync(merchantAccountsGet(
      this,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Update a merchant account
   *
   * @remarks
   * Update info for a merchant account in an instance.
   */
  async update(
    merchantAccountUpdate: components.MerchantAccountUpdate,
    merchantAccountId: string,
    options?: RequestOptions,
  ): Promise<components.MerchantAccount> {
    return unwrapAsync(merchantAccountsUpdate(
      this,
      merchantAccountUpdate,
      merchantAccountId,
      options,
    ));
  }
}
