/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import * as z from "zod";

export class Flow extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List flow rules
     *
     * @remarks
     * Returns a list of rules for a given flow. Each rule has an
     * associated action, conditions, and outcome.
     */
    async listFlowRules(
        flow: operations.Flow,
        options?: RequestOptions
    ): Promise<components.FlowRules> {
        const input$: operations.ListFlowRulesRequest = {
            flow: flow,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListFlowRulesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            flow: enc$.encodeSimple("flow", payload$.flow, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/flows/{flow}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-flow-rules",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.FlowRules>()
            .json(200, components.FlowRules$)
            .json(401, errors.Error401Unauthorized$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create flow rule
     *
     * @remarks
     * Adds a rule for a given flow and action.
     *
     */
    async newFlowRule(
        flow: operations.PathParamFlow,
        action: operations.PathParamAction,
        flowRuleCreateRequest?: components.FlowRuleCreateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.FlowRule> {
        const input$: operations.NewFlowRuleRequest = {
            flow: flow,
            action: action,
            flowRuleCreateRequest: flowRuleCreateRequest,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.NewFlowRuleRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.FlowRuleCreateRequest, { explode: true });

        const pathParams$ = {
            action: enc$.encodeSimple("action", payload$.action, {
                explode: false,
                charEncoding: "percent",
            }),
            flow: enc$.encodeSimple("flow", payload$.flow, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/flows/{flow}/actions/{action}/rules")(
            pathParams$
        );

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "new-flow-rule",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.FlowRule>()
            .json(201, components.FlowRule$)
            .json(400, errors.Error400BadRequest$, { err: true })
            .json(401, errors.Error401Unauthorized$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get rule
     *
     * @remarks
     * Returns a configured rule that triggers an action in a flow.
     */
    async getFlowRule(
        flow: operations.GetFlowRulePathParamFlow,
        action: operations.GetFlowRulePathParamAction,
        ruleId: string,
        options?: RequestOptions
    ): Promise<components.FlowRule> {
        const input$: operations.GetFlowRuleRequest = {
            flow: flow,
            action: action,
            ruleId: ruleId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetFlowRuleRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            action: enc$.encodeSimple("action", payload$.action, {
                explode: false,
                charEncoding: "percent",
            }),
            flow: enc$.encodeSimple("flow", payload$.flow, {
                explode: false,
                charEncoding: "percent",
            }),
            rule_id: enc$.encodeSimple("rule_id", payload$.rule_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/flows/{flow}/actions/{action}/rules/{rule_id}")(
            pathParams$
        );

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-flow-rule",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.FlowRule>()
            .json(200, components.FlowRule$)
            .json(401, errors.Error401Unauthorized$, { err: true })
            .json(404, errors.Error404NotFound$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update flow rule
     *
     * @remarks
     * Updates a given flow rule.
     *
     */
    async updateFlowRule(
        flow: operations.UpdateFlowRulePathParamFlow,
        action: operations.UpdateFlowRulePathParamAction,
        ruleId: string,
        flowRuleUpdateRequest?: components.FlowRuleUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.FlowRule> {
        const input$: operations.UpdateFlowRuleRequest = {
            flow: flow,
            action: action,
            ruleId: ruleId,
            flowRuleUpdateRequest: flowRuleUpdateRequest,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateFlowRuleRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.FlowRuleUpdateRequest, { explode: true });

        const pathParams$ = {
            action: enc$.encodeSimple("action", payload$.action, {
                explode: false,
                charEncoding: "percent",
            }),
            flow: enc$.encodeSimple("flow", payload$.flow, {
                explode: false,
                charEncoding: "percent",
            }),
            rule_id: enc$.encodeSimple("rule_id", payload$.rule_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/flows/{flow}/actions/{action}/rules/{rule_id}")(
            pathParams$
        );

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "update-flow-rule",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.FlowRule>()
            .json(200, components.FlowRule$)
            .json(400, errors.Error400BadRequest$, { err: true })
            .json(401, errors.Error401Unauthorized$, { err: true })
            .json(404, errors.Error404NotFound$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete flow rule
     *
     * @remarks
     * Deletes a given rule from the system.
     */
    async deleteFlowRule(
        flow: operations.DeleteFlowRulePathParamFlow,
        action: operations.DeleteFlowRulePathParamAction,
        ruleId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeleteFlowRuleRequest = {
            flow: flow,
            action: action,
            ruleId: ruleId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteFlowRuleRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            action: enc$.encodeSimple("action", payload$.action, {
                explode: false,
                charEncoding: "percent",
            }),
            flow: enc$.encodeSimple("flow", payload$.flow, {
                explode: false,
                charEncoding: "percent",
            }),
            rule_id: enc$.encodeSimple("rule_id", payload$.rule_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/flows/{flow}/actions/{action}/rules/{rule_id}")(
            pathParams$
        );

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete-flow-rule",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(401, errors.Error401Unauthorized$, { err: true })
            .json(404, errors.Error404NotFound$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List flow outcomes
     *
     * @remarks
     * Returns a list of possible outcomes for a given flow action.
     */
    async listFlowOutcomes(
        flow: operations.ListFlowOutcomesPathParamFlow,
        action: operations.ListFlowOutcomesPathParamAction,
        locale?: string | undefined,
        options?: RequestOptions
    ): Promise<components.FlowRuleOutcomes> {
        const input$: operations.ListFlowOutcomesRequest = {
            flow: flow,
            action: action,
            locale: locale,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListFlowOutcomesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            action: enc$.encodeSimple("action", payload$.action, {
                explode: false,
                charEncoding: "percent",
            }),
            flow: enc$.encodeSimple("flow", payload$.flow, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/flows/{flow}/actions/{action}/outcomes")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("locale", payload$.locale, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-flow-outcomes",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.FlowRuleOutcomes>()
            .json(200, components.FlowRuleOutcomes$)
            .json(401, errors.Error401Unauthorized$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
