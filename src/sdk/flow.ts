/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { flowDeleteFlowRule } from "../funcs/flowDeleteFlowRule.js";
import { flowGetFlowRule } from "../funcs/flowGetFlowRule.js";
import { flowListFlowOutcomes } from "../funcs/flowListFlowOutcomes.js";
import { flowListFlowRules } from "../funcs/flowListFlowRules.js";
import { flowNewFlowRule } from "../funcs/flowNewFlowRule.js";
import { flowUpdateFlowRule } from "../funcs/flowUpdateFlowRule.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Flow extends ClientSDK {
    /**
     * List flow rules
     *
     * @remarks
     * Returns a list of rules for a given flow. Each rule has an
     * associated action, conditions, and outcome.
     */
    async listFlowRules(
        flow: operations.Flow,
        options?: RequestOptions
    ): Promise<components.FlowRules> {
        return unwrapAsync(flowListFlowRules(this, flow, options));
    }

    /**
     * Create flow rule
     *
     * @remarks
     * Adds a rule for a given flow and action.
     *
     */
    async newFlowRule(
        flow: operations.PathParamFlow,
        action: operations.PathParamAction,
        flowRuleCreateRequest?: components.FlowRuleCreateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.FlowRule> {
        return unwrapAsync(flowNewFlowRule(this, flow, action, flowRuleCreateRequest, options));
    }

    /**
     * Get rule
     *
     * @remarks
     * Returns a configured rule that triggers an action in a flow.
     */
    async getFlowRule(
        flow: operations.GetFlowRulePathParamFlow,
        action: operations.GetFlowRulePathParamAction,
        ruleId: string,
        options?: RequestOptions
    ): Promise<components.FlowRule> {
        return unwrapAsync(flowGetFlowRule(this, flow, action, ruleId, options));
    }

    /**
     * Update flow rule
     *
     * @remarks
     * Updates a given flow rule.
     *
     */
    async updateFlowRule(
        flow: operations.UpdateFlowRulePathParamFlow,
        action: operations.UpdateFlowRulePathParamAction,
        ruleId: string,
        flowRuleUpdateRequest?: components.FlowRuleUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.FlowRule> {
        return unwrapAsync(
            flowUpdateFlowRule(this, flow, action, ruleId, flowRuleUpdateRequest, options)
        );
    }

    /**
     * Delete flow rule
     *
     * @remarks
     * Deletes a given rule from the system.
     */
    async deleteFlowRule(
        flow: operations.DeleteFlowRulePathParamFlow,
        action: operations.DeleteFlowRulePathParamAction,
        ruleId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(flowDeleteFlowRule(this, flow, action, ruleId, options));
    }

    /**
     * List flow outcomes
     *
     * @remarks
     * Returns a list of possible outcomes for a given flow action.
     */
    async listFlowOutcomes(
        flow: operations.ListFlowOutcomesPathParamFlow,
        action: operations.ListFlowOutcomesPathParamAction,
        locale?: string | undefined,
        options?: RequestOptions
    ): Promise<components.FlowRuleOutcomes> {
        return unwrapAsync(flowListFlowOutcomes(this, flow, action, locale, options));
    }
}
