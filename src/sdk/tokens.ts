/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tokensApprovePaymentServiceTokenGet } from "../funcs/tokensApprovePaymentServiceTokenGet.js";
import { tokensApprovePaymentServiceTokenPost } from "../funcs/tokensApprovePaymentServiceTokenPost.js";
import { tokensDeleteNetworkToken } from "../funcs/tokensDeleteNetworkToken.js";
import { tokensDeletePaymentServiceToken } from "../funcs/tokensDeletePaymentServiceToken.js";
import { tokensGetNetworkTokens } from "../funcs/tokensGetNetworkTokens.js";
import { tokensGetPaymentServiceTokens } from "../funcs/tokensGetPaymentServiceTokens.js";
import { tokensIssueCryptogram } from "../funcs/tokensIssueCryptogram.js";
import { tokensProvisionNetworkToken } from "../funcs/tokensProvisionNetworkToken.js";
import { tokensProvisionPaymentServiceToken } from "../funcs/tokensProvisionPaymentServiceToken.js";
import { tokensResumeNetworkToken } from "../funcs/tokensResumeNetworkToken.js";
import { tokensSuspendNetworkToken } from "../funcs/tokensSuspendNetworkToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tokens extends ClientSDK {
    /**
     * Get payment service tokens
     *
     * @remarks
     * Get all payment service tokens for a given payment method and payment service.
     */
    async getPaymentServiceTokens(
        paymentMethodId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceTokens> {
        return unwrapAsync(tokensGetPaymentServiceTokens(this, paymentMethodId, options));
    }

    /**
     * Provision payment service token
     *
     * @remarks
     * Tokenize stored card against a payment service.
     *
     */
    async provisionPaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenRequest?: components.PaymentServiceTokenRequest | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceToken> {
        return unwrapAsync(
            tokensProvisionPaymentServiceToken(
                this,
                paymentMethodId,
                paymentServiceTokenRequest,
                options
            )
        );
    }

    /**
     * Delete payment service token
     *
     * @remarks
     * Deletes a specific payment service token.
     */
    async deletePaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            tokensDeletePaymentServiceToken(this, paymentMethodId, paymentServiceTokenId, options)
        );
    }

    /**
     * Approve payment service token
     *
     * @remarks
     * Approves a specific payment service token.
     */
    async approvePaymentServiceTokenGet(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            tokensApprovePaymentServiceTokenGet(
                this,
                paymentMethodId,
                paymentServiceTokenId,
                options
            )
        );
    }

    /**
     * Approve payment service token
     *
     * @remarks
     * Approves a specific payment service token.
     */
    async approvePaymentServiceTokenPost(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            tokensApprovePaymentServiceTokenPost(
                this,
                paymentMethodId,
                paymentServiceTokenId,
                options
            )
        );
    }

    /**
     * Get network tokens
     *
     * @remarks
     * Get stored network tokens for the given payment method.
     */
    async getNetworkTokens(
        paymentMethodId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.NetworkTokens> {
        return unwrapAsync(tokensGetNetworkTokens(this, paymentMethodId, options));
    }

    /**
     * Provision network token
     *
     * @remarks
     * Provision a network token for a stored card.
     *
     */
    async provisionNetworkToken(
        paymentMethodId: string,
        networkTokenRequest?: components.NetworkTokenRequest | undefined,
        options?: RequestOptions
    ): Promise<components.NetworkToken> {
        return unwrapAsync(
            tokensProvisionNetworkToken(this, paymentMethodId, networkTokenRequest, options)
        );
    }

    /**
     * Delete network token
     *
     * @remarks
     * Deletes a specific network token.
     */
    async deleteNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            tokensDeleteNetworkToken(this, paymentMethodId, networkTokenId, options)
        );
    }

    /**
     * Issue cryptogram
     *
     * @remarks
     * Issue a cryptogram for a stored network token of a stored card.
     */
    async issueCryptogram(
        paymentMethodId: string,
        networkTokenId: string,
        issueCryptogramRequest?: components.IssueCryptogramRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Cryptogram> {
        return unwrapAsync(
            tokensIssueCryptogram(
                this,
                paymentMethodId,
                networkTokenId,
                issueCryptogramRequest,
                options
            )
        );
    }

    /**
     * Suspend network token
     *
     * @remarks
     * Suspends a specific network token.
     */
    async suspendNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<components.NetworkToken> {
        return unwrapAsync(
            tokensSuspendNetworkToken(this, paymentMethodId, networkTokenId, options)
        );
    }

    /**
     * Resume network token
     *
     * @remarks
     * Resumes a specific network token.
     */
    async resumeNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<components.NetworkToken> {
        return unwrapAsync(
            tokensResumeNetworkToken(this, paymentMethodId, networkTokenId, options)
        );
    }
}
