/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class Tokens extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get payment service tokens
     *
     * @remarks
     * Get all payment service tokens for a given payment method and payment service.
     */
    async getPaymentServiceTokens(
        paymentMethodId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceTokens> {
        const input$: operations.GetPaymentServiceTokensRequest = {
            paymentMethodId: paymentMethodId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetPaymentServiceTokensRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/payment-service-tokens"
        )();

        const query$ = encodeFormQuery$({
            payment_method_id: payload$.payment_method_id,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-payment-service-tokens",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.PaymentServiceTokens>()
            .json(200, components.PaymentServiceTokens$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Provision payment service token
     *
     * @remarks
     * Tokenize stored card against a payment service.
     *
     */
    async provisionPaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenRequest?: components.PaymentServiceTokenRequest | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceToken> {
        const input$: operations.ProvisionPaymentServiceTokenRequest = {
            paymentMethodId: paymentMethodId,
            paymentServiceTokenRequest: paymentServiceTokenRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ProvisionPaymentServiceTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.PaymentServiceTokenRequest, { explode: true });

        const pathParams$ = {
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/payment-service-tokens"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "provision-payment-service-token",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.PaymentServiceToken>()
            .json(201, components.PaymentServiceToken$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete payment service token
     *
     * @remarks
     * Deletes a specific payment service token.
     */
    async deletePaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeletePaymentServiceTokenRequest = {
            paymentMethodId: paymentMethodId,
            paymentServiceTokenId: paymentServiceTokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeletePaymentServiceTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_service_token_id: encodeSimple$(
                "payment_service_token_id",
                payload$.payment_service_token_id,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/payment-service-tokens/{payment_service_token_id}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete-payment-service-token",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Approve payment service token
     *
     * @remarks
     * Approves a specific payment service token.
     */
    async approvePaymentServiceTokenGet(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.ApprovePaymentServiceTokenGetRequest = {
            paymentMethodId: paymentMethodId,
            paymentServiceTokenId: paymentServiceTokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ApprovePaymentServiceTokenGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_service_token_id: encodeSimple$(
                "payment_service_token_id",
                payload$.payment_service_token_id,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/payment-service-tokens/{payment_service_token_id}/approve"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "approve-payment-service-token-get",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(307, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Approve payment service token
     *
     * @remarks
     * Approves a specific payment service token.
     */
    async approvePaymentServiceTokenPost(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.ApprovePaymentServiceTokenPostRequest = {
            paymentMethodId: paymentMethodId,
            paymentServiceTokenId: paymentServiceTokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ApprovePaymentServiceTokenPostRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_service_token_id: encodeSimple$(
                "payment_service_token_id",
                payload$.payment_service_token_id,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/payment-service-tokens/{payment_service_token_id}/approve"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "approve-payment-service-token-post",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(307, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get network tokens
     *
     * @remarks
     * Get stored network tokens for the given payment method.
     */
    async getNetworkTokens(
        paymentMethodId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.NetworkTokens> {
        const input$: operations.GetNetworkTokensRequest = {
            paymentMethodId: paymentMethodId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetNetworkTokensRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/network-tokens"
        )();

        const query$ = encodeFormQuery$({
            payment_method_id: payload$.payment_method_id,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-network-tokens",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.NetworkTokens>()
            .json(200, components.NetworkTokens$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Provision network token
     *
     * @remarks
     * Provision a network token for a stored card.
     *
     */
    async provisionNetworkToken(
        paymentMethodId: string,
        networkTokenRequest?: components.NetworkTokenRequest | undefined,
        options?: RequestOptions
    ): Promise<components.NetworkToken> {
        const input$: operations.ProvisionNetworkTokenRequest = {
            paymentMethodId: paymentMethodId,
            networkTokenRequest: networkTokenRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ProvisionNetworkTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.NetworkTokenRequest, { explode: true });

        const pathParams$ = {
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/network-tokens"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "provision-network-token",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.NetworkToken>()
            .json(201, components.NetworkToken$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete network token
     *
     * @remarks
     * Deletes a specific network token.
     */
    async deleteNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeleteNetworkTokenRequest = {
            paymentMethodId: paymentMethodId,
            networkTokenId: networkTokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteNetworkTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            network_token_id: encodeSimple$("network_token_id", payload$.network_token_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete-network-token",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Issue cryptogram
     *
     * @remarks
     * Issue a cryptogram for a stored network token of a stored card.
     * The endpoint is disabled by default, please contact our team for more information on enablement.
     *
     */
    async issueCryptogram(
        paymentMethodId: string,
        networkTokenId: string,
        issueCryptogramRequest?: components.IssueCryptogramRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Cryptogram> {
        const input$: operations.IssueCryptogramRequest = {
            paymentMethodId: paymentMethodId,
            networkTokenId: networkTokenId,
            issueCryptogramRequest: issueCryptogramRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.IssueCryptogramRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.IssueCryptogramRequest, { explode: true });

        const pathParams$ = {
            network_token_id: encodeSimple$("network_token_id", payload$.network_token_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/cryptogram"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "issue-cryptogram",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Cryptogram>()
            .json(201, components.Cryptogram$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(403, errors.Error403Forbidden$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Suspend network token
     *
     * @remarks
     * Suspends a specific network token.
     */
    async suspendNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<components.NetworkToken> {
        const input$: operations.SuspendNetworkTokenRequest = {
            paymentMethodId: paymentMethodId,
            networkTokenId: networkTokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.SuspendNetworkTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            network_token_id: encodeSimple$("network_token_id", payload$.network_token_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/suspend"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "suspend-network-token",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.NetworkToken>()
            .json(200, components.NetworkToken$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Resume network token
     *
     * @remarks
     * Resumes a specific network token.
     */
    async resumeNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<components.NetworkToken> {
        const input$: operations.ResumeNetworkTokenRequest = {
            paymentMethodId: paymentMethodId,
            networkTokenId: networkTokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ResumeNetworkTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            network_token_id: encodeSimple$("network_token_id", payload$.network_token_id, {
                explode: false,
                charEncoding: "percent",
            }),
            payment_method_id: encodeSimple$("payment_method_id", payload$.payment_method_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/payment-methods/{payment_method_id}/network-tokens/{network_token_id}/resume"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "resume-network-token",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.NetworkToken>()
            .json(200, components.NetworkToken$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
