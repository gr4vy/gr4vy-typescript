/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentMethodsDeletePaymentMethod } from "../funcs/paymentMethodsDeletePaymentMethod.js";
import { paymentMethodsGetPaymentMethod } from "../funcs/paymentMethodsGetPaymentMethod.js";
import { paymentMethodsListBuyerPaymentMethods } from "../funcs/paymentMethodsListBuyerPaymentMethods.js";
import { paymentMethodsListPaymentMethods } from "../funcs/paymentMethodsListPaymentMethods.js";
import { paymentMethodsNewPaymentMethod } from "../funcs/paymentMethodsNewPaymentMethod.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaymentMethods extends ClientSDK {
    /**
     * List payment methods for buyer
     *
     * @remarks
     * Returns a list of stored payment methods for a buyer in a summarized format.
     * Only payment methods that are compatible with at least one active payment
     * service in that region are shown.
     */
    async listBuyerPaymentMethods(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        country?: string | undefined,
        currency?: string | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentMethodsTokenized> {
        return unwrapAsync(
            paymentMethodsListBuyerPaymentMethods(
                this,
                buyerId,
                buyerExternalIdentifier,
                country,
                currency,
                options
            )
        );
    }

    /**
     * List payment methods
     *
     * @remarks
     * Returns a list of stored payment methods.
     */
    async listPaymentMethods(
        request: operations.ListPaymentMethodsRequest,
        options?: RequestOptions
    ): Promise<components.PaymentMethods> {
        return unwrapAsync(paymentMethodsListPaymentMethods(this, request, options));
    }

    /**
     * New payment method
     *
     * @remarks
     * Stores and vaults a new payment method.
     *
     * Vaulting a card only stores its information but doesn't validate it against any
     * PSP, so ephemeral data like the security code, often referred to as the CVV or
     * CVD, won't be used. In order to validate the card data, a CIT (Customer Initiated
     * Transaction) must be done, even if it's a zero-value one.
     *
     */
    async newPaymentMethod(
        request?: operations.NewPaymentMethodRequestBody | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentMethod> {
        return unwrapAsync(paymentMethodsNewPaymentMethod(this, request, options));
    }

    /**
     * Get payment method
     *
     * @remarks
     * Gets the details for a stored payment method.
     */
    async getPaymentMethod(
        paymentMethodId: string,
        options?: RequestOptions
    ): Promise<components.PaymentMethod> {
        return unwrapAsync(paymentMethodsGetPaymentMethod(this, paymentMethodId, options));
    }

    /**
     * Delete payment method
     *
     * @remarks
     * Removes a stored payment method.
     */
    async deletePaymentMethod(paymentMethodId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(paymentMethodsDeletePaymentMethod(this, paymentMethodId, options));
    }
}
