/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { vaultForwardConfigurationsAddVaultForwardConfigAuthentication } from "../funcs/vaultForwardConfigurationsAddVaultForwardConfigAuthentication.js";
import { vaultForwardConfigurationsDeleteVaultForwardConfig } from "../funcs/vaultForwardConfigurationsDeleteVaultForwardConfig.js";
import { vaultForwardConfigurationsDeleteVaultForwardConfigAuthentication } from "../funcs/vaultForwardConfigurationsDeleteVaultForwardConfigAuthentication.js";
import { vaultForwardConfigurationsGetVaultForwardConfig } from "../funcs/vaultForwardConfigurationsGetVaultForwardConfig.js";
import { vaultForwardConfigurationsGetVaultForwardConfigAuthentication } from "../funcs/vaultForwardConfigurationsGetVaultForwardConfigAuthentication.js";
import { vaultForwardConfigurationsListVaultForwardConfig } from "../funcs/vaultForwardConfigurationsListVaultForwardConfig.js";
import { vaultForwardConfigurationsListVaultForwardConfigAuthentication } from "../funcs/vaultForwardConfigurationsListVaultForwardConfigAuthentication.js";
import { vaultForwardConfigurationsNewVaultForwardConfig } from "../funcs/vaultForwardConfigurationsNewVaultForwardConfig.js";
import { vaultForwardConfigurationsUpdateVaultForwardConfigAuthentication } from "../funcs/vaultForwardConfigurationsUpdateVaultForwardConfigAuthentication.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VaultForwardConfigurations extends ClientSDK {
    /**
     * List configured Vault Forward endpoints
     *
     * @remarks
     * Lists the currently configured Vault Forward endpoints that can be used to forward
     * PCI data to.
     */
    async listVaultForwardConfig(
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfigs> {
        return unwrapAsync(
            vaultForwardConfigurationsListVaultForwardConfig(this, limit, cursor, options)
        );
    }

    /**
     * Enable new Vault Forward endpoint
     *
     * @remarks
     * Enables a new Vault Forward endpoint. This allows this endpoint
     * to be used to forward PCI data to. Only 1 configuration may
     * exist at a time for a given definition.
     */
    async newVaultForwardConfig(
        request?: components.PCIForwardConfigRequest | undefined,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfig> {
        return unwrapAsync(vaultForwardConfigurationsNewVaultForwardConfig(this, request, options));
    }

    /**
     * Get configured Vault Forward endpoints
     *
     * @remarks
     * Gets a configured Vault Forward endpoints that can be used to forward
     * PCI data to.
     */
    async getVaultForwardConfig(
        configId: string,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfig> {
        return unwrapAsync(
            vaultForwardConfigurationsGetVaultForwardConfig(this, configId, options)
        );
    }

    /**
     * Remove a configured Vault Forward endpoint
     *
     * @remarks
     * Removes a previously configured Vault Forward endpoint, effectively disallowing
     * data to be sent to this endpoint.
     */
    async deleteVaultForwardConfig(configId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(
            vaultForwardConfigurationsDeleteVaultForwardConfig(this, configId, options)
        );
    }

    /**
     * List configured Vault Forward authentication methods
     *
     * @remarks
     * Lists the configured Vault Forward authentication methods that can
     * be applied in Vault Forward requests for the given configuration.
     */
    async listVaultForwardConfigAuthentication(
        configId: string,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfigAuthentications> {
        return unwrapAsync(
            vaultForwardConfigurationsListVaultForwardConfigAuthentication(this, configId, options)
        );
    }

    /**
     * Adds new Vault Forward authentication method
     *
     * @remarks
     * Configures a new Vault Forward authentication method. This allows the
     * authentication method to be be applied in Vault Forward requests.
     */
    async addVaultForwardConfigAuthentication(
        configId: string,
        pciForwardConfigAuthenticationRequest?:
            | components.PCIForwardConfigAuthenticationRequest
            | undefined,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfigAuthentication> {
        return unwrapAsync(
            vaultForwardConfigurationsAddVaultForwardConfigAuthentication(
                this,
                configId,
                pciForwardConfigAuthenticationRequest,
                options
            )
        );
    }

    /**
     * Get Vault Forward authentication method
     *
     * @remarks
     * Gets a configured Vault Forward authentication method.
     */
    async getVaultForwardConfigAuthentication(
        configId: string,
        authenticationId: string,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfigAuthentication> {
        return unwrapAsync(
            vaultForwardConfigurationsGetVaultForwardConfigAuthentication(
                this,
                configId,
                authenticationId,
                options
            )
        );
    }

    /**
     * Update Vault Forward authentication method
     *
     * @remarks
     * Updates an existing Vault Forward authentication method.
     */
    async updateVaultForwardConfigAuthentication(
        configId: string,
        authenticationId: string,
        pciForwardConfigAuthenticationUpdate?:
            | components.PCIForwardConfigAuthenticationUpdate
            | undefined,
        options?: RequestOptions
    ): Promise<components.PCIForwardConfigAuthentication> {
        return unwrapAsync(
            vaultForwardConfigurationsUpdateVaultForwardConfigAuthentication(
                this,
                configId,
                authenticationId,
                pciForwardConfigAuthenticationUpdate,
                options
            )
        );
    }

    /**
     * Remove a Vault Forward authentication method
     *
     * @remarks
     * Removes a configured Vault Forward authentication method,
     * disallowing it from being applied in Vault Forward requests.
     */
    async deleteVaultForwardConfigAuthentication(
        configId: string,
        authenticationId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            vaultForwardConfigurationsDeleteVaultForwardConfigAuthentication(
                this,
                configId,
                authenticationId,
                options
            )
        );
    }
}
