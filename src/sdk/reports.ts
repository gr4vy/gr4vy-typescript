/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reportsGenerateDownloadUrl } from "../funcs/reportsGenerateDownloadUrl.js";
import { reportsGetReport } from "../funcs/reportsGetReport.js";
import { reportsGetReportExecution } from "../funcs/reportsGetReportExecution.js";
import { reportsListAllReportExecutions } from "../funcs/reportsListAllReportExecutions.js";
import { reportsListReportExecutions } from "../funcs/reportsListReportExecutions.js";
import { reportsListReports } from "../funcs/reportsListReports.js";
import { reportsNewReport } from "../funcs/reportsNewReport.js";
import { reportsUpdateReport } from "../funcs/reportsUpdateReport.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Reports extends ClientSDK {
    /**
     * List all report executions
     *
     * @remarks
     * Returns a list of executions belonging to any report.
     */
    async listAllReportExecutions(
        request: operations.ListAllReportExecutionsRequest,
        options?: RequestOptions
    ): Promise<components.ReportExecutions> {
        return unwrapAsync(reportsListAllReportExecutions(this, request, options));
    }

    /**
     * Get report execution
     *
     * @remarks
     * Retrieves the details of a single report execution.
     */
    async getReportExecution(
        reportExecutionId: string,
        options?: RequestOptions
    ): Promise<components.ReportExecution> {
        return unwrapAsync(reportsGetReportExecution(this, reportExecutionId, options));
    }

    /**
     * New report
     *
     * @remarks
     * Creates a new report.
     *
     */
    async newReport(
        request?: components.ReportCreate | undefined,
        options?: RequestOptions
    ): Promise<components.Report> {
        return unwrapAsync(reportsNewReport(this, request, options));
    }

    /**
     * List reports
     *
     * @remarks
     * Returns a list of reports.
     */
    async listReports(
        request: operations.ListReportsRequest,
        options?: RequestOptions
    ): Promise<components.Reports> {
        return unwrapAsync(reportsListReports(this, request, options));
    }

    /**
     * Get report
     *
     * @remarks
     * Retrieves the details of a single report.
     */
    async getReport(reportId: string, options?: RequestOptions): Promise<components.Report> {
        return unwrapAsync(reportsGetReport(this, reportId, options));
    }

    /**
     * Update report
     *
     * @remarks
     * Updates a report. This is mostly used with scheduled reports.
     */
    async updateReport(
        reportId: string,
        reportUpdate?: components.ReportUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.Report> {
        return unwrapAsync(reportsUpdateReport(this, reportId, reportUpdate, options));
    }

    /**
     * List executions for report
     *
     * @remarks
     * Returns a list of executions for a report. For a
     * one-off report there will only be one, where for scheduled ones
     * there may be more.
     */
    async listReportExecutions(
        reportId: string,
        cursor?: string | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<components.ReportExecutions> {
        return unwrapAsync(reportsListReportExecutions(this, reportId, cursor, limit, options));
    }

    /**
     * Generate report download URL
     *
     * @remarks
     * Generates a temporary signed URL to download the result of a report
     * execution.
     */
    async generateDownloadUrl(
        reportId: string,
        reportExecutionId: string,
        options?: RequestOptions
    ): Promise<components.ReportExecutionUrl> {
        return unwrapAsync(reportsGenerateDownloadUrl(this, reportId, reportExecutionId, options));
    }
}
