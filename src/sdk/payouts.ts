/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { payoutsCreate } from "../funcs/payoutsCreate.js";
import { payoutsGet } from "../funcs/payoutsGet.js";
import { payoutsList } from "../funcs/payoutsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Payouts extends ClientSDK {
  /**
   * List payouts created.
   *
   * @remarks
   * Returns a list of payouts made.
   */
  async list(
    cursor?: string | null | undefined,
    limit?: number | undefined,
    xGr4vyMerchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListPayoutsResponse, { cursor: string }>> {
    return unwrapResultIterator(payoutsList(
      this,
      cursor,
      limit,
      xGr4vyMerchantAccountId,
      options,
    ));
  }

  /**
   * Create a payout.
   *
   * @remarks
   * Creates a new payout.
   */
  async create(
    payoutCreate: components.PayoutCreate,
    timeoutInSeconds?: number | undefined,
    xGr4vyMerchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.PayoutSummary> {
    return unwrapAsync(payoutsCreate(
      this,
      payoutCreate,
      timeoutInSeconds,
      xGr4vyMerchantAccountId,
      options,
    ));
  }

  /**
   * Get a payout.
   *
   * @remarks
   * Retreives a payout.
   */
  async get(
    payoutId: string,
    xGr4vyMerchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.PayoutSummary> {
    return unwrapAsync(payoutsGet(
      this,
      payoutId,
      xGr4vyMerchantAccountId,
      options,
    ));
  }
}
