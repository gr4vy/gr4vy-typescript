/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { digitalWalletsAddDigitalWalletDomainName } from "../funcs/digitalWalletsAddDigitalWalletDomainName.js";
import { digitalWalletsDeleteDigitalWallet } from "../funcs/digitalWalletsDeleteDigitalWallet.js";
import { digitalWalletsDeleteDigitalWalletDomainName } from "../funcs/digitalWalletsDeleteDigitalWalletDomainName.js";
import { digitalWalletsGetDigitalWallet } from "../funcs/digitalWalletsGetDigitalWallet.js";
import { digitalWalletsListDigitalWallets } from "../funcs/digitalWalletsListDigitalWallets.js";
import { digitalWalletsNewApplePaySession } from "../funcs/digitalWalletsNewApplePaySession.js";
import { digitalWalletsNewClickToPaySession } from "../funcs/digitalWalletsNewClickToPaySession.js";
import { digitalWalletsNewDigitalWallet } from "../funcs/digitalWalletsNewDigitalWallet.js";
import { digitalWalletsNewGooglePaySession } from "../funcs/digitalWalletsNewGooglePaySession.js";
import { digitalWalletsUpdateDigitalWallet } from "../funcs/digitalWalletsUpdateDigitalWallet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DigitalWallets extends ClientSDK {
    /**
     * Register digital wallet
     *
     * @remarks
     * Register with a digital wallet provider.
     */
    async newDigitalWallet(
        request?: components.DigitalWalletRequest | undefined,
        options?: RequestOptions
    ): Promise<components.DigitalWallet> {
        return unwrapAsync(digitalWalletsNewDigitalWallet(this, request, options));
    }

    /**
     * List digital wallets
     *
     * @remarks
     * Returns a list of all registered digital wallets.
     */
    async listDigitalWallets(options?: RequestOptions): Promise<components.DigitalWallets> {
        return unwrapAsync(digitalWalletsListDigitalWallets(this, options));
    }

    /**
     * Get digital wallet
     *
     * @remarks
     * Returns a registered digital wallet.
     */
    async getDigitalWallet(
        digitalWalletId: string,
        options?: RequestOptions
    ): Promise<components.DigitalWallet> {
        return unwrapAsync(digitalWalletsGetDigitalWallet(this, digitalWalletId, options));
    }

    /**
     * Update digital wallet
     *
     * @remarks
     * Updates the values a digital wallet was registered with.
     */
    async updateDigitalWallet(
        digitalWalletId: string,
        digitalWalletUpdate?: components.DigitalWalletUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.DigitalWallet> {
        return unwrapAsync(
            digitalWalletsUpdateDigitalWallet(this, digitalWalletId, digitalWalletUpdate, options)
        );
    }

    /**
     * De-register digital wallet
     *
     * @remarks
     * De-registers a digital wallet with a provider. Upon successful
     * de-registration, the digital wallet's record is deleted and will no
     * longer be available.
     *
     * A digital wallet of the Apple provider may only be de-registered if
     * there are no active Apple Pay certificates. When there are only
     * incomplete or expired Apple Pay certificates, these certificates
     * are deleted alongside the Apple digital wallet's record.
     */
    async deleteDigitalWallet(digitalWalletId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(digitalWalletsDeleteDigitalWallet(this, digitalWalletId, options));
    }

    /**
     * Add digital wallet domain name
     *
     * @remarks
     * Adds new domain for given digital wallet.
     */
    async addDigitalWalletDomainName(
        digitalWalletId: string,
        digitalWalletDomain?: components.DigitalWalletDomain | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            digitalWalletsAddDigitalWalletDomainName(
                this,
                digitalWalletId,
                digitalWalletDomain,
                options
            )
        );
    }

    /**
     * Remove digital wallet domain name
     *
     * @remarks
     * Removes domain for given digital wallet.
     */
    async deleteDigitalWalletDomainName(
        digitalWalletId: string,
        digitalWalletDomain?: components.DigitalWalletDomain | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            digitalWalletsDeleteDigitalWalletDomainName(
                this,
                digitalWalletId,
                digitalWalletDomain,
                options
            )
        );
    }

    /**
     * New Apple Pay session
     *
     * @remarks
     * Initiates a new session with Apple Pay. This can be used when implementing
     * Apple Pay without our SDK.
     *
     * This endpoint returns an opaque object that can be directly passed to the
     * Apple Pay SDK. The format of this object may change when the format returned by
     * the Apple Pay API changes.
     */
    async newApplePaySession(
        request?: components.ApplePaySessionRequest | undefined,
        options?: RequestOptions
    ): Promise<{ [k: string]: any }> {
        return unwrapAsync(digitalWalletsNewApplePaySession(this, request, options));
    }

    /**
     * New Click to Pay session
     *
     * @remarks
     * Returns digital payment application ID & name for use with Click to Pay.
     */
    async newClickToPaySession(
        request?: components.ClickToPaySessionRequest | undefined,
        options?: RequestOptions
    ): Promise<components.ClickToPaySession> {
        return unwrapAsync(digitalWalletsNewClickToPaySession(this, request, options));
    }

    /**
     * New Google Pay session
     *
     * @remarks
     * Initiates a new session with Google Pay. This can be used when implementing
     * Google Pay without our SDK.
     */
    async newGooglePaySession(
        request?: components.GooglePaySessionRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GooglePaySession> {
        return unwrapAsync(digitalWalletsNewGooglePaySession(this, request, options));
    }
}
