/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { digitalWalletsCreate } from "../funcs/digitalWalletsCreate.js";
import { digitalWalletsDelete } from "../funcs/digitalWalletsDelete.js";
import { digitalWalletsGet } from "../funcs/digitalWalletsGet.js";
import { digitalWalletsList } from "../funcs/digitalWalletsList.js";
import { digitalWalletsUpdate } from "../funcs/digitalWalletsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Domains } from "./domains.js";
import { Sessions } from "./sessions.js";

export class DigitalWallets extends ClientSDK {
  private _sessions?: Sessions;
  get sessions(): Sessions {
    return (this._sessions ??= new Sessions(this._options));
  }

  private _domains?: Domains;
  get domains(): Domains {
    return (this._domains ??= new Domains(this._options));
  }

  /**
   * Register digital wallet
   *
   * @remarks
   * Register a digital wallet like Apple Pay, Google Pay, or Click to Pay.
   */
  async create(
    digitalWalletCreate: components.DigitalWalletCreate,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.DigitalWallet> {
    return unwrapAsync(digitalWalletsCreate(
      this,
      digitalWalletCreate,
      timeoutInSeconds,
      options,
    ));
  }

  /**
   * List digital wallets
   *
   * @remarks
   * List configured digital wallets.
   */
  async list(
    options?: RequestOptions,
  ): Promise<components.CollectionNoCursorDigitalWallet> {
    return unwrapAsync(digitalWalletsList(
      this,
      options,
    ));
  }

  /**
   * Get digital wallet
   *
   * @remarks
   * Fetch the details a digital wallet.
   */
  async get(
    digitalWalletId: string,
    options?: RequestOptions,
  ): Promise<components.DigitalWallet> {
    return unwrapAsync(digitalWalletsGet(
      this,
      digitalWalletId,
      options,
    ));
  }

  /**
   * Delete digital wallet
   *
   * @remarks
   * Delete a configured digital wallet.
   */
  async delete(
    digitalWalletId: string,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(digitalWalletsDelete(
      this,
      digitalWalletId,
      timeoutInSeconds,
      options,
    ));
  }

  /**
   * Update digital wallet
   *
   * @remarks
   * Update a digital wallet.
   */
  async update(
    digitalWalletUpdate: components.DigitalWalletUpdate,
    digitalWalletId: string,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.DigitalWallet> {
    return unwrapAsync(digitalWalletsUpdate(
      this,
      digitalWalletUpdate,
      digitalWalletId,
      timeoutInSeconds,
      options,
    ));
  }
}
