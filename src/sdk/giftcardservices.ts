/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { giftCardServicesDeleteGiftCardService } from "../funcs/giftCardServicesDeleteGiftCardService.js";
import { giftCardServicesGetGiftCardService } from "../funcs/giftCardServicesGetGiftCardService.js";
import { giftCardServicesNewGiftCardService } from "../funcs/giftCardServicesNewGiftCardService.js";
import { giftCardServicesUpdateGiftCardService } from "../funcs/giftCardServicesUpdateGiftCardService.js";
import { giftCardServicesVerifyGiftCardService } from "../funcs/giftCardServicesVerifyGiftCardService.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GiftCardServices extends ClientSDK {
    /**
     * New gift card service
     *
     * @remarks
     * Adds a new gift card service by providing a custom name and a value for each of the required fields.
     */
    async newGiftCardService(
        request?: components.GiftCardServiceCreateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCardService> {
        return unwrapAsync(giftCardServicesNewGiftCardService(this, request, options));
    }

    /**
     * Get gift card service
     *
     * @remarks
     * Retrieves the details of a single configured gift card service.
     */
    async getGiftCardService(
        giftCardServiceId: string,
        options?: RequestOptions
    ): Promise<components.GiftCardService> {
        return unwrapAsync(giftCardServicesGetGiftCardService(this, giftCardServiceId, options));
    }

    /**
     * Update gift card service
     *
     * @remarks
     * Updates an existing gift card service. Allows all fields to be changed except for the service ID.
     */
    async updateGiftCardService(
        giftCardServiceId: string,
        giftCardServiceUpdateRequest?: components.GiftCardServiceUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCardService> {
        return unwrapAsync(
            giftCardServicesUpdateGiftCardService(
                this,
                giftCardServiceId,
                giftCardServiceUpdateRequest,
                options
            )
        );
    }

    /**
     * Delete gift card service
     *
     * @remarks
     * Deletes a specific gift card service.
     */
    async deleteGiftCardService(
        giftCardServiceId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(giftCardServicesDeleteGiftCardService(this, giftCardServiceId, options));
    }

    /**
     * Verify gift card service credentials
     *
     * @remarks
     * Verifies a set of credentials against a gift card service.
     */
    async verifyGiftCardService(
        request?: components.GiftCardServiceVerifyRequest | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(giftCardServicesVerifyGiftCardService(this, request, options));
    }
}
