/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class GiftCards extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List gift cards for buyer
     *
     * @remarks
     * Returns a list of all stored, not-expired gift cards and
     * their balances for a buyer in a summarized format. Any
     * expired or empty gift cards will be automatically filtered
     * out and removed from the list of returned cards.
     *
     * If we were not able to fetch the latest balance then all
     * stored gift cards are returned.
     */
    async listBuyerGiftCards(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCardsSummary> {
        const input$: operations.ListBuyerGiftCardsRequest = {
            buyerId: buyerId,
            buyerExternalIdentifier: buyerExternalIdentifier,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListBuyerGiftCardsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/buyers/gift-cards")();

        const query$ = encodeFormQuery$({
            buyer_external_identifier: payload$.buyer_external_identifier,
            buyer_id: payload$.buyer_id,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-buyer-gift-cards",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.GiftCardsSummary>()
            .json(200, components.GiftCardsSummary$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List gift cards
     *
     * @remarks
     * Returns all stored gift cards.
     */
    async listGiftCards(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCards> {
        const input$: operations.ListGiftCardsRequest = {
            buyerId: buyerId,
            buyerExternalIdentifier: buyerExternalIdentifier,
            limit: limit,
            cursor: cursor,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListGiftCardsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/gift-cards")();

        const query$ = encodeFormQuery$({
            buyer_external_identifier: payload$.buyer_external_identifier,
            buyer_id: payload$.buyer_id,
            cursor: payload$.cursor,
            limit: payload$.limit,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-gift-cards",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.GiftCards>()
            .json(200, components.GiftCards$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Store gift card
     *
     * @remarks
     * Stores a gift card.
     *
     * Vaulting a gift card stores and validate it against the active gift card
     * service.
     *
     * It is only possible to store a gift card against a buyer if the same card is
     * not already stored on the buyer and the gift card has not expired yet.
     *
     * Buyers by default can only have a maximum limit of 10 gift cards stored against
     * them. Please contact our team to change this limit. To clear out any expired or
     * empty gift cards, you can call the `GET /buyers/gift-cards` endpoint which will
     * automatically archive any of those cards and allow new cards to be stored.
     *
     */
    async storeGiftCard(
        request?: components.GiftCardStoreRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCard> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.GiftCardStoreRequest$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/gift-cards")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "store-gift-card",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "409", "429", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.GiftCard>()
            .json(201, components.GiftCard$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(409, errors.Error409DuplicateRecord$inboundSchema, { err: true })
            .json(429, errors.Error429TooManyRequests$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get gift card
     *
     * @remarks
     * Retrieves details of a stored gift card.
     */
    async getGiftCard(giftCardId: string, options?: RequestOptions): Promise<components.GiftCard> {
        const input$: operations.GetGiftCardRequest = {
            giftCardId: giftCardId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetGiftCardRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            gift_card_id: encodeSimple$("gift_card_id", payload$.gift_card_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/gift-cards/{gift_card_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-gift-card",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.GiftCard>()
            .json(200, components.GiftCard$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete gift card
     *
     * @remarks
     * Removes a stored gift card.
     */
    async deleteGiftCard(giftCardId: string, options?: RequestOptions): Promise<void> {
        const input$: operations.DeleteGiftCardRequest = {
            giftCardId: giftCardId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteGiftCardRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            gift_card_id: encodeSimple$("gift_card_id", payload$.gift_card_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/gift-cards/{gift_card_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete-gift-card",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Verify and check gift card balances
     *
     * @remarks
     * Verify gift cards are enrolled and fetch their balances.
     *
     * This verifies a list of gift cards are enrolled for your gift card programme,
     * if this feature is available via your gift card service. It then also fetches each card's
     * current balance.
     *
     * Duplicated gift card numbers are not supported. This includes both stored gift
     * cards, as well as those directly provided via the request.
     */
    async checkGiftCardBalances(
        request?: components.GiftCardBalancesRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCardsSummary> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.GiftCardBalancesRequest$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/gift-cards/balances")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "check-gift-card-balances",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "429", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.GiftCardsSummary>()
            .json(200, components.GiftCardsSummary$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(429, errors.Error429TooManyRequests$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
