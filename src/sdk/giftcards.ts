/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { giftCardsCheckGiftCardBalances } from "../funcs/giftCardsCheckGiftCardBalances.js";
import { giftCardsDeleteGiftCard } from "../funcs/giftCardsDeleteGiftCard.js";
import { giftCardsGetGiftCard } from "../funcs/giftCardsGetGiftCard.js";
import { giftCardsListBuyerGiftCards } from "../funcs/giftCardsListBuyerGiftCards.js";
import { giftCardsListGiftCards } from "../funcs/giftCardsListGiftCards.js";
import { giftCardsStoreGiftCard } from "../funcs/giftCardsStoreGiftCard.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GiftCards extends ClientSDK {
    /**
     * List gift cards for buyer
     *
     * @remarks
     * Returns a list of all stored, not-expired gift cards and
     * their balances for a buyer in a summarized format. Any
     * expired or empty gift cards will be automatically filtered
     * out and removed from the list of returned cards.
     *
     * If we were not able to fetch the latest balance then all
     * stored gift cards are returned.
     */
    async listBuyerGiftCards(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCardsSummary> {
        return unwrapAsync(
            giftCardsListBuyerGiftCards(this, buyerId, buyerExternalIdentifier, options)
        );
    }

    /**
     * List gift cards
     *
     * @remarks
     * Returns all stored gift cards.
     */
    async listGiftCards(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCards> {
        return unwrapAsync(
            giftCardsListGiftCards(this, buyerId, buyerExternalIdentifier, limit, cursor, options)
        );
    }

    /**
     * Store gift card
     *
     * @remarks
     * Stores a gift card.
     *
     * Vaulting a gift card stores and validate it against the active gift card
     * service.
     *
     * It is only possible to store a gift card against a buyer if the same card is
     * not already stored on the buyer and the gift card has not expired yet.
     *
     * Buyers by default can only have a maximum limit of 10 gift cards stored against
     * them. Please contact our team to change this limit. To clear out any expired or
     * empty gift cards, you can call the `GET /buyers/gift-cards` endpoint which will
     * automatically archive any of those cards and allow new cards to be stored.
     *
     */
    async storeGiftCard(
        request?: components.GiftCardStoreRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCard> {
        return unwrapAsync(giftCardsStoreGiftCard(this, request, options));
    }

    /**
     * Get gift card
     *
     * @remarks
     * Retrieves details of a stored gift card.
     */
    async getGiftCard(giftCardId: string, options?: RequestOptions): Promise<components.GiftCard> {
        return unwrapAsync(giftCardsGetGiftCard(this, giftCardId, options));
    }

    /**
     * Delete gift card
     *
     * @remarks
     * Removes a stored gift card.
     */
    async deleteGiftCard(giftCardId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(giftCardsDeleteGiftCard(this, giftCardId, options));
    }

    /**
     * Verify and check gift card balances
     *
     * @remarks
     * Verify gift cards are enrolled and fetch their balances.
     *
     * This verifies a list of gift cards are enrolled for your gift card programme,
     * if this feature is available via your gift card service. It then also fetches each card's
     * current balance.
     *
     * Duplicated gift card numbers are not supported. This includes both stored gift
     * cards, as well as those directly provided via the request.
     */
    async checkGiftCardBalances(
        request?: components.GiftCardBalancesRequest | undefined,
        options?: RequestOptions
    ): Promise<components.GiftCardsSummary> {
        return unwrapAsync(giftCardsCheckGiftCardBalances(this, request, options));
    }
}
