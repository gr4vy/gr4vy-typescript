/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { antiFraudServicesDeleteAntiFraudService } from "../funcs/antiFraudServicesDeleteAntiFraudService.js";
import { antiFraudServicesGetAntiFraudService } from "../funcs/antiFraudServicesGetAntiFraudService.js";
import { antiFraudServicesNewAntiFraudService } from "../funcs/antiFraudServicesNewAntiFraudService.js";
import { antiFraudServicesUpdateAntiFraudService } from "../funcs/antiFraudServicesUpdateAntiFraudService.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AntiFraudServices extends ClientSDK {
    /**
     * New anti-fraud service
     *
     * @remarks
     * Adds an anti-fraud service, enabling merchants to determine risky transactions
     * and prevent chargebacks.
     *
     */
    async newAntiFraudService(
        request?: components.AntiFraudServiceCreate | undefined,
        options?: RequestOptions
    ): Promise<components.AntiFraudService> {
        return unwrapAsync(antiFraudServicesNewAntiFraudService(this, request, options));
    }

    /**
     * Get anti-fraud service
     *
     * @remarks
     * Gets information about an anti-fraud service.
     */
    async getAntiFraudService(
        antiFraudServiceId: string,
        options?: RequestOptions
    ): Promise<components.AntiFraudService> {
        return unwrapAsync(antiFraudServicesGetAntiFraudService(this, antiFraudServiceId, options));
    }

    /**
     * Update anti-fraud service
     *
     * @remarks
     * Update an anti-fraud service, enabling merchants to determine
     * risky transactions and prevent chargebacks.
     *
     */
    async updateAntiFraudService(
        antiFraudServiceId: string,
        antiFraudServiceUpdate?: components.AntiFraudServiceUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.AntiFraudService> {
        return unwrapAsync(
            antiFraudServicesUpdateAntiFraudService(
                this,
                antiFraudServiceId,
                antiFraudServiceUpdate,
                options
            )
        );
    }

    /**
     * Delete anti-fraud service
     *
     * @remarks
     * Removes an anti-fraud service. Any associated credentials
     * will also be deleted.
     */
    async deleteAntiFraudService(
        antiFraudServiceId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            antiFraudServicesDeleteAntiFraudService(this, antiFraudServiceId, options)
        );
    }
}
