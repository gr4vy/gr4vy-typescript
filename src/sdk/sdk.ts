/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { AccountUpdater } from "./accountupdater";
import { AntiFraudServiceDefinitions } from "./antifraudservicedefinitions";
import { AntiFraudServices } from "./antifraudservices";
import { APILogs } from "./apilogs";
import { AuditLogs } from "./auditlogs";
import { Buyers } from "./buyers";
import { CardSchemeDefinitions } from "./cardschemedefinitions";
import { CheckoutSessions } from "./checkoutsessions";
import { ConnectionDefinitions } from "./connectiondefinitions";
import { Connections } from "./connections";
import { DigitalWallets } from "./digitalwallets";
import { Flow } from "./flow";
import { GiftCards } from "./giftcards";
import { GiftCardServiceDefinitions } from "./giftcardservicedefinitions";
import { GiftCardServices } from "./giftcardservices";
import { MerchantAccounts } from "./merchantaccounts";
import { PaymentMethodDefinitions } from "./paymentmethoddefinitions";
import { PaymentMethods } from "./paymentmethods";
import { PaymentOptions } from "./paymentoptions";
import { PaymentServiceDefinitions } from "./paymentservicedefinitions";
import { PaymentServices } from "./paymentservices";
import { Reports } from "./reports";
import { Roles } from "./roles";
import { Tokens } from "./tokens";
import { Transactions } from "./transactions";
import { VaultForward } from "./vaultforward";
import { Webhooks } from "./webhooks";

export class SDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _accountUpdater?: AccountUpdater;
    get accountUpdater(): AccountUpdater {
        return (this._accountUpdater ??= new AccountUpdater(this.options$));
    }

    private _apiLogs?: APILogs;
    get apiLogs(): APILogs {
        return (this._apiLogs ??= new APILogs(this.options$));
    }

    private _auditLogs?: AuditLogs;
    get auditLogs(): AuditLogs {
        return (this._auditLogs ??= new AuditLogs(this.options$));
    }

    private _buyers?: Buyers;
    get buyers(): Buyers {
        return (this._buyers ??= new Buyers(this.options$));
    }

    private _giftCards?: GiftCards;
    get giftCards(): GiftCards {
        return (this._giftCards ??= new GiftCards(this.options$));
    }

    private _paymentMethods?: PaymentMethods;
    get paymentMethods(): PaymentMethods {
        return (this._paymentMethods ??= new PaymentMethods(this.options$));
    }

    private _cardSchemeDefinitions?: CardSchemeDefinitions;
    get cardSchemeDefinitions(): CardSchemeDefinitions {
        return (this._cardSchemeDefinitions ??= new CardSchemeDefinitions(this.options$));
    }

    private _connections?: Connections;
    get connections(): Connections {
        return (this._connections ??= new Connections(this.options$));
    }

    private _connectionDefinitions?: ConnectionDefinitions;
    get connectionDefinitions(): ConnectionDefinitions {
        return (this._connectionDefinitions ??= new ConnectionDefinitions(this.options$));
    }

    private _checkoutSessions?: CheckoutSessions;
    get checkoutSessions(): CheckoutSessions {
        return (this._checkoutSessions ??= new CheckoutSessions(this.options$));
    }

    private _paymentMethodDefinitions?: PaymentMethodDefinitions;
    get paymentMethodDefinitions(): PaymentMethodDefinitions {
        return (this._paymentMethodDefinitions ??= new PaymentMethodDefinitions(this.options$));
    }

    private _paymentOptions?: PaymentOptions;
    get paymentOptions(): PaymentOptions {
        return (this._paymentOptions ??= new PaymentOptions(this.options$));
    }

    private _paymentServices?: PaymentServices;
    get paymentServices(): PaymentServices {
        return (this._paymentServices ??= new PaymentServices(this.options$));
    }

    private _paymentServiceDefinitions?: PaymentServiceDefinitions;
    get paymentServiceDefinitions(): PaymentServiceDefinitions {
        return (this._paymentServiceDefinitions ??= new PaymentServiceDefinitions(this.options$));
    }

    private _digitalWallets?: DigitalWallets;
    get digitalWallets(): DigitalWallets {
        return (this._digitalWallets ??= new DigitalWallets(this.options$));
    }

    private _transactions?: Transactions;
    get transactions(): Transactions {
        return (this._transactions ??= new Transactions(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _flow?: Flow;
    get flow(): Flow {
        return (this._flow ??= new Flow(this.options$));
    }

    private _giftCardServices?: GiftCardServices;
    get giftCardServices(): GiftCardServices {
        return (this._giftCardServices ??= new GiftCardServices(this.options$));
    }

    private _giftCardServiceDefinitions?: GiftCardServiceDefinitions;
    get giftCardServiceDefinitions(): GiftCardServiceDefinitions {
        return (this._giftCardServiceDefinitions ??= new GiftCardServiceDefinitions(this.options$));
    }

    private _antiFraudServices?: AntiFraudServices;
    get antiFraudServices(): AntiFraudServices {
        return (this._antiFraudServices ??= new AntiFraudServices(this.options$));
    }

    private _antiFraudServiceDefinitions?: AntiFraudServiceDefinitions;
    get antiFraudServiceDefinitions(): AntiFraudServiceDefinitions {
        return (this._antiFraudServiceDefinitions ??= new AntiFraudServiceDefinitions(
            this.options$
        ));
    }

    private _reports?: Reports;
    get reports(): Reports {
        return (this._reports ??= new Reports(this.options$));
    }

    private _roles?: Roles;
    get roles(): Roles {
        return (this._roles ??= new Roles(this.options$));
    }

    private _merchantAccounts?: MerchantAccounts;
    get merchantAccounts(): MerchantAccounts {
        return (this._merchantAccounts ??= new MerchantAccounts(this.options$));
    }

    private _tokens?: Tokens;
    get tokens(): Tokens {
        return (this._tokens ??= new Tokens(this.options$));
    }

    private _vaultForward?: VaultForward;
    get vaultForward(): VaultForward {
        return (this._vaultForward ??= new VaultForward(this.options$));
    }
}
