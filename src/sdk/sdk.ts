/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { addApplePaySession } from "../funcs/addApplePaySession.js";
import { addCheckoutSession } from "../funcs/addCheckoutSession.js";
import { addClickToPaySession } from "../funcs/addClickToPaySession.js";
import { addDigitalWallet } from "../funcs/addDigitalWallet.js";
import { addGiftCard } from "../funcs/addGiftCard.js";
import { addGooglePaySession } from "../funcs/addGooglePaySession.js";
import { addPaymentMethod } from "../funcs/addPaymentMethod.js";
import { approvePaymentMethod } from "../funcs/approvePaymentMethod.js";
import { approvePaymentServiceToken } from "../funcs/approvePaymentServiceToken.js";
import { browseAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdGet } from "../funcs/browseAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdGet.js";
import { browseAuthenticationsVaultForwardConfigsPciForwardConfigIdAuthenticationsGet } from "../funcs/browseAuthenticationsVaultForwardConfigsPciForwardConfigIdAuthenticationsGet.js";
import { browseConfigVaultForwardConfigsPciForwardConfigIdGet } from "../funcs/browseConfigVaultForwardConfigsPciForwardConfigIdGet.js";
import { captureTransaction } from "../funcs/captureTransaction.js";
import { confirmApplePayCertificate } from "../funcs/confirmApplePayCertificate.js";
import { createAccountUpdaterJob } from "../funcs/createAccountUpdaterJob.js";
import { createAntiFraudService } from "../funcs/createAntiFraudService.js";
import { createFlowActionRule } from "../funcs/createFlowActionRule.js";
import { createGiftCardService } from "../funcs/createGiftCardService.js";
import { createMerchantAccount } from "../funcs/createMerchantAccount.js";
import { createNetworkToken } from "../funcs/createNetworkToken.js";
import { createNetworkTokenCryptogram } from "../funcs/createNetworkTokenCryptogram.js";
import { createPaymentService } from "../funcs/createPaymentService.js";
import { createPaymentServiceDefinitionSession } from "../funcs/createPaymentServiceDefinitionSession.js";
import { createPaymentServiceSession } from "../funcs/createPaymentServiceSession.js";
import { createPaymentServiceToken } from "../funcs/createPaymentServiceToken.js";
import { createReport } from "../funcs/createReport.js";
import { createRoleAssignments } from "../funcs/createRoleAssignments.js";
import { createTransaction } from "../funcs/createTransaction.js";
import { deleteAntiFraudService } from "../funcs/deleteAntiFraudService.js";
import { deleteApplePayCertificate } from "../funcs/deleteApplePayCertificate.js";
import { deleteAuthSessionsDelete } from "../funcs/deleteAuthSessionsDelete.js";
import { deleteAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdDelete } from "../funcs/deleteAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdDelete.js";
import { deleteCheckoutSession } from "../funcs/deleteCheckoutSession.js";
import { deleteDigitalWallet } from "../funcs/deleteDigitalWallet.js";
import { deleteFlowActionRule } from "../funcs/deleteFlowActionRule.js";
import { deleteGiftCard } from "../funcs/deleteGiftCard.js";
import { deleteGiftCardService } from "../funcs/deleteGiftCardService.js";
import { deleteNetworkToken } from "../funcs/deleteNetworkToken.js";
import { deletePaymentMethod } from "../funcs/deletePaymentMethod.js";
import { deletePaymentService } from "../funcs/deletePaymentService.js";
import { deletePaymentServiceToken } from "../funcs/deletePaymentServiceToken.js";
import { deleteRoleAssignment } from "../funcs/deleteRoleAssignment.js";
import { deregisterDigitalWalletDomain } from "../funcs/deregisterDigitalWalletDomain.js";
import { editAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdPut } from "../funcs/editAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdPut.js";
import { generateApplePayCertificate } from "../funcs/generateApplePayCertificate.js";
import { generateReportExecutionUrl } from "../funcs/generateReportExecutionUrl.js";
import { getAntiFraudService } from "../funcs/getAntiFraudService.js";
import { getAppleDigitalWallet } from "../funcs/getAppleDigitalWallet.js";
import { getCheckoutSession } from "../funcs/getCheckoutSession.js";
import { getDigitalWallet } from "../funcs/getDigitalWallet.js";
import { getFlow } from "../funcs/getFlow.js";
import { getFlowActionRule } from "../funcs/getFlowActionRule.js";
import { getGiftCard } from "../funcs/getGiftCard.js";
import { getGiftCardService } from "../funcs/getGiftCardService.js";
import { getGiftCardServiceDefinition } from "../funcs/getGiftCardServiceDefinition.js";
import { getMerchantAccount } from "../funcs/getMerchantAccount.js";
import { getPaymentMethod } from "../funcs/getPaymentMethod.js";
import { getPaymentService } from "../funcs/getPaymentService.js";
import { getPaymentServiceDefinition } from "../funcs/getPaymentServiceDefinition.js";
import { getRefund } from "../funcs/getRefund.js";
import { getReport } from "../funcs/getReport.js";
import { getReportExecution } from "../funcs/getReportExecution.js";
import { getTransaction } from "../funcs/getTransaction.js";
import { getTransactionRefund } from "../funcs/getTransactionRefund.js";
import { getTransactionSummary } from "../funcs/getTransactionSummary.js";
import { listAllReportExecutions } from "../funcs/listAllReportExecutions.js";
import { listAntiFraudServiceDefinitions } from "../funcs/listAntiFraudServiceDefinitions.js";
import { listApiLogs } from "../funcs/listApiLogs.js";
import { listApplePayCertificates } from "../funcs/listApplePayCertificates.js";
import { listAuditLogs } from "../funcs/listAuditLogs.js";
import { listBuyerGiftCards } from "../funcs/listBuyerGiftCards.js";
import { listBuyerPaymentMethods } from "../funcs/listBuyerPaymentMethods.js";
import { listBuyerShippingDetails } from "../funcs/listBuyerShippingDetails.js";
import { listCardFlowActionRule3dsOutcomes } from "../funcs/listCardFlowActionRule3dsOutcomes.js";
import { listCardFlowActionRuleRoutingOutcomes } from "../funcs/listCardFlowActionRuleRoutingOutcomes.js";
import { listCardSchemeDefinitions } from "../funcs/listCardSchemeDefinitions.js";
import { listCheckoutFlowActionRuleOptionOutcomes } from "../funcs/listCheckoutFlowActionRuleOptionOutcomes.js";
import { listConnectionDefinitions } from "../funcs/listConnectionDefinitions.js";
import { listConnections } from "../funcs/listConnections.js";
import { listDigitalWallets } from "../funcs/listDigitalWallets.js";
import { listGiftCardBalances } from "../funcs/listGiftCardBalances.js";
import { listGiftCards } from "../funcs/listGiftCards.js";
import { listMerchantAccounts } from "../funcs/listMerchantAccounts.js";
import { listNetworkTokens } from "../funcs/listNetworkTokens.js";
import { listPaymentMethodDefinitions } from "../funcs/listPaymentMethodDefinitions.js";
import { listPaymentMethods } from "../funcs/listPaymentMethods.js";
import { listPaymentOptions } from "../funcs/listPaymentOptions.js";
import { listPaymentServiceDefinitions } from "../funcs/listPaymentServiceDefinitions.js";
import { listPaymentServiceTokens } from "../funcs/listPaymentServiceTokens.js";
import { listPaymentServices } from "../funcs/listPaymentServices.js";
import { listRedirectFlowActionRuleRoutingOutcomes } from "../funcs/listRedirectFlowActionRuleRoutingOutcomes.js";
import { listReportExecutions } from "../funcs/listReportExecutions.js";
import { listReports } from "../funcs/listReports.js";
import { listRoleAssignments } from "../funcs/listRoleAssignments.js";
import { listRoles } from "../funcs/listRoles.js";
import { listTransactionActions } from "../funcs/listTransactionActions.js";
import { listTransactionEvents } from "../funcs/listTransactionEvents.js";
import { listTransactionRefunds } from "../funcs/listTransactionRefunds.js";
import { listTransactions } from "../funcs/listTransactions.js";
import { refreshAuthSessionsPut } from "../funcs/refreshAuthSessionsPut.js";
import { refundAllTransactionMethods } from "../funcs/refundAllTransactionMethods.js";
import { refundTransaction } from "../funcs/refundTransaction.js";
import { registerDigitalWalletDomain } from "../funcs/registerDigitalWalletDomain.js";
import { resumeNetworkToken } from "../funcs/resumeNetworkToken.js";
import { suspendNetworkToken } from "../funcs/suspendNetworkToken.js";
import { updateAntiFraudService } from "../funcs/updateAntiFraudService.js";
import { updateCheckoutSession } from "../funcs/updateCheckoutSession.js";
import { updateCheckoutSessionFields } from "../funcs/updateCheckoutSessionFields.js";
import { updateDigitalWallet } from "../funcs/updateDigitalWallet.js";
import { updateFlowActionRule } from "../funcs/updateFlowActionRule.js";
import { updateGiftCardService } from "../funcs/updateGiftCardService.js";
import { updateMerchantAccount } from "../funcs/updateMerchantAccount.js";
import { updatePaymentService } from "../funcs/updatePaymentService.js";
import { updateReport } from "../funcs/updateReport.js";
import { verifyAntiFraudServiceCredentials } from "../funcs/verifyAntiFraudServiceCredentials.js";
import { verifyGiftCardServiceCredentials } from "../funcs/verifyGiftCardServiceCredentials.js";
import { verifyPaymentServiceCredentials } from "../funcs/verifyPaymentServiceCredentials.js";
import { voidTransaction } from "../funcs/voidTransaction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { Buyers } from "./buyers.js";

export class Gr4vy extends ClientSDK {
    private _buyers?: Buyers;
    get buyers(): Buyers {
        return (this._buyers ??= new Buyers(this.options$));
    }

    /**
     * Add
     */
    async createAccountUpdaterJob(
        request: components.AccountUpdaterJobCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createAccountUpdaterJob(this, request, options));
    }

    /**
     * For Buyer
     */
    async listBuyerPaymentMethods(
        buyerExternalIdentifier?: string | undefined,
        buyerId?: string | undefined,
        country?: string | undefined,
        currency?: string | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            listBuyerPaymentMethods(
                this,
                buyerExternalIdentifier,
                buyerId,
                country,
                currency,
                options
            )
        );
    }

    /**
     * Browse
     */
    async listPaymentMethods(
        request: operations.ListPaymentMethodsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListPaymentMethodsResponse>> {
        return unwrapResultIterator(listPaymentMethods(this, request, options));
    }

    /**
     * Add
     */
    async addPaymentMethod(
        request: operations.AddPaymentMethodBody,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(addPaymentMethod(this, request, options));
    }

    /**
     * Read
     */
    async getPaymentMethod(paymentMethodId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getPaymentMethod(this, paymentMethodId, options));
    }

    /**
     * Delete Payment Method
     */
    async deletePaymentMethod(paymentMethodId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(deletePaymentMethod(this, paymentMethodId, options));
    }

    /**
     * Payment Service Tokens
     */
    async listPaymentServiceTokens(
        paymentMethodId: string,
        paymentServiceId?: string | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            listPaymentServiceTokens(this, paymentMethodId, paymentServiceId, options)
        );
    }

    /**
     * Tokenize
     */
    async createPaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenCreate: components.PaymentServiceTokenCreate,
        options?: RequestOptions
    ): Promise<components.PaymentServiceToken> {
        return unwrapAsync(
            createPaymentServiceToken(this, paymentMethodId, paymentServiceTokenCreate, options)
        );
    }

    /**
     * Network Tokens
     */
    async listNetworkTokens(paymentMethodId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(listNetworkTokens(this, paymentMethodId, options));
    }

    /**
     * Provision Network Token
     */
    async createNetworkToken(
        paymentMethodId: string,
        networkTokenCreate: components.NetworkTokenCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createNetworkToken(this, paymentMethodId, networkTokenCreate, options));
    }

    /**
     * Issue Cryptogram
     */
    async createNetworkTokenCryptogram(
        paymentMethodId: string,
        networkTokenId: string,
        cryptogramCreate: components.CryptogramCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            createNetworkTokenCryptogram(
                this,
                paymentMethodId,
                networkTokenId,
                cryptogramCreate,
                options
            )
        );
    }

    /**
     * Delete Payment Service Token
     */
    async deletePaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            deletePaymentServiceToken(this, paymentMethodId, paymentServiceTokenId, options)
        );
    }

    /**
     * Delete Network Token
     */
    async deleteNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(deleteNetworkToken(this, paymentMethodId, networkTokenId, options));
    }

    /**
     * Suspend Network Token
     */
    async suspendNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(suspendNetworkToken(this, paymentMethodId, networkTokenId, options));
    }

    /**
     * Resume Network Token
     */
    async resumeNetworkToken(
        paymentMethodId: string,
        networkTokenId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(resumeNetworkToken(this, paymentMethodId, networkTokenId, options));
    }

    /**
     * Approve
     */
    async approvePaymentMethod(
        paymentMethodId: string,
        paymentServiceId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(approvePaymentMethod(this, paymentMethodId, paymentServiceId, options));
    }

    /**
     * Approve Payment Service Token
     */
    async approvePaymentServiceToken(
        paymentMethodId: string,
        paymentServiceTokenId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            approvePaymentServiceToken(this, paymentMethodId, paymentServiceTokenId, options)
        );
    }

    /**
     * Get Balances
     */
    async listGiftCardBalances(
        request: components.GiftCardBalanceRequest,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(listGiftCardBalances(this, request, options));
    }

    /**
     * Read
     */
    async getGiftCard(giftCardId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getGiftCard(this, giftCardId, options));
    }

    /**
     * Delete
     */
    async deleteGiftCard(giftCardId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(deleteGiftCard(this, giftCardId, options));
    }

    /**
     * Browse
     */
    async listGiftCards(
        buyerExternalIdentifier?: string | undefined,
        buyerId?: string | undefined,
        cursor?: string | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListGiftCardsResponse>> {
        return unwrapResultIterator(
            listGiftCards(this, buyerExternalIdentifier, buyerId, cursor, limit, options)
        );
    }

    /**
     * Add
     */
    async addGiftCard(request: components.GiftCardCreate, options?: RequestOptions): Promise<any> {
        return unwrapAsync(addGiftCard(this, request, options));
    }

    /**
     * For Buyer
     */
    async listBuyerGiftCards(
        buyerExternalIdentifier?: string | undefined,
        buyerId?: string | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(listBuyerGiftCards(this, buyerExternalIdentifier, buyerId, options));
    }

    /**
     * List buyer shipping details
     *
     * @remarks
     * List all the shipping details for a buyer, using the buyer ID
     */
    async listBuyerShippingDetails(buyerId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(listBuyerShippingDetails(this, buyerId, options));
    }

    /**
     * Browse
     */
    async listConnections(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listConnections(this, options));
    }

    /**
     * Browse
     */
    async listConnectionDefinitions(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listConnectionDefinitions(this, options));
    }

    /**
     * Browse
     */
    async listCardSchemeDefinitions(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listCardSchemeDefinitions(this, options));
    }

    /**
     * Browse
     */
    async listDigitalWallets(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listDigitalWallets(this, options));
    }

    /**
     * Register
     */
    async addDigitalWallet(
        request: components.DigitalWalletCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(addDigitalWallet(this, request, options));
    }

    /**
     * Read Apple Status
     */
    async getAppleDigitalWallet(
        domainName?: string | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(getAppleDigitalWallet(this, domainName, options));
    }

    /**
     * Read
     */
    async getDigitalWallet(digitalWalletId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getDigitalWallet(this, digitalWalletId, options));
    }

    /**
     * Edit
     */
    async updateDigitalWallet(
        digitalWalletId: string,
        digitalWalletUpdate: components.DigitalWalletUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            updateDigitalWallet(this, digitalWalletId, digitalWalletUpdate, options)
        );
    }

    /**
     * Delete
     */
    async deleteDigitalWallet(digitalWalletId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(deleteDigitalWallet(this, digitalWalletId, options));
    }

    /**
     * Google Pay Session
     */
    async addGooglePaySession(
        request: components.GooglePaySession,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(addGooglePaySession(this, request, options));
    }

    /**
     * Apple Pay Session
     */
    async addApplePaySession(
        request: components.ApplePaySession,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(addApplePaySession(this, request, options));
    }

    /**
     * Domain Registration
     */
    async registerDigitalWalletDomain(
        digitalWalletId: string,
        digitalWalletDomain: components.DigitalWalletDomain,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            registerDigitalWalletDomain(this, digitalWalletId, digitalWalletDomain, options)
        );
    }

    /**
     * Domain Deregistration
     */
    async deregisterDigitalWalletDomain(
        digitalWalletId: string,
        digitalWalletDomain: components.DigitalWalletDomain,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            deregisterDigitalWalletDomain(this, digitalWalletId, digitalWalletDomain, options)
        );
    }

    /**
     * Click To Pay Session
     */
    async addClickToPaySession(
        request: components.ClickToPaySession,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(addClickToPaySession(this, request, options));
    }

    /**
     * Browse
     *
     * @remarks
     * Browse the list of transactions.
     */
    async listTransactions(
        request: operations.ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListTransactionsResponse>> {
        return unwrapResultIterator(listTransactions(this, request, options));
    }

    /**
     * Add
     */
    async createTransaction(
        request: components.TransactionCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createTransaction(this, request, options));
    }

    /**
     * Read
     */
    async getTransaction(transactionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getTransaction(this, transactionId, options));
    }

    /**
     * Capture
     */
    async captureTransaction(
        transactionId: string,
        transactionCapture: components.TransactionCapture,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(captureTransaction(this, transactionId, transactionCapture, options));
    }

    /**
     * Browse Refunds
     */
    async listTransactionRefunds(transactionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(listTransactionRefunds(this, transactionId, options));
    }

    /**
     * Add Refund
     */
    async refundTransaction(
        transactionId: string,
        transactionRefundCreate: components.TransactionRefundCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            refundTransaction(this, transactionId, transactionRefundCreate, options)
        );
    }

    /**
     * Read Transaction Refund
     */
    async getTransactionRefund(
        transactionId: string,
        refundId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(getTransactionRefund(this, transactionId, refundId, options));
    }

    /**
     * Read Standalone Refund
     */
    async getRefund(refundId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getRefund(this, refundId, options));
    }

    /**
     * Void
     */
    async voidTransaction(transactionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(voidTransaction(this, transactionId, options));
    }

    /**
     * Refund All
     */
    async refundAllTransactionMethods(
        transactionId: string,
        transactionRefundAllCreate?: components.TransactionRefundAllCreate | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            refundAllTransactionMethods(this, transactionId, transactionRefundAllCreate, options)
        );
    }

    /**
     * Actions
     */
    async listTransactionActions(transactionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(listTransactionActions(this, transactionId, options));
    }

    /**
     * Summary
     */
    async getTransactionSummary(transactionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getTransactionSummary(this, transactionId, options));
    }

    /**
     * Events
     */
    async listTransactionEvents(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.TransactionEventCollection> {
        return unwrapAsync(listTransactionEvents(this, transactionId, options));
    }

    /**
     * Browse Post
     */
    async listPaymentOptions(
        request: components.PaymentOptionRequest,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(listPaymentOptions(this, request, options));
    }

    /**
     * Browse
     */
    async listPaymentMethodDefinitions(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listPaymentMethodDefinitions(this, options));
    }

    /**
     * Browse
     */
    async listPaymentServiceDefinitions(
        cursor?: string | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListPaymentServiceDefinitionsResponse>> {
        return unwrapResultIterator(listPaymentServiceDefinitions(this, cursor, limit, options));
    }

    /**
     * Read
     */
    async getPaymentServiceDefinition(
        paymentServiceDefinitionId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(getPaymentServiceDefinition(this, paymentServiceDefinitionId, options));
    }

    /**
     * Create Session
     */
    async createPaymentServiceDefinitionSession(
        paymentServiceDefinitionId: string,
        requestBody: operations.CreatePaymentServiceDefinitionSessionBody,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            createPaymentServiceDefinitionSession(
                this,
                paymentServiceDefinitionId,
                requestBody,
                options
            )
        );
    }

    /**
     * Browse
     */
    async listPaymentServices(
        method?: components.PaymentMethod | undefined,
        cursor?: string | undefined,
        limit?: number | undefined,
        deleted?: boolean | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListPaymentServicesResponse>> {
        return unwrapResultIterator(
            listPaymentServices(this, method, cursor, limit, deleted, options)
        );
    }

    /**
     * Add
     */
    async createPaymentService(
        request: components.PaymentServiceCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createPaymentService(this, request, options));
    }

    /**
     * Read
     */
    async getPaymentService(paymentServiceId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getPaymentService(this, paymentServiceId, options));
    }

    /**
     * Edit
     */
    async updatePaymentService(
        paymentServiceId: string,
        paymentServiceUpdate: components.PaymentServiceUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            updatePaymentService(this, paymentServiceId, paymentServiceUpdate, options)
        );
    }

    /**
     * Delete
     */
    async deletePaymentService(paymentServiceId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(deletePaymentService(this, paymentServiceId, options));
    }

    /**
     * Verify
     */
    async verifyPaymentServiceCredentials(
        request: components.ApiRoutersPaymentServicesSchemasVerifyCredentials,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(verifyPaymentServiceCredentials(this, request, options));
    }

    /**
     * Create Session
     */
    async createPaymentServiceSession(
        paymentServiceId: string,
        requestBody: operations.CreatePaymentServiceSessionBody,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            createPaymentServiceSession(this, paymentServiceId, requestBody, options)
        );
    }

    /**
     * Get
     */
    async listAntiFraudServiceDefinitions(
        antiFraudServiceDefinitionId: components.AntiFraudServiceProvider,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            listAntiFraudServiceDefinitions(this, antiFraudServiceDefinitionId, options)
        );
    }

    /**
     * Read
     */
    async getAntiFraudService(antiFraudServiceId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getAntiFraudService(this, antiFraudServiceId, options));
    }

    /**
     * Edit
     */
    async updateAntiFraudService(
        antiFraudServiceId: string,
        antiFraudServiceUpdate: components.AntiFraudServiceUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            updateAntiFraudService(this, antiFraudServiceId, antiFraudServiceUpdate, options)
        );
    }

    /**
     * Delete
     */
    async deleteAntiFraudService(
        antiFraudServiceId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(deleteAntiFraudService(this, antiFraudServiceId, options));
    }

    /**
     * Add
     */
    async createAntiFraudService(
        request: components.AntiFraudServiceCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createAntiFraudService(this, request, options));
    }

    /**
     * Verify
     */
    async verifyAntiFraudServiceCredentials(
        request: components.AntiFraudServiceCredentialsVerify,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(verifyAntiFraudServiceCredentials(this, request, options));
    }

    /**
     * Get
     */
    async getGiftCardServiceDefinition(
        giftCardServiceDefinitionId: components.GiftCardServiceProvider,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            getGiftCardServiceDefinition(this, giftCardServiceDefinitionId, options)
        );
    }

    /**
     * Read
     */
    async getGiftCardService(giftCardServiceId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getGiftCardService(this, giftCardServiceId, options));
    }

    /**
     * Edit
     */
    async updateGiftCardService(
        giftCardServiceId: string,
        giftCardServiceUpdate: components.GiftCardServiceUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            updateGiftCardService(this, giftCardServiceId, giftCardServiceUpdate, options)
        );
    }

    /**
     * Delete
     */
    async deleteGiftCardService(giftCardServiceId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(deleteGiftCardService(this, giftCardServiceId, options));
    }

    /**
     * Add
     */
    async createGiftCardService(
        request: components.GiftCardServiceCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createGiftCardService(this, request, options));
    }

    /**
     * Verify
     */
    async verifyGiftCardServiceCredentials(
        request: components.ApiRoutersGiftCardServicesSchemasVerifyCredentials,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(verifyGiftCardServiceCredentials(this, request, options));
    }

    /**
     * Refresh
     */
    async refreshAuthSessionsPut(options?: RequestOptions): Promise<any> {
        return unwrapAsync(refreshAuthSessionsPut(this, options));
    }

    /**
     * Delete
     */
    async deleteAuthSessionsDelete(options?: RequestOptions): Promise<any> {
        return unwrapAsync(deleteAuthSessionsDelete(this, options));
    }

    /**
     * Add
     */
    async createFlowActionRule(
        flow: components.Flow,
        action: components.FlowAction,
        requestBody: operations.CreateFlowActionRuleBody,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createFlowActionRule(this, flow, action, requestBody, options));
    }

    /**
     * Browse Flow
     */
    async getFlow(flow: components.Flow, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getFlow(this, flow, options));
    }

    /**
     * Get
     */
    async getFlowActionRule(
        flow: components.Flow,
        action: components.FlowAction,
        ruleId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(getFlowActionRule(this, flow, action, ruleId, options));
    }

    /**
     * Edit
     */
    async updateFlowActionRule(
        flow: components.Flow,
        action: components.FlowAction,
        ruleId: string,
        requestBody: operations.UpdateFlowActionRuleBody,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(updateFlowActionRule(this, flow, action, ruleId, requestBody, options));
    }

    /**
     * Delete
     */
    async deleteFlowActionRule(
        flow: components.Flow,
        action: components.FlowAction,
        ruleId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(deleteFlowActionRule(this, flow, action, ruleId, options));
    }

    /**
     * Checkout Payment Options Outcomes
     */
    async listCheckoutFlowActionRuleOptionOutcomes(
        locale?: string | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(listCheckoutFlowActionRuleOptionOutcomes(this, locale, options));
    }

    /**
     * Browse Card Transaction Routing Outcomes
     */
    async listCardFlowActionRuleRoutingOutcomes(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listCardFlowActionRuleRoutingOutcomes(this, options));
    }

    /**
     * Browse Redirect Transaction Routing Outcomes
     */
    async listRedirectFlowActionRuleRoutingOutcomes(
        paymentMethod?: components.PaymentMethod | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(listRedirectFlowActionRuleRoutingOutcomes(this, paymentMethod, options));
    }

    /**
     * Skip 3Ds Payment Options Outcomes
     */
    async listCardFlowActionRule3dsOutcomes(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listCardFlowActionRule3dsOutcomes(this, options));
    }

    /**
     * Browse
     */
    async listAuditLogs(
        request: operations.ListAuditLogsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListAuditLogsResponse>> {
        return unwrapResultIterator(listAuditLogs(this, request, options));
    }

    /**
     * Browse
     */
    async listApiLogs(options?: RequestOptions): Promise<any> {
        return unwrapAsync(listApiLogs(this, options));
    }

    /**
     * Browse
     */
    async listReports(
        request: operations.ListReportsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListReportsResponse>> {
        return unwrapResultIterator(listReports(this, request, options));
    }

    /**
     * Add
     */
    async createReport(request: components.ReportCreate, options?: RequestOptions): Promise<any> {
        return unwrapAsync(createReport(this, request, options));
    }

    /**
     * Read
     */
    async getReport(reportId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getReport(this, reportId, options));
    }

    /**
     * Edit
     */
    async updateReport(
        reportId: string,
        reportUpdate: components.ReportUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(updateReport(this, reportId, reportUpdate, options));
    }

    /**
     * Browse Executions
     */
    async listReportExecutions(
        reportId: string,
        cursor?: string | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListReportExecutionsResponse>> {
        return unwrapResultIterator(listReportExecutions(this, reportId, cursor, limit, options));
    }

    /**
     * Generate Download Url
     */
    async generateReportExecutionUrl(
        reportId: string,
        reportExecutionId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(generateReportExecutionUrl(this, reportId, reportExecutionId, options));
    }

    /**
     * Browse Executions Any Report
     */
    async listAllReportExecutions(
        request: operations.ListAllReportExecutionsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListAllReportExecutionsResponse>> {
        return unwrapResultIterator(listAllReportExecutions(this, request, options));
    }

    /**
     * Get Report Execution
     */
    async getReportExecution(reportExecutionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getReportExecution(this, reportExecutionId, options));
    }

    /**
     * Add
     */
    async addCheckoutSession(
        request?: components.CheckoutSessionUpdate | undefined,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(addCheckoutSession(this, request, options));
    }

    /**
     * Get Session
     */
    async getCheckoutSession(sessionId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getCheckoutSession(this, sessionId, options));
    }

    /**
     * Update
     */
    async updateCheckoutSession(
        sessionId: string,
        checkoutSessionUpdate: components.CheckoutSessionUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(updateCheckoutSession(this, sessionId, checkoutSessionUpdate, options));
    }

    /**
     * Delete Session
     */
    async deleteCheckoutSession(sessionId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(deleteCheckoutSession(this, sessionId, options));
    }

    /**
     * Update Session Secure Fields
     */
    async updateCheckoutSessionFields(
        sessionId: string,
        checkoutSessionSecureFields: components.CheckoutSessionSecureFields,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            updateCheckoutSessionFields(this, sessionId, checkoutSessionSecureFields, options)
        );
    }

    /**
     * Browse Roles
     */
    async listRoles(
        cursor?: string | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListRolesResponse>> {
        return unwrapResultIterator(listRoles(this, cursor, limit, options));
    }

    /**
     * Browse
     */
    async listRoleAssignments(
        request: operations.ListRoleAssignmentsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListRoleAssignmentsResponse>> {
        return unwrapResultIterator(listRoleAssignments(this, request, options));
    }

    /**
     * Add
     */
    async createRoleAssignments(
        request: components.RoleAssignmentCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createRoleAssignments(this, request, options));
    }

    /**
     * Delete
     */
    async deleteRoleAssignment(id: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(deleteRoleAssignment(this, id, options));
    }

    /**
     * Browse
     */
    async listApplePayCertificates(
        cursor?: string | undefined,
        limit?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListApplePayCertificatesResponse>> {
        return unwrapResultIterator(listApplePayCertificates(this, cursor, limit, options));
    }

    /**
     * Add
     */
    async generateApplePayCertificate(
        request: components.ApplePayCertificateCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(generateApplePayCertificate(this, request, options));
    }

    /**
     * Edit
     */
    async confirmApplePayCertificate(
        applePayCertificateId: string,
        bodyConfirmApplePayCertificate: components.BodyConfirmApplePayCertificate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            confirmApplePayCertificate(
                this,
                applePayCertificateId,
                bodyConfirmApplePayCertificate,
                options
            )
        );
    }

    /**
     * Delete
     */
    async deleteApplePayCertificate(
        applePayCertificateId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(deleteApplePayCertificate(this, applePayCertificateId, options));
    }

    /**
     * Browse
     */
    async listMerchantAccounts(
        cursor?: string | undefined,
        limit?: number | undefined,
        search?: string | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListMerchantAccountsResponse>> {
        return unwrapResultIterator(listMerchantAccounts(this, cursor, limit, search, options));
    }

    /**
     * Add
     */
    async createMerchantAccount(
        request: components.MerchantAccountCreate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(createMerchantAccount(this, request, options));
    }

    /**
     * Read
     */
    async getMerchantAccount(merchantAccountId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(getMerchantAccount(this, merchantAccountId, options));
    }

    /**
     * Edit
     */
    async updateMerchantAccount(
        merchantAccountId: string,
        merchantAccountUpdate: components.MerchantAccountUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            updateMerchantAccount(this, merchantAccountId, merchantAccountUpdate, options)
        );
    }

    /**
     * Browse Config
     */
    async browseConfigVaultForwardConfigsPciForwardConfigIdGet(
        pciForwardConfigId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            browseConfigVaultForwardConfigsPciForwardConfigIdGet(this, pciForwardConfigId, options)
        );
    }

    /**
     * Browse Authentication
     */
    async browseAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdGet(
        pciForwardConfigId: string,
        pciForwardConfigAuthenticationId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            browseAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdGet(
                this,
                pciForwardConfigId,
                pciForwardConfigAuthenticationId,
                options
            )
        );
    }

    /**
     * Edit Authentication
     */
    async editAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdPut(
        pciForwardConfigId: string,
        pciForwardConfigAuthenticationId: string,
        pciForwardConfigAuthenticationUpdate: components.PCIForwardConfigAuthenticationUpdate,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            editAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdPut(
                this,
                pciForwardConfigId,
                pciForwardConfigAuthenticationId,
                pciForwardConfigAuthenticationUpdate,
                options
            )
        );
    }

    /**
     * Delete Authentication
     */
    async deleteAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdDelete(
        pciForwardConfigId: string,
        pciForwardConfigAuthenticationId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            deleteAuthenticationVaultForwardConfigsPciForwardConfigIdAuthenticationsPciForwardConfigAuthenticationIdDelete(
                this,
                pciForwardConfigId,
                pciForwardConfigAuthenticationId,
                options
            )
        );
    }

    /**
     * Browse Authentications
     */
    async browseAuthenticationsVaultForwardConfigsPciForwardConfigIdAuthenticationsGet(
        pciForwardConfigId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(
            browseAuthenticationsVaultForwardConfigsPciForwardConfigIdAuthenticationsGet(
                this,
                pciForwardConfigId,
                options
            )
        );
    }
}
