/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { buyersShippingDetailsCreate } from "../funcs/buyersShippingDetailsCreate.js";
import { buyersShippingDetailsDelete } from "../funcs/buyersShippingDetailsDelete.js";
import { buyersShippingDetailsGet } from "../funcs/buyersShippingDetailsGet.js";
import { buyersShippingDetailsList } from "../funcs/buyersShippingDetailsList.js";
import { buyersShippingDetailsUpdate } from "../funcs/buyersShippingDetailsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ShippingDetails extends ClientSDK {
    /**
     * List buyer shipping details
     *
     * @remarks
     * List all the shipping details for a buyer, using the buyer ID
     */
    async list(buyerId: string, options?: RequestOptions): Promise<components.ShippingDetailsList> {
        return unwrapAsync(buyersShippingDetailsList(this, buyerId, options));
    }

    /**
     * Add buyer shipping details
     *
     * @remarks
     * Create shipping details for a buyer, using the buyer ID
     */
    async create(
        buyerId: string,
        shippingDetailsCreate: components.ShippingDetailsCreate,
        options?: RequestOptions
    ): Promise<components.ShippingDetails> {
        return unwrapAsync(
            buyersShippingDetailsCreate(this, buyerId, shippingDetailsCreate, options)
        );
    }

    /**
     * Get buyer shipping details
     *
     * @remarks
     * Fetch the shipping details for a buyer, using the buyer ID
     */
    async get(
        buyerId: string,
        shippingDetailsId: string,
        options?: RequestOptions
    ): Promise<components.ShippingDetails> {
        return unwrapAsync(buyersShippingDetailsGet(this, buyerId, shippingDetailsId, options));
    }

    /**
     * Update buyer shipping details
     *
     * @remarks
     * Update the shipping details for a buyer, using the buyer ID
     */
    async update(
        buyerId: string,
        shippingDetailsId: string,
        shippingDetailsUpdate: components.ShippingDetailsUpdate,
        options?: RequestOptions
    ): Promise<components.ShippingDetails> {
        return unwrapAsync(
            buyersShippingDetailsUpdate(
                this,
                buyerId,
                shippingDetailsId,
                shippingDetailsUpdate,
                options
            )
        );
    }

    /**
     * Delete buyer shipping details
     *
     * @remarks
     * Delete the shipping details for a buyer, using the buyer ID
     */
    async delete(
        buyerId: string,
        shippingDetailsId: string,
        options?: RequestOptions
    ): Promise<any> {
        return unwrapAsync(buyersShippingDetailsDelete(this, buyerId, shippingDetailsId, options));
    }
}
