/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { buyersCreate } from "../funcs/buyersCreate.js";
import { buyersDelete } from "../funcs/buyersDelete.js";
import { buyersGet } from "../funcs/buyersGet.js";
import { buyersList } from "../funcs/buyersList.js";
import { buyersUpdate } from "../funcs/buyersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { BillingDetails } from "./billingdetails.js";
import { ShippingDetails } from "./shippingdetails.js";

export class Buyers extends ClientSDK {
    private _billingDetails?: BillingDetails;
    get billingDetails(): BillingDetails {
        return (this._billingDetails ??= new BillingDetails(this.options$));
    }

    private _shippingDetails?: ShippingDetails;
    get shippingDetails(): ShippingDetails {
        return (this._shippingDetails ??= new ShippingDetails(this.options$));
    }

    /**
     * List all buyers
     *
     * @remarks
     * List all buyers or search for a specific buyer.
     */
    async list(
        cursor?: string | undefined,
        limit?: number | undefined,
        search?: string | undefined,
        externalIdentifier?: string | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListBuyersResponse>> {
        return unwrapResultIterator(
            buyersList(this, cursor, limit, search, externalIdentifier, options)
        );
    }

    /**
     * Add a buyer
     *
     * @remarks
     * Create a new buyer record.
     */
    async create(
        request: components.BuyerCreate,
        options?: RequestOptions
    ): Promise<components.Buyer> {
        return unwrapAsync(buyersCreate(this, request, options));
    }

    /**
     * Get a buyer
     *
     * @remarks
     * Fetches a buyer by its ID.
     */
    async get(buyerId: string, options?: RequestOptions): Promise<components.Buyer> {
        return unwrapAsync(buyersGet(this, buyerId, options));
    }

    /**
     * Update a buyer
     *
     * @remarks
     * Updates a buyer record.
     */
    async update(
        buyerId: string,
        buyerUpdate: components.BuyerUpdate,
        options?: RequestOptions
    ): Promise<components.Buyer> {
        return unwrapAsync(buyersUpdate(this, buyerId, buyerUpdate, options));
    }

    /**
     * Delete a buyer
     *
     * @remarks
     * Permanently removes a buyer record.
     */
    async delete(buyerId: string, options?: RequestOptions): Promise<any> {
        return unwrapAsync(buyersDelete(this, buyerId, options));
    }
}
