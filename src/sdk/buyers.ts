/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { buyersDeleteBuyer } from "../funcs/buyersDeleteBuyer.js";
import { buyersDeleteBuyerShippingDetail } from "../funcs/buyersDeleteBuyerShippingDetail.js";
import { buyersGetBuyer } from "../funcs/buyersGetBuyer.js";
import { buyersGetBuyerBillingDetails } from "../funcs/buyersGetBuyerBillingDetails.js";
import { buyersListBuyerShippingDetails } from "../funcs/buyersListBuyerShippingDetails.js";
import { buyersListBuyers } from "../funcs/buyersListBuyers.js";
import { buyersNewBuyer } from "../funcs/buyersNewBuyer.js";
import { buyersNewBuyerShippingDetail } from "../funcs/buyersNewBuyerShippingDetail.js";
import { buyersUpdateBuyer } from "../funcs/buyersUpdateBuyer.js";
import { buyersUpdateBuyerBillingDetails } from "../funcs/buyersUpdateBuyerBillingDetails.js";
import { buyersUpdateBuyerShippingDetail } from "../funcs/buyersUpdateBuyerShippingDetail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Buyers extends ClientSDK {
    /**
     * List buyers
     *
     * @remarks
     * Returns a list of buyers.
     */
    async listBuyers(
        search?: string | undefined,
        externalIdentifier?: string | undefined,
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Buyers> {
        return unwrapAsync(
            buyersListBuyers(this, search, externalIdentifier, limit, cursor, options)
        );
    }

    /**
     * New buyer
     *
     * @remarks
     * Adds a buyer, allowing for payment methods and transactions to be associated
     * to this buyer.
     *
     */
    async newBuyer(
        request?: components.BuyerRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Buyer> {
        return unwrapAsync(buyersNewBuyer(this, request, options));
    }

    /**
     * Get buyer
     *
     * @remarks
     * Gets the information about a buyer.
     */
    async getBuyer(buyerId: string, options?: RequestOptions): Promise<components.Buyer> {
        return unwrapAsync(buyersGetBuyer(this, buyerId, options));
    }

    /**
     * Update buyer
     *
     * @remarks
     * Updates a buyer's details.
     *
     */
    async updateBuyer(
        buyerId: string,
        buyerUpdate?: components.BuyerUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.Buyer> {
        return unwrapAsync(buyersUpdateBuyer(this, buyerId, buyerUpdate, options));
    }

    /**
     * Delete buyer
     *
     * @remarks
     * Deletes a buyer record. Any associated stored payment methods will remain
     * in the system but no longer associated to the buyer.
     */
    async deleteBuyer(buyerId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(buyersDeleteBuyer(this, buyerId, options));
    }

    /**
     * List buyer shipping details
     *
     * @remarks
     * Retrieve all shipping details for a buyer.
     */
    async listBuyerShippingDetails(
        buyerId: string,
        options?: RequestOptions
    ): Promise<components.ShippingDetails> {
        return unwrapAsync(buyersListBuyerShippingDetails(this, buyerId, options));
    }

    /**
     * New buyer shipping detail
     *
     * @remarks
     * Adds a buyer shipping detail.
     */
    async newBuyerShippingDetail(
        buyerId: string,
        shippingDetailRequest?: components.ShippingDetailRequest | undefined,
        options?: RequestOptions
    ): Promise<components.ShippingDetail> {
        return unwrapAsync(
            buyersNewBuyerShippingDetail(this, buyerId, shippingDetailRequest, options)
        );
    }

    /**
     * Update buyer shipping details
     *
     * @remarks
     * Updates shipping detail for a buyer.
     */
    async updateBuyerShippingDetail(
        buyerId: string,
        shippingDetailId: string,
        shippingDetailUpdateRequest?: components.ShippingDetailUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.ShippingDetail> {
        return unwrapAsync(
            buyersUpdateBuyerShippingDetail(
                this,
                buyerId,
                shippingDetailId,
                shippingDetailUpdateRequest,
                options
            )
        );
    }

    /**
     * Delete buyer shipping detail
     *
     * @remarks
     * Deletes a buyer shipping detail.
     */
    async deleteBuyerShippingDetail(
        buyerId: string,
        shippingDetailId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            buyersDeleteBuyerShippingDetail(this, buyerId, shippingDetailId, options)
        );
    }

    /**
     * Get buyer billing details
     *
     * @remarks
     * Gets the information about a buyer's billing details. Note that only one
     * of either buyer's ID or external identifier may be passed as a
     * query parameter, and not both.
     */
    async getBuyerBillingDetails(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        options?: RequestOptions
    ): Promise<components.BillingDetails> {
        return unwrapAsync(
            buyersGetBuyerBillingDetails(this, buyerId, buyerExternalIdentifier, options)
        );
    }

    /**
     * Update buyer billing details
     *
     * @remarks
     * Updates the billing details of a buyer. Note that only one of either
     * buyer's ID or external identifier may be passed as a query
     * parameter, and not both.
     */
    async updateBuyerBillingDetails(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        billingDetailsUpdateRequest?: components.BillingDetailsUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.BillingDetails> {
        return unwrapAsync(
            buyersUpdateBuyerBillingDetails(
                this,
                buyerId,
                buyerExternalIdentifier,
                billingDetailsUpdateRequest,
                options
            )
        );
    }
}
