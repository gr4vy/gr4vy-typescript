/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class Buyers extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List buyers
     *
     * @remarks
     * Returns a list of buyers.
     */
    async listBuyers(
        search?: string | undefined,
        externalIdentifier?: string | undefined,
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Buyers> {
        const input$: operations.ListBuyersRequest = {
            search: search,
            externalIdentifier: externalIdentifier,
            limit: limit,
            cursor: cursor,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListBuyersRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/buyers")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
            external_identifier: payload$.external_identifier,
            limit: payload$.limit,
            search: payload$.search,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-buyers",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Buyers>()
            .json(200, components.Buyers$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * New buyer
     *
     * @remarks
     * Adds a buyer, allowing for payment methods and transactions to be associated
     * to this buyer.
     *
     */
    async newBuyer(
        request?: components.BuyerRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Buyer> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.BuyerRequest$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/buyers")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "new-buyer",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Buyer>()
            .json(201, components.Buyer$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(409, errors.Error409DuplicateRecord$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get buyer
     *
     * @remarks
     * Gets the information about a buyer.
     */
    async getBuyer(buyerId: string, options?: RequestOptions): Promise<components.Buyer> {
        const input$: operations.GetBuyerRequest = {
            buyerId: buyerId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetBuyerRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/buyers/{buyer_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-buyer",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Buyer>()
            .json(200, components.Buyer$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update buyer
     *
     * @remarks
     * Updates a buyer's details.
     *
     */
    async updateBuyer(
        buyerId: string,
        buyerUpdate?: components.BuyerUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.Buyer> {
        const input$: operations.UpdateBuyerRequest = {
            buyerId: buyerId,
            buyerUpdate: buyerUpdate,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateBuyerRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.BuyerUpdate, { explode: true });

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/buyers/{buyer_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "update-buyer",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Buyer>()
            .json(200, components.Buyer$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .json(409, errors.Error409DuplicateRecord$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete buyer
     *
     * @remarks
     * Deletes a buyer record. Any associated stored payment methods will remain
     * in the system but no longer associated to the buyer.
     */
    async deleteBuyer(buyerId: string, options?: RequestOptions): Promise<void> {
        const input$: operations.DeleteBuyerRequest = {
            buyerId: buyerId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteBuyerRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/buyers/{buyer_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete-buyer",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List buyer shipping details
     *
     * @remarks
     * Retrieve all shipping details for a buyer.
     */
    async listBuyerShippingDetails(
        buyerId: string,
        options?: RequestOptions
    ): Promise<components.ShippingDetails> {
        const input$: operations.ListBuyerShippingDetailsRequest = {
            buyerId: buyerId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListBuyerShippingDetailsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/buyers/{buyer_id}/shipping-details")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-buyer-shipping-details",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.ShippingDetails>()
            .json(200, components.ShippingDetails$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * New buyer shipping detail
     *
     * @remarks
     * Adds a buyer shipping detail.
     */
    async newBuyerShippingDetail(
        buyerId: string,
        shippingDetailRequest?: components.ShippingDetailRequest | undefined,
        options?: RequestOptions
    ): Promise<components.ShippingDetail> {
        const input$: operations.NewBuyerShippingDetailRequest = {
            buyerId: buyerId,
            shippingDetailRequest: shippingDetailRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.NewBuyerShippingDetailRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.ShippingDetailRequest, { explode: true });

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/buyers/{buyer_id}/shipping-details")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "new-buyer-shipping-detail",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.ShippingDetail>()
            .json(201, components.ShippingDetail$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update buyer shipping details
     *
     * @remarks
     * Updates shipping detail for a buyer.
     */
    async updateBuyerShippingDetail(
        buyerId: string,
        shippingDetailId: string,
        shippingDetailUpdateRequest?: components.ShippingDetailUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.ShippingDetail> {
        const input$: operations.UpdateBuyerShippingDetailRequest = {
            buyerId: buyerId,
            shippingDetailId: shippingDetailId,
            shippingDetailUpdateRequest: shippingDetailUpdateRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateBuyerShippingDetailRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.ShippingDetailUpdateRequest, { explode: true });

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
            shipping_detail_id: encodeSimple$("shipping_detail_id", payload$.shipping_detail_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/buyers/{buyer_id}/shipping-details/{shipping_detail_id}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "update-buyer-shipping-detail",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.ShippingDetail>()
            .json(200, components.ShippingDetail$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete buyer shipping detail
     *
     * @remarks
     * Deletes a buyer shipping detail.
     */
    async deleteBuyerShippingDetail(
        buyerId: string,
        shippingDetailId: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeleteBuyerShippingDetailRequest = {
            buyerId: buyerId,
            shippingDetailId: shippingDetailId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteBuyerShippingDetailRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            buyer_id: encodeSimple$("buyer_id", payload$.buyer_id, {
                explode: false,
                charEncoding: "percent",
            }),
            shipping_detail_id: encodeSimple$("shipping_detail_id", payload$.shipping_detail_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/buyers/{buyer_id}/shipping-details/{shipping_detail_id}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "delete-buyer-shipping-detail",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get buyer billing details
     *
     * @remarks
     * Gets the information about a buyer's billing details. Note that only one
     * of either buyer's ID or external identifier may be passed as a
     * query parameter, and not both.
     */
    async getBuyerBillingDetails(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        options?: RequestOptions
    ): Promise<components.BillingDetails> {
        const input$: operations.GetBuyerBillingDetailsRequest = {
            buyerId: buyerId,
            buyerExternalIdentifier: buyerExternalIdentifier,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetBuyerBillingDetailsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/buyers/billing-details")();

        const query$ = encodeFormQuery$({
            buyer_external_identifier: payload$.buyer_external_identifier,
            buyer_id: payload$.buyer_id,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-buyer-billing-details",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.BillingDetails>()
            .json(200, components.BillingDetails$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update buyer billing details
     *
     * @remarks
     * Updates the billing details of a buyer. Note that only one of either
     * buyer's ID or external identifier may be passed as a query
     * parameter, and not both.
     */
    async updateBuyerBillingDetails(
        buyerId?: string | undefined,
        buyerExternalIdentifier?: string | undefined,
        billingDetailsUpdateRequest?: components.BillingDetailsUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.BillingDetails> {
        const input$: operations.UpdateBuyerBillingDetailsRequest = {
            buyerId: buyerId,
            buyerExternalIdentifier: buyerExternalIdentifier,
            billingDetailsUpdateRequest: billingDetailsUpdateRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateBuyerBillingDetailsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.BillingDetailsUpdateRequest, { explode: true });

        const path$ = this.templateURLComponent("/buyers/billing-details")();

        const query$ = encodeFormQuery$({
            buyer_external_identifier: payload$.buyer_external_identifier,
            buyer_id: payload$.buyer_id,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "update-buyer-billing-details",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.BillingDetails>()
            .json(200, components.BillingDetails$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
