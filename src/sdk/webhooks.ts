/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class Webhooks extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Inbound webhook
     *
     * @remarks
     * Inbound webhook endpoint to connect to payment services.
     *
     * The response code and payload will depend on the payment
     * service definition.
     *
     * **Warning**: this endpoint will be removed eventually, use
     * [Inbound webhook](#operation/inbound-webhook).
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async inboundWebhookDeprecated(hook: string, options?: RequestOptions): Promise<void> {
        const input$: operations.InboundWebhookDeprecatedRequest = {
            hook: hook,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.InboundWebhookDeprecatedRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            hook: encodeSimple$("hook", payload$.hook, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/inbound-webhooks/{hook}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const context = {
            operationID: "inbound-webhook-deprecated",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const request$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Inbound webhook
     *
     * @remarks
     * Inbound webhook endpoint to connect to payment services.
     *
     * The response code and payload will depend on the payment
     * service definition.
     */
    async inboundWebhook(
        payload: string,
        signature: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.InboundWebhookRequest = {
            payload: payload,
            signature: signature,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.InboundWebhookRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            payload: encodeSimple$("payload", payload$.payload, {
                explode: false,
                charEncoding: "percent",
            }),
            signature: encodeSimple$("signature", payload$.signature, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/i/{payload}/{signature}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const context = { operationID: "inbound-webhook", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Inbound webhook
     *
     * @remarks
     * Inbound webhook endpoint to receive data from external services.
     *
     * The response code and payload depends on external service.
     */
    async inboundWebhooks(
        resource: operations.Resource,
        payload: string,
        signature: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.InboundWebhooksRequest = {
            resource: resource,
            payload: payload,
            signature: signature,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.InboundWebhooksRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            payload: encodeSimple$("payload", payload$.payload, {
                explode: false,
                charEncoding: "percent",
            }),
            resource: encodeSimple$("resource", payload$.resource, {
                explode: false,
                charEncoding: "percent",
            }),
            signature: encodeSimple$("signature", payload$.signature, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/i/{resource}/{payload}/{signature}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const context = { operationID: "inbound-webhooks", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }
}
