/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksInboundWebhook } from "../funcs/webhooksInboundWebhook.js";
import { webhooksInboundWebhookDeprecated } from "../funcs/webhooksInboundWebhookDeprecated.js";
import { webhooksInboundWebhooks } from "../funcs/webhooksInboundWebhooks.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
    /**
     * Inbound webhook
     *
     * @remarks
     * Inbound webhook endpoint to connect to payment services.
     *
     * The response code and payload will depend on the payment
     * service definition.
     *
     * **Warning**: this endpoint will be removed eventually, use
     * [Inbound webhook](#operation/inbound-webhook).
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async inboundWebhookDeprecated(hook: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(webhooksInboundWebhookDeprecated(this, hook, options));
    }

    /**
     * Inbound webhook
     *
     * @remarks
     * Inbound webhook endpoint to connect to payment services.
     *
     * The response code and payload will depend on the payment
     * service definition.
     */
    async inboundWebhook(
        payload: string,
        signature: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(webhooksInboundWebhook(this, payload, signature, options));
    }

    /**
     * Inbound webhook
     *
     * @remarks
     * Inbound webhook endpoint to receive data from external services.
     *
     * The response code and payload depends on external service.
     */
    async inboundWebhooks(
        resource: operations.Resource,
        payload: string,
        signature: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(webhooksInboundWebhooks(this, resource, payload, signature, options));
    }
}
