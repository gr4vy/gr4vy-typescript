/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCapture } from "../funcs/transactionsCapture.js";
import { transactionsCreate } from "../funcs/transactionsCreate.js";
import { transactionsGet } from "../funcs/transactionsGet.js";
import { transactionsList } from "../funcs/transactionsList.js";
import { transactionsSummary } from "../funcs/transactionsSummary.js";
import { transactionsSync } from "../funcs/transactionsSync.js";
import { transactionsVoid } from "../funcs/transactionsVoid.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Gr4vyTransactionsRefunds } from "./gr4vytransactionsrefunds.js";

export class Transactions extends ClientSDK {
  private _refunds?: Gr4vyTransactionsRefunds;
  get refunds(): Gr4vyTransactionsRefunds {
    return (this._refunds ??= new Gr4vyTransactionsRefunds(this._options));
  }

  /**
   * List transactions
   *
   * @remarks
   * List all transactions.
   */
  async list(
    request: operations.ListTransactionsRequest,
    options?: RequestOptions,
  ): Promise<components.CollectionTransactionSummary> {
    return unwrapAsync(transactionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create transaction
   *
   * @remarks
   * Create a transaction.
   */
  async create(
    transactionCreate: components.TransactionCreate,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateTransactionResponse> {
    return unwrapAsync(transactionsCreate(
      this,
      transactionCreate,
      timeoutInSeconds,
      options,
    ));
  }

  /**
   * Get transaction
   *
   * @remarks
   * Fetch a single transaction.
   */
  async get(
    transactionId: string,
    options?: RequestOptions,
  ): Promise<components.Transaction> {
    return unwrapAsync(transactionsGet(
      this,
      transactionId,
      options,
    ));
  }

  /**
   * Capture transaction
   *
   * @remarks
   * Capture an authorized transaction.
   */
  async capture(
    transactionCapture: components.TransactionCapture,
    transactionId: string,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.Transaction> {
    return unwrapAsync(transactionsCapture(
      this,
      transactionCapture,
      transactionId,
      timeoutInSeconds,
      options,
    ));
  }

  /**
   * Void transaction
   *
   * @remarks
   * Void an authorized transaction.
   */
  async void(
    transactionId: string,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.Transaction> {
    return unwrapAsync(transactionsVoid(
      this,
      transactionId,
      timeoutInSeconds,
      options,
    ));
  }

  /**
   * Get transaction summary
   *
   * @remarks
   * Fetch a summary for a transaction.
   */
  async summary(
    transactionId: string,
    options?: RequestOptions,
  ): Promise<components.TransactionStatusSummary> {
    return unwrapAsync(transactionsSummary(
      this,
      transactionId,
      options,
    ));
  }

  /**
   * Sync transaction
   *
   * @remarks
   * Fetch the latest status for a transaction.
   */
  async sync(
    transactionId: string,
    timeoutInSeconds?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.Transaction> {
    return unwrapAsync(transactionsSync(
      this,
      transactionId,
      timeoutInSeconds,
      options,
    ));
  }
}
