/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCaptureTransaction } from "../funcs/transactionsCaptureTransaction.js";
import { transactionsGetRefund } from "../funcs/transactionsGetRefund.js";
import { transactionsGetSingleRefund } from "../funcs/transactionsGetSingleRefund.js";
import { transactionsGetTransaction } from "../funcs/transactionsGetTransaction.js";
import { transactionsGetTransactionActions } from "../funcs/transactionsGetTransactionActions.js";
import { transactionsGetTransactionEvents } from "../funcs/transactionsGetTransactionEvents.js";
import { transactionsGetTransactionSummary } from "../funcs/transactionsGetTransactionSummary.js";
import { transactionsListTransactionRefunds } from "../funcs/transactionsListTransactionRefunds.js";
import { transactionsListTransactions } from "../funcs/transactionsListTransactions.js";
import { transactionsNewRefund } from "../funcs/transactionsNewRefund.js";
import { transactionsNewTransaction } from "../funcs/transactionsNewTransaction.js";
import { transactionsRefundAll } from "../funcs/transactionsRefundAll.js";
import { transactionsVoidTransaction } from "../funcs/transactionsVoidTransaction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Transactions extends ClientSDK {
    /**
     * List transactions
     *
     * @remarks
     * Lists all transactions for an account. Sorted by last updated at.
     */
    async listTransactions(
        request: operations.ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListTransactionsResponse>> {
        return unwrapResultIterator(transactionsListTransactions(this, request, options));
    }

    /**
     * New transaction
     *
     * @remarks
     * Attempts to create an authorization for a payment method. In some cases it is
     * not possible to create the authorization without redirecting the user for
     * their authorization. In these cases the status is set to
     * indicate buyer approval is pending and an approval URL is returned.
     *
     * Duplicated gift card numbers are not supported. This includes both stored gift
     * cards, as well as those directly provided via the request.
     *
     */
    async newTransaction(
        idempotencyKey?: string | undefined,
        transactionRequest?: components.TransactionRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        return unwrapAsync(
            transactionsNewTransaction(this, idempotencyKey, transactionRequest, options)
        );
    }

    /**
     * Get transaction
     *
     * @remarks
     * Get information about a transaction.
     */
    async getTransaction(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        return unwrapAsync(transactionsGetTransaction(this, transactionId, options));
    }

    /**
     * List actions for transaction
     *
     * @remarks
     * Gets actions for a given transaction.
     */
    async getTransactionActions(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Actions> {
        return unwrapAsync(transactionsGetTransactionActions(this, transactionId, options));
    }

    /**
     * Capture transaction
     *
     * @remarks
     * Captures a previously authorized transaction.
     */
    async captureTransaction(
        transactionId: string,
        transactionCaptureRequest?: components.TransactionCaptureRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        return unwrapAsync(
            transactionsCaptureTransaction(this, transactionId, transactionCaptureRequest, options)
        );
    }

    /**
     * List events for transaction
     *
     * @remarks
     * Get a list of events related to processing a transaction.
     */
    async getTransactionEvents(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.TransactionHistoryEvents> {
        return unwrapAsync(transactionsGetTransactionEvents(this, transactionId, options));
    }

    /**
     * List refunds
     *
     * @remarks
     * Lists all refunds associated with a certain transaction.
     */
    async listTransactionRefunds(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Refunds> {
        return unwrapAsync(transactionsListTransactionRefunds(this, transactionId, options));
    }

    /**
     * Refund transaction
     *
     * @remarks
     * Refunds a transaction, fully or partially.
     *
     * If the transaction was not yet successfully captured, the
     * refund will not be processed. Authorized transactions can be
     * voided instead.
     */
    async newRefund(
        transactionId: string,
        transactionRefundRequest?: components.TransactionRefundRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Refund> {
        return unwrapAsync(
            transactionsNewRefund(this, transactionId, transactionRefundRequest, options)
        );
    }

    /**
     * Refund all instruments in a transaction
     *
     * @remarks
     * Refunds a transaction fully across all instruments.
     */
    async refundAll(
        transactionId: string,
        transactionRefundAllRequest?: components.TransactionRefundAllRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Refunds> {
        return unwrapAsync(
            transactionsRefundAll(this, transactionId, transactionRefundAllRequest, options)
        );
    }

    /**
     * Get refund
     *
     * @remarks
     * Gets information about a refund associated with a certain transaction.
     */
    async getRefund(
        transactionId: string,
        refundId: string,
        options?: RequestOptions
    ): Promise<components.Refund> {
        return unwrapAsync(transactionsGetRefund(this, transactionId, refundId, options));
    }

    /**
     * Get refund
     *
     * @remarks
     * Gets information about a refund.
     */
    async getSingleRefund(refundId: string, options?: RequestOptions): Promise<components.Refund> {
        return unwrapAsync(transactionsGetSingleRefund(this, refundId, options));
    }

    /**
     * Get transaction summary
     *
     * @remarks
     * Gets summary for a given transaction.
     */
    async getTransactionSummary(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.TransactionStatusSummary> {
        return unwrapAsync(transactionsGetTransactionSummary(this, transactionId, options));
    }

    /**
     * Void transaction
     *
     * @remarks
     * Voids a transaction.
     *
     * If the transaction was not yet successfully authorized, or was already
     * captured, the void will not be processed. Captured transactions can be
     * refunded instead.
     *
     * Voiding zero-amount authorized transactions is not supported.
     *
     * Once voided, the status of the transaction will be either `authorization_voided`,
     * `authorization_void_pending`, or if the void fails the original status will remain.
     */
    async voidTransaction(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        return unwrapAsync(transactionsVoidTransaction(this, transactionId, options));
    }
}
