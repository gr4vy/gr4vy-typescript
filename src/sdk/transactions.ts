/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { dlv } from "../lib/dlv.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import { createPageIterator, PageIterator, Paginator } from "../types/operations.js";

export class Transactions extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List transactions
     *
     * @remarks
     * Lists all transactions for an account. Sorted by last updated at.
     */
    async listTransactions(
        request: operations.ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListTransactionsResponse>> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/transactions")();

        const query$ = encodeFormQuery$({
            amount_eq: payload$.amount_eq,
            amount_gte: payload$.amount_gte,
            amount_lte: payload$.amount_lte,
            buyer_external_identifier: payload$.buyer_external_identifier,
            buyer_id: payload$.buyer_id,
            checkout_session_id: payload$.checkout_session_id,
            created_at_gte: payload$.created_at_gte,
            created_at_lte: payload$.created_at_lte,
            currency: payload$.currency,
            cursor: payload$.cursor,
            external_identifier: payload$.external_identifier,
            gift_card_id: payload$.gift_card_id,
            gift_card_last4: payload$.gift_card_last4,
            has_gift_card_redemptions: payload$.has_gift_card_redemptions,
            has_refunds: payload$.has_refunds,
            id: payload$.id,
            limit: payload$.limit,
            metadata: payload$.metadata,
            method: payload$.method,
            payment_method_id: payload$.payment_method_id,
            payment_method_label: payload$.payment_method_label,
            payment_service_id: payload$.payment_service_id,
            payment_service_transaction_id: payload$.payment_service_transaction_id,
            pending_review: payload$.pending_review,
            reconciliation_id: payload$.reconciliation_id,
            search: payload$.search,
            status: payload$.status,
            updated_at_gte: payload$.updated_at_gte,
            updated_at_lte: payload$.updated_at_lte,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-transactions",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await this.matcher<operations.ListTransactionsResponse>()
            .json(200, operations.ListTransactionsResponse$inboundSchema, { key: "Result" })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.ListTransactionsResponse> => {
            const nextCursor = dlv(responseData, "next_cursor");

            if (nextCursor == null) {
                return () => null;
            }

            return () =>
                this.listTransactions(
                    {
                        ...input$,
                        cursor: nextCursor,
                    },
                    options
                );
        };

        const page$ = { ...result$, next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$) };
    }

    /**
     * New transaction
     *
     * @remarks
     * Attempts to create an authorization for a payment method. In some cases it is
     * not possible to create the authorization without redirecting the user for
     * their authorization. In these cases the status is set to
     * indicate buyer approval is pending and an approval URL is returned.
     *
     * Duplicated gift card numbers are not supported. This includes both stored gift
     * cards, as well as those directly provided via the request.
     *
     */
    async newTransaction(
        idempotencyKey?: string | undefined,
        transactionRequest?: components.TransactionRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        const input$: operations.NewTransactionRequest = {
            idempotencyKey: idempotencyKey,
            transactionRequest: transactionRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.NewTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.TransactionRequest, { explode: true });

        const path$ = this.templateURLComponent("/transactions")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "Idempotency-Key": encodeSimple$("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "new-transaction",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "409", "429", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Transaction>()
            .json(201, components.Transaction$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(409, errors.Error409DuplicateRecord$inboundSchema, { err: true })
            .json(429, errors.Error429TooManyRequests$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get transaction
     *
     * @remarks
     * Get information about a transaction.
     */
    async getTransaction(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        const input$: operations.GetTransactionRequest = {
            transactionId: transactionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-transaction",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Transaction>()
            .json(200, components.Transaction$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List actions for transaction
     *
     * @remarks
     * Gets actions for a given transaction.
     */
    async getTransactionActions(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Actions> {
        const input$: operations.GetTransactionActionsRequest = {
            transactionId: transactionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTransactionActionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/actions")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-transaction-actions",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Actions>()
            .json(200, components.Actions$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Capture transaction
     *
     * @remarks
     * Captures a previously authorized transaction.
     */
    async captureTransaction(
        transactionId: string,
        transactionCaptureRequest?: components.TransactionCaptureRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        const input$: operations.CaptureTransactionRequest = {
            transactionId: transactionId,
            transactionCaptureRequest: transactionCaptureRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CaptureTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.TransactionCaptureRequest, { explode: true });

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/capture")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "capture-transaction",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Transaction>()
            .json(200, components.Transaction$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List events for transaction
     *
     * @remarks
     * Get a list of events related to processing a transaction.
     */
    async getTransactionEvents(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.TransactionHistoryEvents> {
        const input$: operations.GetTransactionEventsRequest = {
            transactionId: transactionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTransactionEventsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/events")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-transaction-events",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.TransactionHistoryEvents>()
            .json(200, components.TransactionHistoryEvents$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List refunds
     *
     * @remarks
     * Lists all refunds associated with a certain transaction.
     */
    async listTransactionRefunds(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Refunds> {
        const input$: operations.ListTransactionRefundsRequest = {
            transactionId: transactionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListTransactionRefundsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/refunds")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "list-transaction-refunds",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Refunds>()
            .json(200, components.Refunds$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Refund transaction
     *
     * @remarks
     * Refunds a transaction, fully or partially.
     *
     * If the transaction was not yet successfully captured, the
     * refund will not be processed. Authorized transactions can be
     * voided instead.
     */
    async newRefund(
        transactionId: string,
        transactionRefundRequest?: components.TransactionRefundRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Refund> {
        const input$: operations.NewRefundRequest = {
            transactionId: transactionId,
            transactionRefundRequest: transactionRefundRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.NewRefundRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.TransactionRefundRequest, { explode: true });

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/refunds")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "new-refund",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Refund>()
            .json(201, components.Refund$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Refund all instruments in a transaction
     *
     * @remarks
     * Refunds a transaction fully across all instruments.
     */
    async refundAll(
        transactionId: string,
        transactionRefundAllRequest?: components.TransactionRefundAllRequest | undefined,
        options?: RequestOptions
    ): Promise<components.Refunds> {
        const input$: operations.RefundAllRequest = {
            transactionId: transactionId,
            transactionRefundAllRequest: transactionRefundAllRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RefundAllRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.TransactionRefundAllRequest, { explode: true });

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/refunds/all")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "refund-all",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Refunds>()
            .json(201, components.Refunds$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get refund
     *
     * @remarks
     * Gets information about a refund associated with a certain transaction.
     */
    async getRefund(
        transactionId: string,
        refundId: string,
        options?: RequestOptions
    ): Promise<components.Refund> {
        const input$: operations.GetRefundRequest = {
            transactionId: transactionId,
            refundId: refundId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetRefundRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            refund_id: encodeSimple$("refund_id", payload$.refund_id, {
                explode: false,
                charEncoding: "percent",
            }),
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/transactions/{transaction_id}/refunds/{refund_id}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-refund",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Refund>()
            .json(200, components.Refund$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get refund
     *
     * @remarks
     * Gets information about a refund.
     */
    async getSingleRefund(refundId: string, options?: RequestOptions): Promise<components.Refund> {
        const input$: operations.GetSingleRefundRequest = {
            refundId: refundId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSingleRefundRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            refund_id: encodeSimple$("refund_id", payload$.refund_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/refunds/{refund_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-single-refund",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Refund>()
            .json(200, components.Refund$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get transaction summary
     *
     * @remarks
     * Gets summary for a given transaction.
     */
    async getTransactionSummary(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.TransactionStatusSummary> {
        const input$: operations.GetTransactionSummaryRequest = {
            transactionId: transactionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTransactionSummaryRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/summary")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "get-transaction-summary",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.TransactionStatusSummary>()
            .json(200, components.TransactionStatusSummary$inboundSchema)
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Void transaction
     *
     * @remarks
     * Voids a transaction.
     *
     * If the transaction was not yet successfully authorized, or was already
     * captured, the void will not be processed. Captured transactions can be
     * refunded instead.
     *
     * Voiding zero-amount authorized transactions is not supported.
     *
     * Once voided, the status of the transaction will be either `authorization_voided`,
     * `authorization_void_pending`, or if the void fails the original status will remain.
     */
    async voidTransaction(
        transactionId: string,
        options?: RequestOptions
    ): Promise<components.Transaction> {
        const input$: operations.VoidTransactionRequest = {
            transactionId: transactionId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.VoidTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            transaction_id: encodeSimple$("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/transactions/{transaction_id}/void")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "void-transaction",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Transaction>()
            .json(200, components.Transaction$inboundSchema)
            .json(400, errors.Error400BadRequest$inboundSchema, { err: true })
            .json(401, errors.Error401Unauthorized$inboundSchema, { err: true })
            .json(404, errors.Error404NotFound$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
