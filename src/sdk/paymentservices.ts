/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentServicesCreatePaymentServiceSession } from "../funcs/paymentServicesCreatePaymentServiceSession.js";
import { paymentServicesDeletePaymentService } from "../funcs/paymentServicesDeletePaymentService.js";
import { paymentServicesGetPaymentService } from "../funcs/paymentServicesGetPaymentService.js";
import { paymentServicesListPaymentServices } from "../funcs/paymentServicesListPaymentServices.js";
import { paymentServicesNewPaymentService } from "../funcs/paymentServicesNewPaymentService.js";
import { paymentServicesUpdatePaymentService } from "../funcs/paymentServicesUpdatePaymentService.js";
import { paymentServicesVerifyPaymentService } from "../funcs/paymentServicesVerifyPaymentService.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaymentServices extends ClientSDK {
    /**
     * List payment services
     *
     * @remarks
     * Lists the currently configured and activated payment services.
     */
    async listPaymentServices(
        limit?: number | undefined,
        cursor?: string | undefined,
        method?: operations.Method | undefined,
        deleted?: boolean | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServices> {
        return unwrapAsync(
            paymentServicesListPaymentServices(this, limit, cursor, method, deleted, options)
        );
    }

    /**
     * New payment service
     *
     * @remarks
     * Adds a new payment service by providing a custom name and a value for each of the required fields.
     */
    async newPaymentService(
        request?: components.PaymentServiceRequest | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentService> {
        return unwrapAsync(paymentServicesNewPaymentService(this, request, options));
    }

    /**
     * Get payment service
     *
     * @remarks
     * Retrieves the details of a single configured payment service.
     */
    async getPaymentService(
        paymentServiceId: string,
        options?: RequestOptions
    ): Promise<components.PaymentService> {
        return unwrapAsync(paymentServicesGetPaymentService(this, paymentServiceId, options));
    }

    /**
     * Update payment service
     *
     * @remarks
     * Updates an existing payment service. Allows all fields to be changed except for the service ID.
     */
    async updatePaymentService(
        paymentServiceId: string,
        paymentServiceUpdate?: components.PaymentServiceUpdate | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentService> {
        return unwrapAsync(
            paymentServicesUpdatePaymentService(
                this,
                paymentServiceId,
                paymentServiceUpdate,
                options
            )
        );
    }

    /**
     * Delete payment service
     *
     * @remarks
     * Deletes a specific active payment service.
     */
    async deletePaymentService(paymentServiceId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(paymentServicesDeletePaymentService(this, paymentServiceId, options));
    }

    /**
     * Create a session for a payment service by ID
     *
     * @remarks
     * Creates a session for a payment service. This endpoint directly
     * passes the request through to the relevant payment service for processing,
     * and so the schema will differ based on the service used.
     *
     *
     * If the downstream service returns an error, this API will return a successful response
     * with the status code in the response.
     */
    async createPaymentServiceSession(
        paymentServiceId: string,
        requestBody?: { [k: string]: any } | undefined,
        options?: RequestOptions
    ): Promise<components.PaymentServiceSession> {
        return unwrapAsync(
            paymentServicesCreatePaymentServiceSession(this, paymentServiceId, requestBody, options)
        );
    }

    /**
     * Verify payment service credentials
     *
     * @remarks
     * Verifies a set of credentials against a payment service.
     */
    async verifyPaymentService(
        request?: components.PaymentServiceVerify | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(paymentServicesVerifyPaymentService(this, request, options));
    }
}
