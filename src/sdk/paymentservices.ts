/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentServicesCreate } from "../funcs/paymentServicesCreate.js";
import { paymentServicesDelete } from "../funcs/paymentServicesDelete.js";
import { paymentServicesGet } from "../funcs/paymentServicesGet.js";
import { paymentServicesList } from "../funcs/paymentServicesList.js";
import { paymentServicesSession } from "../funcs/paymentServicesSession.js";
import { paymentServicesUpdate } from "../funcs/paymentServicesUpdate.js";
import { paymentServicesVerify } from "../funcs/paymentServicesVerify.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class PaymentServices extends ClientSDK {
  /**
   * List payment services
   *
   * @remarks
   * List the configured payment services.
   */
  async list(
    request?: operations.ListPaymentServicesRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.ListPaymentServicesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(paymentServicesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a configured payment service
   *
   * @remarks
   * Updates the configuration of a payment service.
   */
  async create(
    paymentServiceCreate: components.PaymentServiceCreate,
    applicationName?: string | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.PaymentService> {
    return unwrapAsync(paymentServicesCreate(
      this,
      paymentServiceCreate,
      applicationName,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Get payment service
   *
   * @remarks
   * Get the details of a configured payment service.
   */
  async get(
    paymentServiceId: string,
    applicationName?: string | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.PaymentService> {
    return unwrapAsync(paymentServicesGet(
      this,
      paymentServiceId,
      applicationName,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Configure a payment service
   *
   * @remarks
   * Configures a new payment service for use by merchants.
   */
  async update(
    paymentServiceUpdate: components.PaymentServiceUpdate,
    paymentServiceId: string,
    applicationName?: string | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.PaymentService> {
    return unwrapAsync(paymentServicesUpdate(
      this,
      paymentServiceUpdate,
      paymentServiceId,
      applicationName,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Delete a configured payment service
   *
   * @remarks
   * Deletes all the configuration of a payment service.
   */
  async delete(
    paymentServiceId: string,
    applicationName?: string | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(paymentServicesDelete(
      this,
      paymentServiceId,
      applicationName,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Verify payment service credentials
   *
   * @remarks
   * Verify the credentials of a configured payment service
   */
  async verify(
    verifyCredentials: components.VerifyCredentials,
    applicationName?: string | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(paymentServicesVerify(
      this,
      verifyCredentials,
      applicationName,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Create a session for apayment service definition
   *
   * @remarks
   * Creates a session for a payment service that supports sessions.
   */
  async session(
    requestBody: { [k: string]: any },
    paymentServiceId: string,
    applicationName?: string | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.CreateSession> {
    return unwrapAsync(paymentServicesSession(
      this,
      requestBody,
      paymentServiceId,
      applicationName,
      merchantAccountId,
      options,
    ));
  }
}
