/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";

export class AccountUpdater extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create Account Updater job
     *
     * @remarks
     * Creates an Account Updater job.
     *
     * A request is submitted to a third-party service, containing inquiries for a given
     * set of payment methods. The job is not processed right away, but once created, it
     * will store new card details automatically, if there are, when results are ready.
     *
     * A payment method is considered for the job if the following conditions are met:
     * * It exists.
     * * It's in a valid state: `status` is either `succeeded` or `processing`.
     * * It corresponds to a card: `method` is `card`.
     * * Its scheme is supported: `scheme` is `amex`, `discover`, `mastercard` or `visa`.
     * * It doesn't have an in-progress inquiry already.
     *
     * The endpoint works in a best-efforts basis and it doesn't return any error when a payment
     * method doesn't qualify for an inquiry. To determine what payment methods were considered
     * for the job, an `inquiries` field, returned in the response body, contains the submitted
     * inquiries. If none of the payment methods qualified for an inquiry, the job is not created
     * and a `204 No Content` status code is returned.
     */
    async newAccountUpdaterJob(
        request?: components.AccountUpdaterJobCreate | undefined,
        options?: RequestOptions
    ): Promise<components.AccountUpdaterJob | undefined> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.AccountUpdaterJobCreate$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/account-updater/jobs")();

        const query$ = "";

        let security$;
        if (typeof this.options$.bearerAuth === "function") {
            security$ = { bearerAuth: await this.options$.bearerAuth() };
        } else if (this.options$.bearerAuth) {
            security$ = { bearerAuth: this.options$.bearerAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "new-account-updater-job",
            oAuth2Scopes: [],
            securitySource: this.options$.bearerAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.AccountUpdaterJob | undefined>()
            .json(201, components.AccountUpdaterJob$.inboundSchema.optional())
            .void(204, components.AccountUpdaterJob$.inboundSchema.optional())
            .json(400, errors.Error400BadRequest$, { err: true })
            .json(401, errors.Error401Unauthorized$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
