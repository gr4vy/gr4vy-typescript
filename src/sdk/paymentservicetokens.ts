/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentMethodsPaymentServiceTokensCreate } from "../funcs/paymentMethodsPaymentServiceTokensCreate.js";
import { paymentMethodsPaymentServiceTokensDelete } from "../funcs/paymentMethodsPaymentServiceTokensDelete.js";
import { paymentMethodsPaymentServiceTokensList } from "../funcs/paymentMethodsPaymentServiceTokensList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaymentServiceTokens extends ClientSDK {
  /**
   * List payment service tokens
   *
   * @remarks
   * List all gateway tokens stored for a payment method.
   */
  async list(
    paymentMethodId: string,
    paymentServiceId?: string | null | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.CollectionNoCursorPaymentServiceToken> {
    return unwrapAsync(paymentMethodsPaymentServiceTokensList(
      this,
      paymentMethodId,
      paymentServiceId,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Create payment service token
   *
   * @remarks
   * Create a gateway tokens for a payment method.
   */
  async create(
    paymentServiceTokenCreate: components.PaymentServiceTokenCreate,
    paymentMethodId: string,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.PaymentServiceToken> {
    return unwrapAsync(paymentMethodsPaymentServiceTokensCreate(
      this,
      paymentServiceTokenCreate,
      paymentMethodId,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Delete payment service token
   *
   * @remarks
   * Delete a gateway tokens for a payment method.
   */
  async delete(
    paymentMethodId: string,
    paymentServiceTokenId: string,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(paymentMethodsPaymentServiceTokensDelete(
      this,
      paymentMethodId,
      paymentServiceTokenId,
      merchantAccountId,
      options,
    ));
  }
}
