/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { checkoutSessionsDeleteCheckoutSession } from "../funcs/checkoutSessionsDeleteCheckoutSession.js";
import { checkoutSessionsGetCheckoutSession } from "../funcs/checkoutSessionsGetCheckoutSession.js";
import { checkoutSessionsNewCheckoutSession } from "../funcs/checkoutSessionsNewCheckoutSession.js";
import { checkoutSessionsUpdateCheckoutSession } from "../funcs/checkoutSessionsUpdateCheckoutSession.js";
import { checkoutSessionsUpdateCheckoutSessionFields } from "../funcs/checkoutSessionsUpdateCheckoutSessionFields.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CheckoutSessions extends ClientSDK {
    /**
     * New checkout session
     *
     * @remarks
     * Creates a new Checkout Session.
     */
    async newCheckoutSession(
        request?: components.CheckoutSessionCreateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.CheckoutSession> {
        return unwrapAsync(checkoutSessionsNewCheckoutSession(this, request, options));
    }

    /**
     * Get checkout session
     *
     * @remarks
     * Gets details about a current Checkout Session.
     */
    async getCheckoutSession(
        checkoutSessionId: string,
        options?: RequestOptions
    ): Promise<components.CheckoutSession> {
        return unwrapAsync(checkoutSessionsGetCheckoutSession(this, checkoutSessionId, options));
    }

    /**
     * Delete checkout session
     *
     * @remarks
     * Deletes a Checkout Session.
     */
    async deleteCheckoutSession(
        checkoutSessionId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(checkoutSessionsDeleteCheckoutSession(this, checkoutSessionId, options));
    }

    /**
     * Update checkout session
     *
     * @remarks
     * Updates a Checkout Session.
     */
    async updateCheckoutSession(
        checkoutSessionId: string,
        checkoutSessionUpdateRequest?: components.CheckoutSessionUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.CheckoutSession> {
        return unwrapAsync(
            checkoutSessionsUpdateCheckoutSession(
                this,
                checkoutSessionId,
                checkoutSessionUpdateRequest,
                options
            )
        );
    }

    /**
     * Update fields for checkout session
     *
     * @remarks
     * Updates the Secure Fields of the Checkout Session.
     */
    async updateCheckoutSessionFields(
        checkoutSessionId: string,
        checkoutSessionSecureFieldsUpdate?:
            | components.CheckoutSessionSecureFieldsUpdate
            | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            checkoutSessionsUpdateCheckoutSessionFields(
                this,
                checkoutSessionId,
                checkoutSessionSecureFieldsUpdate,
                options
            )
        );
    }
}
