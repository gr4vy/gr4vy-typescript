/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { checkoutSessionsCreate } from "../funcs/checkoutSessionsCreate.js";
import { checkoutSessionsDelete } from "../funcs/checkoutSessionsDelete.js";
import { checkoutSessionsGet } from "../funcs/checkoutSessionsGet.js";
import { checkoutSessionsUpdate } from "../funcs/checkoutSessionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CheckoutSessions extends ClientSDK {
  /**
   * Create checkout session
   *
   * @remarks
   * Create a new checkout session.
   */
  async create(
    checkoutSessionCreate?: components.CheckoutSessionCreate | undefined,
    timeoutInSeconds?: number | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.CheckoutSession> {
    return unwrapAsync(checkoutSessionsCreate(
      this,
      checkoutSessionCreate,
      timeoutInSeconds,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Update checkout session
   *
   * @remarks
   * Update the information stored on a checkout session.
   */
  async update(
    checkoutSessionCreate: components.CheckoutSessionCreate,
    sessionId: string,
    timeoutInSeconds?: number | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.CheckoutSession> {
    return unwrapAsync(checkoutSessionsUpdate(
      this,
      checkoutSessionCreate,
      sessionId,
      timeoutInSeconds,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Get checkout session
   *
   * @remarks
   * Retrieve the information stored on a checkout session.
   */
  async get(
    sessionId: string,
    timeoutInSeconds?: number | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<components.CheckoutSession> {
    return unwrapAsync(checkoutSessionsGet(
      this,
      sessionId,
      timeoutInSeconds,
      merchantAccountId,
      options,
    ));
  }

  /**
   * Delete checkout session
   *
   * @remarks
   * Deleta a checkout session and all of its (PCI) data.
   */
  async delete(
    sessionId: string,
    timeoutInSeconds?: number | undefined,
    merchantAccountId?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(checkoutSessionsDelete(
      this,
      sessionId,
      timeoutInSeconds,
      merchantAccountId,
      options,
    ));
  }
}
