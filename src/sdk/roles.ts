/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rolesDeleteRoleAssignment } from "../funcs/rolesDeleteRoleAssignment.js";
import { rolesListRoleAssignments } from "../funcs/rolesListRoleAssignments.js";
import { rolesListRoles } from "../funcs/rolesListRoles.js";
import { rolesNewRoleAssignment } from "../funcs/rolesNewRoleAssignment.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Roles extends ClientSDK {
    /**
     * List roles
     *
     * @remarks
     * Returns a list of roles.
     */
    async listRoles(
        limit?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Roles> {
        return unwrapAsync(rolesListRoles(this, limit, cursor, options));
    }

    /**
     * List role assignments
     *
     * @remarks
     * Returns a list of role assignments.
     *
     * Role assignments can be filtered for a given role by providing
     * the `role_id` search parameter, or for a given assignee by providing
     * both the `assignee_type` and `assignee_id` parameters.
     */
    async listRoleAssignments(
        request: operations.ListRoleAssignmentsRequest,
        options?: RequestOptions
    ): Promise<components.RoleAssignments> {
        return unwrapAsync(rolesListRoleAssignments(this, request, options));
    }

    /**
     * New role assignment
     *
     * @remarks
     * Adds a role assignment, in effect applying a role to the given assignee.
     *
     */
    async newRoleAssignment(
        request?: components.RoleAssignmentRequest | undefined,
        options?: RequestOptions
    ): Promise<components.RoleAssignment> {
        return unwrapAsync(rolesNewRoleAssignment(this, request, options));
    }

    /**
     * Delete role assignment
     *
     * @remarks
     * Deletes a role assignment. The associated assignee will no longer be
     * assigned the role.
     */
    async deleteRoleAssignment(roleAssignmentId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(rolesDeleteRoleAssignment(this, roleAssignmentId, options));
    }
}
