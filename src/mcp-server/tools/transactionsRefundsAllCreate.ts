/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { transactionsRefundsAllCreate } from "../../funcs/transactionsRefundsAllCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  transactionId: z.string(),
  transactionRefundAllCreate: z.nullable(
    components.TransactionRefundAllCreate$inboundSchema,
  ).optional(),
  merchantAccountId: z.nullable(z.string()).optional(),
};

export const tool$transactionsRefundsAllCreate: ToolDefinition<typeof args> = {
  name: "transactions-refunds-all-create",
  description: `Create batch transaction refund

Create a refund for all instruments on a transaction.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await transactionsRefundsAllCreate(
      client,
      args.transactionId,
      args.transactionRefundAllCreate,
      args.merchantAccountId,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
