/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { paymentServiceDefinitionsSession } from "../../funcs/paymentServiceDefinitionsSession.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  requestBody: z.record(z.any()),
  paymentServiceDefinitionId: z.string(),
  applicationName: z.string().default("core-api"),
};

export const tool$paymentServiceDefinitionsSession: ToolDefinition<
  typeof args
> = {
  name: "payment-service-definitions-session",
  description: `Create a session for apayment service definition

Creates a session for a payment service that supports sessions.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await paymentServiceDefinitionsSession(
      client,
      args.requestBody,
      args.paymentServiceDefinitionId,
      args.applicationName,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
