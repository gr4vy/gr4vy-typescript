/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { transactionsRefundsGet } from "../../funcs/transactionsRefundsGet.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  transactionId: z.string(),
  refundId: z.string(),
  xGr4vyMerchantAccountId: z.nullable(z.string()).optional(),
};

export const tool$transactionsRefundsGet: ToolDefinition<typeof args> = {
  name: "transactions-refunds-get",
  description: `Get transaction refund

Fetch refund for a transaction.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await transactionsRefundsGet(
      client,
      args.transactionId,
      args.refundId,
      args.xGr4vyMerchantAccountId,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
