/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { payoutsCreate } from "../../funcs/payoutsCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  payoutCreate: components.PayoutCreate$inboundSchema,
  timeoutInSeconds: z.number().default(1),
};

export const tool$payoutsCreate: ToolDefinition<typeof args> = {
  name: "payouts-create",
  description: `Create a payout.

Creates a new payout.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await payoutsCreate(
      client,
      args.payoutCreate,
      args.timeoutInSeconds,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
