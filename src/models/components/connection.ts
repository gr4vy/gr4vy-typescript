/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConnectionDefinition, ConnectionDefinition$ } from "./connectiondefinition";
import * as z from "zod";

/**
 * A configured connection.
 */
export type Connection = {
    /**
     * The ID of the connection.
     */
    id?: string | undefined;
    /**
     * `connection`.
     */
    type?: string | undefined;
    /**
     * The name of this connection.
     */
    name?: string | undefined;
    /**
     * Whether this connection is currently in use. Connections can
     *
     * @remarks
     * be deactivated to allow for them to be kept around and
     * re-activated at a later date.
     */
    active?: boolean | undefined;
    /**
     * A connection that can be configured.
     */
    definition?: ConnectionDefinition | undefined;
};

/** @internal */
export namespace Connection$ {
    export type Inbound = {
        id?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        active?: boolean | undefined;
        definition?: ConnectionDefinition$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Connection, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("connection"),
            name: z.string().optional(),
            active: z.boolean().optional(),
            definition: ConnectionDefinition$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.definition === undefined ? null : { definition: v.definition }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: string;
        name?: string | undefined;
        active?: boolean | undefined;
        definition?: ConnectionDefinition$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Connection> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("connection"),
            name: z.string().optional(),
            active: z.boolean().optional(),
            definition: ConnectionDefinition$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.definition === undefined ? null : { definition: v.definition }),
            };
        });
}
