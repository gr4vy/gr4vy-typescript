/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCardCountryConditionName {
    CardCountry = "card_country",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowCardCountryConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Card country condition with a name, operator, and value.
 */
export type FlowCardCountryCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCardCountryConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowCardCountryConditionOperator;
    /**
     * Countries to compare the card originating country to
     *
     * @remarks
     * in `ISO-3166` 2 character format.
     */
    value: Array<string>;
};

/** @internal */
export const FlowCardCountryConditionName$: z.ZodNativeEnum<typeof FlowCardCountryConditionName> =
    z.nativeEnum(FlowCardCountryConditionName);

/** @internal */
export const FlowCardCountryConditionOperator$: z.ZodNativeEnum<
    typeof FlowCardCountryConditionOperator
> = z.nativeEnum(FlowCardCountryConditionOperator);

/** @internal */
export namespace FlowCardCountryCondition$ {
    export type Inbound = {
        name: FlowCardCountryConditionName;
        operator: FlowCardCountryConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowCardCountryCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowCardCountryConditionName$,
            operator: FlowCardCountryConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowCardCountryConditionName;
        operator: FlowCardCountryConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCardCountryCondition> = z
        .object({
            name: FlowCardCountryConditionName$,
            operator: FlowCardCountryConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
