/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of card, one of `credit`, `debit` or `prepaid`.
 */
export enum CardType {
    Credit = "credit",
    Debit = "debit",
    Prepaid = "prepaid",
}

/**
 * A credit or debit card payment method.
 */
export type PaymentMethodDetailsCard = {
    /**
     * The type of card, one of `credit`, `debit` or `prepaid`.
     */
    cardType?: CardType | undefined;
    /**
     * The first 6 digits of the full card number (the BIN).
     */
    bin?: string | undefined;
};

/** @internal */
export namespace CardType$ {
    export const inboundSchema = z.nativeEnum(CardType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentMethodDetailsCard$ {
    export const inboundSchema: z.ZodType<PaymentMethodDetailsCard, z.ZodTypeDef, unknown> = z
        .object({
            card_type: CardType$.inboundSchema.optional(),
            bin: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                card_type: "cardType",
            });
        });

    export type Outbound = {
        card_type?: string | undefined;
        bin?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodDetailsCard> = z
        .object({
            cardType: CardType$.outboundSchema.optional(),
            bin: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                cardType: "card_type",
            });
        });
}
