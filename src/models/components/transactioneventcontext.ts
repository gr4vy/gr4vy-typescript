/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Base model with JSON encoders.
 */
export type TransactionEventContext = {
    transactionId?: any | undefined;
    createdAt?: any | undefined;
};

/** @internal */
export const TransactionEventContext$inboundSchema: z.ZodType<
    TransactionEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        transaction_id: z.any().optional(),
        created_at: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            transaction_id: "transactionId",
            created_at: "createdAt",
        });
    });

/** @internal */
export type TransactionEventContext$Outbound = {
    transaction_id?: any | undefined;
    created_at?: any | undefined;
};

/** @internal */
export const TransactionEventContext$outboundSchema: z.ZodType<
    TransactionEventContext$Outbound,
    z.ZodTypeDef,
    TransactionEventContext
> = z
    .object({
        transactionId: z.any().optional(),
        createdAt: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            transactionId: "transaction_id",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEventContext$ {
    /** @deprecated use `TransactionEventContext$inboundSchema` instead. */
    export const inboundSchema = TransactionEventContext$inboundSchema;
    /** @deprecated use `TransactionEventContext$outboundSchema` instead. */
    export const outboundSchema = TransactionEventContext$outboundSchema;
    /** @deprecated use `TransactionEventContext$Outbound` instead. */
    export type Outbound = TransactionEventContext$Outbound;
}
