/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardType,
  CardType$inboundSchema,
  CardType$outboundSchema,
} from "./cardtype.js";

export type CheckoutSessionPaymentMethodDetails = {
  /**
   * The first 6 digit of the card.
   */
  bin?: string | null | undefined;
  /**
   * The country of the card issuer.
   */
  cardCountry?: string | null | undefined;
  /**
   * The payment scheme of the card.
   */
  cardType?: CardType | null | undefined;
  /**
   * The card issuer.
   */
  cardIssuerName?: string | null | undefined;
};

/** @internal */
export const CheckoutSessionPaymentMethodDetails$inboundSchema: z.ZodType<
  CheckoutSessionPaymentMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.nullable(z.string()).optional(),
  card_country: z.nullable(z.string()).optional(),
  card_type: z.nullable(CardType$inboundSchema).optional(),
  card_issuer_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "card_country": "cardCountry",
    "card_type": "cardType",
    "card_issuer_name": "cardIssuerName",
  });
});

/** @internal */
export type CheckoutSessionPaymentMethodDetails$Outbound = {
  bin?: string | null | undefined;
  card_country?: string | null | undefined;
  card_type?: string | null | undefined;
  card_issuer_name?: string | null | undefined;
};

/** @internal */
export const CheckoutSessionPaymentMethodDetails$outboundSchema: z.ZodType<
  CheckoutSessionPaymentMethodDetails$Outbound,
  z.ZodTypeDef,
  CheckoutSessionPaymentMethodDetails
> = z.object({
  bin: z.nullable(z.string()).optional(),
  cardCountry: z.nullable(z.string()).optional(),
  cardType: z.nullable(CardType$outboundSchema).optional(),
  cardIssuerName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    cardCountry: "card_country",
    cardType: "card_type",
    cardIssuerName: "card_issuer_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionPaymentMethodDetails$ {
  /** @deprecated use `CheckoutSessionPaymentMethodDetails$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutSessionPaymentMethodDetails$inboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethodDetails$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutSessionPaymentMethodDetails$outboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethodDetails$Outbound` instead. */
  export type Outbound = CheckoutSessionPaymentMethodDetails$Outbound;
}

export function checkoutSessionPaymentMethodDetailsToJSON(
  checkoutSessionPaymentMethodDetails: CheckoutSessionPaymentMethodDetails,
): string {
  return JSON.stringify(
    CheckoutSessionPaymentMethodDetails$outboundSchema.parse(
      checkoutSessionPaymentMethodDetails,
    ),
  );
}

export function checkoutSessionPaymentMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionPaymentMethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckoutSessionPaymentMethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionPaymentMethodDetails' from JSON`,
  );
}
