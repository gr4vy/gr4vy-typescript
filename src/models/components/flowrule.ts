/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    FlowAmountCondition,
    FlowAmountCondition$inboundSchema,
    FlowAmountCondition$Outbound,
    FlowAmountCondition$outboundSchema,
} from "./flowamountcondition.js";
import {
    FlowAmountRangeCondition,
    FlowAmountRangeCondition$inboundSchema,
    FlowAmountRangeCondition$Outbound,
    FlowAmountRangeCondition$outboundSchema,
} from "./flowamountrangecondition.js";
import {
    FlowAmountZeroCondition,
    FlowAmountZeroCondition$inboundSchema,
    FlowAmountZeroCondition$Outbound,
    FlowAmountZeroCondition$outboundSchema,
} from "./flowamountzerocondition.js";
import {
    FlowAntiFraudDecisionCondition,
    FlowAntiFraudDecisionCondition$inboundSchema,
    FlowAntiFraudDecisionCondition$Outbound,
    FlowAntiFraudDecisionCondition$outboundSchema,
} from "./flowantifrauddecisioncondition.js";
import {
    FlowBINRangeCondition,
    FlowBINRangeCondition$inboundSchema,
    FlowBINRangeCondition$Outbound,
    FlowBINRangeCondition$outboundSchema,
} from "./flowbinrangecondition.js";
import {
    FlowBrowserLanguageCondition,
    FlowBrowserLanguageCondition$inboundSchema,
    FlowBrowserLanguageCondition$Outbound,
    FlowBrowserLanguageCondition$outboundSchema,
} from "./flowbrowserlanguagecondition.js";
import {
    FlowCardCountryCondition,
    FlowCardCountryCondition$inboundSchema,
    FlowCardCountryCondition$Outbound,
    FlowCardCountryCondition$outboundSchema,
} from "./flowcardcountrycondition.js";
import {
    FlowCardSchemeCondition,
    FlowCardSchemeCondition$inboundSchema,
    FlowCardSchemeCondition$Outbound,
    FlowCardSchemeCondition$outboundSchema,
} from "./flowcardschemecondition.js";
import {
    FlowCardSourceCondition,
    FlowCardSourceCondition$inboundSchema,
    FlowCardSourceCondition$Outbound,
    FlowCardSourceCondition$outboundSchema,
} from "./flowcardsourcecondition.js";
import {
    FlowCardTypeCondition,
    FlowCardTypeCondition$inboundSchema,
    FlowCardTypeCondition$Outbound,
    FlowCardTypeCondition$outboundSchema,
} from "./flowcardtypecondition.js";
import {
    FlowCountryCondition,
    FlowCountryCondition$inboundSchema,
    FlowCountryCondition$Outbound,
    FlowCountryCondition$outboundSchema,
} from "./flowcountrycondition.js";
import {
    FlowCurrencyCondition,
    FlowCurrencyCondition$inboundSchema,
    FlowCurrencyCondition$Outbound,
    FlowCurrencyCondition$outboundSchema,
} from "./flowcurrencycondition.js";
import {
    FlowIsSubsequentPaymentCondition,
    FlowIsSubsequentPaymentCondition$inboundSchema,
    FlowIsSubsequentPaymentCondition$Outbound,
    FlowIsSubsequentPaymentCondition$outboundSchema,
} from "./flowissubsequentpaymentcondition.js";
import {
    FlowMerchantInitiatedCondition,
    FlowMerchantInitiatedCondition$inboundSchema,
    FlowMerchantInitiatedCondition$Outbound,
    FlowMerchantInitiatedCondition$outboundSchema,
} from "./flowmerchantinitiatedcondition.js";
import {
    FlowMetadataCondition,
    FlowMetadataCondition$inboundSchema,
    FlowMetadataCondition$Outbound,
    FlowMetadataCondition$outboundSchema,
} from "./flowmetadatacondition.js";
import {
    FlowPaymentMethodCondition,
    FlowPaymentMethodCondition$inboundSchema,
    FlowPaymentMethodCondition$Outbound,
    FlowPaymentMethodCondition$outboundSchema,
} from "./flowpaymentmethodcondition.js";
import {
    FlowPaymentMethodsCondition,
    FlowPaymentMethodsCondition$inboundSchema,
    FlowPaymentMethodsCondition$Outbound,
    FlowPaymentMethodsCondition$outboundSchema,
} from "./flowpaymentmethodscondition.js";
import {
    FlowPaymentSourceCondition,
    FlowPaymentSourceCondition$inboundSchema,
    FlowPaymentSourceCondition$Outbound,
    FlowPaymentSourceCondition$outboundSchema,
} from "./flowpaymentsourcecondition.js";
import {
    FlowProductCategoriesCondition,
    FlowProductCategoriesCondition$inboundSchema,
    FlowProductCategoriesCondition$Outbound,
    FlowProductCategoriesCondition$outboundSchema,
} from "./flowproductcategoriescondition.js";
import {
    FlowProductTypesCondition,
    FlowProductTypesCondition$inboundSchema,
    FlowProductTypesCondition$Outbound,
    FlowProductTypesCondition$outboundSchema,
} from "./flowproducttypescondition.js";
import {
    FlowRuleBooleanOutcome,
    FlowRuleBooleanOutcome$inboundSchema,
    FlowRuleBooleanOutcome$Outbound,
    FlowRuleBooleanOutcome$outboundSchema,
} from "./flowrulebooleanoutcome.js";
import {
    FlowRuleMethodOutcome,
    FlowRuleMethodOutcome$inboundSchema,
    FlowRuleMethodOutcome$Outbound,
    FlowRuleMethodOutcome$outboundSchema,
} from "./flowrulemethodoutcome.js";
import {
    FlowRuleServiceOutcome,
    FlowRuleServiceOutcome$inboundSchema,
    FlowRuleServiceOutcome$Outbound,
    FlowRuleServiceOutcome$outboundSchema,
} from "./flowruleserviceoutcome.js";
import {
    FlowRuleThreeDSecureOutcome,
    FlowRuleThreeDSecureOutcome$inboundSchema,
    FlowRuleThreeDSecureOutcome$Outbound,
    FlowRuleThreeDSecureOutcome$outboundSchema,
} from "./flowrulethreedsecureoutcome.js";
import {
    FlowRuleUUIDsListOutcome,
    FlowRuleUUIDsListOutcome$inboundSchema,
    FlowRuleUUIDsListOutcome$Outbound,
    FlowRuleUUIDsListOutcome$outboundSchema,
} from "./flowruleuuidslistoutcome.js";
import {
    FlowSKUsCondition,
    FlowSKUsCondition$inboundSchema,
    FlowSKUsCondition$Outbound,
    FlowSKUsCondition$outboundSchema,
} from "./flowskuscondition.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `rule`.
 */
export const FlowRuleType = {
    Rule: "rule",
} as const;
/**
 * The type of this resource. Is always `rule`.
 */
export type FlowRuleType = ClosedEnum<typeof FlowRuleType>;

/**
 * The name of the Flow.
 */
export const FlowRuleFlow = {
    Checkout: "checkout",
    CardTransaction: "card-transaction",
    NonCardTransaction: "non-card-transaction",
    RedirectTransaction: "redirect-transaction",
} as const;
/**
 * The name of the Flow.
 */
export type FlowRuleFlow = ClosedEnum<typeof FlowRuleFlow>;

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export const FlowRuleAction = {
    SelectPaymentOptions: "select-payment-options",
    DeclineEarly: "decline-early",
    RouteTransaction: "route-transaction",
    Skip3ds: "skip-3ds",
} as const;
/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export type FlowRuleAction = ClosedEnum<typeof FlowRuleAction>;

export type Conditions =
    | FlowAmountCondition
    | FlowAmountRangeCondition
    | FlowAmountZeroCondition
    | FlowAntiFraudDecisionCondition
    | FlowBINRangeCondition
    | FlowBrowserLanguageCondition
    | FlowCardCountryCondition
    | FlowCardSchemeCondition
    | FlowCardSourceCondition
    | FlowCardTypeCondition
    | FlowCountryCondition
    | FlowCurrencyCondition
    | FlowIsSubsequentPaymentCondition
    | FlowMetadataCondition
    | FlowMerchantInitiatedCondition
    | FlowPaymentMethodCondition
    | FlowPaymentMethodsCondition
    | FlowPaymentSourceCondition
    | FlowProductCategoriesCondition
    | FlowProductTypesCondition
    | FlowSKUsCondition;

export type FlowRuleOutcome =
    | FlowRuleMethodOutcome
    | FlowRuleBooleanOutcome
    | FlowRuleUUIDsListOutcome
    | FlowRuleThreeDSecureOutcome
    | FlowRuleServiceOutcome;

export type FlowRule = {
    /**
     * The type of this resource. Is always `rule`.
     */
    type?: FlowRuleType | undefined;
    /**
     * The unique Gr4vy ID for this rule.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * Description of the flow rule.
     */
    description?: string | null | undefined;
    /**
     * The name of the Flow.
     */
    flow?: FlowRuleFlow | undefined;
    /**
     * Action for the given rule. Actions can only be used in
     *
     * @remarks
     * flows that support them.
     *
     * * The `checkout` flow only supports the
     * `select-payment-options` action.
     * * The `card-transaction` supports the `route-transaction`,
     * `skip-3ds`, and `decline-early` actions.
     * * The `non-card-transaction` flow only supports the
     * `decline-early` action.
     * * The `redirect-transaction` flow only supports
     * the `route-transaction` action.
     *
     */
    action?: FlowRuleAction | undefined;
    /**
     * One or more conditions that apply for this rule. Each condition
     *
     * @remarks
     * needs to match for this rule to go into effect.
     */
    conditions?:
        | Array<
              | FlowAmountCondition
              | FlowAmountRangeCondition
              | FlowAmountZeroCondition
              | FlowAntiFraudDecisionCondition
              | FlowBINRangeCondition
              | FlowBrowserLanguageCondition
              | FlowCardCountryCondition
              | FlowCardSchemeCondition
              | FlowCardSourceCondition
              | FlowCardTypeCondition
              | FlowCountryCondition
              | FlowCurrencyCondition
              | FlowIsSubsequentPaymentCondition
              | FlowMetadataCondition
              | FlowMerchantInitiatedCondition
              | FlowPaymentMethodCondition
              | FlowPaymentMethodsCondition
              | FlowPaymentSourceCondition
              | FlowProductCategoriesCondition
              | FlowProductTypesCondition
              | FlowSKUsCondition
          >
        | undefined;
    outcome?:
        | FlowRuleMethodOutcome
        | FlowRuleBooleanOutcome
        | FlowRuleUUIDsListOutcome
        | FlowRuleThreeDSecureOutcome
        | FlowRuleServiceOutcome
        | undefined;
    /**
     * The position of the rule in the flow.
     */
    position?: number | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const FlowRuleType$inboundSchema: z.ZodNativeEnum<typeof FlowRuleType> =
    z.nativeEnum(FlowRuleType);

/** @internal */
export const FlowRuleType$outboundSchema: z.ZodNativeEnum<typeof FlowRuleType> =
    FlowRuleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleType$ {
    /** @deprecated use `FlowRuleType$inboundSchema` instead. */
    export const inboundSchema = FlowRuleType$inboundSchema;
    /** @deprecated use `FlowRuleType$outboundSchema` instead. */
    export const outboundSchema = FlowRuleType$outboundSchema;
}

/** @internal */
export const FlowRuleFlow$inboundSchema: z.ZodNativeEnum<typeof FlowRuleFlow> =
    z.nativeEnum(FlowRuleFlow);

/** @internal */
export const FlowRuleFlow$outboundSchema: z.ZodNativeEnum<typeof FlowRuleFlow> =
    FlowRuleFlow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleFlow$ {
    /** @deprecated use `FlowRuleFlow$inboundSchema` instead. */
    export const inboundSchema = FlowRuleFlow$inboundSchema;
    /** @deprecated use `FlowRuleFlow$outboundSchema` instead. */
    export const outboundSchema = FlowRuleFlow$outboundSchema;
}

/** @internal */
export const FlowRuleAction$inboundSchema: z.ZodNativeEnum<typeof FlowRuleAction> =
    z.nativeEnum(FlowRuleAction);

/** @internal */
export const FlowRuleAction$outboundSchema: z.ZodNativeEnum<typeof FlowRuleAction> =
    FlowRuleAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleAction$ {
    /** @deprecated use `FlowRuleAction$inboundSchema` instead. */
    export const inboundSchema = FlowRuleAction$inboundSchema;
    /** @deprecated use `FlowRuleAction$outboundSchema` instead. */
    export const outboundSchema = FlowRuleAction$outboundSchema;
}

/** @internal */
export const Conditions$inboundSchema: z.ZodType<Conditions, z.ZodTypeDef, unknown> = z.union([
    FlowAmountCondition$inboundSchema,
    FlowAmountRangeCondition$inboundSchema,
    FlowAmountZeroCondition$inboundSchema,
    FlowAntiFraudDecisionCondition$inboundSchema,
    FlowBINRangeCondition$inboundSchema,
    FlowBrowserLanguageCondition$inboundSchema,
    FlowCardCountryCondition$inboundSchema,
    FlowCardSchemeCondition$inboundSchema,
    FlowCardSourceCondition$inboundSchema,
    FlowCardTypeCondition$inboundSchema,
    FlowCountryCondition$inboundSchema,
    FlowCurrencyCondition$inboundSchema,
    FlowIsSubsequentPaymentCondition$inboundSchema,
    FlowMetadataCondition$inboundSchema,
    FlowMerchantInitiatedCondition$inboundSchema,
    FlowPaymentMethodCondition$inboundSchema,
    FlowPaymentMethodsCondition$inboundSchema,
    FlowPaymentSourceCondition$inboundSchema,
    FlowProductCategoriesCondition$inboundSchema,
    FlowProductTypesCondition$inboundSchema,
    FlowSKUsCondition$inboundSchema,
]);

/** @internal */
export type Conditions$Outbound =
    | FlowAmountCondition$Outbound
    | FlowAmountRangeCondition$Outbound
    | FlowAmountZeroCondition$Outbound
    | FlowAntiFraudDecisionCondition$Outbound
    | FlowBINRangeCondition$Outbound
    | FlowBrowserLanguageCondition$Outbound
    | FlowCardCountryCondition$Outbound
    | FlowCardSchemeCondition$Outbound
    | FlowCardSourceCondition$Outbound
    | FlowCardTypeCondition$Outbound
    | FlowCountryCondition$Outbound
    | FlowCurrencyCondition$Outbound
    | FlowIsSubsequentPaymentCondition$Outbound
    | FlowMetadataCondition$Outbound
    | FlowMerchantInitiatedCondition$Outbound
    | FlowPaymentMethodCondition$Outbound
    | FlowPaymentMethodsCondition$Outbound
    | FlowPaymentSourceCondition$Outbound
    | FlowProductCategoriesCondition$Outbound
    | FlowProductTypesCondition$Outbound
    | FlowSKUsCondition$Outbound;

/** @internal */
export const Conditions$outboundSchema: z.ZodType<Conditions$Outbound, z.ZodTypeDef, Conditions> =
    z.union([
        FlowAmountCondition$outboundSchema,
        FlowAmountRangeCondition$outboundSchema,
        FlowAmountZeroCondition$outboundSchema,
        FlowAntiFraudDecisionCondition$outboundSchema,
        FlowBINRangeCondition$outboundSchema,
        FlowBrowserLanguageCondition$outboundSchema,
        FlowCardCountryCondition$outboundSchema,
        FlowCardSchemeCondition$outboundSchema,
        FlowCardSourceCondition$outboundSchema,
        FlowCardTypeCondition$outboundSchema,
        FlowCountryCondition$outboundSchema,
        FlowCurrencyCondition$outboundSchema,
        FlowIsSubsequentPaymentCondition$outboundSchema,
        FlowMetadataCondition$outboundSchema,
        FlowMerchantInitiatedCondition$outboundSchema,
        FlowPaymentMethodCondition$outboundSchema,
        FlowPaymentMethodsCondition$outboundSchema,
        FlowPaymentSourceCondition$outboundSchema,
        FlowProductCategoriesCondition$outboundSchema,
        FlowProductTypesCondition$outboundSchema,
        FlowSKUsCondition$outboundSchema,
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conditions$ {
    /** @deprecated use `Conditions$inboundSchema` instead. */
    export const inboundSchema = Conditions$inboundSchema;
    /** @deprecated use `Conditions$outboundSchema` instead. */
    export const outboundSchema = Conditions$outboundSchema;
    /** @deprecated use `Conditions$Outbound` instead. */
    export type Outbound = Conditions$Outbound;
}

/** @internal */
export const FlowRuleOutcome$inboundSchema: z.ZodType<FlowRuleOutcome, z.ZodTypeDef, unknown> =
    z.union([
        FlowRuleMethodOutcome$inboundSchema,
        FlowRuleBooleanOutcome$inboundSchema,
        FlowRuleUUIDsListOutcome$inboundSchema,
        FlowRuleThreeDSecureOutcome$inboundSchema,
        FlowRuleServiceOutcome$inboundSchema,
    ]);

/** @internal */
export type FlowRuleOutcome$Outbound =
    | FlowRuleMethodOutcome$Outbound
    | FlowRuleBooleanOutcome$Outbound
    | FlowRuleUUIDsListOutcome$Outbound
    | FlowRuleThreeDSecureOutcome$Outbound
    | FlowRuleServiceOutcome$Outbound;

/** @internal */
export const FlowRuleOutcome$outboundSchema: z.ZodType<
    FlowRuleOutcome$Outbound,
    z.ZodTypeDef,
    FlowRuleOutcome
> = z.union([
    FlowRuleMethodOutcome$outboundSchema,
    FlowRuleBooleanOutcome$outboundSchema,
    FlowRuleUUIDsListOutcome$outboundSchema,
    FlowRuleThreeDSecureOutcome$outboundSchema,
    FlowRuleServiceOutcome$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleOutcome$ {
    /** @deprecated use `FlowRuleOutcome$inboundSchema` instead. */
    export const inboundSchema = FlowRuleOutcome$inboundSchema;
    /** @deprecated use `FlowRuleOutcome$outboundSchema` instead. */
    export const outboundSchema = FlowRuleOutcome$outboundSchema;
    /** @deprecated use `FlowRuleOutcome$Outbound` instead. */
    export type Outbound = FlowRuleOutcome$Outbound;
}

/** @internal */
export const FlowRule$inboundSchema: z.ZodType<FlowRule, z.ZodTypeDef, unknown> = z
    .object({
        type: FlowRuleType$inboundSchema.optional(),
        id: z.string().optional(),
        merchant_account_id: z.string().optional(),
        description: z.nullable(z.string()).optional(),
        flow: FlowRuleFlow$inboundSchema.optional(),
        action: FlowRuleAction$inboundSchema.optional(),
        conditions: z
            .array(
                z.union([
                    FlowAmountCondition$inboundSchema,
                    FlowAmountRangeCondition$inboundSchema,
                    FlowAmountZeroCondition$inboundSchema,
                    FlowAntiFraudDecisionCondition$inboundSchema,
                    FlowBINRangeCondition$inboundSchema,
                    FlowBrowserLanguageCondition$inboundSchema,
                    FlowCardCountryCondition$inboundSchema,
                    FlowCardSchemeCondition$inboundSchema,
                    FlowCardSourceCondition$inboundSchema,
                    FlowCardTypeCondition$inboundSchema,
                    FlowCountryCondition$inboundSchema,
                    FlowCurrencyCondition$inboundSchema,
                    FlowIsSubsequentPaymentCondition$inboundSchema,
                    FlowMetadataCondition$inboundSchema,
                    FlowMerchantInitiatedCondition$inboundSchema,
                    FlowPaymentMethodCondition$inboundSchema,
                    FlowPaymentMethodsCondition$inboundSchema,
                    FlowPaymentSourceCondition$inboundSchema,
                    FlowProductCategoriesCondition$inboundSchema,
                    FlowProductTypesCondition$inboundSchema,
                    FlowSKUsCondition$inboundSchema,
                ])
            )
            .optional(),
        outcome: z
            .union([
                FlowRuleMethodOutcome$inboundSchema,
                FlowRuleBooleanOutcome$inboundSchema,
                FlowRuleUUIDsListOutcome$inboundSchema,
                FlowRuleThreeDSecureOutcome$inboundSchema,
                FlowRuleServiceOutcome$inboundSchema,
            ])
            .optional(),
        position: z.number().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type FlowRule$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    merchant_account_id?: string | undefined;
    description?: string | null | undefined;
    flow?: string | undefined;
    action?: string | undefined;
    conditions?:
        | Array<
              | FlowAmountCondition$Outbound
              | FlowAmountRangeCondition$Outbound
              | FlowAmountZeroCondition$Outbound
              | FlowAntiFraudDecisionCondition$Outbound
              | FlowBINRangeCondition$Outbound
              | FlowBrowserLanguageCondition$Outbound
              | FlowCardCountryCondition$Outbound
              | FlowCardSchemeCondition$Outbound
              | FlowCardSourceCondition$Outbound
              | FlowCardTypeCondition$Outbound
              | FlowCountryCondition$Outbound
              | FlowCurrencyCondition$Outbound
              | FlowIsSubsequentPaymentCondition$Outbound
              | FlowMetadataCondition$Outbound
              | FlowMerchantInitiatedCondition$Outbound
              | FlowPaymentMethodCondition$Outbound
              | FlowPaymentMethodsCondition$Outbound
              | FlowPaymentSourceCondition$Outbound
              | FlowProductCategoriesCondition$Outbound
              | FlowProductTypesCondition$Outbound
              | FlowSKUsCondition$Outbound
          >
        | undefined;
    outcome?:
        | FlowRuleMethodOutcome$Outbound
        | FlowRuleBooleanOutcome$Outbound
        | FlowRuleUUIDsListOutcome$Outbound
        | FlowRuleThreeDSecureOutcome$Outbound
        | FlowRuleServiceOutcome$Outbound
        | undefined;
    position?: number | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const FlowRule$outboundSchema: z.ZodType<FlowRule$Outbound, z.ZodTypeDef, FlowRule> = z
    .object({
        type: FlowRuleType$outboundSchema.optional(),
        id: z.string().optional(),
        merchantAccountId: z.string().optional(),
        description: z.nullable(z.string()).optional(),
        flow: FlowRuleFlow$outboundSchema.optional(),
        action: FlowRuleAction$outboundSchema.optional(),
        conditions: z
            .array(
                z.union([
                    FlowAmountCondition$outboundSchema,
                    FlowAmountRangeCondition$outboundSchema,
                    FlowAmountZeroCondition$outboundSchema,
                    FlowAntiFraudDecisionCondition$outboundSchema,
                    FlowBINRangeCondition$outboundSchema,
                    FlowBrowserLanguageCondition$outboundSchema,
                    FlowCardCountryCondition$outboundSchema,
                    FlowCardSchemeCondition$outboundSchema,
                    FlowCardSourceCondition$outboundSchema,
                    FlowCardTypeCondition$outboundSchema,
                    FlowCountryCondition$outboundSchema,
                    FlowCurrencyCondition$outboundSchema,
                    FlowIsSubsequentPaymentCondition$outboundSchema,
                    FlowMetadataCondition$outboundSchema,
                    FlowMerchantInitiatedCondition$outboundSchema,
                    FlowPaymentMethodCondition$outboundSchema,
                    FlowPaymentMethodsCondition$outboundSchema,
                    FlowPaymentSourceCondition$outboundSchema,
                    FlowProductCategoriesCondition$outboundSchema,
                    FlowProductTypesCondition$outboundSchema,
                    FlowSKUsCondition$outboundSchema,
                ])
            )
            .optional(),
        outcome: z
            .union([
                FlowRuleMethodOutcome$outboundSchema,
                FlowRuleBooleanOutcome$outboundSchema,
                FlowRuleUUIDsListOutcome$outboundSchema,
                FlowRuleThreeDSecureOutcome$outboundSchema,
                FlowRuleServiceOutcome$outboundSchema,
            ])
            .optional(),
        position: z.number().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRule$ {
    /** @deprecated use `FlowRule$inboundSchema` instead. */
    export const inboundSchema = FlowRule$inboundSchema;
    /** @deprecated use `FlowRule$outboundSchema` instead. */
    export const outboundSchema = FlowRule$outboundSchema;
    /** @deprecated use `FlowRule$Outbound` instead. */
    export type Outbound = FlowRule$Outbound;
}
