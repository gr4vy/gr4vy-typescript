/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const ThreeDSecureAuthenticationRequestEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type ThreeDSecureAuthenticationRequestEventType = ClosedEnum<
    typeof ThreeDSecureAuthenticationRequestEventType
>;

/**
 * The name of this resource. Is always `three-d-secure-authentication-request`.
 */
export const ThreeDSecureAuthenticationRequestEventName = {
    ThreeDSecureAuthenticationRequest: "three-d-secure-authentication-request",
} as const;
/**
 * The name of this resource. Is always `three-d-secure-authentication-request`.
 */
export type ThreeDSecureAuthenticationRequestEventName = ClosedEnum<
    typeof ThreeDSecureAuthenticationRequestEventName
>;

/**
 * 3DS authentication context.
 */
export type ThreeDSecureAuthenticationRequestEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The request body sent to the `url`.
     */
    request?: string | undefined;
    /**
     * The response body received from the `url`.
     */
    response?: string | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * The 3DS CAVV value parsed from the `response`.
     */
    cavv?: string | undefined;
    /**
     * The 3DS ECI value parsed from the `response`.
     */
    eci?: string | undefined;
    /**
     * The `transStatus` parsed from the `response`.
     */
    directoryResponse?: string | undefined;
    /**
     * The `dsTransID` parsed from the `response`.
     */
    directoryTransactionId?: string | undefined;
    /**
     * The version of 3DS used.
     */
    version?: string | undefined;
};

/**
 * The result and raw data for a 3DS authorization call.
 */
export type ThreeDSecureAuthenticationRequestEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureAuthenticationRequestEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-authentication-request`.
     */
    name?: ThreeDSecureAuthenticationRequestEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS authentication context.
     */
    context?: ThreeDSecureAuthenticationRequestEventContext | undefined;
};

/** @internal */
export const ThreeDSecureAuthenticationRequestEventType$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureAuthenticationRequestEventType
> = z.nativeEnum(ThreeDSecureAuthenticationRequestEventType);

/** @internal */
export const ThreeDSecureAuthenticationRequestEventType$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureAuthenticationRequestEventType
> = ThreeDSecureAuthenticationRequestEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureAuthenticationRequestEventType$ {
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventType$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureAuthenticationRequestEventType$inboundSchema;
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventType$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureAuthenticationRequestEventType$outboundSchema;
}

/** @internal */
export const ThreeDSecureAuthenticationRequestEventName$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureAuthenticationRequestEventName
> = z.nativeEnum(ThreeDSecureAuthenticationRequestEventName);

/** @internal */
export const ThreeDSecureAuthenticationRequestEventName$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureAuthenticationRequestEventName
> = ThreeDSecureAuthenticationRequestEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureAuthenticationRequestEventName$ {
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventName$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureAuthenticationRequestEventName$inboundSchema;
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventName$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureAuthenticationRequestEventName$outboundSchema;
}

/** @internal */
export const ThreeDSecureAuthenticationRequestEventContext$inboundSchema: z.ZodType<
    ThreeDSecureAuthenticationRequestEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().int().optional(),
        cavv: z.string().optional(),
        eci: z.string().optional(),
        directory_response: z.string().optional(),
        directory_transaction_id: z.string().optional(),
        version: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            response_status_code: "responseStatusCode",
            directory_response: "directoryResponse",
            directory_transaction_id: "directoryTransactionId",
        });
    });

/** @internal */
export type ThreeDSecureAuthenticationRequestEventContext$Outbound = {
    url?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
    cavv?: string | undefined;
    eci?: string | undefined;
    directory_response?: string | undefined;
    directory_transaction_id?: string | undefined;
    version?: string | undefined;
};

/** @internal */
export const ThreeDSecureAuthenticationRequestEventContext$outboundSchema: z.ZodType<
    ThreeDSecureAuthenticationRequestEventContext$Outbound,
    z.ZodTypeDef,
    ThreeDSecureAuthenticationRequestEventContext
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().int().optional(),
        cavv: z.string().optional(),
        eci: z.string().optional(),
        directoryResponse: z.string().optional(),
        directoryTransactionId: z.string().optional(),
        version: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            responseStatusCode: "response_status_code",
            directoryResponse: "directory_response",
            directoryTransactionId: "directory_transaction_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureAuthenticationRequestEventContext$ {
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventContext$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureAuthenticationRequestEventContext$inboundSchema;
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventContext$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureAuthenticationRequestEventContext$outboundSchema;
    /** @deprecated use `ThreeDSecureAuthenticationRequestEventContext$Outbound` instead. */
    export type Outbound = ThreeDSecureAuthenticationRequestEventContext$Outbound;
}

/** @internal */
export const ThreeDSecureAuthenticationRequestEvent$inboundSchema: z.ZodType<
    ThreeDSecureAuthenticationRequestEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: ThreeDSecureAuthenticationRequestEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecureAuthenticationRequestEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => ThreeDSecureAuthenticationRequestEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type ThreeDSecureAuthenticationRequestEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: ThreeDSecureAuthenticationRequestEventContext$Outbound | undefined;
};

/** @internal */
export const ThreeDSecureAuthenticationRequestEvent$outboundSchema: z.ZodType<
    ThreeDSecureAuthenticationRequestEvent$Outbound,
    z.ZodTypeDef,
    ThreeDSecureAuthenticationRequestEvent
> = z
    .object({
        type: ThreeDSecureAuthenticationRequestEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecureAuthenticationRequestEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => ThreeDSecureAuthenticationRequestEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureAuthenticationRequestEvent$ {
    /** @deprecated use `ThreeDSecureAuthenticationRequestEvent$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureAuthenticationRequestEvent$inboundSchema;
    /** @deprecated use `ThreeDSecureAuthenticationRequestEvent$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureAuthenticationRequestEvent$outboundSchema;
    /** @deprecated use `ThreeDSecureAuthenticationRequestEvent$Outbound` instead. */
    export type Outbound = ThreeDSecureAuthenticationRequestEvent$Outbound;
}
