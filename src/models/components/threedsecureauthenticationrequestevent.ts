/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum ThreeDSecureAuthenticationRequestEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `three-d-secure-authentication-request`.
 */
export enum ThreeDSecureAuthenticationRequestEventName {
    ThreeDSecureAuthenticationRequest = "three-d-secure-authentication-request",
}

/**
 * 3DS authentication context.
 */
export type ThreeDSecureAuthenticationRequestEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The request body sent to the `url`.
     */
    request?: string | undefined;
    /**
     * The response body received from the `url`.
     */
    response?: string | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * The 3DS CAVV value parsed from the `response`.
     */
    cavv?: string | undefined;
    /**
     * The 3DS ECI value parsed from the `response`.
     */
    eci?: string | undefined;
    /**
     * The `transStatus` parsed from the `response`.
     */
    directoryResponse?: string | undefined;
    /**
     * The `dsTransID` parsed from the `response`.
     */
    directoryTransactionId?: string | undefined;
    /**
     * The version of 3DS used.
     */
    version?: string | undefined;
};

/**
 * The result and raw data for a 3DS authorization call.
 */
export type ThreeDSecureAuthenticationRequestEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureAuthenticationRequestEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-authentication-request`.
     */
    name?: ThreeDSecureAuthenticationRequestEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS authentication context.
     */
    context?: ThreeDSecureAuthenticationRequestEventContext | undefined;
};

/** @internal */
export const ThreeDSecureAuthenticationRequestEventType$: z.ZodNativeEnum<
    typeof ThreeDSecureAuthenticationRequestEventType
> = z.nativeEnum(ThreeDSecureAuthenticationRequestEventType);

/** @internal */
export const ThreeDSecureAuthenticationRequestEventName$: z.ZodNativeEnum<
    typeof ThreeDSecureAuthenticationRequestEventName
> = z.nativeEnum(ThreeDSecureAuthenticationRequestEventName);

/** @internal */
export namespace ThreeDSecureAuthenticationRequestEventContext$ {
    export type Inbound = {
        url?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
        cavv?: string | undefined;
        eci?: string | undefined;
        directory_response?: string | undefined;
        directory_transaction_id?: string | undefined;
        version?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        ThreeDSecureAuthenticationRequestEventContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            url: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            response_status_code: z.number().int().optional(),
            cavv: z.string().optional(),
            eci: z.string().optional(),
            directory_response: z.string().optional(),
            directory_transaction_id: z.string().optional(),
            version: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.response_status_code === undefined
                    ? null
                    : { responseStatusCode: v.response_status_code }),
                ...(v.cavv === undefined ? null : { cavv: v.cavv }),
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.directory_response === undefined
                    ? null
                    : { directoryResponse: v.directory_response }),
                ...(v.directory_transaction_id === undefined
                    ? null
                    : { directoryTransactionId: v.directory_transaction_id }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
        cavv?: string | undefined;
        eci?: string | undefined;
        directory_response?: string | undefined;
        directory_transaction_id?: string | undefined;
        version?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureAuthenticationRequestEventContext
    > = z
        .object({
            url: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            responseStatusCode: z.number().int().optional(),
            cavv: z.string().optional(),
            eci: z.string().optional(),
            directoryResponse: z.string().optional(),
            directoryTransactionId: z.string().optional(),
            version: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.responseStatusCode === undefined
                    ? null
                    : { response_status_code: v.responseStatusCode }),
                ...(v.cavv === undefined ? null : { cavv: v.cavv }),
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.directoryResponse === undefined
                    ? null
                    : { directory_response: v.directoryResponse }),
                ...(v.directoryTransactionId === undefined
                    ? null
                    : { directory_transaction_id: v.directoryTransactionId }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}

/** @internal */
export namespace ThreeDSecureAuthenticationRequestEvent$ {
    export type Inbound = {
        type?: ThreeDSecureAuthenticationRequestEventType | undefined;
        id?: string | undefined;
        name?: ThreeDSecureAuthenticationRequestEventName | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureAuthenticationRequestEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        ThreeDSecureAuthenticationRequestEvent,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: ThreeDSecureAuthenticationRequestEventType$.optional(),
            id: z.string().optional(),
            name: ThreeDSecureAuthenticationRequestEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => ThreeDSecureAuthenticationRequestEventContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: ThreeDSecureAuthenticationRequestEventType | undefined;
        id?: string | undefined;
        name?: ThreeDSecureAuthenticationRequestEventName | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureAuthenticationRequestEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureAuthenticationRequestEvent
    > = z
        .object({
            type: ThreeDSecureAuthenticationRequestEventType$.optional(),
            id: z.string().optional(),
            name: ThreeDSecureAuthenticationRequestEventName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => ThreeDSecureAuthenticationRequestEventContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
