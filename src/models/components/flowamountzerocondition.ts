/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowAmountZeroConditionName {
    AmountZero = "amount_zero",
}

/**
 * The comparison to make on the transaction `value`.
 */
export enum FlowAmountZeroConditionOperator {
    EqualTo = "equal_to",
}

/**
 * Amount conditions matching a value of 0 in any currency.
 */
export type FlowAmountZeroCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAmountZeroConditionName;
    /**
     * The comparison to make on the transaction `value`.
     */
    operator: FlowAmountZeroConditionOperator;
    /**
     * The value of the transaction must be 0.
     */
    value: number;
};

/** @internal */
export const FlowAmountZeroConditionName$: z.ZodNativeEnum<typeof FlowAmountZeroConditionName> =
    z.nativeEnum(FlowAmountZeroConditionName);

/** @internal */
export const FlowAmountZeroConditionOperator$: z.ZodNativeEnum<
    typeof FlowAmountZeroConditionOperator
> = z.nativeEnum(FlowAmountZeroConditionOperator);

/** @internal */
export namespace FlowAmountZeroCondition$ {
    export type Inbound = {
        name: FlowAmountZeroConditionName;
        operator: FlowAmountZeroConditionOperator;
        value: number;
    };

    export const inboundSchema: z.ZodType<FlowAmountZeroCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowAmountZeroConditionName$,
            operator: FlowAmountZeroConditionOperator$,
            value: z.number(),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowAmountZeroConditionName;
        operator: FlowAmountZeroConditionOperator;
        value: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAmountZeroCondition> = z
        .object({
            name: FlowAmountZeroConditionName$,
            operator: FlowAmountZeroConditionOperator$,
            value: z.number(),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
