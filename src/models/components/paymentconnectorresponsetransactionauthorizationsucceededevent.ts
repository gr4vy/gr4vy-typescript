/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `payment-connector-response-transaction-authorization-succeeded`.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventName {
    PaymentConnectorResponseTransactionAuthorizationSucceeded = "payment-connector-response-transaction-authorization-succeeded",
}

/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_succeeded`.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus {
    AuthorizationSucceeded = "authorization_succeeded",
}

/**
 * The type of instrument used for this transaction.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType {
    Pan = "pan",
    CardToken = "card_token",
    Redirect = "redirect",
    RedirectToken = "redirect_token",
    Googlepay = "googlepay",
    Applepay = "applepay",
    NetworkToken = "network_token",
}

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode {
    NoMatch = "no_match",
    Match = "match",
    PartialMatchAddress = "partial_match_address",
    PartialMatchPostcode = "partial_match_postcode",
    Unavailable = "unavailable",
}

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode {
    NoMatch = "no_match",
    Match = "match",
    Unavailable = "unavailable",
}

/**
 * The card scheme sent to the connector.
 */
export enum PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The new status code for the transaction. This is always
     *
     * @remarks
     * set to `authorization_succeeded`.
     */
    status?: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus | undefined;
    /**
     * The type of instrument used for this transaction.
     */
    instrumentType?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
        | undefined;
    /**
     * This will always be `null` because the transaction succeeded.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    retryRule?: string | null | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a succeeded authorization
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionAuthorizationSucceededEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-authorization-succeeded`.
     */
    name?: PaymentConnectorResponseTransactionAuthorizationSucceededEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionAuthorizationSucceededEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventType$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventType);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventName$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventName);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme);

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$ {
    export type Inbound = {
        payment_service_id?: string | undefined;
        payment_service_display_name?: string | undefined;
        payment_service_definition_id?: string | undefined;
        payment_service_transaction_id?: string | null | undefined;
        status?: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus | undefined;
        instrument_type?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
            | undefined;
        retry_rule?: string | null | undefined;
        raw_response_code?: string | null | undefined;
        raw_response_description?: string | null | undefined;
        avs_response_code?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
            | null
            | undefined;
        cvv_response_code?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
            | null
            | undefined;
        payment_method_scheme?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
            | null
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            payment_service_id: z.string().optional(),
            payment_service_display_name: z.string().optional(),
            payment_service_definition_id: z.string().optional(),
            payment_service_transaction_id: z.nullable(z.string()).optional(),
            status: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$.optional(),
            instrument_type:
                PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$.optional(),
            retry_rule: z.nullable(z.string()).optional(),
            raw_response_code: z.nullable(z.string()).optional(),
            raw_response_description: z.nullable(z.string()).optional(),
            avs_response_code: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$
                )
                .optional(),
            cvv_response_code: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$
                )
                .optional(),
            payment_method_scheme: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.payment_service_id === undefined
                    ? null
                    : { paymentServiceId: v.payment_service_id }),
                ...(v.payment_service_display_name === undefined
                    ? null
                    : { paymentServiceDisplayName: v.payment_service_display_name }),
                ...(v.payment_service_definition_id === undefined
                    ? null
                    : { paymentServiceDefinitionId: v.payment_service_definition_id }),
                ...(v.payment_service_transaction_id === undefined
                    ? null
                    : { paymentServiceTransactionId: v.payment_service_transaction_id }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.instrument_type === undefined ? null : { instrumentType: v.instrument_type }),
                ...(v.retry_rule === undefined ? null : { retryRule: v.retry_rule }),
                ...(v.raw_response_code === undefined
                    ? null
                    : { rawResponseCode: v.raw_response_code }),
                ...(v.raw_response_description === undefined
                    ? null
                    : { rawResponseDescription: v.raw_response_description }),
                ...(v.avs_response_code === undefined
                    ? null
                    : { avsResponseCode: v.avs_response_code }),
                ...(v.cvv_response_code === undefined
                    ? null
                    : { cvvResponseCode: v.cvv_response_code }),
                ...(v.payment_method_scheme === undefined
                    ? null
                    : { paymentMethodScheme: v.payment_method_scheme }),
            };
        });

    export type Outbound = {
        payment_service_id?: string | undefined;
        payment_service_display_name?: string | undefined;
        payment_service_definition_id?: string | undefined;
        payment_service_transaction_id?: string | null | undefined;
        status?: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus | undefined;
        instrument_type?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
            | undefined;
        retry_rule?: string | null | undefined;
        raw_response_code?: string | null | undefined;
        raw_response_description?: string | null | undefined;
        avs_response_code?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
            | null
            | undefined;
        cvv_response_code?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
            | null
            | undefined;
        payment_method_scheme?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
            | null
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext
    > = z
        .object({
            paymentServiceId: z.string().optional(),
            paymentServiceDisplayName: z.string().optional(),
            paymentServiceDefinitionId: z.string().optional(),
            paymentServiceTransactionId: z.nullable(z.string()).optional(),
            status: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$.optional(),
            instrumentType:
                PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$.optional(),
            retryRule: z.nullable(z.string()).optional(),
            rawResponseCode: z.nullable(z.string()).optional(),
            rawResponseDescription: z.nullable(z.string()).optional(),
            avsResponseCode: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$
                )
                .optional(),
            cvvResponseCode: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$
                )
                .optional(),
            paymentMethodScheme: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.paymentServiceId === undefined
                    ? null
                    : { payment_service_id: v.paymentServiceId }),
                ...(v.paymentServiceDisplayName === undefined
                    ? null
                    : { payment_service_display_name: v.paymentServiceDisplayName }),
                ...(v.paymentServiceDefinitionId === undefined
                    ? null
                    : { payment_service_definition_id: v.paymentServiceDefinitionId }),
                ...(v.paymentServiceTransactionId === undefined
                    ? null
                    : { payment_service_transaction_id: v.paymentServiceTransactionId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.instrumentType === undefined ? null : { instrument_type: v.instrumentType }),
                ...(v.retryRule === undefined ? null : { retry_rule: v.retryRule }),
                ...(v.rawResponseCode === undefined
                    ? null
                    : { raw_response_code: v.rawResponseCode }),
                ...(v.rawResponseDescription === undefined
                    ? null
                    : { raw_response_description: v.rawResponseDescription }),
                ...(v.avsResponseCode === undefined
                    ? null
                    : { avs_response_code: v.avsResponseCode }),
                ...(v.cvvResponseCode === undefined
                    ? null
                    : { cvv_response_code: v.cvvResponseCode }),
                ...(v.paymentMethodScheme === undefined
                    ? null
                    : { payment_method_scheme: v.paymentMethodScheme }),
            };
        });
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEvent$ {
    export type Inbound = {
        type?: PaymentConnectorResponseTransactionAuthorizationSucceededEventType | undefined;
        id?: string | undefined;
        name?: PaymentConnectorResponseTransactionAuthorizationSucceededEventName | undefined;
        created_at?: string | undefined;
        context?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentConnectorResponseTransactionAuthorizationSucceededEvent,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: PaymentConnectorResponseTransactionAuthorizationSucceededEventType$.optional(),
            id: z.string().optional(),
            name: PaymentConnectorResponseTransactionAuthorizationSucceededEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(
                    () =>
                        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$.inboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: PaymentConnectorResponseTransactionAuthorizationSucceededEventType | undefined;
        id?: string | undefined;
        name?: PaymentConnectorResponseTransactionAuthorizationSucceededEventName | undefined;
        created_at?: string | undefined;
        context?:
            | PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorResponseTransactionAuthorizationSucceededEvent
    > = z
        .object({
            type: PaymentConnectorResponseTransactionAuthorizationSucceededEventType$.optional(),
            id: z.string().optional(),
            name: PaymentConnectorResponseTransactionAuthorizationSucceededEventName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(
                    () =>
                        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$.outboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
