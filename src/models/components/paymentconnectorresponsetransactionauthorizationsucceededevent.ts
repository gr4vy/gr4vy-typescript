/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-authorization-succeeded`.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventName = {
    PaymentConnectorResponseTransactionAuthorizationSucceeded:
        "payment-connector-response-transaction-authorization-succeeded",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-authorization-succeeded`.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventName
>;

/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_succeeded`.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus = {
    AuthorizationSucceeded: "authorization_succeeded",
} as const;
/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_succeeded`.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus
>;

/**
 * The type of instrument used for this transaction.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType = {
    Pan: "pan",
    CardToken: "card_token",
    Redirect: "redirect",
    RedirectToken: "redirect_token",
    Googlepay: "googlepay",
    Applepay: "applepay",
    NetworkToken: "network_token",
} as const;
/**
 * The type of instrument used for this transaction.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType =
    ClosedEnum<typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType>;

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    PartialMatchAddress: "partial_match_address",
    PartialMatchPostcode: "partial_match_postcode",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode =
    ClosedEnum<
        typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
    >;

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode =
    ClosedEnum<
        typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
    >;

/**
 * The card scheme sent to the connector.
 */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The card scheme sent to the connector.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme =
    ClosedEnum<
        typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
    >;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The new status code for the transaction. This is always
     *
     * @remarks
     * set to `authorization_succeeded`.
     */
    status?: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus | undefined;
    /**
     * The type of instrument used for this transaction.
     */
    instrumentType?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
        | undefined;
    /**
     * This will always be `null` because the transaction succeeded.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    retryRule?: string | null | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a succeeded authorization
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionAuthorizationSucceededEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-authorization-succeeded`.
     */
    name?: PaymentConnectorResponseTransactionAuthorizationSucceededEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionAuthorizationSucceededEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventType);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventType
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventName);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventName
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventName$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme
> = PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationSucceededEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
        payment_service_transaction_id: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$inboundSchema.optional(),
        instrument_type:
            PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$inboundSchema.optional(),
        retry_rule: z.nullable(z.string()).optional(),
        raw_response_code: z.nullable(z.string()).optional(),
        raw_response_description: z.nullable(z.string()).optional(),
        avs_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$inboundSchema
            )
            .optional(),
        cvv_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$inboundSchema
            )
            .optional(),
        payment_method_scheme: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            instrument_type: "instrumentType",
            retry_rule: "retryRule",
            raw_response_code: "rawResponseCode",
            raw_response_description: "rawResponseDescription",
            avs_response_code: "avsResponseCode",
            cvv_response_code: "cvvResponseCode",
            payment_method_scheme: "paymentMethodScheme",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
    payment_service_transaction_id?: string | null | undefined;
    status?: string | undefined;
    instrument_type?: string | undefined;
    retry_rule?: string | null | undefined;
    raw_response_code?: string | null | undefined;
    raw_response_description?: string | null | undefined;
    avs_response_code?: string | null | undefined;
    cvv_response_code?: string | null | undefined;
    payment_method_scheme?: string | null | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionAuthorizationSucceededEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
        paymentServiceTransactionId: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionAuthorizationSucceededEventStatus$outboundSchema.optional(),
        instrumentType:
            PaymentConnectorResponseTransactionAuthorizationSucceededEventInstrumentType$outboundSchema.optional(),
        retryRule: z.nullable(z.string()).optional(),
        rawResponseCode: z.nullable(z.string()).optional(),
        rawResponseDescription: z.nullable(z.string()).optional(),
        avsResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationSucceededEventAvsResponseCode$outboundSchema
            )
            .optional(),
        cvvResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationSucceededEventCvvResponseCode$outboundSchema
            )
            .optional(),
        paymentMethodScheme: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationSucceededEventPaymentMethodScheme$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            instrumentType: "instrument_type",
            retryRule: "retry_rule",
            rawResponseCode: "raw_response_code",
            rawResponseDescription: "raw_response_description",
            avsResponseCode: "avs_response_code",
            cvvResponseCode: "cvv_response_code",
            paymentMethodScheme: "payment_method_scheme",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$Outbound` instead. */
    export type Outbound =
        PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationSucceededEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionAuthorizationSucceededEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionAuthorizationSucceededEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(
                () =>
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionAuthorizationSucceededEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?:
        | PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$Outbound
        | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationSucceededEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationSucceededEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionAuthorizationSucceededEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionAuthorizationSucceededEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionAuthorizationSucceededEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(
                () =>
                    PaymentConnectorResponseTransactionAuthorizationSucceededEventContext$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationSucceededEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEvent$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEvent$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationSucceededEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationSucceededEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionAuthorizationSucceededEvent$Outbound;
}
