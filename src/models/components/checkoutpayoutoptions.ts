/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CheckoutPayoutOptions = {
  /**
   * The processing channel to be used for the payment.
   */
  processingChannelId: string;
  /**
   * The ID of the currency account that will fund the payout.
   */
  sourceId: string;
};

/** @internal */
export const CheckoutPayoutOptions$inboundSchema: z.ZodType<
  CheckoutPayoutOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  processing_channel_id: z.string(),
  source_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "processing_channel_id": "processingChannelId",
    "source_id": "sourceId",
  });
});

/** @internal */
export type CheckoutPayoutOptions$Outbound = {
  processing_channel_id: string;
  source_id: string;
};

/** @internal */
export const CheckoutPayoutOptions$outboundSchema: z.ZodType<
  CheckoutPayoutOptions$Outbound,
  z.ZodTypeDef,
  CheckoutPayoutOptions
> = z.object({
  processingChannelId: z.string(),
  sourceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    processingChannelId: "processing_channel_id",
    sourceId: "source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutPayoutOptions$ {
  /** @deprecated use `CheckoutPayoutOptions$inboundSchema` instead. */
  export const inboundSchema = CheckoutPayoutOptions$inboundSchema;
  /** @deprecated use `CheckoutPayoutOptions$outboundSchema` instead. */
  export const outboundSchema = CheckoutPayoutOptions$outboundSchema;
  /** @deprecated use `CheckoutPayoutOptions$Outbound` instead. */
  export type Outbound = CheckoutPayoutOptions$Outbound;
}

export function checkoutPayoutOptionsToJSON(
  checkoutPayoutOptions: CheckoutPayoutOptions,
): string {
  return JSON.stringify(
    CheckoutPayoutOptions$outboundSchema.parse(checkoutPayoutOptions),
  );
}

export function checkoutPayoutOptionsFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutPayoutOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutPayoutOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutPayoutOptions' from JSON`,
  );
}
