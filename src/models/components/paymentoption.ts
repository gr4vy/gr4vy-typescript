/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GooglePayPaymentOptionContext,
  GooglePayPaymentOptionContext$inboundSchema,
  GooglePayPaymentOptionContext$Outbound,
  GooglePayPaymentOptionContext$outboundSchema,
} from "./googlepaypaymentoptioncontext.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  PaymentOptionContext,
  PaymentOptionContext$inboundSchema,
  PaymentOptionContext$Outbound,
  PaymentOptionContext$outboundSchema,
} from "./paymentoptioncontext.js";
import {
  WalletPaymentOptionContext,
  WalletPaymentOptionContext$inboundSchema,
  WalletPaymentOptionContext$Outbound,
  WalletPaymentOptionContext$outboundSchema,
} from "./walletpaymentoptioncontext.js";

export const PaymentOptionType = {
  PaymentOption: "payment-option",
} as const;
export type PaymentOptionType = ClosedEnum<typeof PaymentOptionType>;

export type Context =
  | WalletPaymentOptionContext
  | PaymentOptionContext
  | GooglePayPaymentOptionContext;

/**
 * Base model with JSON encoders.
 */
export type PaymentOption = {
  type?: PaymentOptionType | undefined;
  method: string;
  iconUrl?: string | undefined;
  /**
   * An enumeration.
   */
  mode: Mode;
  label?: string | undefined;
  canStorePaymentMethod: boolean;
  canDelayCapture: boolean;
  context?:
    | WalletPaymentOptionContext
    | PaymentOptionContext
    | GooglePayPaymentOptionContext
    | undefined;
};

/** @internal */
export const PaymentOptionType$inboundSchema: z.ZodNativeEnum<
  typeof PaymentOptionType
> = z.nativeEnum(PaymentOptionType);

/** @internal */
export const PaymentOptionType$outboundSchema: z.ZodNativeEnum<
  typeof PaymentOptionType
> = PaymentOptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentOptionType$ {
  /** @deprecated use `PaymentOptionType$inboundSchema` instead. */
  export const inboundSchema = PaymentOptionType$inboundSchema;
  /** @deprecated use `PaymentOptionType$outboundSchema` instead. */
  export const outboundSchema = PaymentOptionType$outboundSchema;
}

/** @internal */
export const Context$inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> =
  z.union([
    WalletPaymentOptionContext$inboundSchema,
    PaymentOptionContext$inboundSchema,
    GooglePayPaymentOptionContext$inboundSchema,
  ]);

/** @internal */
export type Context$Outbound =
  | WalletPaymentOptionContext$Outbound
  | PaymentOptionContext$Outbound
  | GooglePayPaymentOptionContext$Outbound;

/** @internal */
export const Context$outboundSchema: z.ZodType<
  Context$Outbound,
  z.ZodTypeDef,
  Context
> = z.union([
  WalletPaymentOptionContext$outboundSchema,
  PaymentOptionContext$outboundSchema,
  GooglePayPaymentOptionContext$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Context$ {
  /** @deprecated use `Context$inboundSchema` instead. */
  export const inboundSchema = Context$inboundSchema;
  /** @deprecated use `Context$outboundSchema` instead. */
  export const outboundSchema = Context$outboundSchema;
  /** @deprecated use `Context$Outbound` instead. */
  export type Outbound = Context$Outbound;
}

export function contextToJSON(context: Context): string {
  return JSON.stringify(Context$outboundSchema.parse(context));
}

export function contextFromJSON(
  jsonString: string,
): SafeParseResult<Context, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Context$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Context' from JSON`,
  );
}

/** @internal */
export const PaymentOption$inboundSchema: z.ZodType<
  PaymentOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PaymentOptionType$inboundSchema.default("payment-option"),
  method: z.string(),
  icon_url: z.string().optional(),
  mode: Mode$inboundSchema,
  label: z.string().optional(),
  can_store_payment_method: z.boolean(),
  can_delay_capture: z.boolean(),
  context: z.union([
    WalletPaymentOptionContext$inboundSchema,
    PaymentOptionContext$inboundSchema,
    GooglePayPaymentOptionContext$inboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "icon_url": "iconUrl",
    "can_store_payment_method": "canStorePaymentMethod",
    "can_delay_capture": "canDelayCapture",
  });
});

/** @internal */
export type PaymentOption$Outbound = {
  type: string;
  method: string;
  icon_url?: string | undefined;
  mode: string;
  label?: string | undefined;
  can_store_payment_method: boolean;
  can_delay_capture: boolean;
  context?:
    | WalletPaymentOptionContext$Outbound
    | PaymentOptionContext$Outbound
    | GooglePayPaymentOptionContext$Outbound
    | undefined;
};

/** @internal */
export const PaymentOption$outboundSchema: z.ZodType<
  PaymentOption$Outbound,
  z.ZodTypeDef,
  PaymentOption
> = z.object({
  type: PaymentOptionType$outboundSchema.default("payment-option"),
  method: z.string(),
  iconUrl: z.string().optional(),
  mode: Mode$outboundSchema,
  label: z.string().optional(),
  canStorePaymentMethod: z.boolean(),
  canDelayCapture: z.boolean(),
  context: z.union([
    WalletPaymentOptionContext$outboundSchema,
    PaymentOptionContext$outboundSchema,
    GooglePayPaymentOptionContext$outboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    iconUrl: "icon_url",
    canStorePaymentMethod: "can_store_payment_method",
    canDelayCapture: "can_delay_capture",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentOption$ {
  /** @deprecated use `PaymentOption$inboundSchema` instead. */
  export const inboundSchema = PaymentOption$inboundSchema;
  /** @deprecated use `PaymentOption$outboundSchema` instead. */
  export const outboundSchema = PaymentOption$outboundSchema;
  /** @deprecated use `PaymentOption$Outbound` instead. */
  export type Outbound = PaymentOption$Outbound;
}

export function paymentOptionToJSON(paymentOption: PaymentOption): string {
  return JSON.stringify(PaymentOption$outboundSchema.parse(paymentOption));
}

export function paymentOptionFromJSON(
  jsonString: string,
): SafeParseResult<PaymentOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentOption' from JSON`,
  );
}
