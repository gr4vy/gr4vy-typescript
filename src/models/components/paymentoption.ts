/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentOptionApprovalUI, PaymentOptionApprovalUI$ } from "./paymentoptionapprovalui";
import { RequiredFields, RequiredFields$ } from "./requiredfields";
import * as z from "zod";

/**
 * `payment-option`.
 */
export enum PaymentOptionType {
    PaymentOption = "payment-option",
}

/**
 * The type of payment method that is available.
 */
export enum PaymentOptionMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    CheckoutSession = "checkout-session",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * The mode to use with this payment option.
 */
export enum PaymentOptionMode {
    Card = "card",
    Redirect = "redirect",
    Applepay = "applepay",
    Googlepay = "googlepay",
}

/**
 * Additional context specific to the payment option.
 *
 * @remarks
 * This is currently only returned for Apple Pay and Google Pay.
 */
export type Context = {
    /**
     * Gateway used for Google Pay payments.
     */
    gateway?: string | undefined;
    /**
     * Gateway merchant identifier used for Google Pay payments.
     */
    gatewayMerchantId?: string | undefined;
    /**
     * Display name of the merchant as registered with the digital wallet
     *
     * @remarks
     * provider.
     */
    merchantName?: string | undefined;
    /**
     * Card schemes supported by the digital wallet provider.
     */
    supportedSchemes?: Array<string> | undefined;
    /**
     * Configuration for the approval interface that should be shown to the buyer.
     */
    approvalUi?: PaymentOptionApprovalUI | undefined;
    /**
     * The fields that are required to process a transaction for this payment option.
     */
    requiredFields?: RequiredFields | undefined;
};

/**
 * An available payment option for a locale.
 */
export type PaymentOption = {
    /**
     * `payment-option`.
     */
    type?: PaymentOptionType | undefined;
    /**
     * The type of payment method that is available.
     */
    method?: PaymentOptionMethod | undefined;
    /**
     * An icon to display for the payment option.
     */
    iconUrl?: string | null | undefined;
    /**
     * The mode to use with this payment option.
     */
    mode?: PaymentOptionMode | undefined;
    /**
     * A label that describes this payment option. This label is returned in the
     *
     * @remarks
     * language defined by the `locale` query parameter. The label can be used
     * to display a list of payment options to the buyer in their language.
     */
    label?: string | undefined;
    /**
     * A flag to indicate if storing the payment method is supported.
     */
    canStorePaymentMethod?: boolean | undefined;
    /**
     * A flag to indicate if delayed capture is supported.
     */
    canDelayCapture?: boolean | undefined;
    /**
     * Additional context specific to the payment option.
     *
     * @remarks
     * This is currently only returned for Apple Pay and Google Pay.
     */
    context?: Context | undefined;
};

/** @internal */
export const PaymentOptionType$: z.ZodNativeEnum<typeof PaymentOptionType> =
    z.nativeEnum(PaymentOptionType);

/** @internal */
export const PaymentOptionMethod$: z.ZodNativeEnum<typeof PaymentOptionMethod> =
    z.nativeEnum(PaymentOptionMethod);

/** @internal */
export const PaymentOptionMode$: z.ZodNativeEnum<typeof PaymentOptionMode> =
    z.nativeEnum(PaymentOptionMode);

/** @internal */
export namespace Context$ {
    export type Inbound = {
        gateway?: string | undefined;
        gateway_merchant_id?: string | undefined;
        merchant_name?: string | undefined;
        supported_schemes?: Array<string> | undefined;
        approval_ui?: PaymentOptionApprovalUI$.Inbound | undefined;
        required_fields?: RequiredFields$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Context, z.ZodTypeDef, Inbound> = z
        .object({
            gateway: z.string().optional(),
            gateway_merchant_id: z.string().optional(),
            merchant_name: z.string().optional(),
            supported_schemes: z.array(z.string()).optional(),
            approval_ui: PaymentOptionApprovalUI$.inboundSchema.optional(),
            required_fields: RequiredFields$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.gateway === undefined ? null : { gateway: v.gateway }),
                ...(v.gateway_merchant_id === undefined
                    ? null
                    : { gatewayMerchantId: v.gateway_merchant_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.supported_schemes === undefined
                    ? null
                    : { supportedSchemes: v.supported_schemes }),
                ...(v.approval_ui === undefined ? null : { approvalUi: v.approval_ui }),
                ...(v.required_fields === undefined ? null : { requiredFields: v.required_fields }),
            };
        });

    export type Outbound = {
        gateway?: string | undefined;
        gateway_merchant_id?: string | undefined;
        merchant_name?: string | undefined;
        supported_schemes?: Array<string> | undefined;
        approval_ui?: PaymentOptionApprovalUI$.Outbound | undefined;
        required_fields?: RequiredFields$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Context> = z
        .object({
            gateway: z.string().optional(),
            gatewayMerchantId: z.string().optional(),
            merchantName: z.string().optional(),
            supportedSchemes: z.array(z.string()).optional(),
            approvalUi: PaymentOptionApprovalUI$.outboundSchema.optional(),
            requiredFields: RequiredFields$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.gateway === undefined ? null : { gateway: v.gateway }),
                ...(v.gatewayMerchantId === undefined
                    ? null
                    : { gateway_merchant_id: v.gatewayMerchantId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.supportedSchemes === undefined
                    ? null
                    : { supported_schemes: v.supportedSchemes }),
                ...(v.approvalUi === undefined ? null : { approval_ui: v.approvalUi }),
                ...(v.requiredFields === undefined ? null : { required_fields: v.requiredFields }),
            };
        });
}

/** @internal */
export namespace PaymentOption$ {
    export type Inbound = {
        type?: PaymentOptionType | undefined;
        method?: PaymentOptionMethod | undefined;
        icon_url?: string | null | undefined;
        mode?: PaymentOptionMode | undefined;
        label?: string | undefined;
        can_store_payment_method?: boolean | undefined;
        can_delay_capture?: boolean | undefined;
        context?: Context$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentOption, z.ZodTypeDef, Inbound> = z
        .object({
            type: PaymentOptionType$.optional(),
            method: PaymentOptionMethod$.optional(),
            icon_url: z.nullable(z.string()).optional(),
            mode: PaymentOptionMode$.optional(),
            label: z.string().optional(),
            can_store_payment_method: z.boolean().optional(),
            can_delay_capture: z.boolean().optional(),
            context: z.lazy(() => Context$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.icon_url === undefined ? null : { iconUrl: v.icon_url }),
                ...(v.mode === undefined ? null : { mode: v.mode }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.can_store_payment_method === undefined
                    ? null
                    : { canStorePaymentMethod: v.can_store_payment_method }),
                ...(v.can_delay_capture === undefined
                    ? null
                    : { canDelayCapture: v.can_delay_capture }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: PaymentOptionType | undefined;
        method?: PaymentOptionMethod | undefined;
        icon_url?: string | null | undefined;
        mode?: PaymentOptionMode | undefined;
        label?: string | undefined;
        can_store_payment_method?: boolean | undefined;
        can_delay_capture?: boolean | undefined;
        context?: Context$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentOption> = z
        .object({
            type: PaymentOptionType$.optional(),
            method: PaymentOptionMethod$.optional(),
            iconUrl: z.nullable(z.string()).optional(),
            mode: PaymentOptionMode$.optional(),
            label: z.string().optional(),
            canStorePaymentMethod: z.boolean().optional(),
            canDelayCapture: z.boolean().optional(),
            context: z.lazy(() => Context$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.iconUrl === undefined ? null : { icon_url: v.iconUrl }),
                ...(v.mode === undefined ? null : { mode: v.mode }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.canStorePaymentMethod === undefined
                    ? null
                    : { can_store_payment_method: v.canStorePaymentMethod }),
                ...(v.canDelayCapture === undefined
                    ? null
                    : { can_delay_capture: v.canDelayCapture }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
