/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowMerchantInitiatedConditionName {
    MerchantInitiated = "merchant_initiated",
}

/**
 * The comparison to make on the `merchant_initiated` flag `value`.
 */
export enum FlowMerchantInitiatedConditionOperator {
    EqualTo = "equal_to",
}

/**
 * `merchant_initiated` flag conditions with a name, operator, and value.
 */
export type FlowMerchantInitiatedCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowMerchantInitiatedConditionName;
    /**
     * The comparison to make on the `merchant_initiated` flag `value`.
     */
    operator: FlowMerchantInitiatedConditionOperator;
    /**
     * `merchant_initiated` flag value to compare the transaction to.
     */
    value: boolean;
};

/** @internal */
export namespace FlowMerchantInitiatedConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowMerchantInitiatedConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowMerchantInitiatedConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowMerchantInitiatedConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowMerchantInitiatedCondition$ {
    export const inboundSchema: z.ZodType<FlowMerchantInitiatedCondition, z.ZodTypeDef, unknown> =
        z.object({
            name: FlowMerchantInitiatedConditionName$.inboundSchema,
            operator: FlowMerchantInitiatedConditionOperator$.inboundSchema,
            value: z.boolean(),
        });

    export type Outbound = {
        name: string;
        operator: string;
        value: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowMerchantInitiatedCondition> =
        z.object({
            name: FlowMerchantInitiatedConditionName$.outboundSchema,
            operator: FlowMerchantInitiatedConditionOperator$.outboundSchema,
            value: z.boolean(),
        });
}
