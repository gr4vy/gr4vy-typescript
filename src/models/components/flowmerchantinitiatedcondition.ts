/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowMerchantInitiatedConditionName {
    MerchantInitiated = "merchant_initiated",
}

/**
 * The comparison to make on the `merchant_initiated` flag `value`.
 */
export enum FlowMerchantInitiatedConditionOperator {
    EqualTo = "equal_to",
}

/**
 * `merchant_initiated` flag conditions with a name, operator, and value.
 */
export type FlowMerchantInitiatedCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowMerchantInitiatedConditionName;
    /**
     * The comparison to make on the `merchant_initiated` flag `value`.
     */
    operator: FlowMerchantInitiatedConditionOperator;
    /**
     * `merchant_initiated` flag value to compare the transaction to.
     */
    value: boolean;
};

/** @internal */
export const FlowMerchantInitiatedConditionName$ = z.nativeEnum(FlowMerchantInitiatedConditionName);

/** @internal */
export const FlowMerchantInitiatedConditionOperator$ = z.nativeEnum(
    FlowMerchantInitiatedConditionOperator
);

/** @internal */
export namespace FlowMerchantInitiatedCondition$ {
    export type Inbound = {
        name: FlowMerchantInitiatedConditionName;
        operator: FlowMerchantInitiatedConditionOperator;
        value: boolean;
    };

    export const inboundSchema: z.ZodType<FlowMerchantInitiatedCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowMerchantInitiatedConditionName$,
            operator: FlowMerchantInitiatedConditionOperator$,
            value: z.boolean(),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowMerchantInitiatedConditionName;
        operator: FlowMerchantInitiatedConditionOperator;
        value: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowMerchantInitiatedCondition> =
        z
            .object({
                name: FlowMerchantInitiatedConditionName$,
                operator: FlowMerchantInitiatedConditionOperator$,
                value: z.boolean(),
            })
            .transform((v) => {
                return {
                    name: v.name,
                    operator: v.operator,
                    value: v.value,
                };
            });
}
