/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The route type of the flight.
 */
export const RouteType = {
  RoundTrip: "round_trip",
  OneWay: "one_way",
} as const;
/**
 * The route type of the flight.
 */
export type RouteType = ClosedEnum<typeof RouteType>;

/**
 * Base model with JSON encoders.
 */
export type AirlineLeg = {
  /**
   * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
   */
  arrivalAirport?: string | undefined;
  /**
   * The date and time of travel in local time at the arrival airport.
   */
  arrivalAt?: Date | undefined;
  /**
   * Arrival city name.
   */
  arrivalCity?: string | undefined;
  /**
   * Arrival country code in ISO 3166 format.
   */
  arrivalCountry?: string | undefined;
  /**
   * 2 character airline code as set by IATA.
   */
  carrierCode?: string | undefined;
  /**
   * Coupon number associated with the leg.
   */
  couponNumber?: string | undefined;
  /**
   * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
   */
  departureAirport?: string | undefined;
  /**
   * The date and time of travel in local time at the departure airport.
   */
  departureAt?: Date | undefined;
  /**
   * Departure city name.
   */
  departureCity?: string | undefined;
  /**
   * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
   */
  departureCountry?: string | undefined;
  /**
   * Departure tax amount charged by a country when a person is leaving the country.
   */
  departureTaxAmount?: number | undefined;
  /**
   * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
   */
  fareAmount?: number | undefined;
  /**
   * The alphanumeric code for the booking class of a ticket.
   */
  fareBasisCode?: string | undefined;
  /**
   * Fee amount for current leg of the trip.
   */
  feeAmount?: number | undefined;
  /**
   * Indicates service class (first class, business class, etc.).
   */
  flightClass?: string | undefined;
  /**
   * Unique identifier of the flight number.
   */
  flightNumber?: string | undefined;
  /**
   * The route type of the flight.
   */
  routeType?: RouteType | undefined;
  /**
   * Indicates whether a stopover is allowed on this ticket.
   */
  stopOver?: boolean | undefined;
  /**
   * Amount of the taxes for current leg of the trip.
   */
  taxAmount?: number | undefined;
};

/** @internal */
export const RouteType$inboundSchema: z.ZodNativeEnum<typeof RouteType> = z
  .nativeEnum(RouteType);

/** @internal */
export const RouteType$outboundSchema: z.ZodNativeEnum<typeof RouteType> =
  RouteType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RouteType$ {
  /** @deprecated use `RouteType$inboundSchema` instead. */
  export const inboundSchema = RouteType$inboundSchema;
  /** @deprecated use `RouteType$outboundSchema` instead. */
  export const outboundSchema = RouteType$outboundSchema;
}

/** @internal */
export const AirlineLeg$inboundSchema: z.ZodType<
  AirlineLeg,
  z.ZodTypeDef,
  unknown
> = z.object({
  arrival_airport: z.string().optional(),
  arrival_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  arrival_city: z.string().optional(),
  arrival_country: z.string().optional(),
  carrier_code: z.string().optional(),
  coupon_number: z.string().optional(),
  departure_airport: z.string().optional(),
  departure_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  departure_city: z.string().optional(),
  departure_country: z.string().optional(),
  departure_tax_amount: z.number().int().optional(),
  fare_amount: z.number().int().optional(),
  fare_basis_code: z.string().optional(),
  fee_amount: z.number().int().optional(),
  flight_class: z.string().optional(),
  flight_number: z.string().optional(),
  route_type: RouteType$inboundSchema.optional(),
  stop_over: z.boolean().optional(),
  tax_amount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "arrival_airport": "arrivalAirport",
    "arrival_at": "arrivalAt",
    "arrival_city": "arrivalCity",
    "arrival_country": "arrivalCountry",
    "carrier_code": "carrierCode",
    "coupon_number": "couponNumber",
    "departure_airport": "departureAirport",
    "departure_at": "departureAt",
    "departure_city": "departureCity",
    "departure_country": "departureCountry",
    "departure_tax_amount": "departureTaxAmount",
    "fare_amount": "fareAmount",
    "fare_basis_code": "fareBasisCode",
    "fee_amount": "feeAmount",
    "flight_class": "flightClass",
    "flight_number": "flightNumber",
    "route_type": "routeType",
    "stop_over": "stopOver",
    "tax_amount": "taxAmount",
  });
});

/** @internal */
export type AirlineLeg$Outbound = {
  arrival_airport?: string | undefined;
  arrival_at?: string | undefined;
  arrival_city?: string | undefined;
  arrival_country?: string | undefined;
  carrier_code?: string | undefined;
  coupon_number?: string | undefined;
  departure_airport?: string | undefined;
  departure_at?: string | undefined;
  departure_city?: string | undefined;
  departure_country?: string | undefined;
  departure_tax_amount?: number | undefined;
  fare_amount?: number | undefined;
  fare_basis_code?: string | undefined;
  fee_amount?: number | undefined;
  flight_class?: string | undefined;
  flight_number?: string | undefined;
  route_type?: string | undefined;
  stop_over?: boolean | undefined;
  tax_amount?: number | undefined;
};

/** @internal */
export const AirlineLeg$outboundSchema: z.ZodType<
  AirlineLeg$Outbound,
  z.ZodTypeDef,
  AirlineLeg
> = z.object({
  arrivalAirport: z.string().optional(),
  arrivalAt: z.date().transform(v => v.toISOString()).optional(),
  arrivalCity: z.string().optional(),
  arrivalCountry: z.string().optional(),
  carrierCode: z.string().optional(),
  couponNumber: z.string().optional(),
  departureAirport: z.string().optional(),
  departureAt: z.date().transform(v => v.toISOString()).optional(),
  departureCity: z.string().optional(),
  departureCountry: z.string().optional(),
  departureTaxAmount: z.number().int().optional(),
  fareAmount: z.number().int().optional(),
  fareBasisCode: z.string().optional(),
  feeAmount: z.number().int().optional(),
  flightClass: z.string().optional(),
  flightNumber: z.string().optional(),
  routeType: RouteType$outboundSchema.optional(),
  stopOver: z.boolean().optional(),
  taxAmount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    arrivalAirport: "arrival_airport",
    arrivalAt: "arrival_at",
    arrivalCity: "arrival_city",
    arrivalCountry: "arrival_country",
    carrierCode: "carrier_code",
    couponNumber: "coupon_number",
    departureAirport: "departure_airport",
    departureAt: "departure_at",
    departureCity: "departure_city",
    departureCountry: "departure_country",
    departureTaxAmount: "departure_tax_amount",
    fareAmount: "fare_amount",
    fareBasisCode: "fare_basis_code",
    feeAmount: "fee_amount",
    flightClass: "flight_class",
    flightNumber: "flight_number",
    routeType: "route_type",
    stopOver: "stop_over",
    taxAmount: "tax_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AirlineLeg$ {
  /** @deprecated use `AirlineLeg$inboundSchema` instead. */
  export const inboundSchema = AirlineLeg$inboundSchema;
  /** @deprecated use `AirlineLeg$outboundSchema` instead. */
  export const outboundSchema = AirlineLeg$outboundSchema;
  /** @deprecated use `AirlineLeg$Outbound` instead. */
  export type Outbound = AirlineLeg$Outbound;
}

export function airlineLegToJSON(airlineLeg: AirlineLeg): string {
  return JSON.stringify(AirlineLeg$outboundSchema.parse(airlineLeg));
}

export function airlineLegFromJSON(
  jsonString: string,
): SafeParseResult<AirlineLeg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AirlineLeg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AirlineLeg' from JSON`,
  );
}
