/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudDecisionErrorEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-decision-error`.
 */
export enum AntiFraudDecisionErrorEventName {
    AntiFraudDecisionError = "anti-fraud-decision-error",
}

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionErrorEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider, if we received any.
     */
    statusCode?: number | undefined;
    /**
     * The reason we could not get the anti-fraud decision.
     */
    reason?: string | undefined;
};

/**
 * This event logs the reason why we were unable to get an anti-fraud decision.
 */
export type AntiFraudDecisionErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-error`.
     */
    name?: AntiFraudDecisionErrorEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionErrorEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionErrorEventType$: z.ZodNativeEnum<
    typeof AntiFraudDecisionErrorEventType
> = z.nativeEnum(AntiFraudDecisionErrorEventType);

/** @internal */
export const AntiFraudDecisionErrorEventName$: z.ZodNativeEnum<
    typeof AntiFraudDecisionErrorEventName
> = z.nativeEnum(AntiFraudDecisionErrorEventName);

/** @internal */
export namespace AntiFraudDecisionErrorEventContext$ {
    export type Inbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        status_code?: number | undefined;
        reason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        AntiFraudDecisionErrorEventContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            status_code: z.number().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.anti_fraud_service_id === undefined
                    ? null
                    : { antiFraudServiceId: v.anti_fraud_service_id }),
                ...(v.anti_fraud_service_name === undefined
                    ? null
                    : { antiFraudServiceName: v.anti_fraud_service_name }),
                ...(v.anti_fraud_service_definition_id === undefined
                    ? null
                    : { antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id }),
                ...(v.status_code === undefined ? null : { statusCode: v.status_code }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        status_code?: number | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudDecisionErrorEventContext
    > = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            statusCode: z.number().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.antiFraudServiceId === undefined
                    ? null
                    : { anti_fraud_service_id: v.antiFraudServiceId }),
                ...(v.antiFraudServiceName === undefined
                    ? null
                    : { anti_fraud_service_name: v.antiFraudServiceName }),
                ...(v.antiFraudServiceDefinitionId === undefined
                    ? null
                    : { anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId }),
                ...(v.statusCode === undefined ? null : { status_code: v.statusCode }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}

/** @internal */
export namespace AntiFraudDecisionErrorEvent$ {
    export type Inbound = {
        type?: AntiFraudDecisionErrorEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudDecisionErrorEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudDecisionErrorEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AntiFraudDecisionErrorEvent, z.ZodTypeDef, Inbound> = z
        .object({
            type: AntiFraudDecisionErrorEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudDecisionErrorEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => AntiFraudDecisionErrorEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: AntiFraudDecisionErrorEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudDecisionErrorEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudDecisionErrorEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudDecisionErrorEvent> = z
        .object({
            type: AntiFraudDecisionErrorEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudDecisionErrorEventName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => AntiFraudDecisionErrorEventContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
