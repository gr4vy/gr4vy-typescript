/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudDecisionErrorEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudDecisionErrorEventType = ClosedEnum<typeof AntiFraudDecisionErrorEventType>;

/**
 * The name of this resource. Is always `anti-fraud-decision-error`.
 */
export const AntiFraudDecisionErrorEventName = {
    AntiFraudDecisionError: "anti-fraud-decision-error",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-decision-error`.
 */
export type AntiFraudDecisionErrorEventName = ClosedEnum<typeof AntiFraudDecisionErrorEventName>;

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionErrorEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider, if we received any.
     */
    statusCode?: number | undefined;
    /**
     * The reason we could not get the anti-fraud decision.
     */
    reason?: string | undefined;
};

/**
 * This event logs the reason why we were unable to get an anti-fraud decision.
 */
export type AntiFraudDecisionErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-error`.
     */
    name?: AntiFraudDecisionErrorEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionErrorEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionErrorEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionErrorEventType
> = z.nativeEnum(AntiFraudDecisionErrorEventType);

/** @internal */
export const AntiFraudDecisionErrorEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionErrorEventType
> = AntiFraudDecisionErrorEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionErrorEventType$ {
    /** @deprecated use `AntiFraudDecisionErrorEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionErrorEventType$inboundSchema;
    /** @deprecated use `AntiFraudDecisionErrorEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionErrorEventType$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionErrorEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionErrorEventName
> = z.nativeEnum(AntiFraudDecisionErrorEventName);

/** @internal */
export const AntiFraudDecisionErrorEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionErrorEventName
> = AntiFraudDecisionErrorEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionErrorEventName$ {
    /** @deprecated use `AntiFraudDecisionErrorEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionErrorEventName$inboundSchema;
    /** @deprecated use `AntiFraudDecisionErrorEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionErrorEventName$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionErrorEventContext$inboundSchema: z.ZodType<
    AntiFraudDecisionErrorEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        status_code: z.number().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            status_code: "statusCode",
        });
    });

/** @internal */
export type AntiFraudDecisionErrorEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    status_code?: number | undefined;
    reason?: string | undefined;
};

/** @internal */
export const AntiFraudDecisionErrorEventContext$outboundSchema: z.ZodType<
    AntiFraudDecisionErrorEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionErrorEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        statusCode: z.number().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            statusCode: "status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionErrorEventContext$ {
    /** @deprecated use `AntiFraudDecisionErrorEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionErrorEventContext$inboundSchema;
    /** @deprecated use `AntiFraudDecisionErrorEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionErrorEventContext$outboundSchema;
    /** @deprecated use `AntiFraudDecisionErrorEventContext$Outbound` instead. */
    export type Outbound = AntiFraudDecisionErrorEventContext$Outbound;
}

/** @internal */
export const AntiFraudDecisionErrorEvent$inboundSchema: z.ZodType<
    AntiFraudDecisionErrorEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudDecisionErrorEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionErrorEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => AntiFraudDecisionErrorEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudDecisionErrorEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudDecisionErrorEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudDecisionErrorEvent$outboundSchema: z.ZodType<
    AntiFraudDecisionErrorEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionErrorEvent
> = z
    .object({
        type: AntiFraudDecisionErrorEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionErrorEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => AntiFraudDecisionErrorEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionErrorEvent$ {
    /** @deprecated use `AntiFraudDecisionErrorEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionErrorEvent$inboundSchema;
    /** @deprecated use `AntiFraudDecisionErrorEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionErrorEvent$outboundSchema;
    /** @deprecated use `AntiFraudDecisionErrorEvent$Outbound` instead. */
    export type Outbound = AntiFraudDecisionErrorEvent$Outbound;
}
