/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardScheme,
  CardScheme$inboundSchema,
  CardScheme$outboundSchema,
} from "./cardscheme.js";

export const CardSource = {
  ApplePay: "apple-pay",
  GooglePay: "google-pay",
} as const;
export type CardSource = OpenEnum<typeof CardSource>;

export type NetworkTokenPaymentMethodCreate = {
  /**
   * Always `network-token`.
   */
  method?: "network-token" | undefined;
  /**
   * The scheme token.
   */
  token: string;
  /**
   * The expiration date of the token.
   */
  expirationDate: string;
  /**
   * The payment cryptogram for the network token.
   */
  cryptogram?: string | null | undefined;
  /**
   * The URL to redirect a user back to after the complete 3DS in browser.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The optional source of the decrypted device token.
   */
  cardSource?: CardSource | null | undefined;
  /**
   * The original card scheme for which the token was generated.
   */
  cardScheme?: CardScheme | null | undefined;
  /**
   * The last 4 digits of the original card used to generate the token.
   */
  cardSuffix?: string | null | undefined;
  /**
   * The card holder name associated to the original card for the token.
   */
  cardholderName?: string | null | undefined;
  /**
   * The ecommerce indicator for the token.
   */
  eci?: string | null | undefined;
};

/** @internal */
export const CardSource$inboundSchema: z.ZodType<
  CardSource,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CardSource),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CardSource$outboundSchema: z.ZodType<
  CardSource,
  z.ZodTypeDef,
  CardSource
> = z.union([
  z.nativeEnum(CardSource),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardSource$ {
  /** @deprecated use `CardSource$inboundSchema` instead. */
  export const inboundSchema = CardSource$inboundSchema;
  /** @deprecated use `CardSource$outboundSchema` instead. */
  export const outboundSchema = CardSource$outboundSchema;
}

/** @internal */
export const NetworkTokenPaymentMethodCreate$inboundSchema: z.ZodType<
  NetworkTokenPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: z.literal("network-token").default("network-token").optional(),
  token: z.string(),
  expiration_date: z.string(),
  cryptogram: z.nullable(z.string()).optional(),
  redirect_url: z.nullable(z.string()).optional(),
  card_source: z.nullable(CardSource$inboundSchema).optional(),
  card_scheme: z.nullable(CardScheme$inboundSchema).optional(),
  card_suffix: z.nullable(z.string()).optional(),
  cardholder_name: z.nullable(z.string()).optional(),
  eci: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expiration_date": "expirationDate",
    "redirect_url": "redirectUrl",
    "card_source": "cardSource",
    "card_scheme": "cardScheme",
    "card_suffix": "cardSuffix",
    "cardholder_name": "cardholderName",
  });
});

/** @internal */
export type NetworkTokenPaymentMethodCreate$Outbound = {
  method: "network-token";
  token: string;
  expiration_date: string;
  cryptogram?: string | null | undefined;
  redirect_url?: string | null | undefined;
  card_source?: string | null | undefined;
  card_scheme?: string | null | undefined;
  card_suffix?: string | null | undefined;
  cardholder_name?: string | null | undefined;
  eci?: string | null | undefined;
};

/** @internal */
export const NetworkTokenPaymentMethodCreate$outboundSchema: z.ZodType<
  NetworkTokenPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  NetworkTokenPaymentMethodCreate
> = z.object({
  method: z.literal("network-token").default("network-token" as const),
  token: z.string(),
  expirationDate: z.string(),
  cryptogram: z.nullable(z.string()).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cardSource: z.nullable(CardSource$outboundSchema).optional(),
  cardScheme: z.nullable(CardScheme$outboundSchema).optional(),
  cardSuffix: z.nullable(z.string()).optional(),
  cardholderName: z.nullable(z.string()).optional(),
  eci: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expirationDate: "expiration_date",
    redirectUrl: "redirect_url",
    cardSource: "card_source",
    cardScheme: "card_scheme",
    cardSuffix: "card_suffix",
    cardholderName: "cardholder_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenPaymentMethodCreate$ {
  /** @deprecated use `NetworkTokenPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = NetworkTokenPaymentMethodCreate$inboundSchema;
  /** @deprecated use `NetworkTokenPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = NetworkTokenPaymentMethodCreate$outboundSchema;
  /** @deprecated use `NetworkTokenPaymentMethodCreate$Outbound` instead. */
  export type Outbound = NetworkTokenPaymentMethodCreate$Outbound;
}

export function networkTokenPaymentMethodCreateToJSON(
  networkTokenPaymentMethodCreate: NetworkTokenPaymentMethodCreate,
): string {
  return JSON.stringify(
    NetworkTokenPaymentMethodCreate$outboundSchema.parse(
      networkTokenPaymentMethodCreate,
    ),
  );
}

export function networkTokenPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<NetworkTokenPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkTokenPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkTokenPaymentMethodCreate' from JSON`,
  );
}
