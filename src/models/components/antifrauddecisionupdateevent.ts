/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudDecisionUpdateEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudDecisionUpdateEventType = ClosedEnum<typeof AntiFraudDecisionUpdateEventType>;

/**
 * The name of this resource. Is always `anti-fraud-decision-update`.
 */
export const AntiFraudDecisionUpdateEventName = {
    AntiFraudDecisionUpdate: "anti-fraud-decision-update",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-decision-update`.
 */
export type AntiFraudDecisionUpdateEventName = ClosedEnum<typeof AntiFraudDecisionUpdateEventName>;

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionUpdateEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The updated decision sent to the anti-fraud provider.
     */
    decision?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to an anti-fraud provider to update a decision.
 */
export type AntiFraudDecisionUpdateEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionUpdateEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-update`.
     */
    name?: AntiFraudDecisionUpdateEventName | undefined;
    /**
     * The date and time when this transaction event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionUpdateEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionUpdateEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateEventType
> = z.nativeEnum(AntiFraudDecisionUpdateEventType);

/** @internal */
export const AntiFraudDecisionUpdateEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateEventType
> = AntiFraudDecisionUpdateEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateEventType$ {
    /** @deprecated use `AntiFraudDecisionUpdateEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateEventType$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateEventType$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionUpdateEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateEventName
> = z.nativeEnum(AntiFraudDecisionUpdateEventName);

/** @internal */
export const AntiFraudDecisionUpdateEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateEventName
> = AntiFraudDecisionUpdateEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateEventName$ {
    /** @deprecated use `AntiFraudDecisionUpdateEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateEventName$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateEventName$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionUpdateEventContext$inboundSchema: z.ZodType<
    AntiFraudDecisionUpdateEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        anti_fraud_service_check_id: z.string().optional(),
        decision: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            anti_fraud_service_check_id: "antiFraudServiceCheckId",
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type AntiFraudDecisionUpdateEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    anti_fraud_service_check_id?: string | undefined;
    decision?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
};

/** @internal */
export const AntiFraudDecisionUpdateEventContext$outboundSchema: z.ZodType<
    AntiFraudDecisionUpdateEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionUpdateEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        antiFraudServiceCheckId: z.string().optional(),
        decision: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            antiFraudServiceCheckId: "anti_fraud_service_check_id",
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateEventContext$ {
    /** @deprecated use `AntiFraudDecisionUpdateEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateEventContext$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateEventContext$outboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateEventContext$Outbound` instead. */
    export type Outbound = AntiFraudDecisionUpdateEventContext$Outbound;
}

/** @internal */
export const AntiFraudDecisionUpdateEvent$inboundSchema: z.ZodType<
    AntiFraudDecisionUpdateEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudDecisionUpdateEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionUpdateEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => AntiFraudDecisionUpdateEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudDecisionUpdateEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudDecisionUpdateEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudDecisionUpdateEvent$outboundSchema: z.ZodType<
    AntiFraudDecisionUpdateEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionUpdateEvent
> = z
    .object({
        type: AntiFraudDecisionUpdateEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionUpdateEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => AntiFraudDecisionUpdateEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateEvent$ {
    /** @deprecated use `AntiFraudDecisionUpdateEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateEvent$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateEvent$outboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateEvent$Outbound` instead. */
    export type Outbound = AntiFraudDecisionUpdateEvent$Outbound;
}
