/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentService, PaymentService$ } from "./paymentservice";
import * as z from "zod";

/**
 * A list of active, configured payment services.
 */
export type PaymentServices = {
    items?: Array<PaymentService> | undefined;
    /**
     * The limit applied to request. This represents the number of items that are at
     *
     * @remarks
     * maximum returned by this request.
     */
    limit?: number | undefined;
    /**
     * The cursor that represents the next page of results. Use the `cursor` query
     *
     * @remarks
     * parameter to fetch this page of items.
     */
    nextCursor?: string | null | undefined;
    /**
     * The cursor that represents the next page of results. Use the `cursor` query
     *
     * @remarks
     * parameter to fetch this page of items.
     */
    previousCursor?: string | null | undefined;
};

/** @internal */
export namespace PaymentServices$ {
    export type Inbound = {
        items?: Array<PaymentService$.Inbound> | undefined;
        limit?: number | undefined;
        next_cursor?: string | null | undefined;
        previous_cursor?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentServices, z.ZodTypeDef, Inbound> = z
        .object({
            items: z.array(PaymentService$.inboundSchema).optional(),
            limit: z.number().int().default(20),
            next_cursor: z.nullable(z.string()).optional(),
            previous_cursor: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
                limit: v.limit,
                ...(v.next_cursor === undefined ? null : { nextCursor: v.next_cursor }),
                ...(v.previous_cursor === undefined ? null : { previousCursor: v.previous_cursor }),
            };
        });

    export type Outbound = {
        items?: Array<PaymentService$.Outbound> | undefined;
        limit: number;
        next_cursor?: string | null | undefined;
        previous_cursor?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServices> = z
        .object({
            items: z.array(PaymentService$.outboundSchema).optional(),
            limit: z.number().int().default(20),
            nextCursor: z.nullable(z.string()).optional(),
            previousCursor: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
                limit: v.limit,
                ...(v.nextCursor === undefined ? null : { next_cursor: v.nextCursor }),
                ...(v.previousCursor === undefined ? null : { previous_cursor: v.previousCursor }),
            };
        });
}
