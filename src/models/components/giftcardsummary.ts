/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `gift-card`.
 */
export const GiftCardSummaryType = {
  GiftCard: "gift-card",
} as const;
/**
 * Always `gift-card`.
 */
export type GiftCardSummaryType = ClosedEnum<typeof GiftCardSummaryType>;

/**
 * If the last balance update failed, this will contain the internal code for this error.
 */
export const GiftCardErrorCode = {
  InvalidGiftCard: "invalid_gift_card",
  ExpiredCard: "expired_card",
  InactiveCard: "inactive_card",
  InvalidServiceCredentials: "invalid_service_credentials",
  InvalidAmount: "invalid_amount",
  IncorrectCurrency: "incorrect_currency",
  InsufficientFunds: "insufficient_funds",
  InvalidServiceConfiguration: "invalid_service_configuration",
  OperationCanceled: "operation_canceled",
  ServiceError: "service_error",
  ServiceNetworkError: "service_network_error",
  UnknownError: "unknown_error",
} as const;
/**
 * If the last balance update failed, this will contain the internal code for this error.
 */
export type GiftCardErrorCode = ClosedEnum<typeof GiftCardErrorCode>;

/**
 * Base model with JSON encoders.
 */
export type GiftCardSummary = {
  /**
   * Always `gift-card`.
   */
  type?: GiftCardSummaryType | undefined;
  /**
   * The ID for the gift card.
   */
  id?: string | undefined;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * The first 6 digits of the full gift card number.
   */
  bin: string;
  /**
   * The 3 digits after the `bin` of the full gift card number.
   */
  subBin: string;
  /**
   * The last 4 digits for the gift card.
   */
  last4: string;
  /**
   * The ISO-4217 currency code that this gift card has a balance for.
   */
  currency?: string | undefined;
  /**
   *  The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
   */
  expirationDate?: Date | undefined;
  /**
   * The amount remaining on the balance for this gift card according to the gift card service. This may be `null` if the balance could not be fetched.
   */
  balance?: number | undefined;
  /**
   * If the last balance update failed, this will contain the internal code for this error.
   */
  balanceErrorCode?: GiftCardErrorCode | undefined;
  /**
   * If the last balance update failed, this will contain the the raw error code received from the gift card provider.
   */
  balanceRawErrorCode?: string | undefined;
  /**
   * If the last balance update failed, this will contain the the raw error message received from the gift card provider.
   */
  balanceRawErrorMessage?: string | undefined;
};

/** @internal */
export const GiftCardSummaryType$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardSummaryType
> = z.nativeEnum(GiftCardSummaryType);

/** @internal */
export const GiftCardSummaryType$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardSummaryType
> = GiftCardSummaryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardSummaryType$ {
  /** @deprecated use `GiftCardSummaryType$inboundSchema` instead. */
  export const inboundSchema = GiftCardSummaryType$inboundSchema;
  /** @deprecated use `GiftCardSummaryType$outboundSchema` instead. */
  export const outboundSchema = GiftCardSummaryType$outboundSchema;
}

/** @internal */
export const GiftCardErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardErrorCode
> = z.nativeEnum(GiftCardErrorCode);

/** @internal */
export const GiftCardErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardErrorCode
> = GiftCardErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardErrorCode$ {
  /** @deprecated use `GiftCardErrorCode$inboundSchema` instead. */
  export const inboundSchema = GiftCardErrorCode$inboundSchema;
  /** @deprecated use `GiftCardErrorCode$outboundSchema` instead. */
  export const outboundSchema = GiftCardErrorCode$outboundSchema;
}

/** @internal */
export const GiftCardSummary$inboundSchema: z.ZodType<
  GiftCardSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GiftCardSummaryType$inboundSchema.default("gift-card"),
  id: z.string().optional(),
  merchant_account_id: z.string(),
  bin: z.string(),
  sub_bin: z.string(),
  last4: z.string(),
  currency: z.string().optional(),
  expiration_date: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  balance: z.number().int().optional(),
  balance_error_code: GiftCardErrorCode$inboundSchema.optional(),
  balance_raw_error_code: z.string().optional(),
  balance_raw_error_message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "sub_bin": "subBin",
    "expiration_date": "expirationDate",
    "balance_error_code": "balanceErrorCode",
    "balance_raw_error_code": "balanceRawErrorCode",
    "balance_raw_error_message": "balanceRawErrorMessage",
  });
});

/** @internal */
export type GiftCardSummary$Outbound = {
  type: string;
  id?: string | undefined;
  merchant_account_id: string;
  bin: string;
  sub_bin: string;
  last4: string;
  currency?: string | undefined;
  expiration_date?: string | undefined;
  balance?: number | undefined;
  balance_error_code?: string | undefined;
  balance_raw_error_code?: string | undefined;
  balance_raw_error_message?: string | undefined;
};

/** @internal */
export const GiftCardSummary$outboundSchema: z.ZodType<
  GiftCardSummary$Outbound,
  z.ZodTypeDef,
  GiftCardSummary
> = z.object({
  type: GiftCardSummaryType$outboundSchema.default("gift-card"),
  id: z.string().optional(),
  merchantAccountId: z.string(),
  bin: z.string(),
  subBin: z.string(),
  last4: z.string(),
  currency: z.string().optional(),
  expirationDate: z.date().transform(v => v.toISOString()).optional(),
  balance: z.number().int().optional(),
  balanceErrorCode: GiftCardErrorCode$outboundSchema.optional(),
  balanceRawErrorCode: z.string().optional(),
  balanceRawErrorMessage: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    subBin: "sub_bin",
    expirationDate: "expiration_date",
    balanceErrorCode: "balance_error_code",
    balanceRawErrorCode: "balance_raw_error_code",
    balanceRawErrorMessage: "balance_raw_error_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardSummary$ {
  /** @deprecated use `GiftCardSummary$inboundSchema` instead. */
  export const inboundSchema = GiftCardSummary$inboundSchema;
  /** @deprecated use `GiftCardSummary$outboundSchema` instead. */
  export const outboundSchema = GiftCardSummary$outboundSchema;
  /** @deprecated use `GiftCardSummary$Outbound` instead. */
  export type Outbound = GiftCardSummary$Outbound;
}

export function giftCardSummaryToJSON(
  giftCardSummary: GiftCardSummary,
): string {
  return JSON.stringify(GiftCardSummary$outboundSchema.parse(giftCardSummary));
}

export function giftCardSummaryFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardSummary' from JSON`,
  );
}
