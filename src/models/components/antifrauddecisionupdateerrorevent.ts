/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudDecisionUpdateErrorEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudDecisionUpdateErrorEventType = ClosedEnum<
    typeof AntiFraudDecisionUpdateErrorEventType
>;

/**
 * The name of this resource. Is always `anti-fraud-decision-update-error`.
 */
export const AntiFraudDecisionUpdateErrorEventName = {
    AntiFraudDecisionUpdateError: "anti-fraud-decision-update-error",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-decision-update-error`.
 */
export type AntiFraudDecisionUpdateErrorEventName = ClosedEnum<
    typeof AntiFraudDecisionUpdateErrorEventName
>;

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionUpdateErrorEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The updated decision sent to the anti-fraud provider.
     */
    decision?: string | undefined;
    /**
     * The reason we could not update the anti-fraud decision.
     */
    reason?: string | undefined;
};

/**
 * This event logs the failure reason when attempting to update the decision on the anti-fraud provider.
 */
export type AntiFraudDecisionUpdateErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionUpdateErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-update-error`.
     */
    name?: AntiFraudDecisionUpdateErrorEventName | undefined;
    /**
     * The date and time when this transaction event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionUpdateErrorEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionUpdateErrorEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateErrorEventType
> = z.nativeEnum(AntiFraudDecisionUpdateErrorEventType);

/** @internal */
export const AntiFraudDecisionUpdateErrorEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateErrorEventType
> = AntiFraudDecisionUpdateErrorEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateErrorEventType$ {
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateErrorEventType$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateErrorEventType$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionUpdateErrorEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateErrorEventName
> = z.nativeEnum(AntiFraudDecisionUpdateErrorEventName);

/** @internal */
export const AntiFraudDecisionUpdateErrorEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionUpdateErrorEventName
> = AntiFraudDecisionUpdateErrorEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateErrorEventName$ {
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateErrorEventName$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateErrorEventName$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionUpdateErrorEventContext$inboundSchema: z.ZodType<
    AntiFraudDecisionUpdateErrorEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        anti_fraud_service_check_id: z.string().optional(),
        decision: z.string().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            anti_fraud_service_check_id: "antiFraudServiceCheckId",
        });
    });

/** @internal */
export type AntiFraudDecisionUpdateErrorEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    anti_fraud_service_check_id?: string | undefined;
    decision?: string | undefined;
    reason?: string | undefined;
};

/** @internal */
export const AntiFraudDecisionUpdateErrorEventContext$outboundSchema: z.ZodType<
    AntiFraudDecisionUpdateErrorEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionUpdateErrorEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        antiFraudServiceCheckId: z.string().optional(),
        decision: z.string().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            antiFraudServiceCheckId: "anti_fraud_service_check_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateErrorEventContext$ {
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateErrorEventContext$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateErrorEventContext$outboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateErrorEventContext$Outbound` instead. */
    export type Outbound = AntiFraudDecisionUpdateErrorEventContext$Outbound;
}

/** @internal */
export const AntiFraudDecisionUpdateErrorEvent$inboundSchema: z.ZodType<
    AntiFraudDecisionUpdateErrorEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudDecisionUpdateErrorEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionUpdateErrorEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => AntiFraudDecisionUpdateErrorEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudDecisionUpdateErrorEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudDecisionUpdateErrorEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudDecisionUpdateErrorEvent$outboundSchema: z.ZodType<
    AntiFraudDecisionUpdateErrorEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionUpdateErrorEvent
> = z
    .object({
        type: AntiFraudDecisionUpdateErrorEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionUpdateErrorEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => AntiFraudDecisionUpdateErrorEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionUpdateErrorEvent$ {
    /** @deprecated use `AntiFraudDecisionUpdateErrorEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionUpdateErrorEvent$inboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateErrorEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionUpdateErrorEvent$outboundSchema;
    /** @deprecated use `AntiFraudDecisionUpdateErrorEvent$Outbound` instead. */
    export type Outbound = AntiFraudDecisionUpdateErrorEvent$Outbound;
}
