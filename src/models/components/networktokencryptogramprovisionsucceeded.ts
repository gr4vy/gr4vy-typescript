/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const NetworkTokenCryptogramProvisionSucceededType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type NetworkTokenCryptogramProvisionSucceededType = ClosedEnum<
    typeof NetworkTokenCryptogramProvisionSucceededType
>;

/**
 * The name of this resource. Is always `network-token-cryptogram-provision-succeeded`.
 */
export const NetworkTokenCryptogramProvisionSucceededName = {
    NetworkTokenCryptogramProvisionSucceeded: "network-token-cryptogram-provision-succeeded",
} as const;
/**
 * The name of this resource. Is always `network-token-cryptogram-provision-succeeded`.
 */
export type NetworkTokenCryptogramProvisionSucceededName = ClosedEnum<
    typeof NetworkTokenCryptogramProvisionSucceededName
>;

/**
 * Additional context for this event.
 */
export type NetworkTokenCryptogramProvisionSucceededContext = {
    /**
     * The endpoint for the request.
     */
    url?: string | undefined;
    /**
     * The HTTP body sent to the Network Token provider.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the Network Token provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the Network Token provider.
     */
    responseStatusCode?: number | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to provision a cryptogram for a network token, in case the call succeeded.
 */
export type NetworkTokenCryptogramProvisionSucceeded = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: NetworkTokenCryptogramProvisionSucceededType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `network-token-cryptogram-provision-succeeded`.
     */
    name?: NetworkTokenCryptogramProvisionSucceededName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: NetworkTokenCryptogramProvisionSucceededContext | undefined;
};

/** @internal */
export const NetworkTokenCryptogramProvisionSucceededType$inboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenCryptogramProvisionSucceededType
> = z.nativeEnum(NetworkTokenCryptogramProvisionSucceededType);

/** @internal */
export const NetworkTokenCryptogramProvisionSucceededType$outboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenCryptogramProvisionSucceededType
> = NetworkTokenCryptogramProvisionSucceededType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenCryptogramProvisionSucceededType$ {
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededType$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenCryptogramProvisionSucceededType$inboundSchema;
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededType$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenCryptogramProvisionSucceededType$outboundSchema;
}

/** @internal */
export const NetworkTokenCryptogramProvisionSucceededName$inboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenCryptogramProvisionSucceededName
> = z.nativeEnum(NetworkTokenCryptogramProvisionSucceededName);

/** @internal */
export const NetworkTokenCryptogramProvisionSucceededName$outboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenCryptogramProvisionSucceededName
> = NetworkTokenCryptogramProvisionSucceededName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenCryptogramProvisionSucceededName$ {
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededName$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenCryptogramProvisionSucceededName$inboundSchema;
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededName$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenCryptogramProvisionSucceededName$outboundSchema;
}

/** @internal */
export const NetworkTokenCryptogramProvisionSucceededContext$inboundSchema: z.ZodType<
    NetworkTokenCryptogramProvisionSucceededContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type NetworkTokenCryptogramProvisionSucceededContext$Outbound = {
    url?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
};

/** @internal */
export const NetworkTokenCryptogramProvisionSucceededContext$outboundSchema: z.ZodType<
    NetworkTokenCryptogramProvisionSucceededContext$Outbound,
    z.ZodTypeDef,
    NetworkTokenCryptogramProvisionSucceededContext
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenCryptogramProvisionSucceededContext$ {
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededContext$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenCryptogramProvisionSucceededContext$inboundSchema;
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededContext$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenCryptogramProvisionSucceededContext$outboundSchema;
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceededContext$Outbound` instead. */
    export type Outbound = NetworkTokenCryptogramProvisionSucceededContext$Outbound;
}

/** @internal */
export const NetworkTokenCryptogramProvisionSucceeded$inboundSchema: z.ZodType<
    NetworkTokenCryptogramProvisionSucceeded,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: NetworkTokenCryptogramProvisionSucceededType$inboundSchema.optional(),
        id: z.string().optional(),
        name: NetworkTokenCryptogramProvisionSucceededName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => NetworkTokenCryptogramProvisionSucceededContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type NetworkTokenCryptogramProvisionSucceeded$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: NetworkTokenCryptogramProvisionSucceededContext$Outbound | undefined;
};

/** @internal */
export const NetworkTokenCryptogramProvisionSucceeded$outboundSchema: z.ZodType<
    NetworkTokenCryptogramProvisionSucceeded$Outbound,
    z.ZodTypeDef,
    NetworkTokenCryptogramProvisionSucceeded
> = z
    .object({
        type: NetworkTokenCryptogramProvisionSucceededType$outboundSchema.optional(),
        id: z.string().optional(),
        name: NetworkTokenCryptogramProvisionSucceededName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => NetworkTokenCryptogramProvisionSucceededContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenCryptogramProvisionSucceeded$ {
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceeded$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenCryptogramProvisionSucceeded$inboundSchema;
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceeded$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenCryptogramProvisionSucceeded$outboundSchema;
    /** @deprecated use `NetworkTokenCryptogramProvisionSucceeded$Outbound` instead. */
    export type Outbound = NetworkTokenCryptogramProvisionSucceeded$Outbound;
}
