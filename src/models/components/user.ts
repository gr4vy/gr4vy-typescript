/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MerchantAccount, MerchantAccount$ } from "./merchantaccount";
import { UserRole, UserRole$ } from "./userrole";
import * as z from "zod";

/**
 * `user`.
 */
export enum UserType {
    User = "user",
}

/**
 * The method by which this user authenticates.
 */
export enum UserCategory {
    Sso = "sso",
    Email = "email",
}

/**
 * The current status of this user.
 */
export enum UserStatus {
    Active = "active",
    Pending = "pending",
}

export type User = {
    /**
     * `user`.
     */
    type?: UserType | undefined;
    /**
     * The unique Gr4vy ID for this user.
     */
    id?: string | undefined;
    /**
     * The full name of this user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | undefined;
    /**
     * The user has set a valid password.
     */
    hasValidPassword?: boolean | undefined;
    /**
     * The method by which this user authenticates.
     */
    category?: UserCategory | undefined;
    /**
     * Denotes whether this user is a Gr4vy staff member.
     */
    isStaff?: boolean | undefined;
    /**
     * The token required when setting a password.
     */
    resetToken?: string | null | undefined;
    /**
     * The expiration date for the reset token.
     */
    resetTokenExpiresAt?: Date | null | undefined;
    /**
     * The date that the user last logged in at.
     */
    lastLoggedInAt?: Date | null | undefined;
    /**
     * The current status of this user.
     */
    status?: UserStatus | undefined;
    /**
     * The roles this user has been assigned.
     */
    roles?: Array<UserRole> | undefined;
    /**
     * A list of merchant accounts that the user is assigned to.
     */
    merchantAccounts?: Array<MerchantAccount> | undefined;
};

/** @internal */
export const UserType$ = z.nativeEnum(UserType);

/** @internal */
export const UserCategory$ = z.nativeEnum(UserCategory);

/** @internal */
export const UserStatus$ = z.nativeEnum(UserStatus);

/** @internal */
export namespace User$ {
    export type Inbound = {
        type?: UserType | undefined;
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | undefined;
        has_valid_password?: boolean | undefined;
        category?: UserCategory | undefined;
        is_staff?: boolean | undefined;
        reset_token?: string | null | undefined;
        reset_token_expires_at?: string | null | undefined;
        last_logged_in_at?: string | null | undefined;
        status?: UserStatus | undefined;
        roles?: Array<UserRole$.Inbound> | undefined;
        merchant_accounts?: Array<MerchantAccount$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, Inbound> = z
        .object({
            type: UserType$.optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            email_address: z.string().optional(),
            has_valid_password: z.boolean().optional(),
            category: UserCategory$.optional(),
            is_staff: z.boolean().optional(),
            reset_token: z.nullable(z.string()).optional(),
            reset_token_expires_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            last_logged_in_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            status: UserStatus$.optional(),
            roles: z.array(UserRole$.inboundSchema).optional(),
            merchant_accounts: z.array(MerchantAccount$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                ...(v.has_valid_password === undefined
                    ? null
                    : { hasValidPassword: v.has_valid_password }),
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.is_staff === undefined ? null : { isStaff: v.is_staff }),
                ...(v.reset_token === undefined ? null : { resetToken: v.reset_token }),
                ...(v.reset_token_expires_at === undefined
                    ? null
                    : { resetTokenExpiresAt: v.reset_token_expires_at }),
                ...(v.last_logged_in_at === undefined
                    ? null
                    : { lastLoggedInAt: v.last_logged_in_at }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.merchant_accounts === undefined
                    ? null
                    : { merchantAccounts: v.merchant_accounts }),
            };
        });

    export type Outbound = {
        type?: UserType | undefined;
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | undefined;
        has_valid_password?: boolean | undefined;
        category?: UserCategory | undefined;
        is_staff?: boolean | undefined;
        reset_token?: string | null | undefined;
        reset_token_expires_at?: string | null | undefined;
        last_logged_in_at?: string | null | undefined;
        status?: UserStatus | undefined;
        roles?: Array<UserRole$.Outbound> | undefined;
        merchant_accounts?: Array<MerchantAccount$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            type: UserType$.optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            emailAddress: z.string().optional(),
            hasValidPassword: z.boolean().optional(),
            category: UserCategory$.optional(),
            isStaff: z.boolean().optional(),
            resetToken: z.nullable(z.string()).optional(),
            resetTokenExpiresAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            lastLoggedInAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            status: UserStatus$.optional(),
            roles: z.array(UserRole$.outboundSchema).optional(),
            merchantAccounts: z.array(MerchantAccount$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.hasValidPassword === undefined
                    ? null
                    : { has_valid_password: v.hasValidPassword }),
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.isStaff === undefined ? null : { is_staff: v.isStaff }),
                ...(v.resetToken === undefined ? null : { reset_token: v.resetToken }),
                ...(v.resetTokenExpiresAt === undefined
                    ? null
                    : { reset_token_expires_at: v.resetTokenExpiresAt }),
                ...(v.lastLoggedInAt === undefined
                    ? null
                    : { last_logged_in_at: v.lastLoggedInAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.merchantAccounts === undefined
                    ? null
                    : { merchant_accounts: v.merchantAccounts }),
            };
        });
}
