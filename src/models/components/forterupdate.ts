/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    ApiRoutersAntiFraudServicesSchemasField,
    ApiRoutersAntiFraudServicesSchemasField$inboundSchema,
    ApiRoutersAntiFraudServicesSchemasField$Outbound,
    ApiRoutersAntiFraudServicesSchemasField$outboundSchema,
} from "./apiroutersantifraudservicesschemasfield.js";
import * as z from "zod";

export const ForterUpdateAntiFraudServiceDefinitionId = {
    ForterAntiFraud: "forter-anti-fraud",
} as const;
export type ForterUpdateAntiFraudServiceDefinitionId = ClosedEnum<
    typeof ForterUpdateAntiFraudServiceDefinitionId
>;

/**
 * Base model with JSON encoders.
 */
export type ForterUpdate = {
    fields?: Array<ApiRoutersAntiFraudServicesSchemasField> | undefined;
    antiFraudServiceDefinitionId?: ForterUpdateAntiFraudServiceDefinitionId | undefined;
    displayName?: string | undefined;
    active?: boolean | undefined;
    reviewsEnabled?: boolean | undefined;
};

/** @internal */
export const ForterUpdateAntiFraudServiceDefinitionId$inboundSchema: z.ZodNativeEnum<
    typeof ForterUpdateAntiFraudServiceDefinitionId
> = z.nativeEnum(ForterUpdateAntiFraudServiceDefinitionId);

/** @internal */
export const ForterUpdateAntiFraudServiceDefinitionId$outboundSchema: z.ZodNativeEnum<
    typeof ForterUpdateAntiFraudServiceDefinitionId
> = ForterUpdateAntiFraudServiceDefinitionId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterUpdateAntiFraudServiceDefinitionId$ {
    /** @deprecated use `ForterUpdateAntiFraudServiceDefinitionId$inboundSchema` instead. */
    export const inboundSchema = ForterUpdateAntiFraudServiceDefinitionId$inboundSchema;
    /** @deprecated use `ForterUpdateAntiFraudServiceDefinitionId$outboundSchema` instead. */
    export const outboundSchema = ForterUpdateAntiFraudServiceDefinitionId$outboundSchema;
}

/** @internal */
export const ForterUpdate$inboundSchema: z.ZodType<ForterUpdate, z.ZodTypeDef, unknown> = z
    .object({
        fields: z.array(ApiRoutersAntiFraudServicesSchemasField$inboundSchema).optional(),
        anti_fraud_service_definition_id:
            ForterUpdateAntiFraudServiceDefinitionId$inboundSchema.default("forter-anti-fraud"),
        display_name: z.string().optional(),
        active: z.boolean().optional(),
        reviews_enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            display_name: "displayName",
            reviews_enabled: "reviewsEnabled",
        });
    });

/** @internal */
export type ForterUpdate$Outbound = {
    fields?: Array<ApiRoutersAntiFraudServicesSchemasField$Outbound> | undefined;
    anti_fraud_service_definition_id: string;
    display_name?: string | undefined;
    active?: boolean | undefined;
    reviews_enabled?: boolean | undefined;
};

/** @internal */
export const ForterUpdate$outboundSchema: z.ZodType<
    ForterUpdate$Outbound,
    z.ZodTypeDef,
    ForterUpdate
> = z
    .object({
        fields: z.array(ApiRoutersAntiFraudServicesSchemasField$outboundSchema).optional(),
        antiFraudServiceDefinitionId:
            ForterUpdateAntiFraudServiceDefinitionId$outboundSchema.default("forter-anti-fraud"),
        displayName: z.string().optional(),
        active: z.boolean().optional(),
        reviewsEnabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            displayName: "display_name",
            reviewsEnabled: "reviews_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterUpdate$ {
    /** @deprecated use `ForterUpdate$inboundSchema` instead. */
    export const inboundSchema = ForterUpdate$inboundSchema;
    /** @deprecated use `ForterUpdate$outboundSchema` instead. */
    export const outboundSchema = ForterUpdate$outboundSchema;
    /** @deprecated use `ForterUpdate$Outbound` instead. */
    export type Outbound = ForterUpdate$Outbound;
}
