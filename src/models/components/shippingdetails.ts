/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

export type ShippingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | null | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | null | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | null | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: Address | null | undefined;
  /**
   * The ID for the shipping details.
   */
  id?: string | null | undefined;
  /**
   * The ID for the buyer.
   */
  buyerId?: string | null | undefined;
  /**
   * Always `shipping-details`.
   */
  type?: "shipping-details" | undefined;
};

/** @internal */
export const ShippingDetails$inboundSchema: z.ZodType<
  ShippingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  address: z.nullable(Address$inboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  buyer_id: z.nullable(z.string()).optional(),
  type: z.literal("shipping-details").default("shipping-details"),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "buyer_id": "buyerId",
  });
});

/** @internal */
export type ShippingDetails$Outbound = {
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email_address?: string | null | undefined;
  phone_number?: string | null | undefined;
  address?: Address$Outbound | null | undefined;
  id?: string | null | undefined;
  buyer_id?: string | null | undefined;
  type: "shipping-details";
};

/** @internal */
export const ShippingDetails$outboundSchema: z.ZodType<
  ShippingDetails$Outbound,
  z.ZodTypeDef,
  ShippingDetails
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  address: z.nullable(Address$outboundSchema).optional(),
  id: z.nullable(z.string()).optional(),
  buyerId: z.nullable(z.string()).optional(),
  type: z.literal("shipping-details").default("shipping-details" as const),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    buyerId: "buyer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShippingDetails$ {
  /** @deprecated use `ShippingDetails$inboundSchema` instead. */
  export const inboundSchema = ShippingDetails$inboundSchema;
  /** @deprecated use `ShippingDetails$outboundSchema` instead. */
  export const outboundSchema = ShippingDetails$outboundSchema;
  /** @deprecated use `ShippingDetails$Outbound` instead. */
  export type Outbound = ShippingDetails$Outbound;
}

export function shippingDetailsToJSON(
  shippingDetails: ShippingDetails,
): string {
  return JSON.stringify(ShippingDetails$outboundSchema.parse(shippingDetails));
}

export function shippingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ShippingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShippingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShippingDetails' from JSON`,
  );
}
