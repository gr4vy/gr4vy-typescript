/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DefinitionFieldFormat,
  DefinitionFieldFormat$inboundSchema,
  DefinitionFieldFormat$outboundSchema,
} from "./definitionfieldformat.js";

/**
 * A single field that needs to be submitted for a payment service when it is created.
 */
export type DefinitionField = {
  /**
   * The key of a field that can be submitted.
   */
  key: string;
  /**
   * The human readable name for this field.
   */
  displayName: string;
  /**
   * Defines if this field is required when the service is created.
   */
  required: boolean;
  format: DefinitionFieldFormat;
  /**
   * Defines if this field is secret. When `true` the field's value is not returned when querying the payment service information.
   */
  secret: boolean;
};

/** @internal */
export const DefinitionField$inboundSchema: z.ZodType<
  DefinitionField,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  display_name: z.string(),
  required: z.boolean(),
  format: DefinitionFieldFormat$inboundSchema,
  secret: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type DefinitionField$Outbound = {
  key: string;
  display_name: string;
  required: boolean;
  format: string;
  secret: boolean;
};

/** @internal */
export const DefinitionField$outboundSchema: z.ZodType<
  DefinitionField$Outbound,
  z.ZodTypeDef,
  DefinitionField
> = z.object({
  key: z.string(),
  displayName: z.string(),
  required: z.boolean(),
  format: DefinitionFieldFormat$outboundSchema,
  secret: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefinitionField$ {
  /** @deprecated use `DefinitionField$inboundSchema` instead. */
  export const inboundSchema = DefinitionField$inboundSchema;
  /** @deprecated use `DefinitionField$outboundSchema` instead. */
  export const outboundSchema = DefinitionField$outboundSchema;
  /** @deprecated use `DefinitionField$Outbound` instead. */
  export type Outbound = DefinitionField$Outbound;
}

export function definitionFieldToJSON(
  definitionField: DefinitionField,
): string {
  return JSON.stringify(DefinitionField$outboundSchema.parse(definitionField));
}

export function definitionFieldFromJSON(
  jsonString: string,
): SafeParseResult<DefinitionField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefinitionField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefinitionField' from JSON`,
  );
}
