/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The status of the 3DS challenge for this transaction.
 */
export enum ThreeDSecureSummaryStatus {
    SetupError = "setup_error",
    Error = "error",
    Declined = "declined",
    Cancelled = "cancelled",
    Complete = "complete",
}

/**
 * The method used for 3DS authentication for this transaction.
 */
export enum ThreeDSecureSummaryMethod {
    Challenge = "challenge",
    Frictionless = "frictionless",
}

/**
 * The error data received from our 3DS server. This will not be
 *
 * @remarks
 * populated if the customer failed the authentication with a
 * status code of `N`, `R`, or `U`.  To see full details about
 * the 3DS calls in those situations please use our transaction
 * events API.
 */
export type ThreeDSecureErrorData = {
    /**
     * The error description.
     */
    description: string | null;
    /**
     * Detail for the error.
     */
    detail: string | null;
    /**
     * The error code.
     */
    code: string | null;
    /**
     * Code indicating the 3-D Secure component that identified the error..
     */
    component: string | null;
};

/**
 * The transaction status after a the 3DS challenge. This will
 *
 * @remarks
 * be null in case of a frictionless 3DS flow.
 */
export enum ResponseDataAuthenticationResponse {
    Y = "Y",
    A = "A",
    N = "N",
    R = "R",
    U = "U",
}

/**
 * The transaction status received as part of the authentication request.
 */
export enum ResponseDataDirectoryResponse {
    C = "C",
    Y = "Y",
    A = "A",
    N = "N",
    R = "R",
    U = "U",
}

export type ThreeDSecureDataVersion2 = {
    /**
     * The cardholder authentication value or AAV.
     */
    cavv?: string | null | undefined;
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci?: string | null | undefined;
    /**
     * The version of 3-D Secure that was used.
     */
    version?: string | undefined;
    /**
     * The transaction status after a the 3DS challenge. This will
     *
     * @remarks
     * be null in case of a frictionless 3DS flow.
     */
    authenticationResponse?: ResponseDataAuthenticationResponse | null | undefined;
    /**
     * The transaction status received as part of the authentication request.
     */
    directoryResponse?: ResponseDataDirectoryResponse | null | undefined;
    /**
     * The transaction identifier.
     */
    directoryTransactionId?: string | null | undefined;
    /**
     * The reason identifier for a declined transaction.
     */
    transactionReason?: string | null | undefined;
};

/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export enum ResponseDataScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

export type ThreeDSecureDataVersion1 = {
    /**
     * The cardholder authentication value or AAV.
     */
    cavv: string;
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci: string;
    /**
     * The version of 3-D Secure that was used.
     */
    version: string;
    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
     */
    directoryResponse: string;
    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    scheme?: ResponseDataScheme | null | undefined;
    /**
     * The response for the 3DS authentication call.
     */
    authenticationResponse: string;
    /**
     * The CAVV algorithm used.
     */
    cavvAlgorithm: string;
    /**
     * The transaction identifier.
     */
    xid: string;
};

/**
 * The 3DS data sent to the payment service for this transaction.
 *
 * @remarks
 *
 * This will only be populated if external 3DS data was passed in
 * directly as part of the transaction API call, or if our 3DS server
 * returned a status code of `Y` or `A`.
 *
 * In case of a failure to authenticate (status `N`, `R`, or `U`) this
 * field will not be populated. To see full details about the 3DS calls
 * please use our transaction events API.
 */
export type ResponseData = ThreeDSecureDataVersion2 | ThreeDSecureDataVersion1;

/**
 * The 3-D Secure data that was sent to the payment
 *
 * @remarks
 * service for the transaction.
 */
export type ThreeDSecureSummary = {
    /**
     * The version of 3DS used for this transaction.
     */
    version?: string | undefined;
    /**
     * The status of the 3DS challenge for this transaction.
     */
    status?: ThreeDSecureSummaryStatus | undefined;
    /**
     * The method used for 3DS authentication for this transaction.
     */
    method?: ThreeDSecureSummaryMethod | undefined;
    /**
     * The error data received from our 3DS server. This will not be
     *
     * @remarks
     * populated if the customer failed the authentication with a
     * status code of `N`, `R`, or `U`.  To see full details about
     * the 3DS calls in those situations please use our transaction
     * events API.
     */
    errorData?: ThreeDSecureErrorData | null | undefined;
    /**
     * The 3DS data sent to the payment service for this transaction.
     *
     * @remarks
     *
     * This will only be populated if external 3DS data was passed in
     * directly as part of the transaction API call, or if our 3DS server
     * returned a status code of `Y` or `A`.
     *
     * In case of a failure to authenticate (status `N`, `R`, or `U`) this
     * field will not be populated. To see full details about the 3DS calls
     * please use our transaction events API.
     */
    responseData?: ThreeDSecureDataVersion2 | ThreeDSecureDataVersion1 | null | undefined;
};

/** @internal */
export namespace ThreeDSecureSummaryStatus$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureSummaryStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureSummaryMethod$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureSummaryMethod);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureErrorData$ {
    export const inboundSchema: z.ZodType<ThreeDSecureErrorData, z.ZodTypeDef, unknown> = z.object({
        description: z.nullable(z.string()),
        detail: z.nullable(z.string()),
        code: z.nullable(z.string()),
        component: z.nullable(z.string()),
    });

    export type Outbound = {
        description: string | null;
        detail: string | null;
        code: string | null;
        component: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureErrorData> =
        z.object({
            description: z.nullable(z.string()),
            detail: z.nullable(z.string()),
            code: z.nullable(z.string()),
            component: z.nullable(z.string()),
        });
}

/** @internal */
export namespace ResponseDataAuthenticationResponse$ {
    export const inboundSchema = z.nativeEnum(ResponseDataAuthenticationResponse);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ResponseDataDirectoryResponse$ {
    export const inboundSchema = z.nativeEnum(ResponseDataDirectoryResponse);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureDataVersion2$ {
    export const inboundSchema: z.ZodType<ThreeDSecureDataVersion2, z.ZodTypeDef, unknown> = z
        .object({
            cavv: z.nullable(z.string()).optional(),
            eci: z.nullable(z.string()).optional(),
            version: z.string().optional(),
            authentication_response: z
                .nullable(ResponseDataAuthenticationResponse$.inboundSchema)
                .optional(),
            directory_response: z.nullable(ResponseDataDirectoryResponse$.inboundSchema).optional(),
            directory_transaction_id: z.nullable(z.string()).optional(),
            transaction_reason: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                authentication_response: "authenticationResponse",
                directory_response: "directoryResponse",
                directory_transaction_id: "directoryTransactionId",
                transaction_reason: "transactionReason",
            });
        });

    export type Outbound = {
        cavv?: string | null | undefined;
        eci?: string | null | undefined;
        version?: string | undefined;
        authentication_response?: string | null | undefined;
        directory_response?: string | null | undefined;
        directory_transaction_id?: string | null | undefined;
        transaction_reason?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureDataVersion2> = z
        .object({
            cavv: z.nullable(z.string()).optional(),
            eci: z.nullable(z.string()).optional(),
            version: z.string().optional(),
            authenticationResponse: z
                .nullable(ResponseDataAuthenticationResponse$.outboundSchema)
                .optional(),
            directoryResponse: z.nullable(ResponseDataDirectoryResponse$.outboundSchema).optional(),
            directoryTransactionId: z.nullable(z.string()).optional(),
            transactionReason: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                authenticationResponse: "authentication_response",
                directoryResponse: "directory_response",
                directoryTransactionId: "directory_transaction_id",
                transactionReason: "transaction_reason",
            });
        });
}

/** @internal */
export namespace ResponseDataScheme$ {
    export const inboundSchema = z.nativeEnum(ResponseDataScheme);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureDataVersion1$ {
    export const inboundSchema: z.ZodType<ThreeDSecureDataVersion1, z.ZodTypeDef, unknown> = z
        .object({
            cavv: z.string(),
            eci: z.string(),
            version: z.string(),
            directory_response: z.string(),
            scheme: z.nullable(ResponseDataScheme$.inboundSchema).optional(),
            authentication_response: z.string(),
            cavv_algorithm: z.string(),
            xid: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                directory_response: "directoryResponse",
                authentication_response: "authenticationResponse",
                cavv_algorithm: "cavvAlgorithm",
            });
        });

    export type Outbound = {
        cavv: string;
        eci: string;
        version: string;
        directory_response: string;
        scheme?: string | null | undefined;
        authentication_response: string;
        cavv_algorithm: string;
        xid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureDataVersion1> = z
        .object({
            cavv: z.string(),
            eci: z.string(),
            version: z.string(),
            directoryResponse: z.string(),
            scheme: z.nullable(ResponseDataScheme$.outboundSchema).optional(),
            authenticationResponse: z.string(),
            cavvAlgorithm: z.string(),
            xid: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                directoryResponse: "directory_response",
                authenticationResponse: "authentication_response",
                cavvAlgorithm: "cavv_algorithm",
            });
        });
}

/** @internal */
export namespace ResponseData$ {
    export const inboundSchema: z.ZodType<ResponseData, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => ThreeDSecureDataVersion2$.inboundSchema),
        z.lazy(() => ThreeDSecureDataVersion1$.inboundSchema),
    ]);

    export type Outbound = ThreeDSecureDataVersion2$.Outbound | ThreeDSecureDataVersion1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseData> = z.union([
        z.lazy(() => ThreeDSecureDataVersion2$.outboundSchema),
        z.lazy(() => ThreeDSecureDataVersion1$.outboundSchema),
    ]);
}

/** @internal */
export namespace ThreeDSecureSummary$ {
    export const inboundSchema: z.ZodType<ThreeDSecureSummary, z.ZodTypeDef, unknown> = z
        .object({
            version: z.string().optional(),
            status: ThreeDSecureSummaryStatus$.inboundSchema.optional(),
            method: ThreeDSecureSummaryMethod$.inboundSchema.optional(),
            error_data: z.nullable(z.lazy(() => ThreeDSecureErrorData$.inboundSchema)).optional(),
            response_data: z
                .nullable(
                    z.union([
                        z.lazy(() => ThreeDSecureDataVersion2$.inboundSchema),
                        z.lazy(() => ThreeDSecureDataVersion1$.inboundSchema),
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                error_data: "errorData",
                response_data: "responseData",
            });
        });

    export type Outbound = {
        version?: string | undefined;
        status?: string | undefined;
        method?: string | undefined;
        error_data?: ThreeDSecureErrorData$.Outbound | null | undefined;
        response_data?:
            | ThreeDSecureDataVersion2$.Outbound
            | ThreeDSecureDataVersion1$.Outbound
            | null
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureSummary> = z
        .object({
            version: z.string().optional(),
            status: ThreeDSecureSummaryStatus$.outboundSchema.optional(),
            method: ThreeDSecureSummaryMethod$.outboundSchema.optional(),
            errorData: z.nullable(z.lazy(() => ThreeDSecureErrorData$.outboundSchema)).optional(),
            responseData: z
                .nullable(
                    z.union([
                        z.lazy(() => ThreeDSecureDataVersion2$.outboundSchema),
                        z.lazy(() => ThreeDSecureDataVersion1$.outboundSchema),
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                errorData: "error_data",
                responseData: "response_data",
            });
        });
}
