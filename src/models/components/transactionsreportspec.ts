/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Model = {
    Transactions: "transactions",
} as const;
export type Model = ClosedEnum<typeof Model>;

export type Params = {};

/**
 * Base model with JSON encoders.
 */
export type TransactionsReportSpec = {
    model?: Model | undefined;
    params: Params;
};

/** @internal */
export const Model$inboundSchema: z.ZodNativeEnum<typeof Model> = z.nativeEnum(Model);

/** @internal */
export const Model$outboundSchema: z.ZodNativeEnum<typeof Model> = Model$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
    /** @deprecated use `Model$inboundSchema` instead. */
    export const inboundSchema = Model$inboundSchema;
    /** @deprecated use `Model$outboundSchema` instead. */
    export const outboundSchema = Model$outboundSchema;
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Params$Outbound = {};

/** @internal */
export const Params$outboundSchema: z.ZodType<Params$Outbound, z.ZodTypeDef, Params> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
    /** @deprecated use `Params$inboundSchema` instead. */
    export const inboundSchema = Params$inboundSchema;
    /** @deprecated use `Params$outboundSchema` instead. */
    export const outboundSchema = Params$outboundSchema;
    /** @deprecated use `Params$Outbound` instead. */
    export type Outbound = Params$Outbound;
}

/** @internal */
export const TransactionsReportSpec$inboundSchema: z.ZodType<
    TransactionsReportSpec,
    z.ZodTypeDef,
    unknown
> = z.object({
    model: Model$inboundSchema.default("transactions"),
    params: z.lazy(() => Params$inboundSchema),
});

/** @internal */
export type TransactionsReportSpec$Outbound = {
    model: string;
    params: Params$Outbound;
};

/** @internal */
export const TransactionsReportSpec$outboundSchema: z.ZodType<
    TransactionsReportSpec$Outbound,
    z.ZodTypeDef,
    TransactionsReportSpec
> = z.object({
    model: Model$outboundSchema.default("transactions"),
    params: z.lazy(() => Params$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsReportSpec$ {
    /** @deprecated use `TransactionsReportSpec$inboundSchema` instead. */
    export const inboundSchema = TransactionsReportSpec$inboundSchema;
    /** @deprecated use `TransactionsReportSpec$outboundSchema` instead. */
    export const outboundSchema = TransactionsReportSpec$outboundSchema;
    /** @deprecated use `TransactionsReportSpec$Outbound` instead. */
    export type Outbound = TransactionsReportSpec$Outbound;
}
