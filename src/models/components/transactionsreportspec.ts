/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransactionsReportSpec = {
  /**
   * The report model type.
   */
  model?: "transactions" | undefined;
  /**
   * The parameters for the transactions report model.
   */
  params: { [k: string]: any };
};

/** @internal */
export const TransactionsReportSpec$inboundSchema: z.ZodType<
  TransactionsReportSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.literal("transactions").default("transactions"),
  params: z.record(z.any()),
});

/** @internal */
export type TransactionsReportSpec$Outbound = {
  model: "transactions";
  params: { [k: string]: any };
};

/** @internal */
export const TransactionsReportSpec$outboundSchema: z.ZodType<
  TransactionsReportSpec$Outbound,
  z.ZodTypeDef,
  TransactionsReportSpec
> = z.object({
  model: z.literal("transactions").default("transactions" as const),
  params: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsReportSpec$ {
  /** @deprecated use `TransactionsReportSpec$inboundSchema` instead. */
  export const inboundSchema = TransactionsReportSpec$inboundSchema;
  /** @deprecated use `TransactionsReportSpec$outboundSchema` instead. */
  export const outboundSchema = TransactionsReportSpec$outboundSchema;
  /** @deprecated use `TransactionsReportSpec$Outbound` instead. */
  export type Outbound = TransactionsReportSpec$Outbound;
}

export function transactionsReportSpecToJSON(
  transactionsReportSpec: TransactionsReportSpec,
): string {
  return JSON.stringify(
    TransactionsReportSpec$outboundSchema.parse(transactionsReportSpec),
  );
}

export function transactionsReportSpecFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsReportSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsReportSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsReportSpec' from JSON`,
  );
}
