/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The name of the transformation. This will always be `force_mit`.
 */
export enum ForceMITTransformationOutcomeName {
    ForceMit = "force_mit",
}

/**
 * Transformation to be applied when for card transaction
 *
 * @remarks
 * flow/routing action outcome.
 *
 * This transformation forces the processing of a
 * transaction as an MIT one.
 *
 * If the request to create a transaction was for MIT,
 * i.e. `merchant_initiated=true`, this transformation
 * won't have any effect.
 */
export type ForceMITTransformationOutcome = {
    /**
     * The name of the transformation. This will always be `force_mit`.
     */
    name?: ForceMITTransformationOutcomeName | undefined;
};

/** @internal */
export const ForceMITTransformationOutcomeName$ = z.nativeEnum(ForceMITTransformationOutcomeName);

/** @internal */
export namespace ForceMITTransformationOutcome$ {
    export type Inbound = {
        name?: ForceMITTransformationOutcomeName | undefined;
    };

    export const inboundSchema: z.ZodType<ForceMITTransformationOutcome, z.ZodTypeDef, Inbound> = z
        .object({
            name: ForceMITTransformationOutcomeName$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        name?: ForceMITTransformationOutcomeName | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ForceMITTransformationOutcome> =
        z
            .object({
                name: ForceMITTransformationOutcomeName$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.name === undefined ? null : { name: v.name }),
                };
            });
}
