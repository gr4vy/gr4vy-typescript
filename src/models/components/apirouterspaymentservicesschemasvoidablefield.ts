/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Two = {
    Unknown: "",
} as const;
export type Two = ClosedEnum<typeof Two>;

export type Value = string | Two;

/**
 * Base model with JSON encoders.
 */
export type ApiRoutersPaymentServicesSchemasVoidableField = {
    key: string;
    value: string | Two;
};

/** @internal */
export const Two$inboundSchema: z.ZodNativeEnum<typeof Two> = z.nativeEnum(Two);

/** @internal */
export const Two$outboundSchema: z.ZodNativeEnum<typeof Two> = Two$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    Two$inboundSchema,
]);

/** @internal */
export type Value$Outbound = string | string;

/** @internal */
export const Value$outboundSchema: z.ZodType<Value$Outbound, z.ZodTypeDef, Value> = z.union([
    z.string(),
    Two$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
    /** @deprecated use `Value$inboundSchema` instead. */
    export const inboundSchema = Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    export const outboundSchema = Value$outboundSchema;
    /** @deprecated use `Value$Outbound` instead. */
    export type Outbound = Value$Outbound;
}

/** @internal */
export const ApiRoutersPaymentServicesSchemasVoidableField$inboundSchema: z.ZodType<
    ApiRoutersPaymentServicesSchemasVoidableField,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string(),
    value: z.union([z.string(), Two$inboundSchema]),
});

/** @internal */
export type ApiRoutersPaymentServicesSchemasVoidableField$Outbound = {
    key: string;
    value: string | string;
};

/** @internal */
export const ApiRoutersPaymentServicesSchemasVoidableField$outboundSchema: z.ZodType<
    ApiRoutersPaymentServicesSchemasVoidableField$Outbound,
    z.ZodTypeDef,
    ApiRoutersPaymentServicesSchemasVoidableField
> = z.object({
    key: z.string(),
    value: z.union([z.string(), Two$outboundSchema]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentServicesSchemasVoidableField$ {
    /** @deprecated use `ApiRoutersPaymentServicesSchemasVoidableField$inboundSchema` instead. */
    export const inboundSchema = ApiRoutersPaymentServicesSchemasVoidableField$inboundSchema;
    /** @deprecated use `ApiRoutersPaymentServicesSchemasVoidableField$outboundSchema` instead. */
    export const outboundSchema = ApiRoutersPaymentServicesSchemasVoidableField$outboundSchema;
    /** @deprecated use `ApiRoutersPaymentServicesSchemasVoidableField$Outbound` instead. */
    export type Outbound = ApiRoutersPaymentServicesSchemasVoidableField$Outbound;
}
