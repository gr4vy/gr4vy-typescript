/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GiftCardRedemption,
  GiftCardRedemption$inboundSchema,
  GiftCardRedemption$Outbound,
  GiftCardRedemption$outboundSchema,
} from "./giftcardredemption.js";
import {
  GiftCardService,
  GiftCardService$inboundSchema,
  GiftCardService$Outbound,
  GiftCardService$outboundSchema,
} from "./giftcardservice.js";
import {
  InstrumentType,
  InstrumentType$inboundSchema,
  InstrumentType$outboundSchema,
} from "./instrumenttype.js";
import {
  Method,
  Method$inboundSchema,
  Method$outboundSchema,
} from "./method.js";
import {
  ShippingDetails,
  ShippingDetails$inboundSchema,
  ShippingDetails$Outbound,
  ShippingDetails$outboundSchema,
} from "./shippingdetails.js";
import {
  TransactionBuyerOutput,
  TransactionBuyerOutput$inboundSchema,
  TransactionBuyerOutput$Outbound,
  TransactionBuyerOutput$outboundSchema,
} from "./transactionbuyeroutput.js";
import {
  TransactionIntent,
  TransactionIntent$inboundSchema,
  TransactionIntent$outboundSchema,
} from "./transactionintent.js";
import {
  TransactionPaymentMethodOutput,
  TransactionPaymentMethodOutput$inboundSchema,
  TransactionPaymentMethodOutput$Outbound,
  TransactionPaymentMethodOutput$outboundSchema,
} from "./transactionpaymentmethodoutput.js";
import {
  TransactionPaymentService,
  TransactionPaymentService$inboundSchema,
  TransactionPaymentService$Outbound,
  TransactionPaymentService$outboundSchema,
} from "./transactionpaymentservice.js";
import {
  TransactionStatus,
  TransactionStatus$inboundSchema,
  TransactionStatus$outboundSchema,
} from "./transactionstatus.js";

/**
 * A transaction, summarised
 */
export type TransactionSummaryOutput = {
  /**
   * Always `transaction`.
   */
  type?: "transaction" | undefined;
  /**
   * The ID for the transaction.
   */
  id: string;
  /**
   * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
   */
  reconciliationId: string;
  /**
   * The ID of the merchant account this transaction belongs to.
   */
  merchantAccountId: string;
  /**
   * The currency code for this transaction.
   */
  currency: string;
  /**
   * The total amount for this transaction across all funding sources including gift cards.
   */
  amount: number;
  status: TransactionStatus;
  /**
   * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
   */
  authorizedAmount: number;
  /**
   * The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
   */
  capturedAmount: number;
  /**
   * The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
   */
  refundedAmount: number;
  /**
   * The ISO 4217 currency code of this transaction's settlement.
   */
  settledCurrency?: string | null | undefined;
  /**
   * The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
   */
  settledAmount: number;
  /**
   * Indicates whether this transaction has been settled.
   */
  settled: boolean;
  /**
   * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
   */
  country?: string | null | undefined;
  /**
   * An external identifier that can be used to match the transaction against your own records.
   */
  externalIdentifier?: string | null | undefined;
  intent: TransactionIntent;
  /**
   * The payment method used for this transaction.
   */
  paymentMethod?: TransactionPaymentMethodOutput | null | undefined;
  /**
   * The method used for the transaction.
   */
  method?: Method | null | undefined;
  /**
   * The name of the instrument used to process the transaction.
   */
  instrumentType?: InstrumentType | null | undefined;
  /**
   * The standardized error code set by Gr4vy.
   */
  errorCode?: string | null | undefined;
  /**
   * The payment service used for this transaction.
   */
  paymentService?: TransactionPaymentService | null | undefined;
  /**
   * Whether a manual anti fraud review is pending with an anti fraud service.
   */
  pendingReview?: boolean | undefined;
  /**
   * The buyer used for this transaction.
   */
  buyer?: TransactionBuyerOutput | null | undefined;
  /**
   * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseCode?: string | null | undefined;
  /**
   *  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseDescription?: string | null | undefined;
  /**
   * The shipping details associated with the transaction.
   */
  shippingDetails?: ShippingDetails | null | undefined;
  /**
   * The identifier for the checkout session this transaction is associated with.
   */
  checkoutSessionId?: string | null | undefined;
  /**
   * The gift cards redeemed for this transaction.
   */
  giftCardRedemptions: Array<GiftCardRedemption>;
  /**
   * The gift card service used for this transaction.
   */
  giftCardService?: GiftCardService | null | undefined;
  /**
   * The date and time when the transaction was created, in ISO 8601 format.
   */
  createdAt: Date;
  /**
   * The date and time when the transaction was last updated, in ISO 8601 format.
   */
  updatedAt: Date;
  /**
   * Indicates whether this transaction has been disputed.
   */
  disputed: boolean;
};

/** @internal */
export const TransactionSummaryOutput$inboundSchema: z.ZodType<
  TransactionSummaryOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("transaction").default("transaction"),
  id: z.string(),
  reconciliation_id: z.string(),
  merchant_account_id: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionStatus$inboundSchema,
  authorized_amount: z.number().int(),
  captured_amount: z.number().int(),
  refunded_amount: z.number().int(),
  settled_currency: z.nullable(z.string()).optional(),
  settled_amount: z.number().int(),
  settled: z.boolean(),
  country: z.nullable(z.string()).optional(),
  external_identifier: z.nullable(z.string()).optional(),
  intent: TransactionIntent$inboundSchema,
  payment_method: z.nullable(TransactionPaymentMethodOutput$inboundSchema)
    .optional(),
  method: z.nullable(Method$inboundSchema).optional(),
  instrument_type: z.nullable(InstrumentType$inboundSchema).optional(),
  error_code: z.nullable(z.string()).optional(),
  payment_service: z.nullable(TransactionPaymentService$inboundSchema)
    .optional(),
  pending_review: z.boolean().default(false),
  buyer: z.nullable(TransactionBuyerOutput$inboundSchema).optional(),
  raw_response_code: z.nullable(z.string()).optional(),
  raw_response_description: z.nullable(z.string()).optional(),
  shipping_details: z.nullable(ShippingDetails$inboundSchema).optional(),
  checkout_session_id: z.nullable(z.string()).optional(),
  gift_card_redemptions: z.array(GiftCardRedemption$inboundSchema),
  gift_card_service: z.nullable(GiftCardService$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  disputed: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "reconciliation_id": "reconciliationId",
    "merchant_account_id": "merchantAccountId",
    "authorized_amount": "authorizedAmount",
    "captured_amount": "capturedAmount",
    "refunded_amount": "refundedAmount",
    "settled_currency": "settledCurrency",
    "settled_amount": "settledAmount",
    "external_identifier": "externalIdentifier",
    "payment_method": "paymentMethod",
    "instrument_type": "instrumentType",
    "error_code": "errorCode",
    "payment_service": "paymentService",
    "pending_review": "pendingReview",
    "raw_response_code": "rawResponseCode",
    "raw_response_description": "rawResponseDescription",
    "shipping_details": "shippingDetails",
    "checkout_session_id": "checkoutSessionId",
    "gift_card_redemptions": "giftCardRedemptions",
    "gift_card_service": "giftCardService",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TransactionSummaryOutput$Outbound = {
  type: "transaction";
  id: string;
  reconciliation_id: string;
  merchant_account_id: string;
  currency: string;
  amount: number;
  status: string;
  authorized_amount: number;
  captured_amount: number;
  refunded_amount: number;
  settled_currency?: string | null | undefined;
  settled_amount: number;
  settled: boolean;
  country?: string | null | undefined;
  external_identifier?: string | null | undefined;
  intent: string;
  payment_method?: TransactionPaymentMethodOutput$Outbound | null | undefined;
  method?: string | null | undefined;
  instrument_type?: string | null | undefined;
  error_code?: string | null | undefined;
  payment_service?: TransactionPaymentService$Outbound | null | undefined;
  pending_review: boolean;
  buyer?: TransactionBuyerOutput$Outbound | null | undefined;
  raw_response_code?: string | null | undefined;
  raw_response_description?: string | null | undefined;
  shipping_details?: ShippingDetails$Outbound | null | undefined;
  checkout_session_id?: string | null | undefined;
  gift_card_redemptions: Array<GiftCardRedemption$Outbound>;
  gift_card_service?: GiftCardService$Outbound | null | undefined;
  created_at: string;
  updated_at: string;
  disputed: boolean;
};

/** @internal */
export const TransactionSummaryOutput$outboundSchema: z.ZodType<
  TransactionSummaryOutput$Outbound,
  z.ZodTypeDef,
  TransactionSummaryOutput
> = z.object({
  type: z.literal("transaction").default("transaction" as const),
  id: z.string(),
  reconciliationId: z.string(),
  merchantAccountId: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionStatus$outboundSchema,
  authorizedAmount: z.number().int(),
  capturedAmount: z.number().int(),
  refundedAmount: z.number().int(),
  settledCurrency: z.nullable(z.string()).optional(),
  settledAmount: z.number().int(),
  settled: z.boolean(),
  country: z.nullable(z.string()).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
  intent: TransactionIntent$outboundSchema,
  paymentMethod: z.nullable(TransactionPaymentMethodOutput$outboundSchema)
    .optional(),
  method: z.nullable(Method$outboundSchema).optional(),
  instrumentType: z.nullable(InstrumentType$outboundSchema).optional(),
  errorCode: z.nullable(z.string()).optional(),
  paymentService: z.nullable(TransactionPaymentService$outboundSchema)
    .optional(),
  pendingReview: z.boolean().default(false),
  buyer: z.nullable(TransactionBuyerOutput$outboundSchema).optional(),
  rawResponseCode: z.nullable(z.string()).optional(),
  rawResponseDescription: z.nullable(z.string()).optional(),
  shippingDetails: z.nullable(ShippingDetails$outboundSchema).optional(),
  checkoutSessionId: z.nullable(z.string()).optional(),
  giftCardRedemptions: z.array(GiftCardRedemption$outboundSchema),
  giftCardService: z.nullable(GiftCardService$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  disputed: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    reconciliationId: "reconciliation_id",
    merchantAccountId: "merchant_account_id",
    authorizedAmount: "authorized_amount",
    capturedAmount: "captured_amount",
    refundedAmount: "refunded_amount",
    settledCurrency: "settled_currency",
    settledAmount: "settled_amount",
    externalIdentifier: "external_identifier",
    paymentMethod: "payment_method",
    instrumentType: "instrument_type",
    errorCode: "error_code",
    paymentService: "payment_service",
    pendingReview: "pending_review",
    rawResponseCode: "raw_response_code",
    rawResponseDescription: "raw_response_description",
    shippingDetails: "shipping_details",
    checkoutSessionId: "checkout_session_id",
    giftCardRedemptions: "gift_card_redemptions",
    giftCardService: "gift_card_service",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryOutput$ {
  /** @deprecated use `TransactionSummaryOutput$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryOutput$inboundSchema;
  /** @deprecated use `TransactionSummaryOutput$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryOutput$outboundSchema;
  /** @deprecated use `TransactionSummaryOutput$Outbound` instead. */
  export type Outbound = TransactionSummaryOutput$Outbound;
}

export function transactionSummaryOutputToJSON(
  transactionSummaryOutput: TransactionSummaryOutput,
): string {
  return JSON.stringify(
    TransactionSummaryOutput$outboundSchema.parse(transactionSummaryOutput),
  );
}

export function transactionSummaryOutputFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryOutput' from JSON`,
  );
}
