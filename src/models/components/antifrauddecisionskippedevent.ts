/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudDecisionSkippedEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-decision-skipped`.
 */
export enum AntiFraudDecisionSkippedEventName {
    AntiFraudDecisionSkipped = "anti-fraud-decision-skipped",
}

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionSkippedEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The reason we could not get the anti-fraud decision.
     */
    reason?: string | undefined;
};

/**
 * This event logs the reason why we skipped getting an anti-fraud decision.
 */
export type AntiFraudDecisionSkippedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionSkippedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-skipped`.
     */
    name?: AntiFraudDecisionSkippedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionSkippedEventContext | undefined;
};

/** @internal */
export namespace AntiFraudDecisionSkippedEventType$ {
    export const inboundSchema = z.nativeEnum(AntiFraudDecisionSkippedEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudDecisionSkippedEventName$ {
    export const inboundSchema = z.nativeEnum(AntiFraudDecisionSkippedEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudDecisionSkippedEventContext$ {
    export const inboundSchema: z.ZodType<
        AntiFraudDecisionSkippedEventContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                anti_fraud_service_id: "antiFraudServiceId",
                anti_fraud_service_name: "antiFraudServiceName",
                anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            });
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudDecisionSkippedEventContext
    > = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                antiFraudServiceId: "anti_fraud_service_id",
                antiFraudServiceName: "anti_fraud_service_name",
                antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            });
        });
}

/** @internal */
export namespace AntiFraudDecisionSkippedEvent$ {
    export const inboundSchema: z.ZodType<AntiFraudDecisionSkippedEvent, z.ZodTypeDef, unknown> = z
        .object({
            type: AntiFraudDecisionSkippedEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudDecisionSkippedEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => AntiFraudDecisionSkippedEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: AntiFraudDecisionSkippedEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudDecisionSkippedEvent> =
        z
            .object({
                type: AntiFraudDecisionSkippedEventType$.outboundSchema.optional(),
                id: z.string().optional(),
                name: AntiFraudDecisionSkippedEventName$.outboundSchema.optional(),
                createdAt: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
                context: z
                    .lazy(() => AntiFraudDecisionSkippedEventContext$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    createdAt: "created_at",
                });
            });
}
