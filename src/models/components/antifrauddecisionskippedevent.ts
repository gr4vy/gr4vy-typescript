/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudDecisionSkippedEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-decision-skipped`.
 */
export enum AntiFraudDecisionSkippedEventName {
    AntiFraudDecisionSkipped = "anti-fraud-decision-skipped",
}

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionSkippedEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The reason we could not get the anti-fraud decision.
     */
    reason?: string | undefined;
};

/**
 * This event logs the reason why we skipped getting an anti-fraud decision.
 */
export type AntiFraudDecisionSkippedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionSkippedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-skipped`.
     */
    name?: AntiFraudDecisionSkippedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionSkippedEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionSkippedEventType$: z.ZodNativeEnum<
    typeof AntiFraudDecisionSkippedEventType
> = z.nativeEnum(AntiFraudDecisionSkippedEventType);

/** @internal */
export const AntiFraudDecisionSkippedEventName$: z.ZodNativeEnum<
    typeof AntiFraudDecisionSkippedEventName
> = z.nativeEnum(AntiFraudDecisionSkippedEventName);

/** @internal */
export namespace AntiFraudDecisionSkippedEventContext$ {
    export type Inbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        reason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        AntiFraudDecisionSkippedEventContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.anti_fraud_service_id === undefined
                    ? null
                    : { antiFraudServiceId: v.anti_fraud_service_id }),
                ...(v.anti_fraud_service_name === undefined
                    ? null
                    : { antiFraudServiceName: v.anti_fraud_service_name }),
                ...(v.anti_fraud_service_definition_id === undefined
                    ? null
                    : { antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudDecisionSkippedEventContext
    > = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.antiFraudServiceId === undefined
                    ? null
                    : { anti_fraud_service_id: v.antiFraudServiceId }),
                ...(v.antiFraudServiceName === undefined
                    ? null
                    : { anti_fraud_service_name: v.antiFraudServiceName }),
                ...(v.antiFraudServiceDefinitionId === undefined
                    ? null
                    : { anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}

/** @internal */
export namespace AntiFraudDecisionSkippedEvent$ {
    export type Inbound = {
        type?: AntiFraudDecisionSkippedEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudDecisionSkippedEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudDecisionSkippedEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AntiFraudDecisionSkippedEvent, z.ZodTypeDef, Inbound> = z
        .object({
            type: AntiFraudDecisionSkippedEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudDecisionSkippedEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => AntiFraudDecisionSkippedEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: AntiFraudDecisionSkippedEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudDecisionSkippedEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudDecisionSkippedEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudDecisionSkippedEvent> =
        z
            .object({
                type: AntiFraudDecisionSkippedEventType$.optional(),
                id: z.string().optional(),
                name: AntiFraudDecisionSkippedEventName$.optional(),
                createdAt: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
                context: z
                    .lazy(() => AntiFraudDecisionSkippedEventContext$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                    ...(v.context === undefined ? null : { context: v.context }),
                };
            });
}
