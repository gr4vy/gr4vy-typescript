/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudDecisionSkippedEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudDecisionSkippedEventType = ClosedEnum<
    typeof AntiFraudDecisionSkippedEventType
>;

/**
 * The name of this resource. Is always `anti-fraud-decision-skipped`.
 */
export const AntiFraudDecisionSkippedEventName = {
    AntiFraudDecisionSkipped: "anti-fraud-decision-skipped",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-decision-skipped`.
 */
export type AntiFraudDecisionSkippedEventName = ClosedEnum<
    typeof AntiFraudDecisionSkippedEventName
>;

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionSkippedEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The reason we could not get the anti-fraud decision.
     */
    reason?: string | undefined;
};

/**
 * This event logs the reason why we skipped getting an anti-fraud decision.
 */
export type AntiFraudDecisionSkippedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionSkippedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision-skipped`.
     */
    name?: AntiFraudDecisionSkippedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionSkippedEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionSkippedEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionSkippedEventType
> = z.nativeEnum(AntiFraudDecisionSkippedEventType);

/** @internal */
export const AntiFraudDecisionSkippedEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionSkippedEventType
> = AntiFraudDecisionSkippedEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionSkippedEventType$ {
    /** @deprecated use `AntiFraudDecisionSkippedEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionSkippedEventType$inboundSchema;
    /** @deprecated use `AntiFraudDecisionSkippedEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionSkippedEventType$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionSkippedEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionSkippedEventName
> = z.nativeEnum(AntiFraudDecisionSkippedEventName);

/** @internal */
export const AntiFraudDecisionSkippedEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionSkippedEventName
> = AntiFraudDecisionSkippedEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionSkippedEventName$ {
    /** @deprecated use `AntiFraudDecisionSkippedEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionSkippedEventName$inboundSchema;
    /** @deprecated use `AntiFraudDecisionSkippedEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionSkippedEventName$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionSkippedEventContext$inboundSchema: z.ZodType<
    AntiFraudDecisionSkippedEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
        });
    });

/** @internal */
export type AntiFraudDecisionSkippedEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    reason?: string | undefined;
};

/** @internal */
export const AntiFraudDecisionSkippedEventContext$outboundSchema: z.ZodType<
    AntiFraudDecisionSkippedEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionSkippedEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionSkippedEventContext$ {
    /** @deprecated use `AntiFraudDecisionSkippedEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionSkippedEventContext$inboundSchema;
    /** @deprecated use `AntiFraudDecisionSkippedEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionSkippedEventContext$outboundSchema;
    /** @deprecated use `AntiFraudDecisionSkippedEventContext$Outbound` instead. */
    export type Outbound = AntiFraudDecisionSkippedEventContext$Outbound;
}

/** @internal */
export const AntiFraudDecisionSkippedEvent$inboundSchema: z.ZodType<
    AntiFraudDecisionSkippedEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudDecisionSkippedEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionSkippedEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => AntiFraudDecisionSkippedEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudDecisionSkippedEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudDecisionSkippedEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudDecisionSkippedEvent$outboundSchema: z.ZodType<
    AntiFraudDecisionSkippedEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionSkippedEvent
> = z
    .object({
        type: AntiFraudDecisionSkippedEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionSkippedEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => AntiFraudDecisionSkippedEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionSkippedEvent$ {
    /** @deprecated use `AntiFraudDecisionSkippedEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionSkippedEvent$inboundSchema;
    /** @deprecated use `AntiFraudDecisionSkippedEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionSkippedEvent$outboundSchema;
    /** @deprecated use `AntiFraudDecisionSkippedEvent$Outbound` instead. */
    export type Outbound = AntiFraudDecisionSkippedEvent$Outbound;
}
