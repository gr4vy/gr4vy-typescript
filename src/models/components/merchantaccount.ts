/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * `merchant-account`.
 */
export enum MerchantAccountType {
    MerchantAccount = "merchant-account",
}

export enum LoonAcceptedSchemes {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

export type MerchantAccount = {
    /**
     * `merchant-account`.
     */
    type?: MerchantAccountType | undefined;
    /**
     * The ID for this merchant account.
     */
    id?: string | undefined;
    /**
     * The display name of this merchant account.
     */
    displayName?: string | undefined;
    /**
     * The optional URL where webhooks will be received.
     */
    outboundWebhookUrl?: string | null | undefined;
    /**
     * The optional username to use when `outbound_webhook_url` is configured and
     *
     * @remarks
     * requires basic authentication.
     */
    outboundWebhookUsername?: string | null | undefined;
    /**
     * The optional password to use when `outbound_webhook_url` is configured and
     *
     * @remarks
     * requires basic authentication.
     *
     * If the field is not `null`, the value is masked to avoid exposing sensitive information.
     */
    outboundWebhookPassword?: string | null | undefined;
    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     */
    visaNetworkTokensRequestorId?: string | null | undefined;
    /**
     * Application ID provided for Visa after onboarding to use Network
     *
     * @remarks
     * Tokens.
     */
    visaNetworkTokensAppId?: string | null | undefined;
    /**
     * Requestor ID provided for Amex after onboarding to use Network Tokens.
     */
    amexNetworkTokensRequestorId?: string | null | undefined;
    /**
     * Application ID provided for Amex after onboarding to use Network Tokens.
     */
    amexNetworkTokensAppId?: string | null | undefined;
    /**
     * Requestor ID provided for Mastercard after onboarding to use Network
     *
     * @remarks
     * Tokens.
     */
    mastercardNetworkTokensRequestorId?: string | null | undefined;
    /**
     * Application ID provided for Mastercard after onboarding to use
     *
     * @remarks
     * Network Tokens.
     */
    mastercardNetworkTokensAppId?: string | null | undefined;
    /**
     * Client key provided by Pagos to authenticate to the Loon API.
     *
     * @remarks
     * Loon is the Account Updater service used by Gr4vy.
     */
    loonClientKey?: string | null | undefined;
    /**
     * Secret key provided by Pagos to authenticate to the Loon API.
     *
     * @remarks
     * Loon is the Account Updater service used by Gr4vy.
     *
     * If the field is not `null`, the value is masked to avoid exposing sensitive information.
     */
    loonSecretKey?: string | null | undefined;
    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys.
     *
     * @remarks
     * Loon is the Account Updater service used by Gr4vy.
     */
    loonAcceptedSchemes?: Array<LoonAcceptedSchemes> | null | undefined;
    /**
     * The date and time when this merchant account was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this merchant account was updated.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace MerchantAccountType$ {
    export const inboundSchema = z.nativeEnum(MerchantAccountType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace LoonAcceptedSchemes$ {
    export const inboundSchema = z.nativeEnum(LoonAcceptedSchemes);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MerchantAccount$ {
    export const inboundSchema: z.ZodType<MerchantAccount, z.ZodTypeDef, unknown> = z
        .object({
            type: MerchantAccountType$.inboundSchema.optional(),
            id: z.string().optional(),
            display_name: z.string().optional(),
            outbound_webhook_url: z.nullable(z.string()).optional(),
            outbound_webhook_username: z.nullable(z.string()).optional(),
            outbound_webhook_password: z.nullable(z.string()).optional(),
            visa_network_tokens_requestor_id: z.nullable(z.string()).optional(),
            visa_network_tokens_app_id: z.nullable(z.string()).optional(),
            amex_network_tokens_requestor_id: z.nullable(z.string()).optional(),
            amex_network_tokens_app_id: z.nullable(z.string()).optional(),
            mastercard_network_tokens_requestor_id: z.nullable(z.string()).optional(),
            mastercard_network_tokens_app_id: z.nullable(z.string()).optional(),
            loon_client_key: z.nullable(z.string()).optional(),
            loon_secret_key: z.nullable(z.string()).optional(),
            loon_accepted_schemes: z
                .nullable(z.array(LoonAcceptedSchemes$.inboundSchema))
                .optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                display_name: "displayName",
                outbound_webhook_url: "outboundWebhookUrl",
                outbound_webhook_username: "outboundWebhookUsername",
                outbound_webhook_password: "outboundWebhookPassword",
                visa_network_tokens_requestor_id: "visaNetworkTokensRequestorId",
                visa_network_tokens_app_id: "visaNetworkTokensAppId",
                amex_network_tokens_requestor_id: "amexNetworkTokensRequestorId",
                amex_network_tokens_app_id: "amexNetworkTokensAppId",
                mastercard_network_tokens_requestor_id: "mastercardNetworkTokensRequestorId",
                mastercard_network_tokens_app_id: "mastercardNetworkTokensAppId",
                loon_client_key: "loonClientKey",
                loon_secret_key: "loonSecretKey",
                loon_accepted_schemes: "loonAcceptedSchemes",
                created_at: "createdAt",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        display_name?: string | undefined;
        outbound_webhook_url?: string | null | undefined;
        outbound_webhook_username?: string | null | undefined;
        outbound_webhook_password?: string | null | undefined;
        visa_network_tokens_requestor_id?: string | null | undefined;
        visa_network_tokens_app_id?: string | null | undefined;
        amex_network_tokens_requestor_id?: string | null | undefined;
        amex_network_tokens_app_id?: string | null | undefined;
        mastercard_network_tokens_requestor_id?: string | null | undefined;
        mastercard_network_tokens_app_id?: string | null | undefined;
        loon_client_key?: string | null | undefined;
        loon_secret_key?: string | null | undefined;
        loon_accepted_schemes?: Array<string> | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MerchantAccount> = z
        .object({
            type: MerchantAccountType$.outboundSchema.optional(),
            id: z.string().optional(),
            displayName: z.string().optional(),
            outboundWebhookUrl: z.nullable(z.string()).optional(),
            outboundWebhookUsername: z.nullable(z.string()).optional(),
            outboundWebhookPassword: z.nullable(z.string()).optional(),
            visaNetworkTokensRequestorId: z.nullable(z.string()).optional(),
            visaNetworkTokensAppId: z.nullable(z.string()).optional(),
            amexNetworkTokensRequestorId: z.nullable(z.string()).optional(),
            amexNetworkTokensAppId: z.nullable(z.string()).optional(),
            mastercardNetworkTokensRequestorId: z.nullable(z.string()).optional(),
            mastercardNetworkTokensAppId: z.nullable(z.string()).optional(),
            loonClientKey: z.nullable(z.string()).optional(),
            loonSecretKey: z.nullable(z.string()).optional(),
            loonAcceptedSchemes: z
                .nullable(z.array(LoonAcceptedSchemes$.outboundSchema))
                .optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                displayName: "display_name",
                outboundWebhookUrl: "outbound_webhook_url",
                outboundWebhookUsername: "outbound_webhook_username",
                outboundWebhookPassword: "outbound_webhook_password",
                visaNetworkTokensRequestorId: "visa_network_tokens_requestor_id",
                visaNetworkTokensAppId: "visa_network_tokens_app_id",
                amexNetworkTokensRequestorId: "amex_network_tokens_requestor_id",
                amexNetworkTokensAppId: "amex_network_tokens_app_id",
                mastercardNetworkTokensRequestorId: "mastercard_network_tokens_requestor_id",
                mastercardNetworkTokensAppId: "mastercard_network_tokens_app_id",
                loonClientKey: "loon_client_key",
                loonSecretKey: "loon_secret_key",
                loonAcceptedSchemes: "loon_accepted_schemes",
                createdAt: "created_at",
                updatedAt: "updated_at",
            });
        });
}
