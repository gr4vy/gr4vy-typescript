/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The billing address for the buyer.
 */
export type ShippingDetailsCreateAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * Base model with JSON encoders.
 */
export type ShippingDetailsCreate = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: ShippingDetailsCreateAddress | undefined;
};

/** @internal */
export const ShippingDetailsCreateAddress$inboundSchema: z.ZodType<
  ShippingDetailsCreateAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type ShippingDetailsCreateAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const ShippingDetailsCreateAddress$outboundSchema: z.ZodType<
  ShippingDetailsCreateAddress$Outbound,
  z.ZodTypeDef,
  ShippingDetailsCreateAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShippingDetailsCreateAddress$ {
  /** @deprecated use `ShippingDetailsCreateAddress$inboundSchema` instead. */
  export const inboundSchema = ShippingDetailsCreateAddress$inboundSchema;
  /** @deprecated use `ShippingDetailsCreateAddress$outboundSchema` instead. */
  export const outboundSchema = ShippingDetailsCreateAddress$outboundSchema;
  /** @deprecated use `ShippingDetailsCreateAddress$Outbound` instead. */
  export type Outbound = ShippingDetailsCreateAddress$Outbound;
}

export function shippingDetailsCreateAddressToJSON(
  shippingDetailsCreateAddress: ShippingDetailsCreateAddress,
): string {
  return JSON.stringify(
    ShippingDetailsCreateAddress$outboundSchema.parse(
      shippingDetailsCreateAddress,
    ),
  );
}

export function shippingDetailsCreateAddressFromJSON(
  jsonString: string,
): SafeParseResult<ShippingDetailsCreateAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShippingDetailsCreateAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShippingDetailsCreateAddress' from JSON`,
  );
}

/** @internal */
export const ShippingDetailsCreate$inboundSchema: z.ZodType<
  ShippingDetailsCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => ShippingDetailsCreateAddress$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type ShippingDetailsCreate$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: ShippingDetailsCreateAddress$Outbound | undefined;
};

/** @internal */
export const ShippingDetailsCreate$outboundSchema: z.ZodType<
  ShippingDetailsCreate$Outbound,
  z.ZodTypeDef,
  ShippingDetailsCreate
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => ShippingDetailsCreateAddress$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShippingDetailsCreate$ {
  /** @deprecated use `ShippingDetailsCreate$inboundSchema` instead. */
  export const inboundSchema = ShippingDetailsCreate$inboundSchema;
  /** @deprecated use `ShippingDetailsCreate$outboundSchema` instead. */
  export const outboundSchema = ShippingDetailsCreate$outboundSchema;
  /** @deprecated use `ShippingDetailsCreate$Outbound` instead. */
  export type Outbound = ShippingDetailsCreate$Outbound;
}

export function shippingDetailsCreateToJSON(
  shippingDetailsCreate: ShippingDetailsCreate,
): string {
  return JSON.stringify(
    ShippingDetailsCreate$outboundSchema.parse(shippingDetailsCreate),
  );
}

export function shippingDetailsCreateFromJSON(
  jsonString: string,
): SafeParseResult<ShippingDetailsCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShippingDetailsCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShippingDetailsCreate' from JSON`,
  );
}
