/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The name of the Anti-Fraud service provider.
 *
 * @remarks
 * During update request, this value is used for validation only but
 * the underlying service can not be changed for an existing service.
 */
export const AntiFraudServiceUpdateAntiFraudServiceDefinitionId = {
    CybersourceAntiFraud: "cybersource-anti-fraud",
    ForterAntiFraud: "forter-anti-fraud",
    SiftAntiFraud: "sift-anti-fraud",
} as const;
/**
 * The name of the Anti-Fraud service provider.
 *
 * @remarks
 * During update request, this value is used for validation only but
 * the underlying service can not be changed for an existing service.
 */
export type AntiFraudServiceUpdateAntiFraudServiceDefinitionId = ClosedEnum<
    typeof AntiFraudServiceUpdateAntiFraudServiceDefinitionId
>;

/**
 * A key-value pair that represents a field defined in the definition for this anti-fraud service.
 */
export type AntiFraudServiceUpdateFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set.
     */
    value: string;
};

/**
 * A request to update an anti-fraud service.
 */
export type AntiFraudServiceUpdate = {
    /**
     * The name of the Anti-Fraud service provider.
     *
     * @remarks
     * During update request, this value is used for validation only but
     * the underlying service can not be changed for an existing service.
     */
    antiFraudServiceDefinitionId: AntiFraudServiceUpdateAntiFraudServiceDefinitionId;
    /**
     * A unique name for this anti-fraud service which is used in the Gr4vy admin panel to give a anti-fraud Service a human readable name.
     */
    displayName?: string | undefined;
    /**
     * Defines if this service is currently active or not. There can only
     *
     * @remarks
     * be one active service at any time. When updating a service
     * to active, the current active service will be deactivated.
     */
    active?: boolean | undefined;
    /**
     * Defines if this service needs to handle the review status from anti-fraud
     *
     * @remarks
     * responses with a proper review workflow. If not, the review status will
     * be treated as any other one.
     */
    reviewsEnabled?: boolean | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field defined
     *
     * @remarks
     * by the definition for this anti-fraud service e.g. for Sift
     * `api_key` must be sent within this field when creating the service.
     *
     * For updates, only the fields sent here will be updated,
     * existing ones will not be affected if not present.
     */
    fields?: Array<AntiFraudServiceUpdateFields> | undefined;
};

/** @internal */
export const AntiFraudServiceUpdateAntiFraudServiceDefinitionId$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudServiceUpdateAntiFraudServiceDefinitionId
> = z.nativeEnum(AntiFraudServiceUpdateAntiFraudServiceDefinitionId);

/** @internal */
export const AntiFraudServiceUpdateAntiFraudServiceDefinitionId$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudServiceUpdateAntiFraudServiceDefinitionId
> = AntiFraudServiceUpdateAntiFraudServiceDefinitionId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudServiceUpdateAntiFraudServiceDefinitionId$ {
    /** @deprecated use `AntiFraudServiceUpdateAntiFraudServiceDefinitionId$inboundSchema` instead. */
    export const inboundSchema = AntiFraudServiceUpdateAntiFraudServiceDefinitionId$inboundSchema;
    /** @deprecated use `AntiFraudServiceUpdateAntiFraudServiceDefinitionId$outboundSchema` instead. */
    export const outboundSchema = AntiFraudServiceUpdateAntiFraudServiceDefinitionId$outboundSchema;
}

/** @internal */
export const AntiFraudServiceUpdateFields$inboundSchema: z.ZodType<
    AntiFraudServiceUpdateFields,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string(),
    value: z.string(),
});

/** @internal */
export type AntiFraudServiceUpdateFields$Outbound = {
    key: string;
    value: string;
};

/** @internal */
export const AntiFraudServiceUpdateFields$outboundSchema: z.ZodType<
    AntiFraudServiceUpdateFields$Outbound,
    z.ZodTypeDef,
    AntiFraudServiceUpdateFields
> = z.object({
    key: z.string(),
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudServiceUpdateFields$ {
    /** @deprecated use `AntiFraudServiceUpdateFields$inboundSchema` instead. */
    export const inboundSchema = AntiFraudServiceUpdateFields$inboundSchema;
    /** @deprecated use `AntiFraudServiceUpdateFields$outboundSchema` instead. */
    export const outboundSchema = AntiFraudServiceUpdateFields$outboundSchema;
    /** @deprecated use `AntiFraudServiceUpdateFields$Outbound` instead. */
    export type Outbound = AntiFraudServiceUpdateFields$Outbound;
}

/** @internal */
export const AntiFraudServiceUpdate$inboundSchema: z.ZodType<
    AntiFraudServiceUpdate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_definition_id:
            AntiFraudServiceUpdateAntiFraudServiceDefinitionId$inboundSchema,
        display_name: z.string().optional(),
        active: z.boolean().default(true),
        reviews_enabled: z.boolean().default(false),
        fields: z.array(z.lazy(() => AntiFraudServiceUpdateFields$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            display_name: "displayName",
            reviews_enabled: "reviewsEnabled",
        });
    });

/** @internal */
export type AntiFraudServiceUpdate$Outbound = {
    anti_fraud_service_definition_id: string;
    display_name?: string | undefined;
    active: boolean;
    reviews_enabled: boolean;
    fields?: Array<AntiFraudServiceUpdateFields$Outbound> | undefined;
};

/** @internal */
export const AntiFraudServiceUpdate$outboundSchema: z.ZodType<
    AntiFraudServiceUpdate$Outbound,
    z.ZodTypeDef,
    AntiFraudServiceUpdate
> = z
    .object({
        antiFraudServiceDefinitionId:
            AntiFraudServiceUpdateAntiFraudServiceDefinitionId$outboundSchema,
        displayName: z.string().optional(),
        active: z.boolean().default(true),
        reviewsEnabled: z.boolean().default(false),
        fields: z.array(z.lazy(() => AntiFraudServiceUpdateFields$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            displayName: "display_name",
            reviewsEnabled: "reviews_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudServiceUpdate$ {
    /** @deprecated use `AntiFraudServiceUpdate$inboundSchema` instead. */
    export const inboundSchema = AntiFraudServiceUpdate$inboundSchema;
    /** @deprecated use `AntiFraudServiceUpdate$outboundSchema` instead. */
    export const outboundSchema = AntiFraudServiceUpdate$outboundSchema;
    /** @deprecated use `AntiFraudServiceUpdate$Outbound` instead. */
    export type Outbound = AntiFraudServiceUpdate$Outbound;
}
