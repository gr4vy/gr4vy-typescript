/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    CyberSourceUpdate,
    CyberSourceUpdate$inboundSchema,
    CyberSourceUpdate$Outbound,
    CyberSourceUpdate$outboundSchema,
} from "./cybersourceupdate.js";
import {
    ForterUpdate,
    ForterUpdate$inboundSchema,
    ForterUpdate$Outbound,
    ForterUpdate$outboundSchema,
} from "./forterupdate.js";
import {
    KountUpdate,
    KountUpdate$inboundSchema,
    KountUpdate$Outbound,
    KountUpdate$outboundSchema,
} from "./kountupdate.js";
import {
    SiftUpdate,
    SiftUpdate$inboundSchema,
    SiftUpdate$Outbound,
    SiftUpdate$outboundSchema,
} from "./siftupdate.js";
import {
    SimulatorUpdate,
    SimulatorUpdate$inboundSchema,
    SimulatorUpdate$Outbound,
    SimulatorUpdate$outboundSchema,
} from "./simulatorupdate.js";
import * as z from "zod";

export type AntiFraudServiceUpdate =
    | (CyberSourceUpdate & { antiFraudServiceDefinitionId: "cybersource-anti-fraud" })
    | (SiftUpdate & { antiFraudServiceDefinitionId: "sift-anti-fraud" })
    | (ForterUpdate & { antiFraudServiceDefinitionId: "forter-anti-fraud" })
    | (KountUpdate & { antiFraudServiceDefinitionId: "kount-anti-fraud" })
    | (SimulatorUpdate & { antiFraudServiceDefinitionId: "mock-anti-fraud" });

/** @internal */
export const AntiFraudServiceUpdate$inboundSchema: z.ZodType<
    AntiFraudServiceUpdate,
    z.ZodTypeDef,
    unknown
> = z.union([
    CyberSourceUpdate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("cybersource-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    SiftUpdate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("sift-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    ForterUpdate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("forter-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    KountUpdate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("kount-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    SimulatorUpdate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("mock-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
]);

/** @internal */
export type AntiFraudServiceUpdate$Outbound =
    | (CyberSourceUpdate$Outbound & { anti_fraud_service_definition_id: "cybersource-anti-fraud" })
    | (SiftUpdate$Outbound & { anti_fraud_service_definition_id: "sift-anti-fraud" })
    | (ForterUpdate$Outbound & { anti_fraud_service_definition_id: "forter-anti-fraud" })
    | (KountUpdate$Outbound & { anti_fraud_service_definition_id: "kount-anti-fraud" })
    | (SimulatorUpdate$Outbound & { anti_fraud_service_definition_id: "mock-anti-fraud" });

/** @internal */
export const AntiFraudServiceUpdate$outboundSchema: z.ZodType<
    AntiFraudServiceUpdate$Outbound,
    z.ZodTypeDef,
    AntiFraudServiceUpdate
> = z.union([
    CyberSourceUpdate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("cybersource-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    SiftUpdate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("sift-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    ForterUpdate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("forter-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    KountUpdate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("kount-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    SimulatorUpdate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("mock-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudServiceUpdate$ {
    /** @deprecated use `AntiFraudServiceUpdate$inboundSchema` instead. */
    export const inboundSchema = AntiFraudServiceUpdate$inboundSchema;
    /** @deprecated use `AntiFraudServiceUpdate$outboundSchema` instead. */
    export const outboundSchema = AntiFraudServiceUpdate$outboundSchema;
    /** @deprecated use `AntiFraudServiceUpdate$Outbound` instead. */
    export type Outbound = AntiFraudServiceUpdate$Outbound;
}
