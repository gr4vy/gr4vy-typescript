/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The name of the Anti-Fraud service provider.
 *
 * @remarks
 * During update request, this value is used for validation only but
 * the underlying service can not be changed for an existing service.
 */
export enum AntiFraudServiceUpdateAntiFraudServiceDefinitionId {
    CybersourceAntiFraud = "cybersource-anti-fraud",
    ForterAntiFraud = "forter-anti-fraud",
    SiftAntiFraud = "sift-anti-fraud",
}

/**
 * A key-value pair that represents a field defined in the definition for this anti-fraud service.
 */
export type AntiFraudServiceUpdateFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set.
     */
    value: string;
};

/**
 * A request to update an anti-fraud service.
 */
export type AntiFraudServiceUpdate = {
    /**
     * The name of the Anti-Fraud service provider.
     *
     * @remarks
     * During update request, this value is used for validation only but
     * the underlying service can not be changed for an existing service.
     */
    antiFraudServiceDefinitionId: AntiFraudServiceUpdateAntiFraudServiceDefinitionId;
    /**
     * A unique name for this anti-fraud service which is used in the Gr4vy admin panel to give a anti-fraud Service a human readable name.
     */
    displayName?: string | undefined;
    /**
     * Defines if this service is currently active or not. There can only
     *
     * @remarks
     * be one active service at any time. When updating a service
     * to active, the current active service will be deactivated.
     */
    active?: boolean | undefined;
    /**
     * Defines if this service needs to handle the review status from anti-fraud
     *
     * @remarks
     * responses with a proper review workflow. If not, the review status will
     * be treated as any other one.
     */
    reviewsEnabled?: boolean | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field defined
     *
     * @remarks
     * by the definition for this anti-fraud service e.g. for Sift
     * `api_key` must be sent within this field when creating the service.
     *
     * For updates, only the fields sent here will be updated,
     * existing ones will not be affected if not present.
     */
    fields?: Array<AntiFraudServiceUpdateFields> | undefined;
};

/** @internal */
export namespace AntiFraudServiceUpdateAntiFraudServiceDefinitionId$ {
    export const inboundSchema = z.nativeEnum(AntiFraudServiceUpdateAntiFraudServiceDefinitionId);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudServiceUpdateFields$ {
    export const inboundSchema: z.ZodType<AntiFraudServiceUpdateFields, z.ZodTypeDef, unknown> =
        z.object({
            key: z.string(),
            value: z.string(),
        });

    export type Outbound = {
        key: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudServiceUpdateFields> =
        z.object({
            key: z.string(),
            value: z.string(),
        });
}

/** @internal */
export namespace AntiFraudServiceUpdate$ {
    export const inboundSchema: z.ZodType<AntiFraudServiceUpdate, z.ZodTypeDef, unknown> = z
        .object({
            anti_fraud_service_definition_id:
                AntiFraudServiceUpdateAntiFraudServiceDefinitionId$.inboundSchema,
            display_name: z.string().optional(),
            active: z.boolean().default(true),
            reviews_enabled: z.boolean().default(false),
            fields: z.array(z.lazy(() => AntiFraudServiceUpdateFields$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
                display_name: "displayName",
                reviews_enabled: "reviewsEnabled",
            });
        });

    export type Outbound = {
        anti_fraud_service_definition_id: string;
        display_name?: string | undefined;
        active: boolean;
        reviews_enabled: boolean;
        fields?: Array<AntiFraudServiceUpdateFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudServiceUpdate> = z
        .object({
            antiFraudServiceDefinitionId:
                AntiFraudServiceUpdateAntiFraudServiceDefinitionId$.outboundSchema,
            displayName: z.string().optional(),
            active: z.boolean().default(true),
            reviewsEnabled: z.boolean().default(false),
            fields: z.array(z.lazy(() => AntiFraudServiceUpdateFields$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
                displayName: "display_name",
                reviewsEnabled: "reviews_enabled",
            });
        });
}
