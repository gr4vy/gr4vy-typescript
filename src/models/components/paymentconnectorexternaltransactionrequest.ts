/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum PaymentConnectorExternalTransactionRequestType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `payment-connector-external-transaction-request`.
 */
export enum PaymentConnectorExternalTransactionRequestName {
    PaymentConnectorExternalTransactionRequest = "payment-connector-external-transaction-request",
}

/**
 * Additional context for the transaction.
 */
export type PaymentConnectorExternalTransactionRequestContext = {
    /**
     * The connector request id.
     */
    connectorRequestId?: string | undefined;
    /**
     * The request.
     */
    request?: string | null | undefined;
    /**
     * The response.
     */
    response?: string | null | undefined;
    /**
     * The payment service definition id.
     */
    paymentServiceDefinitionId?: string | null | undefined;
    /**
     * Whether the transaction was successful.
     */
    success?: boolean | null | undefined;
    /**
     * The payment service id.
     */
    paymentServiceId?: string | null | undefined;
    /**
     * The response status code.
     */
    responseStatusCode?: string | null | undefined;
    /**
     * The payment service display name.
     */
    paymentServiceDisplayName?: string | null | undefined;
    /**
     * The HTTP method.
     */
    method?: string | null | undefined;
    /**
     * The endpoint for the request.
     */
    url?: string | null | undefined;
    /**
     * The ID of the refund, in case this links to a refund.
     */
    refundId?: string | null | undefined;
    /**
     * The external ID of the refund.
     */
    refundXid?: string | null | undefined;
};

/**
 * This event logs the exact details parsed details for an external
 *
 * @remarks
 * transaction request.
 */
export type PaymentConnectorExternalTransactionRequest = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorExternalTransactionRequestType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-external-transaction-request`.
     */
    name?: PaymentConnectorExternalTransactionRequestName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for the transaction.
     */
    context?: PaymentConnectorExternalTransactionRequestContext | undefined;
};

/** @internal */
export const PaymentConnectorExternalTransactionRequestType$: z.ZodNativeEnum<
    typeof PaymentConnectorExternalTransactionRequestType
> = z.nativeEnum(PaymentConnectorExternalTransactionRequestType);

/** @internal */
export const PaymentConnectorExternalTransactionRequestName$: z.ZodNativeEnum<
    typeof PaymentConnectorExternalTransactionRequestName
> = z.nativeEnum(PaymentConnectorExternalTransactionRequestName);

/** @internal */
export namespace PaymentConnectorExternalTransactionRequestContext$ {
    export type Inbound = {
        connector_request_id?: string | undefined;
        request?: string | null | undefined;
        response?: string | null | undefined;
        payment_service_definition_id?: string | null | undefined;
        success?: boolean | null | undefined;
        payment_service_id?: string | null | undefined;
        response_status_code?: string | null | undefined;
        payment_service_display_name?: string | null | undefined;
        method?: string | null | undefined;
        url?: string | null | undefined;
        refund_id?: string | null | undefined;
        refund_xid?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentConnectorExternalTransactionRequestContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            connector_request_id: z.string().optional(),
            request: z.nullable(z.string()).optional(),
            response: z.nullable(z.string()).optional(),
            payment_service_definition_id: z.nullable(z.string()).optional(),
            success: z.nullable(z.boolean()).optional(),
            payment_service_id: z.nullable(z.string()).optional(),
            response_status_code: z.nullable(z.string()).optional(),
            payment_service_display_name: z.nullable(z.string()).optional(),
            method: z.nullable(z.string()).optional(),
            url: z.nullable(z.string()).optional(),
            refund_id: z.nullable(z.string()).optional(),
            refund_xid: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.connector_request_id === undefined
                    ? null
                    : { connectorRequestId: v.connector_request_id }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.payment_service_definition_id === undefined
                    ? null
                    : { paymentServiceDefinitionId: v.payment_service_definition_id }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.payment_service_id === undefined
                    ? null
                    : { paymentServiceId: v.payment_service_id }),
                ...(v.response_status_code === undefined
                    ? null
                    : { responseStatusCode: v.response_status_code }),
                ...(v.payment_service_display_name === undefined
                    ? null
                    : { paymentServiceDisplayName: v.payment_service_display_name }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.refund_id === undefined ? null : { refundId: v.refund_id }),
                ...(v.refund_xid === undefined ? null : { refundXid: v.refund_xid }),
            };
        });

    export type Outbound = {
        connector_request_id?: string | undefined;
        request?: string | null | undefined;
        response?: string | null | undefined;
        payment_service_definition_id?: string | null | undefined;
        success?: boolean | null | undefined;
        payment_service_id?: string | null | undefined;
        response_status_code?: string | null | undefined;
        payment_service_display_name?: string | null | undefined;
        method?: string | null | undefined;
        url?: string | null | undefined;
        refund_id?: string | null | undefined;
        refund_xid?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorExternalTransactionRequestContext
    > = z
        .object({
            connectorRequestId: z.string().optional(),
            request: z.nullable(z.string()).optional(),
            response: z.nullable(z.string()).optional(),
            paymentServiceDefinitionId: z.nullable(z.string()).optional(),
            success: z.nullable(z.boolean()).optional(),
            paymentServiceId: z.nullable(z.string()).optional(),
            responseStatusCode: z.nullable(z.string()).optional(),
            paymentServiceDisplayName: z.nullable(z.string()).optional(),
            method: z.nullable(z.string()).optional(),
            url: z.nullable(z.string()).optional(),
            refundId: z.nullable(z.string()).optional(),
            refundXid: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.connectorRequestId === undefined
                    ? null
                    : { connector_request_id: v.connectorRequestId }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.paymentServiceDefinitionId === undefined
                    ? null
                    : { payment_service_definition_id: v.paymentServiceDefinitionId }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.paymentServiceId === undefined
                    ? null
                    : { payment_service_id: v.paymentServiceId }),
                ...(v.responseStatusCode === undefined
                    ? null
                    : { response_status_code: v.responseStatusCode }),
                ...(v.paymentServiceDisplayName === undefined
                    ? null
                    : { payment_service_display_name: v.paymentServiceDisplayName }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.refundId === undefined ? null : { refund_id: v.refundId }),
                ...(v.refundXid === undefined ? null : { refund_xid: v.refundXid }),
            };
        });
}

/** @internal */
export namespace PaymentConnectorExternalTransactionRequest$ {
    export type Inbound = {
        type?: PaymentConnectorExternalTransactionRequestType | undefined;
        id?: string | undefined;
        name?: PaymentConnectorExternalTransactionRequestName | undefined;
        created_at?: string | undefined;
        context?: PaymentConnectorExternalTransactionRequestContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentConnectorExternalTransactionRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: PaymentConnectorExternalTransactionRequestType$.optional(),
            id: z.string().optional(),
            name: PaymentConnectorExternalTransactionRequestName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => PaymentConnectorExternalTransactionRequestContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: PaymentConnectorExternalTransactionRequestType | undefined;
        id?: string | undefined;
        name?: PaymentConnectorExternalTransactionRequestName | undefined;
        created_at?: string | undefined;
        context?: PaymentConnectorExternalTransactionRequestContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorExternalTransactionRequest
    > = z
        .object({
            type: PaymentConnectorExternalTransactionRequestType$.optional(),
            id: z.string().optional(),
            name: PaymentConnectorExternalTransactionRequestName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => PaymentConnectorExternalTransactionRequestContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
