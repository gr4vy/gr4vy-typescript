/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorExternalTransactionRequestType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorExternalTransactionRequestType = ClosedEnum<
    typeof PaymentConnectorExternalTransactionRequestType
>;

/**
 * The name of this resource. Is always `payment-connector-external-transaction-request`.
 */
export const PaymentConnectorExternalTransactionRequestName = {
    PaymentConnectorExternalTransactionRequest: "payment-connector-external-transaction-request",
} as const;
/**
 * The name of this resource. Is always `payment-connector-external-transaction-request`.
 */
export type PaymentConnectorExternalTransactionRequestName = ClosedEnum<
    typeof PaymentConnectorExternalTransactionRequestName
>;

/**
 * Additional context for the transaction.
 */
export type PaymentConnectorExternalTransactionRequestContext = {
    /**
     * The connector request id.
     */
    connectorRequestId?: string | undefined;
    /**
     * The request.
     */
    request?: string | null | undefined;
    /**
     * The response.
     */
    response?: string | null | undefined;
    /**
     * The payment service definition id.
     */
    paymentServiceDefinitionId?: string | null | undefined;
    /**
     * Whether the transaction was successful.
     */
    success?: boolean | null | undefined;
    /**
     * The payment service id.
     */
    paymentServiceId?: string | null | undefined;
    /**
     * The response status code.
     */
    responseStatusCode?: string | null | undefined;
    /**
     * The payment service display name.
     */
    paymentServiceDisplayName?: string | null | undefined;
    /**
     * The HTTP method.
     */
    method?: string | null | undefined;
    /**
     * The endpoint for the request.
     */
    url?: string | null | undefined;
    /**
     * The ID of the refund, in case this links to a refund.
     */
    refundId?: string | null | undefined;
    /**
     * The external ID of the refund.
     */
    refundXid?: string | null | undefined;
};

/**
 * This event logs the exact details parsed details for an external
 *
 * @remarks
 * transaction request.
 */
export type PaymentConnectorExternalTransactionRequest = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorExternalTransactionRequestType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-external-transaction-request`.
     */
    name?: PaymentConnectorExternalTransactionRequestName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for the transaction.
     */
    context?: PaymentConnectorExternalTransactionRequestContext | undefined;
};

/** @internal */
export const PaymentConnectorExternalTransactionRequestType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorExternalTransactionRequestType
> = z.nativeEnum(PaymentConnectorExternalTransactionRequestType);

/** @internal */
export const PaymentConnectorExternalTransactionRequestType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorExternalTransactionRequestType
> = PaymentConnectorExternalTransactionRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorExternalTransactionRequestType$ {
    /** @deprecated use `PaymentConnectorExternalTransactionRequestType$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorExternalTransactionRequestType$inboundSchema;
    /** @deprecated use `PaymentConnectorExternalTransactionRequestType$outboundSchema` instead. */
    export const outboundSchema = PaymentConnectorExternalTransactionRequestType$outboundSchema;
}

/** @internal */
export const PaymentConnectorExternalTransactionRequestName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorExternalTransactionRequestName
> = z.nativeEnum(PaymentConnectorExternalTransactionRequestName);

/** @internal */
export const PaymentConnectorExternalTransactionRequestName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorExternalTransactionRequestName
> = PaymentConnectorExternalTransactionRequestName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorExternalTransactionRequestName$ {
    /** @deprecated use `PaymentConnectorExternalTransactionRequestName$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorExternalTransactionRequestName$inboundSchema;
    /** @deprecated use `PaymentConnectorExternalTransactionRequestName$outboundSchema` instead. */
    export const outboundSchema = PaymentConnectorExternalTransactionRequestName$outboundSchema;
}

/** @internal */
export const PaymentConnectorExternalTransactionRequestContext$inboundSchema: z.ZodType<
    PaymentConnectorExternalTransactionRequestContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        connector_request_id: z.string().optional(),
        request: z.nullable(z.string()).optional(),
        response: z.nullable(z.string()).optional(),
        payment_service_definition_id: z.nullable(z.string()).optional(),
        success: z.nullable(z.boolean()).optional(),
        payment_service_id: z.nullable(z.string()).optional(),
        response_status_code: z.nullable(z.string()).optional(),
        payment_service_display_name: z.nullable(z.string()).optional(),
        method: z.nullable(z.string()).optional(),
        url: z.nullable(z.string()).optional(),
        refund_id: z.nullable(z.string()).optional(),
        refund_xid: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            connector_request_id: "connectorRequestId",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_id: "paymentServiceId",
            response_status_code: "responseStatusCode",
            payment_service_display_name: "paymentServiceDisplayName",
            refund_id: "refundId",
            refund_xid: "refundXid",
        });
    });

/** @internal */
export type PaymentConnectorExternalTransactionRequestContext$Outbound = {
    connector_request_id?: string | undefined;
    request?: string | null | undefined;
    response?: string | null | undefined;
    payment_service_definition_id?: string | null | undefined;
    success?: boolean | null | undefined;
    payment_service_id?: string | null | undefined;
    response_status_code?: string | null | undefined;
    payment_service_display_name?: string | null | undefined;
    method?: string | null | undefined;
    url?: string | null | undefined;
    refund_id?: string | null | undefined;
    refund_xid?: string | null | undefined;
};

/** @internal */
export const PaymentConnectorExternalTransactionRequestContext$outboundSchema: z.ZodType<
    PaymentConnectorExternalTransactionRequestContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorExternalTransactionRequestContext
> = z
    .object({
        connectorRequestId: z.string().optional(),
        request: z.nullable(z.string()).optional(),
        response: z.nullable(z.string()).optional(),
        paymentServiceDefinitionId: z.nullable(z.string()).optional(),
        success: z.nullable(z.boolean()).optional(),
        paymentServiceId: z.nullable(z.string()).optional(),
        responseStatusCode: z.nullable(z.string()).optional(),
        paymentServiceDisplayName: z.nullable(z.string()).optional(),
        method: z.nullable(z.string()).optional(),
        url: z.nullable(z.string()).optional(),
        refundId: z.nullable(z.string()).optional(),
        refundXid: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            connectorRequestId: "connector_request_id",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceId: "payment_service_id",
            responseStatusCode: "response_status_code",
            paymentServiceDisplayName: "payment_service_display_name",
            refundId: "refund_id",
            refundXid: "refund_xid",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorExternalTransactionRequestContext$ {
    /** @deprecated use `PaymentConnectorExternalTransactionRequestContext$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorExternalTransactionRequestContext$inboundSchema;
    /** @deprecated use `PaymentConnectorExternalTransactionRequestContext$outboundSchema` instead. */
    export const outboundSchema = PaymentConnectorExternalTransactionRequestContext$outboundSchema;
    /** @deprecated use `PaymentConnectorExternalTransactionRequestContext$Outbound` instead. */
    export type Outbound = PaymentConnectorExternalTransactionRequestContext$Outbound;
}

/** @internal */
export const PaymentConnectorExternalTransactionRequest$inboundSchema: z.ZodType<
    PaymentConnectorExternalTransactionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorExternalTransactionRequestType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorExternalTransactionRequestName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => PaymentConnectorExternalTransactionRequestContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorExternalTransactionRequest$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: PaymentConnectorExternalTransactionRequestContext$Outbound | undefined;
};

/** @internal */
export const PaymentConnectorExternalTransactionRequest$outboundSchema: z.ZodType<
    PaymentConnectorExternalTransactionRequest$Outbound,
    z.ZodTypeDef,
    PaymentConnectorExternalTransactionRequest
> = z
    .object({
        type: PaymentConnectorExternalTransactionRequestType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorExternalTransactionRequestName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => PaymentConnectorExternalTransactionRequestContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorExternalTransactionRequest$ {
    /** @deprecated use `PaymentConnectorExternalTransactionRequest$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorExternalTransactionRequest$inboundSchema;
    /** @deprecated use `PaymentConnectorExternalTransactionRequest$outboundSchema` instead. */
    export const outboundSchema = PaymentConnectorExternalTransactionRequest$outboundSchema;
    /** @deprecated use `PaymentConnectorExternalTransactionRequest$Outbound` instead. */
    export type Outbound = PaymentConnectorExternalTransactionRequest$Outbound;
}
