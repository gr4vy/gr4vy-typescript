/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ForterAntiFraudOptionsDiscountCouponDiscountAmount,
  ForterAntiFraudOptionsDiscountCouponDiscountAmount$inboundSchema,
  ForterAntiFraudOptionsDiscountCouponDiscountAmount$Outbound,
  ForterAntiFraudOptionsDiscountCouponDiscountAmount$outboundSchema,
} from "./forterantifraudoptionsdiscountcoupondiscountamount.js";

export type ForterAntiFraudOptionsDiscount = {
  /**
   * The coupon code applied to the order.
   */
  couponCodeUsed: string;
  /**
   * The type of discount applied to the order.
   */
  discountType: string;
  /**
   * Monetary details of the discount amount.
   */
  couponDiscountAmount?:
    | ForterAntiFraudOptionsDiscountCouponDiscountAmount
    | null
    | undefined;
  /**
   * The percentage discount applied via the coupon.
   */
  couponDiscountPercent?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsDiscount$inboundSchema: z.ZodType<
  ForterAntiFraudOptionsDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  coupon_code_used: z.string(),
  discount_type: z.string(),
  coupon_discount_amount: z.nullable(
    ForterAntiFraudOptionsDiscountCouponDiscountAmount$inboundSchema,
  ).optional(),
  coupon_discount_percent: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "coupon_code_used": "couponCodeUsed",
    "discount_type": "discountType",
    "coupon_discount_amount": "couponDiscountAmount",
    "coupon_discount_percent": "couponDiscountPercent",
  });
});

/** @internal */
export type ForterAntiFraudOptionsDiscount$Outbound = {
  coupon_code_used: string;
  discount_type: string;
  coupon_discount_amount?:
    | ForterAntiFraudOptionsDiscountCouponDiscountAmount$Outbound
    | null
    | undefined;
  coupon_discount_percent?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsDiscount$outboundSchema: z.ZodType<
  ForterAntiFraudOptionsDiscount$Outbound,
  z.ZodTypeDef,
  ForterAntiFraudOptionsDiscount
> = z.object({
  couponCodeUsed: z.string(),
  discountType: z.string(),
  couponDiscountAmount: z.nullable(
    ForterAntiFraudOptionsDiscountCouponDiscountAmount$outboundSchema,
  ).optional(),
  couponDiscountPercent: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    couponCodeUsed: "coupon_code_used",
    discountType: "discount_type",
    couponDiscountAmount: "coupon_discount_amount",
    couponDiscountPercent: "coupon_discount_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterAntiFraudOptionsDiscount$ {
  /** @deprecated use `ForterAntiFraudOptionsDiscount$inboundSchema` instead. */
  export const inboundSchema = ForterAntiFraudOptionsDiscount$inboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsDiscount$outboundSchema` instead. */
  export const outboundSchema = ForterAntiFraudOptionsDiscount$outboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsDiscount$Outbound` instead. */
  export type Outbound = ForterAntiFraudOptionsDiscount$Outbound;
}

export function forterAntiFraudOptionsDiscountToJSON(
  forterAntiFraudOptionsDiscount: ForterAntiFraudOptionsDiscount,
): string {
  return JSON.stringify(
    ForterAntiFraudOptionsDiscount$outboundSchema.parse(
      forterAntiFraudOptionsDiscount,
    ),
  );
}

export function forterAntiFraudOptionsDiscountFromJSON(
  jsonString: string,
): SafeParseResult<ForterAntiFraudOptionsDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForterAntiFraudOptionsDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForterAntiFraudOptionsDiscount' from JSON`,
  );
}
