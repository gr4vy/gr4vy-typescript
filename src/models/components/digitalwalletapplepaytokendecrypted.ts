/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum DigitalWalletApplePayTokenDecryptedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
 */
export enum DigitalWalletApplePayTokenDecryptedName {
    DigitalWalletApplePayTokenDecrypted = "digital-wallet-apple-pay-token-decrypted",
}

/**
 * The type of payment instrument.
 */
export enum DigitalWalletApplePayTokenDecryptedContextType {
    Dpan = "dpan",
    Fpan = "fpan",
}

/**
 * Apple Pay decrypted token context.
 */
export type DigitalWalletApplePayTokenDecryptedContext = {
    /**
     * Version information about the payment token.
     */
    version?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletApplePayTokenDecryptedContextType | null | undefined;
    /**
     * Expiration of the decrypted data.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * ECI indicator, as defined by 3D Secure.
     */
    eci?: string | null | undefined;
    /**
     * Hash of the application data property of the original request.
     */
    applicationData?: string | null | undefined;
    /**
     * The unique identifier from Apple Pay.
     */
    transactionIdentifier?: string | undefined;
    /**
     * The cardholder name.
     */
    cardholderName?: string | null | undefined;
    /**
     * ISO 4217 numeric currency code for the transaction.
     */
    currencyCode?: string | undefined;
    /**
     * The amount for the transaction.
     */
    transactionAmount?: number | undefined;
    /**
     * Hex-encoded device manufacturer identifier which initiated the transaction.
     */
    deviceManufacturerIdentifier?: string | undefined;
    /**
     * Either "3DSecure" or "EMV".
     */
    paymentDataType?: string | undefined;
    /**
     * For a merchant token request, the provisioned merchant token identifier from the payment network.
     */
    merchantTokenIdentifier?: string | null | undefined;
    /**
     * Expiration date of card.
     */
    cardExpirationDate?: string | null | undefined;
    /**
     * Last four digits of card PAN.
     */
    cardSuffix?: string | null | undefined;
};

/**
 * The result after decrypting an Apple Pay token.
 */
export type DigitalWalletApplePayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletApplePayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
     */
    name?: DigitalWalletApplePayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Apple Pay decrypted token context.
     */
    context?: DigitalWalletApplePayTokenDecryptedContext | undefined;
};

/** @internal */
export const DigitalWalletApplePayTokenDecryptedType$: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedType
> = z.nativeEnum(DigitalWalletApplePayTokenDecryptedType);

/** @internal */
export const DigitalWalletApplePayTokenDecryptedName$: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedName
> = z.nativeEnum(DigitalWalletApplePayTokenDecryptedName);

/** @internal */
export const DigitalWalletApplePayTokenDecryptedContextType$: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedContextType
> = z.nativeEnum(DigitalWalletApplePayTokenDecryptedContextType);

/** @internal */
export namespace DigitalWalletApplePayTokenDecryptedContext$ {
    export type Inbound = {
        version?: string | undefined;
        type?: DigitalWalletApplePayTokenDecryptedContextType | null | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        eci?: string | null | undefined;
        application_data?: string | null | undefined;
        transaction_identifier?: string | undefined;
        cardholder_name?: string | null | undefined;
        currency_code?: string | undefined;
        transaction_amount?: number | undefined;
        device_manufacturer_identifier?: string | undefined;
        payment_data_type?: string | undefined;
        merchant_token_identifier?: string | null | undefined;
        card_expiration_date?: string | null | undefined;
        card_suffix?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        DigitalWalletApplePayTokenDecryptedContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            version: z.string().optional(),
            type: z.nullable(DigitalWalletApplePayTokenDecryptedContextType$).optional(),
            expiration_date: z.string().optional(),
            has_cryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            application_data: z.nullable(z.string()).optional(),
            transaction_identifier: z.string().optional(),
            cardholder_name: z.nullable(z.string()).optional(),
            currency_code: z.string().optional(),
            transaction_amount: z.number().int().optional(),
            device_manufacturer_identifier: z.string().optional(),
            payment_data_type: z.string().optional(),
            merchant_token_identifier: z.nullable(z.string()).optional(),
            card_expiration_date: z.nullable(z.string()).optional(),
            card_suffix: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.expiration_date === undefined ? null : { expirationDate: v.expiration_date }),
                ...(v.has_cryptogram === undefined ? null : { hasCryptogram: v.has_cryptogram }),
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.application_data === undefined
                    ? null
                    : { applicationData: v.application_data }),
                ...(v.transaction_identifier === undefined
                    ? null
                    : { transactionIdentifier: v.transaction_identifier }),
                ...(v.cardholder_name === undefined ? null : { cardholderName: v.cardholder_name }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.transaction_amount === undefined
                    ? null
                    : { transactionAmount: v.transaction_amount }),
                ...(v.device_manufacturer_identifier === undefined
                    ? null
                    : { deviceManufacturerIdentifier: v.device_manufacturer_identifier }),
                ...(v.payment_data_type === undefined
                    ? null
                    : { paymentDataType: v.payment_data_type }),
                ...(v.merchant_token_identifier === undefined
                    ? null
                    : { merchantTokenIdentifier: v.merchant_token_identifier }),
                ...(v.card_expiration_date === undefined
                    ? null
                    : { cardExpirationDate: v.card_expiration_date }),
                ...(v.card_suffix === undefined ? null : { cardSuffix: v.card_suffix }),
            };
        });

    export type Outbound = {
        version?: string | undefined;
        type?: DigitalWalletApplePayTokenDecryptedContextType | null | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        eci?: string | null | undefined;
        application_data?: string | null | undefined;
        transaction_identifier?: string | undefined;
        cardholder_name?: string | null | undefined;
        currency_code?: string | undefined;
        transaction_amount?: number | undefined;
        device_manufacturer_identifier?: string | undefined;
        payment_data_type?: string | undefined;
        merchant_token_identifier?: string | null | undefined;
        card_expiration_date?: string | null | undefined;
        card_suffix?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletApplePayTokenDecryptedContext
    > = z
        .object({
            version: z.string().optional(),
            type: z.nullable(DigitalWalletApplePayTokenDecryptedContextType$).optional(),
            expirationDate: z.string().optional(),
            hasCryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            applicationData: z.nullable(z.string()).optional(),
            transactionIdentifier: z.string().optional(),
            cardholderName: z.nullable(z.string()).optional(),
            currencyCode: z.string().optional(),
            transactionAmount: z.number().int().optional(),
            deviceManufacturerIdentifier: z.string().optional(),
            paymentDataType: z.string().optional(),
            merchantTokenIdentifier: z.nullable(z.string()).optional(),
            cardExpirationDate: z.nullable(z.string()).optional(),
            cardSuffix: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.expirationDate === undefined ? null : { expiration_date: v.expirationDate }),
                ...(v.hasCryptogram === undefined ? null : { has_cryptogram: v.hasCryptogram }),
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.applicationData === undefined
                    ? null
                    : { application_data: v.applicationData }),
                ...(v.transactionIdentifier === undefined
                    ? null
                    : { transaction_identifier: v.transactionIdentifier }),
                ...(v.cardholderName === undefined ? null : { cardholder_name: v.cardholderName }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.transactionAmount === undefined
                    ? null
                    : { transaction_amount: v.transactionAmount }),
                ...(v.deviceManufacturerIdentifier === undefined
                    ? null
                    : { device_manufacturer_identifier: v.deviceManufacturerIdentifier }),
                ...(v.paymentDataType === undefined
                    ? null
                    : { payment_data_type: v.paymentDataType }),
                ...(v.merchantTokenIdentifier === undefined
                    ? null
                    : { merchant_token_identifier: v.merchantTokenIdentifier }),
                ...(v.cardExpirationDate === undefined
                    ? null
                    : { card_expiration_date: v.cardExpirationDate }),
                ...(v.cardSuffix === undefined ? null : { card_suffix: v.cardSuffix }),
            };
        });
}

/** @internal */
export namespace DigitalWalletApplePayTokenDecrypted$ {
    export type Inbound = {
        type?: DigitalWalletApplePayTokenDecryptedType | undefined;
        id?: string | undefined;
        name?: DigitalWalletApplePayTokenDecryptedName | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletApplePayTokenDecryptedContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        DigitalWalletApplePayTokenDecrypted,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: DigitalWalletApplePayTokenDecryptedType$.optional(),
            id: z.string().optional(),
            name: DigitalWalletApplePayTokenDecryptedName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => DigitalWalletApplePayTokenDecryptedContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: DigitalWalletApplePayTokenDecryptedType | undefined;
        id?: string | undefined;
        name?: DigitalWalletApplePayTokenDecryptedName | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletApplePayTokenDecryptedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletApplePayTokenDecrypted
    > = z
        .object({
            type: DigitalWalletApplePayTokenDecryptedType$.optional(),
            id: z.string().optional(),
            name: DigitalWalletApplePayTokenDecryptedName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => DigitalWalletApplePayTokenDecryptedContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
