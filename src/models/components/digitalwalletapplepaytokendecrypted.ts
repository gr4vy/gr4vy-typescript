/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum DigitalWalletApplePayTokenDecryptedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
 */
export enum DigitalWalletApplePayTokenDecryptedName {
    DigitalWalletApplePayTokenDecrypted = "digital-wallet-apple-pay-token-decrypted",
}

/**
 * The type of payment instrument.
 */
export enum DigitalWalletApplePayTokenDecryptedContextType {
    Dpan = "dpan",
    Fpan = "fpan",
}

/**
 * Apple Pay decrypted token context.
 */
export type DigitalWalletApplePayTokenDecryptedContext = {
    /**
     * Version information about the payment token.
     */
    version?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletApplePayTokenDecryptedContextType | null | undefined;
    /**
     * Expiration of the decrypted data.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * ECI indicator, as defined by 3D Secure.
     */
    eci?: string | null | undefined;
    /**
     * Hash of the application data property of the original request.
     */
    applicationData?: string | null | undefined;
    /**
     * The unique identifier from Apple Pay.
     */
    transactionIdentifier?: string | undefined;
    /**
     * The cardholder name.
     */
    cardholderName?: string | null | undefined;
    /**
     * ISO 4217 numeric currency code for the transaction.
     */
    currencyCode?: string | undefined;
    /**
     * The amount for the transaction.
     */
    transactionAmount?: number | undefined;
    /**
     * Hex-encoded device manufacturer identifier which initiated the transaction.
     */
    deviceManufacturerIdentifier?: string | undefined;
    /**
     * Either "3DSecure" or "EMV".
     */
    paymentDataType?: string | undefined;
    /**
     * For a merchant token request, the provisioned merchant token identifier from the payment network.
     */
    merchantTokenIdentifier?: string | null | undefined;
    /**
     * Expiration date of card.
     */
    cardExpirationDate?: string | null | undefined;
    /**
     * Last four digits of card PAN.
     */
    cardSuffix?: string | null | undefined;
};

/**
 * The result after decrypting an Apple Pay token.
 */
export type DigitalWalletApplePayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletApplePayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
     */
    name?: DigitalWalletApplePayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Apple Pay decrypted token context.
     */
    context?: DigitalWalletApplePayTokenDecryptedContext | undefined;
};

/** @internal */
export namespace DigitalWalletApplePayTokenDecryptedType$ {
    export const inboundSchema = z.nativeEnum(DigitalWalletApplePayTokenDecryptedType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletApplePayTokenDecryptedName$ {
    export const inboundSchema = z.nativeEnum(DigitalWalletApplePayTokenDecryptedName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletApplePayTokenDecryptedContextType$ {
    export const inboundSchema = z.nativeEnum(DigitalWalletApplePayTokenDecryptedContextType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletApplePayTokenDecryptedContext$ {
    export const inboundSchema: z.ZodType<
        DigitalWalletApplePayTokenDecryptedContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            version: z.string().optional(),
            type: z
                .nullable(DigitalWalletApplePayTokenDecryptedContextType$.inboundSchema)
                .optional(),
            expiration_date: z.string().optional(),
            has_cryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            application_data: z.nullable(z.string()).optional(),
            transaction_identifier: z.string().optional(),
            cardholder_name: z.nullable(z.string()).optional(),
            currency_code: z.string().optional(),
            transaction_amount: z.number().int().optional(),
            device_manufacturer_identifier: z.string().optional(),
            payment_data_type: z.string().optional(),
            merchant_token_identifier: z.nullable(z.string()).optional(),
            card_expiration_date: z.nullable(z.string()).optional(),
            card_suffix: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expiration_date: "expirationDate",
                has_cryptogram: "hasCryptogram",
                application_data: "applicationData",
                transaction_identifier: "transactionIdentifier",
                cardholder_name: "cardholderName",
                currency_code: "currencyCode",
                transaction_amount: "transactionAmount",
                device_manufacturer_identifier: "deviceManufacturerIdentifier",
                payment_data_type: "paymentDataType",
                merchant_token_identifier: "merchantTokenIdentifier",
                card_expiration_date: "cardExpirationDate",
                card_suffix: "cardSuffix",
            });
        });

    export type Outbound = {
        version?: string | undefined;
        type?: string | null | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        eci?: string | null | undefined;
        application_data?: string | null | undefined;
        transaction_identifier?: string | undefined;
        cardholder_name?: string | null | undefined;
        currency_code?: string | undefined;
        transaction_amount?: number | undefined;
        device_manufacturer_identifier?: string | undefined;
        payment_data_type?: string | undefined;
        merchant_token_identifier?: string | null | undefined;
        card_expiration_date?: string | null | undefined;
        card_suffix?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletApplePayTokenDecryptedContext
    > = z
        .object({
            version: z.string().optional(),
            type: z
                .nullable(DigitalWalletApplePayTokenDecryptedContextType$.outboundSchema)
                .optional(),
            expirationDate: z.string().optional(),
            hasCryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            applicationData: z.nullable(z.string()).optional(),
            transactionIdentifier: z.string().optional(),
            cardholderName: z.nullable(z.string()).optional(),
            currencyCode: z.string().optional(),
            transactionAmount: z.number().int().optional(),
            deviceManufacturerIdentifier: z.string().optional(),
            paymentDataType: z.string().optional(),
            merchantTokenIdentifier: z.nullable(z.string()).optional(),
            cardExpirationDate: z.nullable(z.string()).optional(),
            cardSuffix: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expirationDate: "expiration_date",
                hasCryptogram: "has_cryptogram",
                applicationData: "application_data",
                transactionIdentifier: "transaction_identifier",
                cardholderName: "cardholder_name",
                currencyCode: "currency_code",
                transactionAmount: "transaction_amount",
                deviceManufacturerIdentifier: "device_manufacturer_identifier",
                paymentDataType: "payment_data_type",
                merchantTokenIdentifier: "merchant_token_identifier",
                cardExpirationDate: "card_expiration_date",
                cardSuffix: "card_suffix",
            });
        });
}

/** @internal */
export namespace DigitalWalletApplePayTokenDecrypted$ {
    export const inboundSchema: z.ZodType<
        DigitalWalletApplePayTokenDecrypted,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: DigitalWalletApplePayTokenDecryptedType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: DigitalWalletApplePayTokenDecryptedName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => DigitalWalletApplePayTokenDecryptedContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletApplePayTokenDecryptedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletApplePayTokenDecrypted
    > = z
        .object({
            type: DigitalWalletApplePayTokenDecryptedType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: DigitalWalletApplePayTokenDecryptedName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => DigitalWalletApplePayTokenDecryptedContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
