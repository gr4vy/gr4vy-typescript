/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const DigitalWalletApplePayTokenDecryptedType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type DigitalWalletApplePayTokenDecryptedType = ClosedEnum<
    typeof DigitalWalletApplePayTokenDecryptedType
>;

/**
 * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
 */
export const DigitalWalletApplePayTokenDecryptedName = {
    DigitalWalletApplePayTokenDecrypted: "digital-wallet-apple-pay-token-decrypted",
} as const;
/**
 * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
 */
export type DigitalWalletApplePayTokenDecryptedName = ClosedEnum<
    typeof DigitalWalletApplePayTokenDecryptedName
>;

/**
 * The type of payment instrument.
 */
export const DigitalWalletApplePayTokenDecryptedContextType = {
    Dpan: "dpan",
    Fpan: "fpan",
} as const;
/**
 * The type of payment instrument.
 */
export type DigitalWalletApplePayTokenDecryptedContextType = ClosedEnum<
    typeof DigitalWalletApplePayTokenDecryptedContextType
>;

/**
 * Apple Pay decrypted token context.
 */
export type DigitalWalletApplePayTokenDecryptedContext = {
    /**
     * Version information about the payment token.
     */
    version?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletApplePayTokenDecryptedContextType | null | undefined;
    /**
     * Expiration of the decrypted data.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * ECI indicator, as defined by 3D Secure.
     */
    eci?: string | null | undefined;
    /**
     * Hash of the application data property of the original request.
     */
    applicationData?: string | null | undefined;
    /**
     * The unique identifier from Apple Pay.
     */
    transactionIdentifier?: string | undefined;
    /**
     * The cardholder name.
     */
    cardholderName?: string | null | undefined;
    /**
     * ISO 4217 numeric currency code for the transaction.
     */
    currencyCode?: string | undefined;
    /**
     * The amount for the transaction.
     */
    transactionAmount?: number | undefined;
    /**
     * Hex-encoded device manufacturer identifier which initiated the transaction.
     */
    deviceManufacturerIdentifier?: string | undefined;
    /**
     * Either "3DSecure" or "EMV".
     */
    paymentDataType?: string | undefined;
    /**
     * For a merchant token request, the provisioned merchant token identifier from the payment network.
     */
    merchantTokenIdentifier?: string | null | undefined;
    /**
     * Expiration date of card.
     */
    cardExpirationDate?: string | null | undefined;
    /**
     * Last four digits of card PAN.
     */
    cardSuffix?: string | null | undefined;
};

/**
 * The result after decrypting an Apple Pay token.
 */
export type DigitalWalletApplePayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletApplePayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
     */
    name?: DigitalWalletApplePayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Apple Pay decrypted token context.
     */
    context?: DigitalWalletApplePayTokenDecryptedContext | undefined;
};

/** @internal */
export const DigitalWalletApplePayTokenDecryptedType$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedType
> = z.nativeEnum(DigitalWalletApplePayTokenDecryptedType);

/** @internal */
export const DigitalWalletApplePayTokenDecryptedType$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedType
> = DigitalWalletApplePayTokenDecryptedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletApplePayTokenDecryptedType$ {
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletApplePayTokenDecryptedType$inboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletApplePayTokenDecryptedType$outboundSchema;
}

/** @internal */
export const DigitalWalletApplePayTokenDecryptedName$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedName
> = z.nativeEnum(DigitalWalletApplePayTokenDecryptedName);

/** @internal */
export const DigitalWalletApplePayTokenDecryptedName$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedName
> = DigitalWalletApplePayTokenDecryptedName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletApplePayTokenDecryptedName$ {
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedName$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletApplePayTokenDecryptedName$inboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedName$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletApplePayTokenDecryptedName$outboundSchema;
}

/** @internal */
export const DigitalWalletApplePayTokenDecryptedContextType$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedContextType
> = z.nativeEnum(DigitalWalletApplePayTokenDecryptedContextType);

/** @internal */
export const DigitalWalletApplePayTokenDecryptedContextType$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletApplePayTokenDecryptedContextType
> = DigitalWalletApplePayTokenDecryptedContextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletApplePayTokenDecryptedContextType$ {
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedContextType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletApplePayTokenDecryptedContextType$inboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedContextType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletApplePayTokenDecryptedContextType$outboundSchema;
}

/** @internal */
export const DigitalWalletApplePayTokenDecryptedContext$inboundSchema: z.ZodType<
    DigitalWalletApplePayTokenDecryptedContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        version: z.string().optional(),
        type: z.nullable(DigitalWalletApplePayTokenDecryptedContextType$inboundSchema).optional(),
        expiration_date: z.string().optional(),
        has_cryptogram: z.boolean().optional(),
        eci: z.nullable(z.string()).optional(),
        application_data: z.nullable(z.string()).optional(),
        transaction_identifier: z.string().optional(),
        cardholder_name: z.nullable(z.string()).optional(),
        currency_code: z.string().optional(),
        transaction_amount: z.number().int().optional(),
        device_manufacturer_identifier: z.string().optional(),
        payment_data_type: z.string().optional(),
        merchant_token_identifier: z.nullable(z.string()).optional(),
        card_expiration_date: z.nullable(z.string()).optional(),
        card_suffix: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expiration_date: "expirationDate",
            has_cryptogram: "hasCryptogram",
            application_data: "applicationData",
            transaction_identifier: "transactionIdentifier",
            cardholder_name: "cardholderName",
            currency_code: "currencyCode",
            transaction_amount: "transactionAmount",
            device_manufacturer_identifier: "deviceManufacturerIdentifier",
            payment_data_type: "paymentDataType",
            merchant_token_identifier: "merchantTokenIdentifier",
            card_expiration_date: "cardExpirationDate",
            card_suffix: "cardSuffix",
        });
    });

/** @internal */
export type DigitalWalletApplePayTokenDecryptedContext$Outbound = {
    version?: string | undefined;
    type?: string | null | undefined;
    expiration_date?: string | undefined;
    has_cryptogram?: boolean | undefined;
    eci?: string | null | undefined;
    application_data?: string | null | undefined;
    transaction_identifier?: string | undefined;
    cardholder_name?: string | null | undefined;
    currency_code?: string | undefined;
    transaction_amount?: number | undefined;
    device_manufacturer_identifier?: string | undefined;
    payment_data_type?: string | undefined;
    merchant_token_identifier?: string | null | undefined;
    card_expiration_date?: string | null | undefined;
    card_suffix?: string | null | undefined;
};

/** @internal */
export const DigitalWalletApplePayTokenDecryptedContext$outboundSchema: z.ZodType<
    DigitalWalletApplePayTokenDecryptedContext$Outbound,
    z.ZodTypeDef,
    DigitalWalletApplePayTokenDecryptedContext
> = z
    .object({
        version: z.string().optional(),
        type: z.nullable(DigitalWalletApplePayTokenDecryptedContextType$outboundSchema).optional(),
        expirationDate: z.string().optional(),
        hasCryptogram: z.boolean().optional(),
        eci: z.nullable(z.string()).optional(),
        applicationData: z.nullable(z.string()).optional(),
        transactionIdentifier: z.string().optional(),
        cardholderName: z.nullable(z.string()).optional(),
        currencyCode: z.string().optional(),
        transactionAmount: z.number().int().optional(),
        deviceManufacturerIdentifier: z.string().optional(),
        paymentDataType: z.string().optional(),
        merchantTokenIdentifier: z.nullable(z.string()).optional(),
        cardExpirationDate: z.nullable(z.string()).optional(),
        cardSuffix: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expirationDate: "expiration_date",
            hasCryptogram: "has_cryptogram",
            applicationData: "application_data",
            transactionIdentifier: "transaction_identifier",
            cardholderName: "cardholder_name",
            currencyCode: "currency_code",
            transactionAmount: "transaction_amount",
            deviceManufacturerIdentifier: "device_manufacturer_identifier",
            paymentDataType: "payment_data_type",
            merchantTokenIdentifier: "merchant_token_identifier",
            cardExpirationDate: "card_expiration_date",
            cardSuffix: "card_suffix",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletApplePayTokenDecryptedContext$ {
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedContext$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletApplePayTokenDecryptedContext$inboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedContext$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletApplePayTokenDecryptedContext$outboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecryptedContext$Outbound` instead. */
    export type Outbound = DigitalWalletApplePayTokenDecryptedContext$Outbound;
}

/** @internal */
export const DigitalWalletApplePayTokenDecrypted$inboundSchema: z.ZodType<
    DigitalWalletApplePayTokenDecrypted,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: DigitalWalletApplePayTokenDecryptedType$inboundSchema.optional(),
        id: z.string().optional(),
        name: DigitalWalletApplePayTokenDecryptedName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => DigitalWalletApplePayTokenDecryptedContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type DigitalWalletApplePayTokenDecrypted$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: DigitalWalletApplePayTokenDecryptedContext$Outbound | undefined;
};

/** @internal */
export const DigitalWalletApplePayTokenDecrypted$outboundSchema: z.ZodType<
    DigitalWalletApplePayTokenDecrypted$Outbound,
    z.ZodTypeDef,
    DigitalWalletApplePayTokenDecrypted
> = z
    .object({
        type: DigitalWalletApplePayTokenDecryptedType$outboundSchema.optional(),
        id: z.string().optional(),
        name: DigitalWalletApplePayTokenDecryptedName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => DigitalWalletApplePayTokenDecryptedContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletApplePayTokenDecrypted$ {
    /** @deprecated use `DigitalWalletApplePayTokenDecrypted$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletApplePayTokenDecrypted$inboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecrypted$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletApplePayTokenDecrypted$outboundSchema;
    /** @deprecated use `DigitalWalletApplePayTokenDecrypted$Outbound` instead. */
    export type Outbound = DigitalWalletApplePayTokenDecrypted$Outbound;
}
