/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingDetails,
  BillingDetails$inboundSchema,
  BillingDetails$Outbound,
  BillingDetails$outboundSchema,
} from "./billingdetails.js";
import {
  PaymentMethodCard,
  PaymentMethodCard$inboundSchema,
  PaymentMethodCard$Outbound,
  PaymentMethodCard$outboundSchema,
} from "./paymentmethodcard.js";
import {
  PaymentMethodStoredCard,
  PaymentMethodStoredCard$inboundSchema,
  PaymentMethodStoredCard$Outbound,
  PaymentMethodStoredCard$outboundSchema,
} from "./paymentmethodstoredcard.js";

/**
 * The type of payment method to send funds too.
 */
export type PayoutsCreatePaymentMethod =
  | PaymentMethodStoredCard
  | PaymentMethodCard;

/**
 * The type of payout to process.
 */
export const PayoutsCreatePayoutCategory = {
  OnlineGambling: "online_gambling",
} as const;
/**
 * The type of payout to process.
 */
export type PayoutsCreatePayoutCategory = ClosedEnum<
  typeof PayoutsCreatePayoutCategory
>;

/**
 * The billing address for the buyer.
 */
export type PayoutsCreateBuyerAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The optional shipping details for this buyer.
 */
export type PayoutsCreateShippingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: PayoutsCreateBuyerAddress | undefined;
};

/**
 * Inline buyer details for the payout. Use this instead of the `buyer_id` or `buyer_external_identifier`.
 */
export type PayoutsCreateBuyer = {
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * Base model with JSON encoders.
   */
  billingDetails?: BillingDetails | undefined;
  /**
   * The optional shipping details for this buyer.
   */
  shippingDetails?: PayoutsCreateShippingDetails | undefined;
};

/**
 * The address for the merchant.
 */
export type PayoutsCreateAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * Merchant information for the source of the payout.
 */
export type PayoutsCreateMerchant = {
  /**
   * The name of the merchant.
   */
  name: string;
  /**
   * Unique value which identifies a merchant for processing transactions, also known as a MID.
   */
  identificationNumber: string;
  /**
   * The phone number for the merchant which should be formatted according to the E164 number standard.
   */
  phoneNumber: string;
  /**
   * Merchant website URL.
   */
  url: string;
  /**
   * Value to explain charges or payments on bank statements.
   */
  statementDescriptor: string;
  /**
   * Merchant classification for the type of goods or services it provides.
   */
  merchantCategoryCode: string;
  /**
   * The address for the merchant.
   */
  address?: PayoutsCreateAddress | undefined;
};

/**
 * Custom options for `checkout-card` payment service.
 */
export type CheckoutCard = {
  /**
   * The processing channel to be used for the payment.
   */
  processingChannelId: string;
  /**
   * The ID of the currency account that will fund the payout.
   */
  sourceId: string;
};

/**
 * Optional fields for processing payouts on specific payment services.
 */
export type ConnectionOptions = {
  /**
   * Custom options for `checkout-card` payment service.
   */
  checkoutCard?: CheckoutCard | undefined;
};

/**
 * PayoutsCreate
 *
 * @remarks
 *
 * Represents the data required to create a new payout.
 */
export type PayoutsCreate = {
  /**
   * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
   */
  amount: number;
  /**
   * The ISO-4217 currency code for this payout.
   */
  currency: string;
  /**
   * The ID of the payment service to use for the payout.
   */
  paymentServiceId: string;
  /**
   * The type of payment method to send funds too.
   */
  paymentMethod: PaymentMethodStoredCard | PaymentMethodCard;
  /**
   * The type of payout to process.
   */
  category?: PayoutsCreatePayoutCategory | undefined;
  /**
   * A value that can be used to match the payout against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or `buyer_external_identifier`.
   */
  buyerId?: string | undefined;
  /**
   * Inline buyer details for the payout. Use this instead of the `buyer_id` or `buyer_external_identifier`.
   */
  buyer?: PayoutsCreateBuyer | undefined;
  /**
   * The `external_identifier` of a stored buyer to use for this payout. Use this instead of the `buyer_id` or `buyer`.
   */
  buyerExternalIdentifier?: string | undefined;
  /**
   * Merchant information for the source of the payout.
   */
  merchant?: PayoutsCreateMerchant | undefined;
  /**
   * Optional fields for processing payouts on specific payment services.
   */
  connectionOptions?: ConnectionOptions | undefined;
};

/** @internal */
export const PayoutsCreatePaymentMethod$inboundSchema: z.ZodType<
  PayoutsCreatePaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.union([
  PaymentMethodStoredCard$inboundSchema,
  PaymentMethodCard$inboundSchema,
]);

/** @internal */
export type PayoutsCreatePaymentMethod$Outbound =
  | PaymentMethodStoredCard$Outbound
  | PaymentMethodCard$Outbound;

/** @internal */
export const PayoutsCreatePaymentMethod$outboundSchema: z.ZodType<
  PayoutsCreatePaymentMethod$Outbound,
  z.ZodTypeDef,
  PayoutsCreatePaymentMethod
> = z.union([
  PaymentMethodStoredCard$outboundSchema,
  PaymentMethodCard$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreatePaymentMethod$ {
  /** @deprecated use `PayoutsCreatePaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreatePaymentMethod$inboundSchema;
  /** @deprecated use `PayoutsCreatePaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreatePaymentMethod$outboundSchema;
  /** @deprecated use `PayoutsCreatePaymentMethod$Outbound` instead. */
  export type Outbound = PayoutsCreatePaymentMethod$Outbound;
}

export function payoutsCreatePaymentMethodToJSON(
  payoutsCreatePaymentMethod: PayoutsCreatePaymentMethod,
): string {
  return JSON.stringify(
    PayoutsCreatePaymentMethod$outboundSchema.parse(payoutsCreatePaymentMethod),
  );
}

export function payoutsCreatePaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreatePaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreatePaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreatePaymentMethod' from JSON`,
  );
}

/** @internal */
export const PayoutsCreatePayoutCategory$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsCreatePayoutCategory
> = z.nativeEnum(PayoutsCreatePayoutCategory);

/** @internal */
export const PayoutsCreatePayoutCategory$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsCreatePayoutCategory
> = PayoutsCreatePayoutCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreatePayoutCategory$ {
  /** @deprecated use `PayoutsCreatePayoutCategory$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreatePayoutCategory$inboundSchema;
  /** @deprecated use `PayoutsCreatePayoutCategory$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreatePayoutCategory$outboundSchema;
}

/** @internal */
export const PayoutsCreateBuyerAddress$inboundSchema: z.ZodType<
  PayoutsCreateBuyerAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type PayoutsCreateBuyerAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const PayoutsCreateBuyerAddress$outboundSchema: z.ZodType<
  PayoutsCreateBuyerAddress$Outbound,
  z.ZodTypeDef,
  PayoutsCreateBuyerAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreateBuyerAddress$ {
  /** @deprecated use `PayoutsCreateBuyerAddress$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreateBuyerAddress$inboundSchema;
  /** @deprecated use `PayoutsCreateBuyerAddress$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreateBuyerAddress$outboundSchema;
  /** @deprecated use `PayoutsCreateBuyerAddress$Outbound` instead. */
  export type Outbound = PayoutsCreateBuyerAddress$Outbound;
}

export function payoutsCreateBuyerAddressToJSON(
  payoutsCreateBuyerAddress: PayoutsCreateBuyerAddress,
): string {
  return JSON.stringify(
    PayoutsCreateBuyerAddress$outboundSchema.parse(payoutsCreateBuyerAddress),
  );
}

export function payoutsCreateBuyerAddressFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreateBuyerAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreateBuyerAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreateBuyerAddress' from JSON`,
  );
}

/** @internal */
export const PayoutsCreateShippingDetails$inboundSchema: z.ZodType<
  PayoutsCreateShippingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => PayoutsCreateBuyerAddress$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type PayoutsCreateShippingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: PayoutsCreateBuyerAddress$Outbound | undefined;
};

/** @internal */
export const PayoutsCreateShippingDetails$outboundSchema: z.ZodType<
  PayoutsCreateShippingDetails$Outbound,
  z.ZodTypeDef,
  PayoutsCreateShippingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => PayoutsCreateBuyerAddress$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreateShippingDetails$ {
  /** @deprecated use `PayoutsCreateShippingDetails$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreateShippingDetails$inboundSchema;
  /** @deprecated use `PayoutsCreateShippingDetails$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreateShippingDetails$outboundSchema;
  /** @deprecated use `PayoutsCreateShippingDetails$Outbound` instead. */
  export type Outbound = PayoutsCreateShippingDetails$Outbound;
}

export function payoutsCreateShippingDetailsToJSON(
  payoutsCreateShippingDetails: PayoutsCreateShippingDetails,
): string {
  return JSON.stringify(
    PayoutsCreateShippingDetails$outboundSchema.parse(
      payoutsCreateShippingDetails,
    ),
  );
}

export function payoutsCreateShippingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreateShippingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreateShippingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreateShippingDetails' from JSON`,
  );
}

/** @internal */
export const PayoutsCreateBuyer$inboundSchema: z.ZodType<
  PayoutsCreateBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: BillingDetails$inboundSchema.optional(),
  shipping_details: z.lazy(() => PayoutsCreateShippingDetails$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
    "shipping_details": "shippingDetails",
  });
});

/** @internal */
export type PayoutsCreateBuyer$Outbound = {
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: BillingDetails$Outbound | undefined;
  shipping_details?: PayoutsCreateShippingDetails$Outbound | undefined;
};

/** @internal */
export const PayoutsCreateBuyer$outboundSchema: z.ZodType<
  PayoutsCreateBuyer$Outbound,
  z.ZodTypeDef,
  PayoutsCreateBuyer
> = z.object({
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: BillingDetails$outboundSchema.optional(),
  shippingDetails: z.lazy(() => PayoutsCreateShippingDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    shippingDetails: "shipping_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreateBuyer$ {
  /** @deprecated use `PayoutsCreateBuyer$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreateBuyer$inboundSchema;
  /** @deprecated use `PayoutsCreateBuyer$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreateBuyer$outboundSchema;
  /** @deprecated use `PayoutsCreateBuyer$Outbound` instead. */
  export type Outbound = PayoutsCreateBuyer$Outbound;
}

export function payoutsCreateBuyerToJSON(
  payoutsCreateBuyer: PayoutsCreateBuyer,
): string {
  return JSON.stringify(
    PayoutsCreateBuyer$outboundSchema.parse(payoutsCreateBuyer),
  );
}

export function payoutsCreateBuyerFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreateBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreateBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreateBuyer' from JSON`,
  );
}

/** @internal */
export const PayoutsCreateAddress$inboundSchema: z.ZodType<
  PayoutsCreateAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type PayoutsCreateAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const PayoutsCreateAddress$outboundSchema: z.ZodType<
  PayoutsCreateAddress$Outbound,
  z.ZodTypeDef,
  PayoutsCreateAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreateAddress$ {
  /** @deprecated use `PayoutsCreateAddress$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreateAddress$inboundSchema;
  /** @deprecated use `PayoutsCreateAddress$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreateAddress$outboundSchema;
  /** @deprecated use `PayoutsCreateAddress$Outbound` instead. */
  export type Outbound = PayoutsCreateAddress$Outbound;
}

export function payoutsCreateAddressToJSON(
  payoutsCreateAddress: PayoutsCreateAddress,
): string {
  return JSON.stringify(
    PayoutsCreateAddress$outboundSchema.parse(payoutsCreateAddress),
  );
}

export function payoutsCreateAddressFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreateAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreateAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreateAddress' from JSON`,
  );
}

/** @internal */
export const PayoutsCreateMerchant$inboundSchema: z.ZodType<
  PayoutsCreateMerchant,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  identification_number: z.string(),
  phone_number: z.string(),
  url: z.string(),
  statement_descriptor: z.string(),
  merchant_category_code: z.string(),
  address: z.lazy(() => PayoutsCreateAddress$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "identification_number": "identificationNumber",
    "phone_number": "phoneNumber",
    "statement_descriptor": "statementDescriptor",
    "merchant_category_code": "merchantCategoryCode",
  });
});

/** @internal */
export type PayoutsCreateMerchant$Outbound = {
  name: string;
  identification_number: string;
  phone_number: string;
  url: string;
  statement_descriptor: string;
  merchant_category_code: string;
  address?: PayoutsCreateAddress$Outbound | undefined;
};

/** @internal */
export const PayoutsCreateMerchant$outboundSchema: z.ZodType<
  PayoutsCreateMerchant$Outbound,
  z.ZodTypeDef,
  PayoutsCreateMerchant
> = z.object({
  name: z.string(),
  identificationNumber: z.string(),
  phoneNumber: z.string(),
  url: z.string(),
  statementDescriptor: z.string(),
  merchantCategoryCode: z.string(),
  address: z.lazy(() => PayoutsCreateAddress$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    identificationNumber: "identification_number",
    phoneNumber: "phone_number",
    statementDescriptor: "statement_descriptor",
    merchantCategoryCode: "merchant_category_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreateMerchant$ {
  /** @deprecated use `PayoutsCreateMerchant$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreateMerchant$inboundSchema;
  /** @deprecated use `PayoutsCreateMerchant$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreateMerchant$outboundSchema;
  /** @deprecated use `PayoutsCreateMerchant$Outbound` instead. */
  export type Outbound = PayoutsCreateMerchant$Outbound;
}

export function payoutsCreateMerchantToJSON(
  payoutsCreateMerchant: PayoutsCreateMerchant,
): string {
  return JSON.stringify(
    PayoutsCreateMerchant$outboundSchema.parse(payoutsCreateMerchant),
  );
}

export function payoutsCreateMerchantFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreateMerchant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreateMerchant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreateMerchant' from JSON`,
  );
}

/** @internal */
export const CheckoutCard$inboundSchema: z.ZodType<
  CheckoutCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  processing_channel_id: z.string(),
  source_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "processing_channel_id": "processingChannelId",
    "source_id": "sourceId",
  });
});

/** @internal */
export type CheckoutCard$Outbound = {
  processing_channel_id: string;
  source_id: string;
};

/** @internal */
export const CheckoutCard$outboundSchema: z.ZodType<
  CheckoutCard$Outbound,
  z.ZodTypeDef,
  CheckoutCard
> = z.object({
  processingChannelId: z.string(),
  sourceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    processingChannelId: "processing_channel_id",
    sourceId: "source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutCard$ {
  /** @deprecated use `CheckoutCard$inboundSchema` instead. */
  export const inboundSchema = CheckoutCard$inboundSchema;
  /** @deprecated use `CheckoutCard$outboundSchema` instead. */
  export const outboundSchema = CheckoutCard$outboundSchema;
  /** @deprecated use `CheckoutCard$Outbound` instead. */
  export type Outbound = CheckoutCard$Outbound;
}

export function checkoutCardToJSON(checkoutCard: CheckoutCard): string {
  return JSON.stringify(CheckoutCard$outboundSchema.parse(checkoutCard));
}

export function checkoutCardFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutCard' from JSON`,
  );
}

/** @internal */
export const ConnectionOptions$inboundSchema: z.ZodType<
  ConnectionOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  "checkout-card": z.lazy(() => CheckoutCard$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "checkout-card": "checkoutCard",
  });
});

/** @internal */
export type ConnectionOptions$Outbound = {
  "checkout-card"?: CheckoutCard$Outbound | undefined;
};

/** @internal */
export const ConnectionOptions$outboundSchema: z.ZodType<
  ConnectionOptions$Outbound,
  z.ZodTypeDef,
  ConnectionOptions
> = z.object({
  checkoutCard: z.lazy(() => CheckoutCard$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    checkoutCard: "checkout-card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionOptions$ {
  /** @deprecated use `ConnectionOptions$inboundSchema` instead. */
  export const inboundSchema = ConnectionOptions$inboundSchema;
  /** @deprecated use `ConnectionOptions$outboundSchema` instead. */
  export const outboundSchema = ConnectionOptions$outboundSchema;
  /** @deprecated use `ConnectionOptions$Outbound` instead. */
  export type Outbound = ConnectionOptions$Outbound;
}

export function connectionOptionsToJSON(
  connectionOptions: ConnectionOptions,
): string {
  return JSON.stringify(
    ConnectionOptions$outboundSchema.parse(connectionOptions),
  );
}

export function connectionOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionOptions' from JSON`,
  );
}

/** @internal */
export const PayoutsCreate$inboundSchema: z.ZodType<
  PayoutsCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int(),
  currency: z.string(),
  payment_service_id: z.string(),
  payment_method: z.union([
    PaymentMethodStoredCard$inboundSchema,
    PaymentMethodCard$inboundSchema,
  ]),
  category: PayoutsCreatePayoutCategory$inboundSchema.optional(),
  external_identifier: z.string().optional(),
  buyer_id: z.string().optional(),
  buyer: z.lazy(() => PayoutsCreateBuyer$inboundSchema).optional(),
  buyer_external_identifier: z.string().optional(),
  merchant: z.lazy(() => PayoutsCreateMerchant$inboundSchema).optional(),
  connection_options: z.lazy(() => ConnectionOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_service_id": "paymentServiceId",
    "payment_method": "paymentMethod",
    "external_identifier": "externalIdentifier",
    "buyer_id": "buyerId",
    "buyer_external_identifier": "buyerExternalIdentifier",
    "connection_options": "connectionOptions",
  });
});

/** @internal */
export type PayoutsCreate$Outbound = {
  amount: number;
  currency: string;
  payment_service_id: string;
  payment_method: PaymentMethodStoredCard$Outbound | PaymentMethodCard$Outbound;
  category?: string | undefined;
  external_identifier?: string | undefined;
  buyer_id?: string | undefined;
  buyer?: PayoutsCreateBuyer$Outbound | undefined;
  buyer_external_identifier?: string | undefined;
  merchant?: PayoutsCreateMerchant$Outbound | undefined;
  connection_options?: ConnectionOptions$Outbound | undefined;
};

/** @internal */
export const PayoutsCreate$outboundSchema: z.ZodType<
  PayoutsCreate$Outbound,
  z.ZodTypeDef,
  PayoutsCreate
> = z.object({
  amount: z.number().int(),
  currency: z.string(),
  paymentServiceId: z.string(),
  paymentMethod: z.union([
    PaymentMethodStoredCard$outboundSchema,
    PaymentMethodCard$outboundSchema,
  ]),
  category: PayoutsCreatePayoutCategory$outboundSchema.optional(),
  externalIdentifier: z.string().optional(),
  buyerId: z.string().optional(),
  buyer: z.lazy(() => PayoutsCreateBuyer$outboundSchema).optional(),
  buyerExternalIdentifier: z.string().optional(),
  merchant: z.lazy(() => PayoutsCreateMerchant$outboundSchema).optional(),
  connectionOptions: z.lazy(() => ConnectionOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentServiceId: "payment_service_id",
    paymentMethod: "payment_method",
    externalIdentifier: "external_identifier",
    buyerId: "buyer_id",
    buyerExternalIdentifier: "buyer_external_identifier",
    connectionOptions: "connection_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsCreate$ {
  /** @deprecated use `PayoutsCreate$inboundSchema` instead. */
  export const inboundSchema = PayoutsCreate$inboundSchema;
  /** @deprecated use `PayoutsCreate$outboundSchema` instead. */
  export const outboundSchema = PayoutsCreate$outboundSchema;
  /** @deprecated use `PayoutsCreate$Outbound` instead. */
  export type Outbound = PayoutsCreate$Outbound;
}

export function payoutsCreateToJSON(payoutsCreate: PayoutsCreate): string {
  return JSON.stringify(PayoutsCreate$outboundSchema.parse(payoutsCreate));
}

export function payoutsCreateFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsCreate' from JSON`,
  );
}
