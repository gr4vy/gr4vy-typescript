/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MattildaTapiOptions = {
  /**
   * Defines the date at which the payment will expire if not completed. Must be provided in ISO 8601 format `(YYYY-MM-DD`). If not specified, it defaults to 7 days in the future from the current date.
   */
  paymentMethodExpiresAt?: string | null | undefined;
};

/** @internal */
export const MattildaTapiOptions$inboundSchema: z.ZodType<
  MattildaTapiOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method_expires_at: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_method_expires_at": "paymentMethodExpiresAt",
  });
});

/** @internal */
export type MattildaTapiOptions$Outbound = {
  payment_method_expires_at?: string | null | undefined;
};

/** @internal */
export const MattildaTapiOptions$outboundSchema: z.ZodType<
  MattildaTapiOptions$Outbound,
  z.ZodTypeDef,
  MattildaTapiOptions
> = z.object({
  paymentMethodExpiresAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentMethodExpiresAt: "payment_method_expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MattildaTapiOptions$ {
  /** @deprecated use `MattildaTapiOptions$inboundSchema` instead. */
  export const inboundSchema = MattildaTapiOptions$inboundSchema;
  /** @deprecated use `MattildaTapiOptions$outboundSchema` instead. */
  export const outboundSchema = MattildaTapiOptions$outboundSchema;
  /** @deprecated use `MattildaTapiOptions$Outbound` instead. */
  export type Outbound = MattildaTapiOptions$Outbound;
}

export function mattildaTapiOptionsToJSON(
  mattildaTapiOptions: MattildaTapiOptions,
): string {
  return JSON.stringify(
    MattildaTapiOptions$outboundSchema.parse(mattildaTapiOptions),
  );
}

export function mattildaTapiOptionsFromJSON(
  jsonString: string,
): SafeParseResult<MattildaTapiOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MattildaTapiOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MattildaTapiOptions' from JSON`,
  );
}
