/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A settlement record for a transaction.
 */
export type Settlement = {
  /**
   * The unique identifier for the record.
   */
  id: string;
  /**
   * The merchant account this record belongs to.
   */
  merchantAccountId: string;
  /**
   * The date and time the record was created, in ISO 8601 format.
   */
  createdAt: Date;
  /**
   * The date and time the record was last updated, in ISO 8601 format.
   */
  updatedAt: Date;
  /**
   * The date and time the record was posted, in ISO 8601 format.
   */
  postedAt: Date;
  /**
   * The date and time the record was ingested, in ISO 8601 format.
   */
  ingestedAt: Date;
  /**
   * ISO 4217 currency code.
   */
  currency: string;
  /**
   * The total amount in the smallest currency unit (e.g. cents).
   */
  amount: number;
  /**
   * The exchange rate, if applicable.
   */
  exchangeRate?: number | null | undefined;
  /**
   * The commission amount deducted in the smallest currency unit.
   */
  commission: number;
  /**
   * The interchange fee, if applicable, in the smallest currency unit.
   */
  interchange?: number | null | undefined;
  /**
   * The markup fee, if applicable, in the smallest currency unit.
   */
  markup?: number | null | undefined;
  /**
   * The scheme fee, if applicable, in the smallest currency unit.
   */
  schemeFee?: number | null | undefined;
  /**
   * The report ID from the payment service.
   */
  paymentServiceReportId: string;
  /**
   * List of file IDs for the payment service report.
   */
  paymentServiceReportFileIds: Array<string>;
  /**
   * The transaction this record is associated with.
   */
  transactionId: string;
  /**
   * Always `settlement`.
   */
  type?: "settlement" | undefined;
};

/** @internal */
export const Settlement$inboundSchema: z.ZodType<
  Settlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  merchant_account_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  posted_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ingested_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  currency: z.string(),
  amount: z.number().int(),
  exchange_rate: z.nullable(z.number()).optional(),
  commission: z.number().int(),
  interchange: z.nullable(z.number().int()).optional(),
  markup: z.nullable(z.number().int()).optional(),
  scheme_fee: z.nullable(z.number().int()).optional(),
  payment_service_report_id: z.string(),
  payment_service_report_file_ids: z.array(z.string()),
  transaction_id: z.string(),
  type: z.literal("settlement").default("settlement"),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "posted_at": "postedAt",
    "ingested_at": "ingestedAt",
    "exchange_rate": "exchangeRate",
    "scheme_fee": "schemeFee",
    "payment_service_report_id": "paymentServiceReportId",
    "payment_service_report_file_ids": "paymentServiceReportFileIds",
    "transaction_id": "transactionId",
  });
});

/** @internal */
export type Settlement$Outbound = {
  id: string;
  merchant_account_id: string;
  created_at: string;
  updated_at: string;
  posted_at: string;
  ingested_at: string;
  currency: string;
  amount: number;
  exchange_rate?: number | null | undefined;
  commission: number;
  interchange?: number | null | undefined;
  markup?: number | null | undefined;
  scheme_fee?: number | null | undefined;
  payment_service_report_id: string;
  payment_service_report_file_ids: Array<string>;
  transaction_id: string;
  type: "settlement";
};

/** @internal */
export const Settlement$outboundSchema: z.ZodType<
  Settlement$Outbound,
  z.ZodTypeDef,
  Settlement
> = z.object({
  id: z.string(),
  merchantAccountId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  postedAt: z.date().transform(v => v.toISOString()),
  ingestedAt: z.date().transform(v => v.toISOString()),
  currency: z.string(),
  amount: z.number().int(),
  exchangeRate: z.nullable(z.number()).optional(),
  commission: z.number().int(),
  interchange: z.nullable(z.number().int()).optional(),
  markup: z.nullable(z.number().int()).optional(),
  schemeFee: z.nullable(z.number().int()).optional(),
  paymentServiceReportId: z.string(),
  paymentServiceReportFileIds: z.array(z.string()),
  transactionId: z.string(),
  type: z.literal("settlement").default("settlement" as const),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    postedAt: "posted_at",
    ingestedAt: "ingested_at",
    exchangeRate: "exchange_rate",
    schemeFee: "scheme_fee",
    paymentServiceReportId: "payment_service_report_id",
    paymentServiceReportFileIds: "payment_service_report_file_ids",
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settlement$ {
  /** @deprecated use `Settlement$inboundSchema` instead. */
  export const inboundSchema = Settlement$inboundSchema;
  /** @deprecated use `Settlement$outboundSchema` instead. */
  export const outboundSchema = Settlement$outboundSchema;
  /** @deprecated use `Settlement$Outbound` instead. */
  export type Outbound = Settlement$Outbound;
}

export function settlementToJSON(settlement: Settlement): string {
  return JSON.stringify(Settlement$outboundSchema.parse(settlement));
}

export function settlementFromJSON(
  jsonString: string,
): SafeParseResult<Settlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settlement' from JSON`,
  );
}
