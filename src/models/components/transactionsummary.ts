/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { GiftCardRedemption, GiftCardRedemption$ } from "./giftcardredemption";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction`.
 */
export enum TransactionSummaryType {
    Transaction = "transaction",
}

/**
 * The type of this resource. Is always `buyer`.
 */
export enum TransactionSummaryBuyerType {
    Buyer = "buyer",
}

/**
 * The type of this resource. Is always `billing-details`.
 */
export enum TransactionSummaryBuyerBillingDetailsType {
    BillingDetails = "billing-details",
}

/**
 * The billing address of the buyer.
 */
export type TransactionSummaryAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export enum TransactionSummaryKind {
    AeTrn = "ae.trn",
    AuAbn = "au.abn",
    ArDni = "ar.dni",
    ArCuil = "ar.cuil",
    ArCuit = "ar.cuit",
    BrCnpj = "br.cnpj",
    BrCpf = "br.cpf",
    CaBn = "ca.bn",
    CaGstHst = "ca.gst_hst",
    CaPstBc = "ca.pst_bc",
    CaPstMb = "ca.pst_mb",
    CaPstSk = "ca.pst_sk",
    CaQst = "ca.qst",
    ChVat = "ch.vat",
    ClTin = "cl.tin",
    EsCif = "es.cif",
    EuVat = "eu.vat",
    GbVat = "gb.vat",
    HkBr = "hk.br",
    IdNik = "id.nik",
    IdNpwp = "id.npwp",
    InGst = "in.gst",
    JpCn = "jp.cn",
    JpRn = "jp.rn",
    KrBrn = "kr.brn",
    LiUid = "li.uid",
    MxCurp = "mx.curp",
    MyFrp = "my.frp",
    MyItn = "my.itn",
    MyNric = "my.nric",
    MySst = "my.sst",
    NoVat = "no.vat",
    NzGst = "nz.gst",
    PhTin = "ph.tin",
    RuInn = "ru.inn",
    RuKpp = "ru.kpp",
    SaVat = "sa.vat",
    SgGst = "sg.gst",
    SgUen = "sg.uen",
    ThId = "th.id",
    ThVat = "th.vat",
    TwVat = "tw.vat",
    UsEin = "us.ein",
    ZaVat = "za.vat",
}

/**
 * The tax information associated with the billing details.
 */
export type TransactionSummaryTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: TransactionSummaryKind;
};

/**
 * The billing details associated with the buyer, which include the
 *
 * @remarks
 * address and tax ID.
 */
export type TransactionSummaryBillingDetails = {
    /**
     * The type of this resource. Is always `billing-details`.
     */
    type?: TransactionSummaryBuyerBillingDetailsType | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: TransactionSummaryAddress | null | undefined;
    /**
     * The tax information associated with the billing details.
     */
    taxId?: TransactionSummaryTaxID | null | undefined;
};

/**
 * The buyer used for this transaction.
 */
export type BuyerSnapshot = {
    /**
     * The type of this resource. Is always `buyer`.
     */
    type?: TransactionSummaryBuyerType | undefined;
    /**
     * The unique Gr4vy ID for this buyer.
     */
    id?: string | undefined;
    /**
     * The billing details associated with the buyer, which include the
     *
     * @remarks
     * address and tax ID.
     */
    billingDetails?: TransactionSummaryBillingDetails | null | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * An external identifier that can be used to match the buyer against your own records.
     */
    externalIdentifier?: string | null | undefined;
};

/**
 * The name of the instrument used to process the transaction.
 *
 * @remarks
 *
 */
export enum InstrumentType {
    Applepay = "applepay",
    CardToken = "card_token",
    Googlepay = "googlepay",
    NetworkToken = "network_token",
    Pan = "pan",
    Redirect = "redirect",
    RedirectToken = "redirect_token",
}

/**
 * The original `intent` used when the transaction was
 *
 * @remarks
 * [created](#operation/authorize-new-transaction).
 */
export enum Intent {
    Authorize = "authorize",
    Capture = "capture",
}

export enum TransactionSummaryMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    CheckoutSession = "checkout-session",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Everydaypay = "everydaypay",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    NetworkToken = "network-token",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * `payment-method`.
 */
export enum TransactionSummaryPaymentMethodType {
    PaymentMethod = "payment-method",
}

/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export enum TransactionSummaryApprovalTarget {
    Any = "any",
    NewWindow = "new_window",
}

/**
 * The type of card, one of `credit`, `debit` or `prepaid`.
 */
export enum TransactionSummaryCardType {
    Credit = "credit",
    Debit = "debit",
    Prepaid = "prepaid",
}

/**
 * A credit or debit card payment method.
 */
export type Card = {
    /**
     * The type of card, one of `credit`, `debit` or `prepaid`.
     */
    cardType?: TransactionSummaryCardType | undefined;
    /**
     * The first 6 digits of the full card number (the BIN).
     */
    bin?: string | undefined;
};

/**
 * The type of this payment method.
 */
export enum TransactionSummaryPaymentMethodMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    CheckoutSession = "checkout-session",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Everydaypay = "everydaypay",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    NetworkToken = "network-token",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * An additional label used to differentiate different sub-types of a payment
 *
 * @remarks
 * method. Most notably this can include the type of card used in a
 * transaction. This field is `null` for the non-card payment methods.
 * This represents the card scheme sent to the connector and it could be different from the
 * actual card scheme that is being used by the PSP to process the transaction
 * in the following situations: 1. `use_additional_scheme` transformation is used
 * with the `PAN` instrument but we already have a PSP token for the card.
 * 2. `use_additional_scheme` transformation is used but PSP has fallen back to the
 * main card scheme internally.
 */
export enum TransactionSummaryScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * The payment method used for this transaction.
 */
export type PaymentMethodSnapshot = {
    /**
     * `payment-method`.
     */
    type?: TransactionSummaryPaymentMethodType | undefined;
    /**
     * The unique ID of the payment method.
     */
    id?: string | null | undefined;
    /**
     * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
     */
    approvalTarget?: TransactionSummaryApprovalTarget | null | undefined;
    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    approvalUrl?: string | null | undefined;
    /**
     * The 2-letter ISO code of the country this payment method can
     *
     * @remarks
     * be used for. If this value is `null` the payment method may be
     * used in multiple countries.
     */
    country?: string | null | undefined;
    /**
     * The ISO-4217 currency code that this payment method can be
     *
     * @remarks
     * used for. If this value is `null` the payment method may be
     * used for multiple currencies.
     */
    currency?: string | null | undefined;
    details?: Card | null | undefined;
    /**
     * The expiration date for this payment method. This is mostly used by cards
     *
     * @remarks
     * where the card might have an expiration date.
     */
    expirationDate?: string | null | undefined;
    /**
     * An external identifier that can be used to match the payment method
     *
     * @remarks
     * against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * A label for the payment method. This can be the last 4 digits for a card,
     *
     * @remarks
     * or the email address for an alternative payment method.
     */
    label?: string | null | undefined;
    /**
     * The date and time when this card was last replaced.
     *
     * @remarks
     *
     * When the Account Updater determines that new card details are available, existing details are not
     * changed immediately. There are three scenarios in which the actual replacement occurs:
     *
     * 1. When this card has expired.
     * 2. When only the expiration date changed.
     * 3. When a transaction using this card is declined with any of the following codes:
     *     * `canceled_payment_method`
     *     * `expired_payment_method`
     *     * `unavailable_payment_method`
     *     * `unknown_payment_method`
     *
     * When the replacement is applied, this field is updated.
     * For non-card payment methods, the value of this field is always set to `null`.
     */
    lastReplacedAt?: Date | null | undefined;
    /**
     * The type of this payment method.
     */
    method?: TransactionSummaryPaymentMethodMethod | undefined;
    /**
     * The payment account reference (PAR) returned by the card scheme. This is a unique
     *
     * @remarks
     * reference to the underlying account that has been used to fund this payment method.
     * This value will be unique if the same underlying account was used, regardless of
     * the actual payment method used. For example, a network token or an Apple Pay device
     * token will return the same PAR when possible.
     *
     * The uniqueness of this value will depend on the card scheme, please refer to their documentation
     * for further details. The availability of the PAR in our API depends on the availability
     * of its value in the API of the payment service used for the transaction.
     */
    paymentAccountReference?: string | null | undefined;
    /**
     * An additional label used to differentiate different sub-types of a payment
     *
     * @remarks
     * method. Most notably this can include the type of card used in a
     * transaction. This field is `null` for the non-card payment methods.
     * This represents the card scheme sent to the connector and it could be different from the
     * actual card scheme that is being used by the PSP to process the transaction
     * in the following situations: 1. `use_additional_scheme` transformation is used
     * with the `PAN` instrument but we already have a PSP token for the card.
     * 2. `use_additional_scheme` transformation is used but PSP has fallen back to the
     * main card scheme internally.
     */
    scheme?: TransactionSummaryScheme | null | undefined;
    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    fingerprint?: string | null | undefined;
};

/**
 * The type of this resource.
 */
export enum TransactionSummaryPaymentServiceType {
    PaymentService = "payment-service",
}

/**
 * The payment method that this services handles.
 */
export enum TransactionSummaryPaymentServiceMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    CheckoutSession = "checkout-session",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Everydaypay = "everydaypay",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    NetworkToken = "network-token",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * The payment service used for this transaction.
 */
export type APaymentService = {
    /**
     * The type of this resource.
     */
    type?: TransactionSummaryPaymentServiceType | undefined;
    /**
     * The ID of this payment service.
     */
    id?: string | undefined;
    /**
     * The custom name set for this service.
     */
    displayName?: string | undefined;
    /**
     * The payment method that this services handles.
     */
    method?: TransactionSummaryPaymentServiceMethod | undefined;
    /**
     * The ID of the payment service definition used to create this service.
     *
     * @remarks
     *
     */
    paymentServiceDefinitionId?: string | undefined;
};

/**
 * The status of the transaction. The status may change over time as
 *
 * @remarks
 * asynchronous processing events occur.
 */
export enum TransactionSummaryStatus {
    Processing = "processing",
    BuyerApprovalPending = "buyer_approval_pending",
    AuthorizationSucceeded = "authorization_succeeded",
    AuthorizationFailed = "authorization_failed",
    AuthorizationDeclined = "authorization_declined",
    CapturePending = "capture_pending",
    CaptureSucceeded = "capture_succeeded",
    AuthorizationVoidPending = "authorization_void_pending",
    AuthorizationVoided = "authorization_voided",
}

/**
 * A transaction record.
 */
export type TransactionSummary = {
    /**
     * The type of this resource. Is always `transaction`.
     */
    type?: TransactionSummaryType | undefined;
    /**
     * The unique identifier for this transaction.
     */
    id?: string | undefined;
    /**
     * The authorized amount for this transaction. This can be more than the
     *
     * @remarks
     * actual captured amount and part of this amount may be refunded.
     */
    amount?: number | undefined;
    /**
     * The amount for this transaction that has been authorized for the `payment_method`.
     *
     * @remarks
     * This can be less than the `amount` if gift cards were used.
     */
    authorizedAmount?: number | undefined;
    /**
     * The buyer used for this transaction.
     */
    buyer?: BuyerSnapshot | null | undefined;
    /**
     * The captured amount for this transaction. This can be the full value
     *
     * @remarks
     * of the `authorized_amount` or less.
     */
    capturedAmount?: number | undefined;
    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    checkoutSessionId?: string | null | undefined;
    /**
     * The 2-letter ISO code of the country of the transaction.
     *
     * @remarks
     * This is used to filter the payment services that is used to process the
     * transaction.
     *
     */
    country?: string | null | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The currency code for this transaction.
     */
    currency?: string | undefined;
    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The gift cards redeemed for this transaction.
     */
    giftCardRedemptions?: Array<GiftCardRedemption> | undefined;
    /**
     * The name of the instrument used to process the transaction.
     *
     * @remarks
     *
     */
    instrumentType?: InstrumentType | null | undefined;
    /**
     * The original `intent` used when the transaction was
     *
     * @remarks
     * [created](#operation/authorize-new-transaction).
     */
    intent?: Intent | undefined;
    /**
     * The ID of the merchant account to which this transaction belongs to.
     */
    merchantAccountId?: string | undefined;
    method?: TransactionSummaryMethod | null | undefined;
    /**
     * The payment method used for this transaction.
     */
    paymentMethod?: PaymentMethodSnapshot | null | undefined;
    /**
     * The payment service used for this transaction.
     */
    paymentService?: APaymentService | null | undefined;
    /**
     * Whether a manual review is pending.
     */
    pendingReview?: boolean | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The base62 encoded transaction ID. This represents a shorter version
     *
     * @remarks
     * of this transaction's `id` which is sent to payment services, anti-fraud services,
     * and other connectors. You can use this ID to reconcile a payment service's
     * transaction against our system.
     *
     * This ID is sent instead of the transaction ID because not all services
     * support 36 digit identifiers.
     */
    reconciliationId?: string | undefined;
    /**
     * The refunded amount for this transaction. This can be the full value
     *
     * @remarks
     * of the `captured_amount` or less.
     */
    refundedAmount?: number | undefined;
    /**
     * The status of the transaction. The status may change over time as
     *
     * @remarks
     * asynchronous processing events occur.
     */
    status?: TransactionSummaryStatus | undefined;
    /**
     * Defines when the transaction was last updated.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace TransactionSummaryType$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryBuyerType$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryBuyerType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryBuyerBillingDetailsType$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryBuyerBillingDetailsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryAddress$ {
    export const inboundSchema: z.ZodType<TransactionSummaryAddress, z.ZodTypeDef, unknown> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postal_code: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                postal_code: "postalCode",
                state_code: "stateCode",
                house_number_or_name: "houseNumberOrName",
            });
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSummaryAddress> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postalCode: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                postalCode: "postal_code",
                stateCode: "state_code",
                houseNumberOrName: "house_number_or_name",
            });
        });
}

/** @internal */
export namespace TransactionSummaryKind$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryKind);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryTaxID$ {
    export const inboundSchema: z.ZodType<TransactionSummaryTaxID, z.ZodTypeDef, unknown> =
        z.object({
            value: z.string(),
            kind: TransactionSummaryKind$.inboundSchema,
        });

    export type Outbound = {
        value: string;
        kind: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSummaryTaxID> =
        z.object({
            value: z.string(),
            kind: TransactionSummaryKind$.outboundSchema,
        });
}

/** @internal */
export namespace TransactionSummaryBillingDetails$ {
    export const inboundSchema: z.ZodType<TransactionSummaryBillingDetails, z.ZodTypeDef, unknown> =
        z
            .object({
                type: TransactionSummaryBuyerBillingDetailsType$.inboundSchema.optional(),
                first_name: z.nullable(z.string()).optional(),
                last_name: z.nullable(z.string()).optional(),
                email_address: z.nullable(z.string()).optional(),
                phone_number: z.nullable(z.string()).optional(),
                address: z
                    .nullable(z.lazy(() => TransactionSummaryAddress$.inboundSchema))
                    .optional(),
                tax_id: z.nullable(z.lazy(() => TransactionSummaryTaxID$.inboundSchema)).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    first_name: "firstName",
                    last_name: "lastName",
                    email_address: "emailAddress",
                    phone_number: "phoneNumber",
                    tax_id: "taxId",
                });
            });

    export type Outbound = {
        type?: string | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: TransactionSummaryAddress$.Outbound | null | undefined;
        tax_id?: TransactionSummaryTaxID$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionSummaryBillingDetails
    > = z
        .object({
            type: TransactionSummaryBuyerBillingDetailsType$.outboundSchema.optional(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => TransactionSummaryAddress$.outboundSchema)).optional(),
            taxId: z.nullable(z.lazy(() => TransactionSummaryTaxID$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                lastName: "last_name",
                emailAddress: "email_address",
                phoneNumber: "phone_number",
                taxId: "tax_id",
            });
        });
}

/** @internal */
export namespace BuyerSnapshot$ {
    export const inboundSchema: z.ZodType<BuyerSnapshot, z.ZodTypeDef, unknown> = z
        .object({
            type: TransactionSummaryBuyerType$.inboundSchema.optional(),
            id: z.string().optional(),
            billing_details: z
                .nullable(z.lazy(() => TransactionSummaryBillingDetails$.inboundSchema))
                .optional(),
            display_name: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                billing_details: "billingDetails",
                display_name: "displayName",
                external_identifier: "externalIdentifier",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        billing_details?: TransactionSummaryBillingDetails$.Outbound | null | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerSnapshot> = z
        .object({
            type: TransactionSummaryBuyerType$.outboundSchema.optional(),
            id: z.string().optional(),
            billingDetails: z
                .nullable(z.lazy(() => TransactionSummaryBillingDetails$.outboundSchema))
                .optional(),
            displayName: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                billingDetails: "billing_details",
                displayName: "display_name",
                externalIdentifier: "external_identifier",
            });
        });
}

/** @internal */
export namespace InstrumentType$ {
    export const inboundSchema = z.nativeEnum(InstrumentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Intent$ {
    export const inboundSchema = z.nativeEnum(Intent);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryMethod$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryMethod);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryPaymentMethodType$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryPaymentMethodType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryApprovalTarget$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryApprovalTarget);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryCardType$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryCardType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Card$ {
    export const inboundSchema: z.ZodType<Card, z.ZodTypeDef, unknown> = z
        .object({
            card_type: TransactionSummaryCardType$.inboundSchema.optional(),
            bin: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                card_type: "cardType",
            });
        });

    export type Outbound = {
        card_type?: string | undefined;
        bin?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Card> = z
        .object({
            cardType: TransactionSummaryCardType$.outboundSchema.optional(),
            bin: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                cardType: "card_type",
            });
        });
}

/** @internal */
export namespace TransactionSummaryPaymentMethodMethod$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryPaymentMethodMethod);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryScheme$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryScheme);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentMethodSnapshot$ {
    export const inboundSchema: z.ZodType<PaymentMethodSnapshot, z.ZodTypeDef, unknown> = z
        .object({
            type: TransactionSummaryPaymentMethodType$.inboundSchema.optional(),
            id: z.nullable(z.string()).optional(),
            approval_target: z.nullable(TransactionSummaryApprovalTarget$.inboundSchema).optional(),
            approval_url: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            currency: z.nullable(z.string()).optional(),
            details: z.nullable(z.lazy(() => Card$.inboundSchema)).optional(),
            expiration_date: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            last_replaced_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            method: TransactionSummaryPaymentMethodMethod$.inboundSchema.optional(),
            payment_account_reference: z.nullable(z.string()).optional(),
            scheme: z.nullable(TransactionSummaryScheme$.inboundSchema).optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                approval_target: "approvalTarget",
                approval_url: "approvalUrl",
                expiration_date: "expirationDate",
                external_identifier: "externalIdentifier",
                last_replaced_at: "lastReplacedAt",
                payment_account_reference: "paymentAccountReference",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | null | undefined;
        approval_target?: string | null | undefined;
        approval_url?: string | null | undefined;
        country?: string | null | undefined;
        currency?: string | null | undefined;
        details?: Card$.Outbound | null | undefined;
        expiration_date?: string | null | undefined;
        external_identifier?: string | null | undefined;
        label?: string | null | undefined;
        last_replaced_at?: string | null | undefined;
        method?: string | undefined;
        payment_account_reference?: string | null | undefined;
        scheme?: string | null | undefined;
        fingerprint?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodSnapshot> = z
        .object({
            type: TransactionSummaryPaymentMethodType$.outboundSchema.optional(),
            id: z.nullable(z.string()).optional(),
            approvalTarget: z.nullable(TransactionSummaryApprovalTarget$.outboundSchema).optional(),
            approvalUrl: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            currency: z.nullable(z.string()).optional(),
            details: z.nullable(z.lazy(() => Card$.outboundSchema)).optional(),
            expirationDate: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            label: z.nullable(z.string()).optional(),
            lastReplacedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            method: TransactionSummaryPaymentMethodMethod$.outboundSchema.optional(),
            paymentAccountReference: z.nullable(z.string()).optional(),
            scheme: z.nullable(TransactionSummaryScheme$.outboundSchema).optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                approvalTarget: "approval_target",
                approvalUrl: "approval_url",
                expirationDate: "expiration_date",
                externalIdentifier: "external_identifier",
                lastReplacedAt: "last_replaced_at",
                paymentAccountReference: "payment_account_reference",
            });
        });
}

/** @internal */
export namespace TransactionSummaryPaymentServiceType$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryPaymentServiceType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummaryPaymentServiceMethod$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryPaymentServiceMethod);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace APaymentService$ {
    export const inboundSchema: z.ZodType<APaymentService, z.ZodTypeDef, unknown> = z
        .object({
            type: TransactionSummaryPaymentServiceType$.inboundSchema.optional(),
            id: z.string().optional(),
            display_name: z.string().optional(),
            method: TransactionSummaryPaymentServiceMethod$.inboundSchema.optional(),
            payment_service_definition_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                display_name: "displayName",
                payment_service_definition_id: "paymentServiceDefinitionId",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        display_name?: string | undefined;
        method?: string | undefined;
        payment_service_definition_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, APaymentService> = z
        .object({
            type: TransactionSummaryPaymentServiceType$.outboundSchema.optional(),
            id: z.string().optional(),
            displayName: z.string().optional(),
            method: TransactionSummaryPaymentServiceMethod$.outboundSchema.optional(),
            paymentServiceDefinitionId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                displayName: "display_name",
                paymentServiceDefinitionId: "payment_service_definition_id",
            });
        });
}

/** @internal */
export namespace TransactionSummaryStatus$ {
    export const inboundSchema = z.nativeEnum(TransactionSummaryStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionSummary$ {
    export const inboundSchema: z.ZodType<TransactionSummary, z.ZodTypeDef, unknown> = z
        .object({
            type: TransactionSummaryType$.inboundSchema.optional(),
            id: z.string().optional(),
            amount: z.number().int().optional(),
            authorized_amount: z.number().int().optional(),
            buyer: z.nullable(z.lazy(() => BuyerSnapshot$.inboundSchema)).optional(),
            captured_amount: z.number().int().optional(),
            checkout_session_id: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency: z.string().optional(),
            external_identifier: z.nullable(z.string()).optional(),
            gift_card_redemptions: z.array(GiftCardRedemption$.inboundSchema).optional(),
            instrument_type: z.nullable(InstrumentType$.inboundSchema).optional(),
            intent: Intent$.inboundSchema.optional(),
            merchant_account_id: z.string().optional(),
            method: z.nullable(TransactionSummaryMethod$.inboundSchema).optional(),
            payment_method: z
                .nullable(z.lazy(() => PaymentMethodSnapshot$.inboundSchema))
                .optional(),
            payment_service: z.nullable(z.lazy(() => APaymentService$.inboundSchema)).optional(),
            pending_review: z.boolean().optional(),
            raw_response_code: z.nullable(z.string()).optional(),
            raw_response_description: z.nullable(z.string()).optional(),
            reconciliation_id: z.string().optional(),
            refunded_amount: z.number().int().optional(),
            status: TransactionSummaryStatus$.inboundSchema.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                authorized_amount: "authorizedAmount",
                captured_amount: "capturedAmount",
                checkout_session_id: "checkoutSessionId",
                created_at: "createdAt",
                external_identifier: "externalIdentifier",
                gift_card_redemptions: "giftCardRedemptions",
                instrument_type: "instrumentType",
                merchant_account_id: "merchantAccountId",
                payment_method: "paymentMethod",
                payment_service: "paymentService",
                pending_review: "pendingReview",
                raw_response_code: "rawResponseCode",
                raw_response_description: "rawResponseDescription",
                reconciliation_id: "reconciliationId",
                refunded_amount: "refundedAmount",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        amount?: number | undefined;
        authorized_amount?: number | undefined;
        buyer?: BuyerSnapshot$.Outbound | null | undefined;
        captured_amount?: number | undefined;
        checkout_session_id?: string | null | undefined;
        country?: string | null | undefined;
        created_at?: string | undefined;
        currency?: string | undefined;
        external_identifier?: string | null | undefined;
        gift_card_redemptions?: Array<GiftCardRedemption$.Outbound> | undefined;
        instrument_type?: string | null | undefined;
        intent?: string | undefined;
        merchant_account_id?: string | undefined;
        method?: string | null | undefined;
        payment_method?: PaymentMethodSnapshot$.Outbound | null | undefined;
        payment_service?: APaymentService$.Outbound | null | undefined;
        pending_review?: boolean | undefined;
        raw_response_code?: string | null | undefined;
        raw_response_description?: string | null | undefined;
        reconciliation_id?: string | undefined;
        refunded_amount?: number | undefined;
        status?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSummary> = z
        .object({
            type: TransactionSummaryType$.outboundSchema.optional(),
            id: z.string().optional(),
            amount: z.number().int().optional(),
            authorizedAmount: z.number().int().optional(),
            buyer: z.nullable(z.lazy(() => BuyerSnapshot$.outboundSchema)).optional(),
            capturedAmount: z.number().int().optional(),
            checkoutSessionId: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currency: z.string().optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            giftCardRedemptions: z.array(GiftCardRedemption$.outboundSchema).optional(),
            instrumentType: z.nullable(InstrumentType$.outboundSchema).optional(),
            intent: Intent$.outboundSchema.optional(),
            merchantAccountId: z.string().optional(),
            method: z.nullable(TransactionSummaryMethod$.outboundSchema).optional(),
            paymentMethod: z
                .nullable(z.lazy(() => PaymentMethodSnapshot$.outboundSchema))
                .optional(),
            paymentService: z.nullable(z.lazy(() => APaymentService$.outboundSchema)).optional(),
            pendingReview: z.boolean().optional(),
            rawResponseCode: z.nullable(z.string()).optional(),
            rawResponseDescription: z.nullable(z.string()).optional(),
            reconciliationId: z.string().optional(),
            refundedAmount: z.number().int().optional(),
            status: TransactionSummaryStatus$.outboundSchema.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                authorizedAmount: "authorized_amount",
                capturedAmount: "captured_amount",
                checkoutSessionId: "checkout_session_id",
                createdAt: "created_at",
                externalIdentifier: "external_identifier",
                giftCardRedemptions: "gift_card_redemptions",
                instrumentType: "instrument_type",
                merchantAccountId: "merchant_account_id",
                paymentMethod: "payment_method",
                paymentService: "payment_service",
                pendingReview: "pending_review",
                rawResponseCode: "raw_response_code",
                rawResponseDescription: "raw_response_description",
                reconciliationId: "reconciliation_id",
                refundedAmount: "refunded_amount",
                updatedAt: "updated_at",
            });
        });
}
