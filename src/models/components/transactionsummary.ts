/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardType,
  CardType$inboundSchema,
  CardType$outboundSchema,
} from "./cardtype.js";
import {
  GiftCardRedemption,
  GiftCardRedemption$inboundSchema,
  GiftCardRedemption$Outbound,
  GiftCardRedemption$outboundSchema,
} from "./giftcardredemption.js";

/**
 * Always `transaction`.
 */
export const TransactionSummaryType = {
  Transaction: "transaction",
} as const;
/**
 * Always `transaction`.
 */
export type TransactionSummaryType = ClosedEnum<typeof TransactionSummaryType>;

/**
 * The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.
 */
export const TransactionSummaryTransactionStatus = {
  Processing: "processing",
  AuthorizationSucceeded: "authorization_succeeded",
  AuthorizationDeclined: "authorization_declined",
  AuthorizationFailed: "authorization_failed",
  AuthorizationVoided: "authorization_voided",
  AuthorizationVoidPending: "authorization_void_pending",
  CaptureSucceeded: "capture_succeeded",
  CapturePending: "capture_pending",
  BuyerApprovalPending: "buyer_approval_pending",
} as const;
/**
 * The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.
 */
export type TransactionSummaryTransactionStatus = ClosedEnum<
  typeof TransactionSummaryTransactionStatus
>;

/**
 * The original `intent` used when the transaction was created.
 */
export const TransactionIntent = {
  Authorize: "authorize",
  Capture: "capture",
} as const;
/**
 * The original `intent` used when the transaction was created.
 */
export type TransactionIntent = ClosedEnum<typeof TransactionIntent>;

/**
 * Always `payment-method`.
 */
export const TransactionSummaryPaymentMethodType = {
  PaymentMethod: "payment-method",
} as const;
/**
 * Always `payment-method`.
 */
export type TransactionSummaryPaymentMethodType = ClosedEnum<
  typeof TransactionSummaryPaymentMethodType
>;

/**
 * Details for credit or debit card payment method.
 */
export type TransactionSummaryDetails = {
  bin?: string | undefined;
  /**
   * An enumeration.
   */
  cardType?: CardType | undefined;
  cardIssuerName?: string | undefined;
};

/**
 * The type of this payment method.
 */
export const TransactionSummaryPaymentMethodMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The type of this payment method.
 */
export type TransactionSummaryPaymentMethodMethod = ClosedEnum<
  typeof TransactionSummaryPaymentMethodMethod
>;

/**
 * The mode to use with this payment method.
 */
export const TransactionSummaryMode = {
  Card: "card",
  Redirect: "redirect",
  Applepay: "applepay",
  Googlepay: "googlepay",
  CheckoutSession: "checkout-session",
  ClickToPay: "click-to-pay",
  GiftCard: "gift-card",
} as const;
/**
 * The mode to use with this payment method.
 */
export type TransactionSummaryMode = ClosedEnum<typeof TransactionSummaryMode>;

/**
 * The scheme of the card. Only applies to card payments.
 */
export const TransactionSummaryCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme of the card. Only applies to card payments.
 */
export type TransactionSummaryCardScheme = ClosedEnum<
  typeof TransactionSummaryCardScheme
>;

/**
 * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
 */
export const ApprovalTarget = {
  NewWindow: "new_window",
  Any: "any",
} as const;
/**
 * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
 */
export type ApprovalTarget = ClosedEnum<typeof ApprovalTarget>;

/**
 * The payment method used for this transaction.
 */
export type TransactionSummaryPaymentMethod = {
  /**
   * Always `payment-method`.
   */
  type?: TransactionSummaryPaymentMethodType | undefined;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize their payment.
   */
  approvalUrl?: string | undefined;
  /**
   * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
   */
  country?: string | undefined;
  /**
   * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
   */
  currency?: string | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: TransactionSummaryDetails | undefined;
  /**
   * The expiration date for the payment method.
   */
  expirationDate?: string | undefined;
  /**
   * The unique hash derived from the payment method identifier (e.g. card number).
   */
  fingerprint?: string | undefined;
  /**
   * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
   */
  label?: string | undefined;
  /**
   * The date and time when this card was last replaced by the account updater.
   */
  lastReplacedAt?: Date | undefined;
  /**
   * The type of this payment method.
   */
  method: TransactionSummaryPaymentMethodMethod;
  /**
   * The mode to use with this payment method.
   */
  mode?: TransactionSummaryMode | undefined;
  /**
   * The scheme of the card. Only applies to card payments.
   */
  scheme?: TransactionSummaryCardScheme | undefined;
  /**
   * The ID of the payment method.
   */
  id?: string | undefined;
  /**
   * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
   */
  approvalTarget?: ApprovalTarget | undefined;
  /**
   * An external identifier that can be used to match the payment method against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
   */
  paymentAccountReference?: string | undefined;
};

/**
 * The method used for the transaction.
 */
export const TransactionSummaryMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The method used for the transaction.
 */
export type TransactionSummaryMethod = ClosedEnum<
  typeof TransactionSummaryMethod
>;

/**
 * The name of the instrument used to process the transaction.
 */
export const InstrumentType = {
  Pan: "pan",
  CardToken: "card_token",
  Redirect: "redirect",
  RedirectToken: "redirect_token",
  Googlepay: "googlepay",
  Applepay: "applepay",
  NetworkToken: "network_token",
} as const;
/**
 * The name of the instrument used to process the transaction.
 */
export type InstrumentType = ClosedEnum<typeof InstrumentType>;

/**
 * Always `payment-service`.
 */
export const TransactionSummaryPaymentServiceType = {
  PaymentService: "payment-service",
} as const;
/**
 * Always `payment-service`.
 */
export type TransactionSummaryPaymentServiceType = ClosedEnum<
  typeof TransactionSummaryPaymentServiceType
>;

/**
 * The payment method that this service handles.
 */
export const TransactionSummaryPaymentServiceMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The payment method that this service handles.
 */
export type TransactionSummaryPaymentServiceMethod = ClosedEnum<
  typeof TransactionSummaryPaymentServiceMethod
>;

/**
 * The payment service used for this transaction.
 */
export type PaymentService = {
  /**
   * Always `payment-service`.
   */
  type?: TransactionSummaryPaymentServiceType | undefined;
  /**
   * The ID for the payment-service.
   */
  id: string;
  /**
   * The definition ID of the service used to process this payment.
   */
  paymentServiceDefinitionId: string;
  /**
   * The payment method that this service handles.
   */
  method: TransactionSummaryPaymentServiceMethod;
  /**
   * The display name for the payment service.
   */
  displayName: string;
};

/**
 * Always `buyer`.
 */
export const TransactionSummaryBuyerType = {
  Buyer: "buyer",
} as const;
/**
 * Always `buyer`.
 */
export type TransactionSummaryBuyerType = ClosedEnum<
  typeof TransactionSummaryBuyerType
>;

/**
 * The billing address for the buyer.
 */
export type TransactionSummaryBuyerAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The kind of tax ID
 */
export const TransactionSummaryTaxIdKind = {
  AeTrn: "ae.trn",
  AuAbn: "au.abn",
  ArDni: "ar.dni",
  ArCuil: "ar.cuil",
  ArCuit: "ar.cuit",
  BrCnpj: "br.cnpj",
  BrCpf: "br.cpf",
  CaBn: "ca.bn",
  CaGstHst: "ca.gst_hst",
  CaPstBc: "ca.pst_bc",
  CaPstMb: "ca.pst_mb",
  CaPstSk: "ca.pst_sk",
  CaQst: "ca.qst",
  ChVat: "ch.vat",
  ClTin: "cl.tin",
  CoItin: "co.itin",
  CoNit: "co.nit",
  EsCif: "es.cif",
  EuVat: "eu.vat",
  GbVat: "gb.vat",
  HkBr: "hk.br",
  IdNik: "id.nik",
  IdNpwp: "id.npwp",
  InGst: "in.gst",
  JpCn: "jp.cn",
  JpRn: "jp.rn",
  KrBrn: "kr.brn",
  LiUid: "li.uid",
  MxCurp: "mx.curp",
  MxRfc: "mx.rfc",
  MyFrp: "my.frp",
  MyItn: "my.itn",
  MyNric: "my.nric",
  MySst: "my.sst",
  NoVat: "no.vat",
  NzGst: "nz.gst",
  PhTin: "ph.tin",
  RuInn: "ru.inn",
  RuKpp: "ru.kpp",
  SaVat: "sa.vat",
  SgGst: "sg.gst",
  SgUen: "sg.uen",
  ThId: "th.id",
  ThVat: "th.vat",
  TwVat: "tw.vat",
  UsEin: "us.ein",
  ZaVat: "za.vat",
  BoCi: "bo.ci",
} as const;
/**
 * The kind of tax ID
 */
export type TransactionSummaryTaxIdKind = ClosedEnum<
  typeof TransactionSummaryTaxIdKind
>;

/**
 * The tax ID information associated with the billing details.
 */
export type TransactionSummaryTaxId = {
  /**
   * The tax ID for the buyer.
   */
  value: string;
  /**
   * The kind of tax ID
   */
  kind: TransactionSummaryTaxIdKind;
};

/**
 * The billing name, address, email, and other fields for this buyer.
 */
export type TransactionSummaryBillingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: TransactionSummaryBuyerAddress | undefined;
  /**
   * The tax ID information associated with the billing details.
   */
  taxId?: TransactionSummaryTaxId | undefined;
};

/**
 * The buyer used for this transaction.
 */
export type TransactionSummaryBuyer = {
  /**
   * Always `buyer`.
   */
  type?: TransactionSummaryBuyerType | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | undefined;
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * The billing name, address, email, and other fields for this buyer.
   */
  billingDetails?: TransactionSummaryBillingDetails | undefined;
  /**
   * The buyer account number.
   */
  accountNumber?: string | undefined;
};

/**
 * The billing address for the buyer.
 */
export type TransactionSummaryAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * Always `shipping-details`.
 */
export const TransactionSummaryShippingDetailsType = {
  ShippingDetails: "shipping-details",
} as const;
/**
 * Always `shipping-details`.
 */
export type TransactionSummaryShippingDetailsType = ClosedEnum<
  typeof TransactionSummaryShippingDetailsType
>;

/**
 * The shipping details associated with the transaction.
 */
export type TransactionSummaryShippingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: TransactionSummaryAddress | undefined;
  /**
   * The ID for the shipping details.
   */
  id?: string | undefined;
  /**
   * The ID for the buyer.
   */
  buyerId?: string | undefined;
  /**
   * Always `shipping-details`.
   */
  type?: TransactionSummaryShippingDetailsType | undefined;
};

/**
 * Always `gift-card-service`.
 */
export const TransactionSummaryGiftCardServiceType = {
  GiftCardService: "gift-card-service",
} as const;
/**
 * Always `gift-card-service`.
 */
export type TransactionSummaryGiftCardServiceType = ClosedEnum<
  typeof TransactionSummaryGiftCardServiceType
>;

/**
 * The ID of the definition for this service.
 */
export const TransactionSummaryGiftCardServiceProvider = {
  MockGiftCard: "mock-gift-card",
  QwikcilverGiftCard: "qwikcilver-gift-card",
} as const;
/**
 * The ID of the definition for this service.
 */
export type TransactionSummaryGiftCardServiceProvider = ClosedEnum<
  typeof TransactionSummaryGiftCardServiceProvider
>;

/**
 * The gift card service used for this transaction.
 */
export type TransactionSummaryGiftCardService = {
  /**
   * Always `gift-card-service`.
   */
  type?: TransactionSummaryGiftCardServiceType | undefined;
  /**
   * The ID for the gift card service.
   */
  id: string;
  /**
   * The ID of the definition for this service.
   */
  giftCardServiceDefinitionId: TransactionSummaryGiftCardServiceProvider;
  /**
   * The display name for the gift card service.
   */
  displayName: string;
};

/**
 * A transaction, summarised
 */
export type TransactionSummary = {
  /**
   * Always `transaction`.
   */
  type?: TransactionSummaryType | undefined;
  /**
   * The ID for the transaction.
   */
  id: string;
  /**
   * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
   */
  reconciliationId: string;
  /**
   * The ID of the merchant account this transaction belongs to.
   */
  merchantAccountId: string;
  /**
   * The currency code for this transaction.
   */
  currency: string;
  /**
   * The total amount for this transaction across all funding sources including gift cards.
   */
  amount: number;
  /**
   * The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.
   */
  status: TransactionSummaryTransactionStatus;
  /**
   * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
   */
  authorizedAmount: number;
  /**
   * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
   */
  capturedAmount: number;
  /**
   * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
   */
  refundedAmount: number;
  /**
   * The currency of this transaction's settlement in ISO 4217 three-letter code format.
   */
  settledCurrency?: string | undefined;
  /**
   * The net amount settled for this transaction.
   */
  settledAmount: number;
  /**
   * Indicates whether this transaction has been settled.
   */
  settled: boolean;
  /**
   * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
   */
  country?: string | undefined;
  /**
   * An external identifier that can be used to match the transaction against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The original `intent` used when the transaction was created.
   */
  intent: TransactionIntent;
  /**
   * The payment method used for this transaction.
   */
  paymentMethod?: TransactionSummaryPaymentMethod | undefined;
  /**
   * The method used for the transaction.
   */
  method?: TransactionSummaryMethod | undefined;
  /**
   * The name of the instrument used to process the transaction.
   */
  instrumentType?: InstrumentType | undefined;
  /**
   * The standardized error code set by Gr4vy.
   */
  errorCode?: string | undefined;
  /**
   * The payment service used for this transaction.
   */
  paymentService?: PaymentService | undefined;
  /**
   * Whether a manual anti fraud review is pending with an anti fraud service.
   */
  pendingReview?: boolean | undefined;
  /**
   * The buyer used for this transaction.
   */
  buyer?: TransactionSummaryBuyer | undefined;
  /**
   * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseCode?: string | undefined;
  /**
   *  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseDescription?: string | undefined;
  /**
   * The shipping details associated with the transaction.
   */
  shippingDetails?: TransactionSummaryShippingDetails | undefined;
  /**
   * The identifier for the checkout session this transaction is associated with.
   */
  checkoutSessionId?: string | undefined;
  /**
   * The gift cards redeemed for this transaction.
   */
  giftCardRedemptions: Array<GiftCardRedemption>;
  /**
   * The gift card service used for this transaction.
   */
  giftCardService?: TransactionSummaryGiftCardService | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
};

/** @internal */
export const TransactionSummaryType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryType
> = z.nativeEnum(TransactionSummaryType);

/** @internal */
export const TransactionSummaryType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryType
> = TransactionSummaryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryType$ {
  /** @deprecated use `TransactionSummaryType$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryType$inboundSchema;
  /** @deprecated use `TransactionSummaryType$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryType$outboundSchema;
}

/** @internal */
export const TransactionSummaryTransactionStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryTransactionStatus
> = z.nativeEnum(TransactionSummaryTransactionStatus);

/** @internal */
export const TransactionSummaryTransactionStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryTransactionStatus> =
    TransactionSummaryTransactionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryTransactionStatus$ {
  /** @deprecated use `TransactionSummaryTransactionStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryTransactionStatus$inboundSchema;
  /** @deprecated use `TransactionSummaryTransactionStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryTransactionStatus$outboundSchema;
}

/** @internal */
export const TransactionIntent$inboundSchema: z.ZodNativeEnum<
  typeof TransactionIntent
> = z.nativeEnum(TransactionIntent);

/** @internal */
export const TransactionIntent$outboundSchema: z.ZodNativeEnum<
  typeof TransactionIntent
> = TransactionIntent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionIntent$ {
  /** @deprecated use `TransactionIntent$inboundSchema` instead. */
  export const inboundSchema = TransactionIntent$inboundSchema;
  /** @deprecated use `TransactionIntent$outboundSchema` instead. */
  export const outboundSchema = TransactionIntent$outboundSchema;
}

/** @internal */
export const TransactionSummaryPaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryPaymentMethodType
> = z.nativeEnum(TransactionSummaryPaymentMethodType);

/** @internal */
export const TransactionSummaryPaymentMethodType$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentMethodType> =
    TransactionSummaryPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryPaymentMethodType$ {
  /** @deprecated use `TransactionSummaryPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryPaymentMethodType$inboundSchema;
  /** @deprecated use `TransactionSummaryPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryPaymentMethodType$outboundSchema;
}

/** @internal */
export const TransactionSummaryDetails$inboundSchema: z.ZodType<
  TransactionSummaryDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.string().optional(),
  card_type: CardType$inboundSchema.optional(),
  card_issuer_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "card_type": "cardType",
    "card_issuer_name": "cardIssuerName",
  });
});

/** @internal */
export type TransactionSummaryDetails$Outbound = {
  bin?: string | undefined;
  card_type?: string | undefined;
  card_issuer_name?: string | undefined;
};

/** @internal */
export const TransactionSummaryDetails$outboundSchema: z.ZodType<
  TransactionSummaryDetails$Outbound,
  z.ZodTypeDef,
  TransactionSummaryDetails
> = z.object({
  bin: z.string().optional(),
  cardType: CardType$outboundSchema.optional(),
  cardIssuerName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cardType: "card_type",
    cardIssuerName: "card_issuer_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryDetails$ {
  /** @deprecated use `TransactionSummaryDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryDetails$inboundSchema;
  /** @deprecated use `TransactionSummaryDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryDetails$outboundSchema;
  /** @deprecated use `TransactionSummaryDetails$Outbound` instead. */
  export type Outbound = TransactionSummaryDetails$Outbound;
}

export function transactionSummaryDetailsToJSON(
  transactionSummaryDetails: TransactionSummaryDetails,
): string {
  return JSON.stringify(
    TransactionSummaryDetails$outboundSchema.parse(transactionSummaryDetails),
  );
}

export function transactionSummaryDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryDetails' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryPaymentMethodMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentMethodMethod> = z.nativeEnum(
    TransactionSummaryPaymentMethodMethod,
  );

/** @internal */
export const TransactionSummaryPaymentMethodMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentMethodMethod> =
    TransactionSummaryPaymentMethodMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryPaymentMethodMethod$ {
  /** @deprecated use `TransactionSummaryPaymentMethodMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryPaymentMethodMethod$inboundSchema;
  /** @deprecated use `TransactionSummaryPaymentMethodMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryPaymentMethodMethod$outboundSchema;
}

/** @internal */
export const TransactionSummaryMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryMode
> = z.nativeEnum(TransactionSummaryMode);

/** @internal */
export const TransactionSummaryMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryMode
> = TransactionSummaryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryMode$ {
  /** @deprecated use `TransactionSummaryMode$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryMode$inboundSchema;
  /** @deprecated use `TransactionSummaryMode$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryMode$outboundSchema;
}

/** @internal */
export const TransactionSummaryCardScheme$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryCardScheme
> = z.nativeEnum(TransactionSummaryCardScheme);

/** @internal */
export const TransactionSummaryCardScheme$outboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryCardScheme
> = TransactionSummaryCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryCardScheme$ {
  /** @deprecated use `TransactionSummaryCardScheme$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryCardScheme$inboundSchema;
  /** @deprecated use `TransactionSummaryCardScheme$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryCardScheme$outboundSchema;
}

/** @internal */
export const ApprovalTarget$inboundSchema: z.ZodNativeEnum<
  typeof ApprovalTarget
> = z.nativeEnum(ApprovalTarget);

/** @internal */
export const ApprovalTarget$outboundSchema: z.ZodNativeEnum<
  typeof ApprovalTarget
> = ApprovalTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalTarget$ {
  /** @deprecated use `ApprovalTarget$inboundSchema` instead. */
  export const inboundSchema = ApprovalTarget$inboundSchema;
  /** @deprecated use `ApprovalTarget$outboundSchema` instead. */
  export const outboundSchema = ApprovalTarget$outboundSchema;
}

/** @internal */
export const TransactionSummaryPaymentMethod$inboundSchema: z.ZodType<
  TransactionSummaryPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionSummaryPaymentMethodType$inboundSchema.default(
    "payment-method",
  ),
  approval_url: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => TransactionSummaryDetails$inboundSchema).optional(),
  expiration_date: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  last_replaced_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  method: TransactionSummaryPaymentMethodMethod$inboundSchema,
  mode: TransactionSummaryMode$inboundSchema.optional(),
  scheme: TransactionSummaryCardScheme$inboundSchema.optional(),
  id: z.string().optional(),
  approval_target: ApprovalTarget$inboundSchema.optional(),
  external_identifier: z.string().optional(),
  payment_account_reference: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "approval_url": "approvalUrl",
    "expiration_date": "expirationDate",
    "last_replaced_at": "lastReplacedAt",
    "approval_target": "approvalTarget",
    "external_identifier": "externalIdentifier",
    "payment_account_reference": "paymentAccountReference",
  });
});

/** @internal */
export type TransactionSummaryPaymentMethod$Outbound = {
  type: string;
  approval_url?: string | undefined;
  country?: string | undefined;
  currency?: string | undefined;
  details?: TransactionSummaryDetails$Outbound | undefined;
  expiration_date?: string | undefined;
  fingerprint?: string | undefined;
  label?: string | undefined;
  last_replaced_at?: string | undefined;
  method: string;
  mode?: string | undefined;
  scheme?: string | undefined;
  id?: string | undefined;
  approval_target?: string | undefined;
  external_identifier?: string | undefined;
  payment_account_reference?: string | undefined;
};

/** @internal */
export const TransactionSummaryPaymentMethod$outboundSchema: z.ZodType<
  TransactionSummaryPaymentMethod$Outbound,
  z.ZodTypeDef,
  TransactionSummaryPaymentMethod
> = z.object({
  type: TransactionSummaryPaymentMethodType$outboundSchema.default(
    "payment-method",
  ),
  approvalUrl: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => TransactionSummaryDetails$outboundSchema).optional(),
  expirationDate: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  lastReplacedAt: z.date().transform(v => v.toISOString()).optional(),
  method: TransactionSummaryPaymentMethodMethod$outboundSchema,
  mode: TransactionSummaryMode$outboundSchema.optional(),
  scheme: TransactionSummaryCardScheme$outboundSchema.optional(),
  id: z.string().optional(),
  approvalTarget: ApprovalTarget$outboundSchema.optional(),
  externalIdentifier: z.string().optional(),
  paymentAccountReference: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    approvalUrl: "approval_url",
    expirationDate: "expiration_date",
    lastReplacedAt: "last_replaced_at",
    approvalTarget: "approval_target",
    externalIdentifier: "external_identifier",
    paymentAccountReference: "payment_account_reference",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryPaymentMethod$ {
  /** @deprecated use `TransactionSummaryPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionSummaryPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryPaymentMethod$outboundSchema;
  /** @deprecated use `TransactionSummaryPaymentMethod$Outbound` instead. */
  export type Outbound = TransactionSummaryPaymentMethod$Outbound;
}

export function transactionSummaryPaymentMethodToJSON(
  transactionSummaryPaymentMethod: TransactionSummaryPaymentMethod,
): string {
  return JSON.stringify(
    TransactionSummaryPaymentMethod$outboundSchema.parse(
      transactionSummaryPaymentMethod,
    ),
  );
}

export function transactionSummaryPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryPaymentMethod' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryMethod
> = z.nativeEnum(TransactionSummaryMethod);

/** @internal */
export const TransactionSummaryMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryMethod
> = TransactionSummaryMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryMethod$ {
  /** @deprecated use `TransactionSummaryMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryMethod$inboundSchema;
  /** @deprecated use `TransactionSummaryMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryMethod$outboundSchema;
}

/** @internal */
export const InstrumentType$inboundSchema: z.ZodNativeEnum<
  typeof InstrumentType
> = z.nativeEnum(InstrumentType);

/** @internal */
export const InstrumentType$outboundSchema: z.ZodNativeEnum<
  typeof InstrumentType
> = InstrumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstrumentType$ {
  /** @deprecated use `InstrumentType$inboundSchema` instead. */
  export const inboundSchema = InstrumentType$inboundSchema;
  /** @deprecated use `InstrumentType$outboundSchema` instead. */
  export const outboundSchema = InstrumentType$outboundSchema;
}

/** @internal */
export const TransactionSummaryPaymentServiceType$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentServiceType> = z.nativeEnum(
    TransactionSummaryPaymentServiceType,
  );

/** @internal */
export const TransactionSummaryPaymentServiceType$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentServiceType> =
    TransactionSummaryPaymentServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryPaymentServiceType$ {
  /** @deprecated use `TransactionSummaryPaymentServiceType$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryPaymentServiceType$inboundSchema;
  /** @deprecated use `TransactionSummaryPaymentServiceType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryPaymentServiceType$outboundSchema;
}

/** @internal */
export const TransactionSummaryPaymentServiceMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentServiceMethod> = z.nativeEnum(
    TransactionSummaryPaymentServiceMethod,
  );

/** @internal */
export const TransactionSummaryPaymentServiceMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryPaymentServiceMethod> =
    TransactionSummaryPaymentServiceMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryPaymentServiceMethod$ {
  /** @deprecated use `TransactionSummaryPaymentServiceMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryPaymentServiceMethod$inboundSchema;
  /** @deprecated use `TransactionSummaryPaymentServiceMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryPaymentServiceMethod$outboundSchema;
}

/** @internal */
export const PaymentService$inboundSchema: z.ZodType<
  PaymentService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionSummaryPaymentServiceType$inboundSchema.default(
    "payment-service",
  ),
  id: z.string(),
  payment_service_definition_id: z.string(),
  method: TransactionSummaryPaymentServiceMethod$inboundSchema,
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_service_definition_id": "paymentServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type PaymentService$Outbound = {
  type: string;
  id: string;
  payment_service_definition_id: string;
  method: string;
  display_name: string;
};

/** @internal */
export const PaymentService$outboundSchema: z.ZodType<
  PaymentService$Outbound,
  z.ZodTypeDef,
  PaymentService
> = z.object({
  type: TransactionSummaryPaymentServiceType$outboundSchema.default(
    "payment-service",
  ),
  id: z.string(),
  paymentServiceDefinitionId: z.string(),
  method: TransactionSummaryPaymentServiceMethod$outboundSchema,
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentServiceDefinitionId: "payment_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentService$ {
  /** @deprecated use `PaymentService$inboundSchema` instead. */
  export const inboundSchema = PaymentService$inboundSchema;
  /** @deprecated use `PaymentService$outboundSchema` instead. */
  export const outboundSchema = PaymentService$outboundSchema;
  /** @deprecated use `PaymentService$Outbound` instead. */
  export type Outbound = PaymentService$Outbound;
}

export function paymentServiceToJSON(paymentService: PaymentService): string {
  return JSON.stringify(PaymentService$outboundSchema.parse(paymentService));
}

export function paymentServiceFromJSON(
  jsonString: string,
): SafeParseResult<PaymentService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentService' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryBuyerType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryBuyerType
> = z.nativeEnum(TransactionSummaryBuyerType);

/** @internal */
export const TransactionSummaryBuyerType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryBuyerType
> = TransactionSummaryBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryBuyerType$ {
  /** @deprecated use `TransactionSummaryBuyerType$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryBuyerType$inboundSchema;
  /** @deprecated use `TransactionSummaryBuyerType$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryBuyerType$outboundSchema;
}

/** @internal */
export const TransactionSummaryBuyerAddress$inboundSchema: z.ZodType<
  TransactionSummaryBuyerAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type TransactionSummaryBuyerAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const TransactionSummaryBuyerAddress$outboundSchema: z.ZodType<
  TransactionSummaryBuyerAddress$Outbound,
  z.ZodTypeDef,
  TransactionSummaryBuyerAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryBuyerAddress$ {
  /** @deprecated use `TransactionSummaryBuyerAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryBuyerAddress$inboundSchema;
  /** @deprecated use `TransactionSummaryBuyerAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryBuyerAddress$outboundSchema;
  /** @deprecated use `TransactionSummaryBuyerAddress$Outbound` instead. */
  export type Outbound = TransactionSummaryBuyerAddress$Outbound;
}

export function transactionSummaryBuyerAddressToJSON(
  transactionSummaryBuyerAddress: TransactionSummaryBuyerAddress,
): string {
  return JSON.stringify(
    TransactionSummaryBuyerAddress$outboundSchema.parse(
      transactionSummaryBuyerAddress,
    ),
  );
}

export function transactionSummaryBuyerAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryBuyerAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryBuyerAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryBuyerAddress' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryTaxIdKind$inboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryTaxIdKind
> = z.nativeEnum(TransactionSummaryTaxIdKind);

/** @internal */
export const TransactionSummaryTaxIdKind$outboundSchema: z.ZodNativeEnum<
  typeof TransactionSummaryTaxIdKind
> = TransactionSummaryTaxIdKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryTaxIdKind$ {
  /** @deprecated use `TransactionSummaryTaxIdKind$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryTaxIdKind$inboundSchema;
  /** @deprecated use `TransactionSummaryTaxIdKind$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryTaxIdKind$outboundSchema;
}

/** @internal */
export const TransactionSummaryTaxId$inboundSchema: z.ZodType<
  TransactionSummaryTaxId,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  kind: TransactionSummaryTaxIdKind$inboundSchema,
});

/** @internal */
export type TransactionSummaryTaxId$Outbound = {
  value: string;
  kind: string;
};

/** @internal */
export const TransactionSummaryTaxId$outboundSchema: z.ZodType<
  TransactionSummaryTaxId$Outbound,
  z.ZodTypeDef,
  TransactionSummaryTaxId
> = z.object({
  value: z.string(),
  kind: TransactionSummaryTaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryTaxId$ {
  /** @deprecated use `TransactionSummaryTaxId$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryTaxId$inboundSchema;
  /** @deprecated use `TransactionSummaryTaxId$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryTaxId$outboundSchema;
  /** @deprecated use `TransactionSummaryTaxId$Outbound` instead. */
  export type Outbound = TransactionSummaryTaxId$Outbound;
}

export function transactionSummaryTaxIdToJSON(
  transactionSummaryTaxId: TransactionSummaryTaxId,
): string {
  return JSON.stringify(
    TransactionSummaryTaxId$outboundSchema.parse(transactionSummaryTaxId),
  );
}

export function transactionSummaryTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryTaxId' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryBillingDetails$inboundSchema: z.ZodType<
  TransactionSummaryBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => TransactionSummaryBuyerAddress$inboundSchema)
    .optional(),
  tax_id: z.lazy(() => TransactionSummaryTaxId$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "tax_id": "taxId",
  });
});

/** @internal */
export type TransactionSummaryBillingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: TransactionSummaryBuyerAddress$Outbound | undefined;
  tax_id?: TransactionSummaryTaxId$Outbound | undefined;
};

/** @internal */
export const TransactionSummaryBillingDetails$outboundSchema: z.ZodType<
  TransactionSummaryBillingDetails$Outbound,
  z.ZodTypeDef,
  TransactionSummaryBillingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => TransactionSummaryBuyerAddress$outboundSchema)
    .optional(),
  taxId: z.lazy(() => TransactionSummaryTaxId$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryBillingDetails$ {
  /** @deprecated use `TransactionSummaryBillingDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryBillingDetails$inboundSchema;
  /** @deprecated use `TransactionSummaryBillingDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryBillingDetails$outboundSchema;
  /** @deprecated use `TransactionSummaryBillingDetails$Outbound` instead. */
  export type Outbound = TransactionSummaryBillingDetails$Outbound;
}

export function transactionSummaryBillingDetailsToJSON(
  transactionSummaryBillingDetails: TransactionSummaryBillingDetails,
): string {
  return JSON.stringify(
    TransactionSummaryBillingDetails$outboundSchema.parse(
      transactionSummaryBillingDetails,
    ),
  );
}

export function transactionSummaryBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryBillingDetails' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryBuyer$inboundSchema: z.ZodType<
  TransactionSummaryBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionSummaryBuyerType$inboundSchema.default("buyer"),
  id: z.string().optional(),
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: z.lazy(() => TransactionSummaryBillingDetails$inboundSchema)
    .optional(),
  account_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
    "account_number": "accountNumber",
  });
});

/** @internal */
export type TransactionSummaryBuyer$Outbound = {
  type: string;
  id?: string | undefined;
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: TransactionSummaryBillingDetails$Outbound | undefined;
  account_number?: string | undefined;
};

/** @internal */
export const TransactionSummaryBuyer$outboundSchema: z.ZodType<
  TransactionSummaryBuyer$Outbound,
  z.ZodTypeDef,
  TransactionSummaryBuyer
> = z.object({
  type: TransactionSummaryBuyerType$outboundSchema.default("buyer"),
  id: z.string().optional(),
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: z.lazy(() => TransactionSummaryBillingDetails$outboundSchema)
    .optional(),
  accountNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    accountNumber: "account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryBuyer$ {
  /** @deprecated use `TransactionSummaryBuyer$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryBuyer$inboundSchema;
  /** @deprecated use `TransactionSummaryBuyer$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryBuyer$outboundSchema;
  /** @deprecated use `TransactionSummaryBuyer$Outbound` instead. */
  export type Outbound = TransactionSummaryBuyer$Outbound;
}

export function transactionSummaryBuyerToJSON(
  transactionSummaryBuyer: TransactionSummaryBuyer,
): string {
  return JSON.stringify(
    TransactionSummaryBuyer$outboundSchema.parse(transactionSummaryBuyer),
  );
}

export function transactionSummaryBuyerFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryBuyer' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryAddress$inboundSchema: z.ZodType<
  TransactionSummaryAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type TransactionSummaryAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const TransactionSummaryAddress$outboundSchema: z.ZodType<
  TransactionSummaryAddress$Outbound,
  z.ZodTypeDef,
  TransactionSummaryAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryAddress$ {
  /** @deprecated use `TransactionSummaryAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryAddress$inboundSchema;
  /** @deprecated use `TransactionSummaryAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionSummaryAddress$outboundSchema;
  /** @deprecated use `TransactionSummaryAddress$Outbound` instead. */
  export type Outbound = TransactionSummaryAddress$Outbound;
}

export function transactionSummaryAddressToJSON(
  transactionSummaryAddress: TransactionSummaryAddress,
): string {
  return JSON.stringify(
    TransactionSummaryAddress$outboundSchema.parse(transactionSummaryAddress),
  );
}

export function transactionSummaryAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryAddress' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryShippingDetailsType$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryShippingDetailsType> = z.nativeEnum(
    TransactionSummaryShippingDetailsType,
  );

/** @internal */
export const TransactionSummaryShippingDetailsType$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryShippingDetailsType> =
    TransactionSummaryShippingDetailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryShippingDetailsType$ {
  /** @deprecated use `TransactionSummaryShippingDetailsType$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryShippingDetailsType$inboundSchema;
  /** @deprecated use `TransactionSummaryShippingDetailsType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryShippingDetailsType$outboundSchema;
}

/** @internal */
export const TransactionSummaryShippingDetails$inboundSchema: z.ZodType<
  TransactionSummaryShippingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => TransactionSummaryAddress$inboundSchema).optional(),
  id: z.string().optional(),
  buyer_id: z.string().optional(),
  type: TransactionSummaryShippingDetailsType$inboundSchema.default(
    "shipping-details",
  ),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "buyer_id": "buyerId",
  });
});

/** @internal */
export type TransactionSummaryShippingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: TransactionSummaryAddress$Outbound | undefined;
  id?: string | undefined;
  buyer_id?: string | undefined;
  type: string;
};

/** @internal */
export const TransactionSummaryShippingDetails$outboundSchema: z.ZodType<
  TransactionSummaryShippingDetails$Outbound,
  z.ZodTypeDef,
  TransactionSummaryShippingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => TransactionSummaryAddress$outboundSchema).optional(),
  id: z.string().optional(),
  buyerId: z.string().optional(),
  type: TransactionSummaryShippingDetailsType$outboundSchema.default(
    "shipping-details",
  ),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    buyerId: "buyer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryShippingDetails$ {
  /** @deprecated use `TransactionSummaryShippingDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryShippingDetails$inboundSchema;
  /** @deprecated use `TransactionSummaryShippingDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryShippingDetails$outboundSchema;
  /** @deprecated use `TransactionSummaryShippingDetails$Outbound` instead. */
  export type Outbound = TransactionSummaryShippingDetails$Outbound;
}

export function transactionSummaryShippingDetailsToJSON(
  transactionSummaryShippingDetails: TransactionSummaryShippingDetails,
): string {
  return JSON.stringify(
    TransactionSummaryShippingDetails$outboundSchema.parse(
      transactionSummaryShippingDetails,
    ),
  );
}

export function transactionSummaryShippingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryShippingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryShippingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryShippingDetails' from JSON`,
  );
}

/** @internal */
export const TransactionSummaryGiftCardServiceType$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryGiftCardServiceType> = z.nativeEnum(
    TransactionSummaryGiftCardServiceType,
  );

/** @internal */
export const TransactionSummaryGiftCardServiceType$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryGiftCardServiceType> =
    TransactionSummaryGiftCardServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryGiftCardServiceType$ {
  /** @deprecated use `TransactionSummaryGiftCardServiceType$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryGiftCardServiceType$inboundSchema;
  /** @deprecated use `TransactionSummaryGiftCardServiceType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryGiftCardServiceType$outboundSchema;
}

/** @internal */
export const TransactionSummaryGiftCardServiceProvider$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryGiftCardServiceProvider> = z
    .nativeEnum(TransactionSummaryGiftCardServiceProvider);

/** @internal */
export const TransactionSummaryGiftCardServiceProvider$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryGiftCardServiceProvider> =
    TransactionSummaryGiftCardServiceProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryGiftCardServiceProvider$ {
  /** @deprecated use `TransactionSummaryGiftCardServiceProvider$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryGiftCardServiceProvider$inboundSchema;
  /** @deprecated use `TransactionSummaryGiftCardServiceProvider$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryGiftCardServiceProvider$outboundSchema;
}

/** @internal */
export const TransactionSummaryGiftCardService$inboundSchema: z.ZodType<
  TransactionSummaryGiftCardService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionSummaryGiftCardServiceType$inboundSchema.default(
    "gift-card-service",
  ),
  id: z.string(),
  gift_card_service_definition_id:
    TransactionSummaryGiftCardServiceProvider$inboundSchema,
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "gift_card_service_definition_id": "giftCardServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type TransactionSummaryGiftCardService$Outbound = {
  type: string;
  id: string;
  gift_card_service_definition_id: string;
  display_name: string;
};

/** @internal */
export const TransactionSummaryGiftCardService$outboundSchema: z.ZodType<
  TransactionSummaryGiftCardService$Outbound,
  z.ZodTypeDef,
  TransactionSummaryGiftCardService
> = z.object({
  type: TransactionSummaryGiftCardServiceType$outboundSchema.default(
    "gift-card-service",
  ),
  id: z.string(),
  giftCardServiceDefinitionId:
    TransactionSummaryGiftCardServiceProvider$outboundSchema,
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    giftCardServiceDefinitionId: "gift_card_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryGiftCardService$ {
  /** @deprecated use `TransactionSummaryGiftCardService$inboundSchema` instead. */
  export const inboundSchema = TransactionSummaryGiftCardService$inboundSchema;
  /** @deprecated use `TransactionSummaryGiftCardService$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryGiftCardService$outboundSchema;
  /** @deprecated use `TransactionSummaryGiftCardService$Outbound` instead. */
  export type Outbound = TransactionSummaryGiftCardService$Outbound;
}

export function transactionSummaryGiftCardServiceToJSON(
  transactionSummaryGiftCardService: TransactionSummaryGiftCardService,
): string {
  return JSON.stringify(
    TransactionSummaryGiftCardService$outboundSchema.parse(
      transactionSummaryGiftCardService,
    ),
  );
}

export function transactionSummaryGiftCardServiceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummaryGiftCardService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummaryGiftCardService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummaryGiftCardService' from JSON`,
  );
}

/** @internal */
export const TransactionSummary$inboundSchema: z.ZodType<
  TransactionSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionSummaryType$inboundSchema.default("transaction"),
  id: z.string(),
  reconciliation_id: z.string(),
  merchant_account_id: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionSummaryTransactionStatus$inboundSchema,
  authorized_amount: z.number().int(),
  captured_amount: z.number().int(),
  refunded_amount: z.number().int(),
  settled_currency: z.string().optional(),
  settled_amount: z.number().int(),
  settled: z.boolean(),
  country: z.string().optional(),
  external_identifier: z.string().optional(),
  intent: TransactionIntent$inboundSchema,
  payment_method: z.lazy(() => TransactionSummaryPaymentMethod$inboundSchema)
    .optional(),
  method: TransactionSummaryMethod$inboundSchema.optional(),
  instrument_type: InstrumentType$inboundSchema.optional(),
  error_code: z.string().optional(),
  payment_service: z.lazy(() => PaymentService$inboundSchema).optional(),
  pending_review: z.boolean().default(false),
  buyer: z.lazy(() => TransactionSummaryBuyer$inboundSchema).optional(),
  raw_response_code: z.string().optional(),
  raw_response_description: z.string().optional(),
  shipping_details: z.lazy(() =>
    TransactionSummaryShippingDetails$inboundSchema
  ).optional(),
  checkout_session_id: z.string().optional(),
  gift_card_redemptions: z.array(GiftCardRedemption$inboundSchema),
  gift_card_service: z.lazy(() =>
    TransactionSummaryGiftCardService$inboundSchema
  ).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "reconciliation_id": "reconciliationId",
    "merchant_account_id": "merchantAccountId",
    "authorized_amount": "authorizedAmount",
    "captured_amount": "capturedAmount",
    "refunded_amount": "refundedAmount",
    "settled_currency": "settledCurrency",
    "settled_amount": "settledAmount",
    "external_identifier": "externalIdentifier",
    "payment_method": "paymentMethod",
    "instrument_type": "instrumentType",
    "error_code": "errorCode",
    "payment_service": "paymentService",
    "pending_review": "pendingReview",
    "raw_response_code": "rawResponseCode",
    "raw_response_description": "rawResponseDescription",
    "shipping_details": "shippingDetails",
    "checkout_session_id": "checkoutSessionId",
    "gift_card_redemptions": "giftCardRedemptions",
    "gift_card_service": "giftCardService",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TransactionSummary$Outbound = {
  type: string;
  id: string;
  reconciliation_id: string;
  merchant_account_id: string;
  currency: string;
  amount: number;
  status: string;
  authorized_amount: number;
  captured_amount: number;
  refunded_amount: number;
  settled_currency?: string | undefined;
  settled_amount: number;
  settled: boolean;
  country?: string | undefined;
  external_identifier?: string | undefined;
  intent: string;
  payment_method?: TransactionSummaryPaymentMethod$Outbound | undefined;
  method?: string | undefined;
  instrument_type?: string | undefined;
  error_code?: string | undefined;
  payment_service?: PaymentService$Outbound | undefined;
  pending_review: boolean;
  buyer?: TransactionSummaryBuyer$Outbound | undefined;
  raw_response_code?: string | undefined;
  raw_response_description?: string | undefined;
  shipping_details?: TransactionSummaryShippingDetails$Outbound | undefined;
  checkout_session_id?: string | undefined;
  gift_card_redemptions: Array<GiftCardRedemption$Outbound>;
  gift_card_service?: TransactionSummaryGiftCardService$Outbound | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const TransactionSummary$outboundSchema: z.ZodType<
  TransactionSummary$Outbound,
  z.ZodTypeDef,
  TransactionSummary
> = z.object({
  type: TransactionSummaryType$outboundSchema.default("transaction"),
  id: z.string(),
  reconciliationId: z.string(),
  merchantAccountId: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionSummaryTransactionStatus$outboundSchema,
  authorizedAmount: z.number().int(),
  capturedAmount: z.number().int(),
  refundedAmount: z.number().int(),
  settledCurrency: z.string().optional(),
  settledAmount: z.number().int(),
  settled: z.boolean(),
  country: z.string().optional(),
  externalIdentifier: z.string().optional(),
  intent: TransactionIntent$outboundSchema,
  paymentMethod: z.lazy(() => TransactionSummaryPaymentMethod$outboundSchema)
    .optional(),
  method: TransactionSummaryMethod$outboundSchema.optional(),
  instrumentType: InstrumentType$outboundSchema.optional(),
  errorCode: z.string().optional(),
  paymentService: z.lazy(() => PaymentService$outboundSchema).optional(),
  pendingReview: z.boolean().default(false),
  buyer: z.lazy(() => TransactionSummaryBuyer$outboundSchema).optional(),
  rawResponseCode: z.string().optional(),
  rawResponseDescription: z.string().optional(),
  shippingDetails: z.lazy(() =>
    TransactionSummaryShippingDetails$outboundSchema
  ).optional(),
  checkoutSessionId: z.string().optional(),
  giftCardRedemptions: z.array(GiftCardRedemption$outboundSchema),
  giftCardService: z.lazy(() =>
    TransactionSummaryGiftCardService$outboundSchema
  ).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    reconciliationId: "reconciliation_id",
    merchantAccountId: "merchant_account_id",
    authorizedAmount: "authorized_amount",
    capturedAmount: "captured_amount",
    refundedAmount: "refunded_amount",
    settledCurrency: "settled_currency",
    settledAmount: "settled_amount",
    externalIdentifier: "external_identifier",
    paymentMethod: "payment_method",
    instrumentType: "instrument_type",
    errorCode: "error_code",
    paymentService: "payment_service",
    pendingReview: "pending_review",
    rawResponseCode: "raw_response_code",
    rawResponseDescription: "raw_response_description",
    shippingDetails: "shipping_details",
    checkoutSessionId: "checkout_session_id",
    giftCardRedemptions: "gift_card_redemptions",
    giftCardService: "gift_card_service",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummary$ {
  /** @deprecated use `TransactionSummary$inboundSchema` instead. */
  export const inboundSchema = TransactionSummary$inboundSchema;
  /** @deprecated use `TransactionSummary$outboundSchema` instead. */
  export const outboundSchema = TransactionSummary$outboundSchema;
  /** @deprecated use `TransactionSummary$Outbound` instead. */
  export type Outbound = TransactionSummary$Outbound;
}

export function transactionSummaryToJSON(
  transactionSummary: TransactionSummary,
): string {
  return JSON.stringify(
    TransactionSummary$outboundSchema.parse(transactionSummary),
  );
}

export function transactionSummaryFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummary' from JSON`,
  );
}
