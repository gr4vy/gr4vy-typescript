/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GiftCardRedemption, GiftCardRedemption$ } from "./giftcardredemption";
import { PaymentMethodSnapshot, PaymentMethodSnapshot$ } from "./paymentmethodsnapshot";
import { PaymentServiceSnapshot, PaymentServiceSnapshot$ } from "./paymentservicesnapshot";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction`.
 */
export enum TransactionSummaryType {
    Transaction = "transaction",
}

/**
 * The type of this resource. Is always `buyer`.
 */
export enum TransactionSummaryBuyerType {
    Buyer = "buyer",
}

/**
 * The type of this resource. Is always `billing-details`.
 */
export enum TransactionSummaryBuyerBillingDetailsType {
    BillingDetails = "billing-details",
}

/**
 * The billing address of the buyer.
 */
export type TransactionSummaryAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export enum TransactionSummaryKind {
    AeTrn = "ae.trn",
    AuAbn = "au.abn",
    ArDni = "ar.dni",
    ArCuil = "ar.cuil",
    ArCuit = "ar.cuit",
    BrCnpj = "br.cnpj",
    BrCpf = "br.cpf",
    CaBn = "ca.bn",
    CaGstHst = "ca.gst_hst",
    CaPstBc = "ca.pst_bc",
    CaPstMb = "ca.pst_mb",
    CaPstSk = "ca.pst_sk",
    CaQst = "ca.qst",
    ChVat = "ch.vat",
    ClTin = "cl.tin",
    EsCif = "es.cif",
    EuVat = "eu.vat",
    GbVat = "gb.vat",
    HkBr = "hk.br",
    IdNik = "id.nik",
    IdNpwp = "id.npwp",
    InGst = "in.gst",
    JpCn = "jp.cn",
    JpRn = "jp.rn",
    KrBrn = "kr.brn",
    LiUid = "li.uid",
    MxCurp = "mx.curp",
    MyFrp = "my.frp",
    MyItn = "my.itn",
    MyNric = "my.nric",
    MySst = "my.sst",
    NoVat = "no.vat",
    NzGst = "nz.gst",
    PhTin = "ph.tin",
    RuInn = "ru.inn",
    RuKpp = "ru.kpp",
    SaVat = "sa.vat",
    SgGst = "sg.gst",
    SgUen = "sg.uen",
    ThId = "th.id",
    ThVat = "th.vat",
    TwVat = "tw.vat",
    UsEin = "us.ein",
    ZaVat = "za.vat",
}

/**
 * The tax information associated with the billing details.
 */
export type TransactionSummaryTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: TransactionSummaryKind;
};

/**
 * The billing details associated with the buyer, which include the
 *
 * @remarks
 * address and tax ID.
 */
export type TransactionSummaryBillingDetails = {
    /**
     * The type of this resource. Is always `billing-details`.
     */
    type?: TransactionSummaryBuyerBillingDetailsType | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: TransactionSummaryAddress | null | undefined;
    /**
     * The tax information associated with the billing details.
     */
    taxId?: TransactionSummaryTaxID | null | undefined;
};

/**
 * The buyer used for this transaction.
 */
export type BuyerSnapshot = {
    /**
     * The type of this resource. Is always `buyer`.
     */
    type?: TransactionSummaryBuyerType | undefined;
    /**
     * The unique Gr4vy ID for this buyer.
     */
    id?: string | undefined;
    /**
     * The billing details associated with the buyer, which include the
     *
     * @remarks
     * address and tax ID.
     */
    billingDetails?: TransactionSummaryBillingDetails | null | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * An external identifier that can be used to match the buyer against your own records.
     */
    externalIdentifier?: string | null | undefined;
};

/**
 * The name of the instrument used to process the transaction.
 *
 * @remarks
 *
 */
export enum InstrumentType {
    Applepay = "applepay",
    CardToken = "card_token",
    Googlepay = "googlepay",
    NetworkToken = "network_token",
    Pan = "pan",
    Redirect = "redirect",
    RedirectToken = "redirect_token",
}

/**
 * The original `intent` used when the transaction was
 *
 * @remarks
 * [created](#operation/authorize-new-transaction).
 */
export enum Intent {
    Authorize = "authorize",
    Capture = "capture",
}

export enum TransactionSummaryMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Bancontact = "bancontact",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    CheckoutSession = "checkout-session",
    ClickToPay = "click-to-pay",
    Clearpay = "clearpay",
    Dana = "dana",
    Dcb = "dcb",
    Eps = "eps",
    Fortumo = "fortumo",
    Gcash = "gcash",
    Giropay = "giropay",
    Givingblock = "givingblock",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Id = "id",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linepay = "linepay",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Razorpay = "razorpay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Venmo = "venmo",
    Waave = "waave",
    Wechat = "wechat",
    Zippay = "zippay",
}

/**
 * The status of the transaction. The status may change over time as
 *
 * @remarks
 * asynchronous processing events occur.
 */
export enum TransactionSummaryStatus {
    Processing = "processing",
    BuyerApprovalPending = "buyer_approval_pending",
    AuthorizationSucceeded = "authorization_succeeded",
    AuthorizationFailed = "authorization_failed",
    AuthorizationDeclined = "authorization_declined",
    CapturePending = "capture_pending",
    CaptureSucceeded = "capture_succeeded",
    AuthorizationVoidPending = "authorization_void_pending",
    AuthorizationVoided = "authorization_voided",
}

/**
 * A transaction record.
 */
export type TransactionSummary = {
    /**
     * The type of this resource. Is always `transaction`.
     */
    type?: TransactionSummaryType | undefined;
    /**
     * The unique identifier for this transaction.
     */
    id?: string | undefined;
    /**
     * The authorized amount for this transaction. This can be more than the
     *
     * @remarks
     * actual captured amount and part of this amount may be refunded.
     */
    amount?: number | undefined;
    /**
     * The amount for this transaction that has been authorized for the `payment_method`.
     *
     * @remarks
     * This can be less than the `amount` if gift cards were used.
     */
    authorizedAmount?: number | undefined;
    /**
     * The buyer used for this transaction.
     */
    buyer?: BuyerSnapshot | null | undefined;
    /**
     * The captured amount for this transaction. This can be the full value
     *
     * @remarks
     * of the `authorized_amount` or less.
     */
    capturedAmount?: number | undefined;
    /**
     * The identifier for the checkout session this transaction is associated with.
     */
    checkoutSessionId?: string | undefined;
    /**
     * The 2-letter ISO code of the country of the transaction.
     *
     * @remarks
     * This is used to filter the payment services that is used to process the
     * transaction.
     *
     */
    country?: string | null | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The currency code for this transaction.
     */
    currency?: string | undefined;
    /**
     * An external identifier that can be used to match the transaction against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The gift cards redeemed for this transaction.
     */
    giftCardRedemptions?: Array<GiftCardRedemption> | undefined;
    /**
     * The name of the instrument used to process the transaction.
     *
     * @remarks
     *
     */
    instrumentType?: InstrumentType | null | undefined;
    /**
     * The original `intent` used when the transaction was
     *
     * @remarks
     * [created](#operation/authorize-new-transaction).
     */
    intent?: Intent | undefined;
    /**
     * The ID of the merchant account to which this transaction belongs to.
     */
    merchantAccountId?: string | undefined;
    method?: TransactionSummaryMethod | undefined;
    /**
     * The payment method used for this transaction.
     */
    paymentMethod?: PaymentMethodSnapshot | undefined;
    /**
     * The payment service used for this transaction.
     */
    paymentService?: PaymentServiceSnapshot | undefined;
    /**
     * Whether a manual review is pending.
     */
    pendingReview?: boolean | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The base62 encoded transaction ID. This represents a shorter version
     *
     * @remarks
     * of this transaction's `id` which is sent to payment services, anti-fraud services,
     * and other connectors. You can use this ID to reconcile a payment service's
     * transaction against our system.
     *
     * This ID is sent instead of the transaction ID because not all services
     * support 36 digit identifiers.
     */
    reconciliationId?: string | undefined;
    /**
     * The refunded amount for this transaction. This can be the full value
     *
     * @remarks
     * of the `captured_amount` or less.
     */
    refundedAmount?: number | undefined;
    /**
     * The status of the transaction. The status may change over time as
     *
     * @remarks
     * asynchronous processing events occur.
     */
    status?: TransactionSummaryStatus | undefined;
    /**
     * Defines when the transaction was last updated.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const TransactionSummaryType$ = z.nativeEnum(TransactionSummaryType);

/** @internal */
export const TransactionSummaryBuyerType$ = z.nativeEnum(TransactionSummaryBuyerType);

/** @internal */
export const TransactionSummaryBuyerBillingDetailsType$ = z.nativeEnum(
    TransactionSummaryBuyerBillingDetailsType
);

/** @internal */
export namespace TransactionSummaryAddress$ {
    export type Inbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionSummaryAddress, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postal_code: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postal_code === undefined ? null : { postalCode: v.postal_code }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.state_code === undefined ? null : { stateCode: v.state_code }),
                ...(v.house_number_or_name === undefined
                    ? null
                    : { houseNumberOrName: v.house_number_or_name }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSummaryAddress> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postalCode: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postalCode === undefined ? null : { postal_code: v.postalCode }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.stateCode === undefined ? null : { state_code: v.stateCode }),
                ...(v.houseNumberOrName === undefined
                    ? null
                    : { house_number_or_name: v.houseNumberOrName }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });
}

/** @internal */
export const TransactionSummaryKind$ = z.nativeEnum(TransactionSummaryKind);

/** @internal */
export namespace TransactionSummaryTaxID$ {
    export type Inbound = {
        value: string;
        kind: TransactionSummaryKind;
    };

    export const inboundSchema: z.ZodType<TransactionSummaryTaxID, z.ZodTypeDef, Inbound> = z
        .object({
            value: z.string(),
            kind: TransactionSummaryKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });

    export type Outbound = {
        value: string;
        kind: TransactionSummaryKind;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSummaryTaxID> = z
        .object({
            value: z.string(),
            kind: TransactionSummaryKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });
}

/** @internal */
export namespace TransactionSummaryBillingDetails$ {
    export type Inbound = {
        type?: TransactionSummaryBuyerBillingDetailsType | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: TransactionSummaryAddress$.Inbound | null | undefined;
        tax_id?: TransactionSummaryTaxID$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionSummaryBillingDetails, z.ZodTypeDef, Inbound> =
        z
            .object({
                type: TransactionSummaryBuyerBillingDetailsType$.optional(),
                first_name: z.nullable(z.string()).optional(),
                last_name: z.nullable(z.string()).optional(),
                email_address: z.nullable(z.string()).optional(),
                phone_number: z.nullable(z.string()).optional(),
                address: z
                    .nullable(z.lazy(() => TransactionSummaryAddress$.inboundSchema))
                    .optional(),
                tax_id: z.nullable(z.lazy(() => TransactionSummaryTaxID$.inboundSchema)).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                    ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                    ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                    ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                    ...(v.address === undefined ? null : { address: v.address }),
                    ...(v.tax_id === undefined ? null : { taxId: v.tax_id }),
                };
            });

    export type Outbound = {
        type?: TransactionSummaryBuyerBillingDetailsType | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: TransactionSummaryAddress$.Outbound | null | undefined;
        tax_id?: TransactionSummaryTaxID$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionSummaryBillingDetails
    > = z
        .object({
            type: TransactionSummaryBuyerBillingDetailsType$.optional(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => TransactionSummaryAddress$.outboundSchema)).optional(),
            taxId: z.nullable(z.lazy(() => TransactionSummaryTaxID$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.taxId === undefined ? null : { tax_id: v.taxId }),
            };
        });
}

/** @internal */
export namespace BuyerSnapshot$ {
    export type Inbound = {
        type?: TransactionSummaryBuyerType | undefined;
        id?: string | undefined;
        billing_details?: TransactionSummaryBillingDetails$.Inbound | null | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<BuyerSnapshot, z.ZodTypeDef, Inbound> = z
        .object({
            type: TransactionSummaryBuyerType$.optional(),
            id: z.string().optional(),
            billing_details: z
                .nullable(z.lazy(() => TransactionSummaryBillingDetails$.inboundSchema))
                .optional(),
            display_name: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
            };
        });

    export type Outbound = {
        type?: TransactionSummaryBuyerType | undefined;
        id?: string | undefined;
        billing_details?: TransactionSummaryBillingDetails$.Outbound | null | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerSnapshot> = z
        .object({
            type: TransactionSummaryBuyerType$.optional(),
            id: z.string().optional(),
            billingDetails: z
                .nullable(z.lazy(() => TransactionSummaryBillingDetails$.outboundSchema))
                .optional(),
            displayName: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
            };
        });
}

/** @internal */
export const InstrumentType$ = z.nativeEnum(InstrumentType);

/** @internal */
export const Intent$ = z.nativeEnum(Intent);

/** @internal */
export const TransactionSummaryMethod$ = z.nativeEnum(TransactionSummaryMethod);

/** @internal */
export const TransactionSummaryStatus$ = z.nativeEnum(TransactionSummaryStatus);

/** @internal */
export namespace TransactionSummary$ {
    export type Inbound = {
        type?: TransactionSummaryType | undefined;
        id?: string | undefined;
        amount?: number | undefined;
        authorized_amount?: number | undefined;
        buyer?: BuyerSnapshot$.Inbound | null | undefined;
        captured_amount?: number | undefined;
        checkout_session_id?: string | undefined;
        country?: string | null | undefined;
        created_at?: string | undefined;
        currency?: string | undefined;
        external_identifier?: string | null | undefined;
        gift_card_redemptions?: Array<GiftCardRedemption$.Inbound> | undefined;
        instrument_type?: InstrumentType | null | undefined;
        intent?: Intent | undefined;
        merchant_account_id?: string | undefined;
        method?: TransactionSummaryMethod | undefined;
        payment_method?: PaymentMethodSnapshot$.Inbound | undefined;
        payment_service?: PaymentServiceSnapshot$.Inbound | undefined;
        pending_review?: boolean | undefined;
        raw_response_code?: string | null | undefined;
        raw_response_description?: string | null | undefined;
        reconciliation_id?: string | undefined;
        refunded_amount?: number | undefined;
        status?: TransactionSummaryStatus | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionSummary, z.ZodTypeDef, Inbound> = z
        .object({
            type: TransactionSummaryType$.optional(),
            id: z.string().optional(),
            amount: z.number().int().optional(),
            authorized_amount: z.number().int().optional(),
            buyer: z.nullable(z.lazy(() => BuyerSnapshot$.inboundSchema)).optional(),
            captured_amount: z.number().int().optional(),
            checkout_session_id: z.string().optional(),
            country: z.nullable(z.string()).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency: z.string().optional(),
            external_identifier: z.nullable(z.string()).optional(),
            gift_card_redemptions: z.array(GiftCardRedemption$.inboundSchema).optional(),
            instrument_type: z.nullable(InstrumentType$).optional(),
            intent: Intent$.optional(),
            merchant_account_id: z.string().optional(),
            method: TransactionSummaryMethod$.optional(),
            payment_method: PaymentMethodSnapshot$.inboundSchema.optional(),
            payment_service: PaymentServiceSnapshot$.inboundSchema.optional(),
            pending_review: z.boolean().optional(),
            raw_response_code: z.nullable(z.string()).optional(),
            raw_response_description: z.nullable(z.string()).optional(),
            reconciliation_id: z.string().optional(),
            refunded_amount: z.number().int().optional(),
            status: TransactionSummaryStatus$.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.authorized_amount === undefined
                    ? null
                    : { authorizedAmount: v.authorized_amount }),
                ...(v.buyer === undefined ? null : { buyer: v.buyer }),
                ...(v.captured_amount === undefined ? null : { capturedAmount: v.captured_amount }),
                ...(v.checkout_session_id === undefined
                    ? null
                    : { checkoutSessionId: v.checkout_session_id }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.gift_card_redemptions === undefined
                    ? null
                    : { giftCardRedemptions: v.gift_card_redemptions }),
                ...(v.instrument_type === undefined ? null : { instrumentType: v.instrument_type }),
                ...(v.intent === undefined ? null : { intent: v.intent }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.payment_method === undefined ? null : { paymentMethod: v.payment_method }),
                ...(v.payment_service === undefined ? null : { paymentService: v.payment_service }),
                ...(v.pending_review === undefined ? null : { pendingReview: v.pending_review }),
                ...(v.raw_response_code === undefined
                    ? null
                    : { rawResponseCode: v.raw_response_code }),
                ...(v.raw_response_description === undefined
                    ? null
                    : { rawResponseDescription: v.raw_response_description }),
                ...(v.reconciliation_id === undefined
                    ? null
                    : { reconciliationId: v.reconciliation_id }),
                ...(v.refunded_amount === undefined ? null : { refundedAmount: v.refunded_amount }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: TransactionSummaryType | undefined;
        id?: string | undefined;
        amount?: number | undefined;
        authorized_amount?: number | undefined;
        buyer?: BuyerSnapshot$.Outbound | null | undefined;
        captured_amount?: number | undefined;
        checkout_session_id?: string | undefined;
        country?: string | null | undefined;
        created_at?: string | undefined;
        currency?: string | undefined;
        external_identifier?: string | null | undefined;
        gift_card_redemptions?: Array<GiftCardRedemption$.Outbound> | undefined;
        instrument_type?: InstrumentType | null | undefined;
        intent?: Intent | undefined;
        merchant_account_id?: string | undefined;
        method?: TransactionSummaryMethod | undefined;
        payment_method?: PaymentMethodSnapshot$.Outbound | undefined;
        payment_service?: PaymentServiceSnapshot$.Outbound | undefined;
        pending_review?: boolean | undefined;
        raw_response_code?: string | null | undefined;
        raw_response_description?: string | null | undefined;
        reconciliation_id?: string | undefined;
        refunded_amount?: number | undefined;
        status?: TransactionSummaryStatus | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSummary> = z
        .object({
            type: TransactionSummaryType$.optional(),
            id: z.string().optional(),
            amount: z.number().int().optional(),
            authorizedAmount: z.number().int().optional(),
            buyer: z.nullable(z.lazy(() => BuyerSnapshot$.outboundSchema)).optional(),
            capturedAmount: z.number().int().optional(),
            checkoutSessionId: z.string().optional(),
            country: z.nullable(z.string()).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currency: z.string().optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            giftCardRedemptions: z.array(GiftCardRedemption$.outboundSchema).optional(),
            instrumentType: z.nullable(InstrumentType$).optional(),
            intent: Intent$.optional(),
            merchantAccountId: z.string().optional(),
            method: TransactionSummaryMethod$.optional(),
            paymentMethod: PaymentMethodSnapshot$.outboundSchema.optional(),
            paymentService: PaymentServiceSnapshot$.outboundSchema.optional(),
            pendingReview: z.boolean().optional(),
            rawResponseCode: z.nullable(z.string()).optional(),
            rawResponseDescription: z.nullable(z.string()).optional(),
            reconciliationId: z.string().optional(),
            refundedAmount: z.number().int().optional(),
            status: TransactionSummaryStatus$.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.authorizedAmount === undefined
                    ? null
                    : { authorized_amount: v.authorizedAmount }),
                ...(v.buyer === undefined ? null : { buyer: v.buyer }),
                ...(v.capturedAmount === undefined ? null : { captured_amount: v.capturedAmount }),
                ...(v.checkoutSessionId === undefined
                    ? null
                    : { checkout_session_id: v.checkoutSessionId }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.giftCardRedemptions === undefined
                    ? null
                    : { gift_card_redemptions: v.giftCardRedemptions }),
                ...(v.instrumentType === undefined ? null : { instrument_type: v.instrumentType }),
                ...(v.intent === undefined ? null : { intent: v.intent }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.paymentMethod === undefined ? null : { payment_method: v.paymentMethod }),
                ...(v.paymentService === undefined ? null : { payment_service: v.paymentService }),
                ...(v.pendingReview === undefined ? null : { pending_review: v.pendingReview }),
                ...(v.rawResponseCode === undefined
                    ? null
                    : { raw_response_code: v.rawResponseCode }),
                ...(v.rawResponseDescription === undefined
                    ? null
                    : { raw_response_description: v.rawResponseDescription }),
                ...(v.reconciliationId === undefined
                    ? null
                    : { reconciliation_id: v.reconciliationId }),
                ...(v.refundedAmount === undefined ? null : { refunded_amount: v.refundedAmount }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
