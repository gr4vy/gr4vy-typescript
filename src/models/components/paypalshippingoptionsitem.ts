/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaypalShippingOptionsItemAmount,
  PaypalShippingOptionsItemAmount$inboundSchema,
  PaypalShippingOptionsItemAmount$Outbound,
  PaypalShippingOptionsItemAmount$outboundSchema,
} from "./paypalshippingoptionsitemamount.js";

export const PaypalShippingOptionsItemType = {
  Shipping: "SHIPPING",
  Pickup: "PICKUP",
  PickupInStore: "PICKUP_IN_STORE",
  PickupFromPerson: "PICKUP_FROM_PERSON",
} as const;
export type PaypalShippingOptionsItemType = OpenEnum<
  typeof PaypalShippingOptionsItemType
>;

export type PaypalShippingOptionsItem = {
  /**
   * A unique ID that identifies a payer-selected shipping option.
   */
  id: string;
  /**
   * A description that the payer sees, which helps them choose an appropriate shipping option.
   */
  label: string;
  /**
   * If the API request sets selected = true, it represents the shipping option that the payee or merchant expects to be pre-selected for the payer when they first view the shipping.options in the PayPal Checkout experience. Only one shipping.option can be set to selected=true.
   */
  selected: boolean;
  /**
   * A classification for the method of purchase fulfillment.
   */
  type?: PaypalShippingOptionsItemType | null | undefined;
  /**
   * The shipping cost for the selected option.
   */
  amount?: PaypalShippingOptionsItemAmount | null | undefined;
};

/** @internal */
export const PaypalShippingOptionsItemType$inboundSchema: z.ZodType<
  PaypalShippingOptionsItemType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PaypalShippingOptionsItemType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PaypalShippingOptionsItemType$outboundSchema: z.ZodType<
  PaypalShippingOptionsItemType,
  z.ZodTypeDef,
  PaypalShippingOptionsItemType
> = z.union([
  z.nativeEnum(PaypalShippingOptionsItemType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaypalShippingOptionsItemType$ {
  /** @deprecated use `PaypalShippingOptionsItemType$inboundSchema` instead. */
  export const inboundSchema = PaypalShippingOptionsItemType$inboundSchema;
  /** @deprecated use `PaypalShippingOptionsItemType$outboundSchema` instead. */
  export const outboundSchema = PaypalShippingOptionsItemType$outboundSchema;
}

/** @internal */
export const PaypalShippingOptionsItem$inboundSchema: z.ZodType<
  PaypalShippingOptionsItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  label: z.string(),
  selected: z.boolean(),
  type: z.nullable(PaypalShippingOptionsItemType$inboundSchema).optional(),
  amount: z.nullable(PaypalShippingOptionsItemAmount$inboundSchema).optional(),
});

/** @internal */
export type PaypalShippingOptionsItem$Outbound = {
  id: string;
  label: string;
  selected: boolean;
  type?: string | null | undefined;
  amount?: PaypalShippingOptionsItemAmount$Outbound | null | undefined;
};

/** @internal */
export const PaypalShippingOptionsItem$outboundSchema: z.ZodType<
  PaypalShippingOptionsItem$Outbound,
  z.ZodTypeDef,
  PaypalShippingOptionsItem
> = z.object({
  id: z.string(),
  label: z.string(),
  selected: z.boolean(),
  type: z.nullable(PaypalShippingOptionsItemType$outboundSchema).optional(),
  amount: z.nullable(PaypalShippingOptionsItemAmount$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaypalShippingOptionsItem$ {
  /** @deprecated use `PaypalShippingOptionsItem$inboundSchema` instead. */
  export const inboundSchema = PaypalShippingOptionsItem$inboundSchema;
  /** @deprecated use `PaypalShippingOptionsItem$outboundSchema` instead. */
  export const outboundSchema = PaypalShippingOptionsItem$outboundSchema;
  /** @deprecated use `PaypalShippingOptionsItem$Outbound` instead. */
  export type Outbound = PaypalShippingOptionsItem$Outbound;
}

export function paypalShippingOptionsItemToJSON(
  paypalShippingOptionsItem: PaypalShippingOptionsItem,
): string {
  return JSON.stringify(
    PaypalShippingOptionsItem$outboundSchema.parse(paypalShippingOptionsItem),
  );
}

export function paypalShippingOptionsItemFromJSON(
  jsonString: string,
): SafeParseResult<PaypalShippingOptionsItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaypalShippingOptionsItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaypalShippingOptionsItem' from JSON`,
  );
}
