/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowGiftCardBINConditionName {
    GiftCardBin = "gift_card_bin",
}

/**
 * The comparison to make on the `gift_card_bin` `value`.
 */
export enum FlowGiftCardBINConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Gift card BIN range conditions with a name, operator, and value.
 */
export type FlowGiftCardBINCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowGiftCardBINConditionName;
    /**
     * The comparison to make on the `gift_card_bin` `value`.
     */
    operator: FlowGiftCardBINConditionOperator;
    /**
     * Gift card BIN range to compare with gift card numbers used in
     *
     * @remarks
     * the transaction to. A gift card BIN is 9 characters long at maximum.
     */
    value: Array<string>;
};

/** @internal */
export const FlowGiftCardBINConditionName$: z.ZodNativeEnum<typeof FlowGiftCardBINConditionName> =
    z.nativeEnum(FlowGiftCardBINConditionName);

/** @internal */
export const FlowGiftCardBINConditionOperator$: z.ZodNativeEnum<
    typeof FlowGiftCardBINConditionOperator
> = z.nativeEnum(FlowGiftCardBINConditionOperator);

/** @internal */
export namespace FlowGiftCardBINCondition$ {
    export type Inbound = {
        name: FlowGiftCardBINConditionName;
        operator: FlowGiftCardBINConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowGiftCardBINCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowGiftCardBINConditionName$,
            operator: FlowGiftCardBINConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowGiftCardBINConditionName;
        operator: FlowGiftCardBINConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowGiftCardBINCondition> = z
        .object({
            name: FlowGiftCardBINConditionName$,
            operator: FlowGiftCardBINConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
