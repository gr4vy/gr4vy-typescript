/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CybersourceAntiFraudOptions = {
  /**
   * A list of merchant defined data to be passed to the Cybersource Decision Manager API. Each key needs to be a numeric string.
   */
  merchantDefinedData?: { [k: string]: string } | null | undefined;
  /**
   * The merchant ID to use for this transaction. This requires a meta key to be set up for use with Cybersource Decision Manager, and this overrides the connector configuration.
   */
  metaKeyMerchantId?: string | null | undefined;
  /**
   * The shipping method for this transaction.
   */
  shippingMethod?: string | null | undefined;
};

/** @internal */
export const CybersourceAntiFraudOptions$inboundSchema: z.ZodType<
  CybersourceAntiFraudOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchant_defined_data: z.nullable(z.record(z.string())).optional(),
  meta_key_merchant_id: z.nullable(z.string()).optional(),
  shipping_method: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_defined_data": "merchantDefinedData",
    "meta_key_merchant_id": "metaKeyMerchantId",
    "shipping_method": "shippingMethod",
  });
});

/** @internal */
export type CybersourceAntiFraudOptions$Outbound = {
  merchant_defined_data?: { [k: string]: string } | null | undefined;
  meta_key_merchant_id?: string | null | undefined;
  shipping_method?: string | null | undefined;
};

/** @internal */
export const CybersourceAntiFraudOptions$outboundSchema: z.ZodType<
  CybersourceAntiFraudOptions$Outbound,
  z.ZodTypeDef,
  CybersourceAntiFraudOptions
> = z.object({
  merchantDefinedData: z.nullable(z.record(z.string())).optional(),
  metaKeyMerchantId: z.nullable(z.string()).optional(),
  shippingMethod: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    merchantDefinedData: "merchant_defined_data",
    metaKeyMerchantId: "meta_key_merchant_id",
    shippingMethod: "shipping_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CybersourceAntiFraudOptions$ {
  /** @deprecated use `CybersourceAntiFraudOptions$inboundSchema` instead. */
  export const inboundSchema = CybersourceAntiFraudOptions$inboundSchema;
  /** @deprecated use `CybersourceAntiFraudOptions$outboundSchema` instead. */
  export const outboundSchema = CybersourceAntiFraudOptions$outboundSchema;
  /** @deprecated use `CybersourceAntiFraudOptions$Outbound` instead. */
  export type Outbound = CybersourceAntiFraudOptions$Outbound;
}

export function cybersourceAntiFraudOptionsToJSON(
  cybersourceAntiFraudOptions: CybersourceAntiFraudOptions,
): string {
  return JSON.stringify(
    CybersourceAntiFraudOptions$outboundSchema.parse(
      cybersourceAntiFraudOptions,
    ),
  );
}

export function cybersourceAntiFraudOptionsFromJSON(
  jsonString: string,
): SafeParseResult<CybersourceAntiFraudOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CybersourceAntiFraudOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CybersourceAntiFraudOptions' from JSON`,
  );
}
