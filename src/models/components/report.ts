/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReportCreatorType,
  ReportCreatorType$inboundSchema,
  ReportCreatorType$outboundSchema,
} from "./reportcreatortype.js";
import {
  ReportExecutionSummary,
  ReportExecutionSummary$inboundSchema,
  ReportExecutionSummary$Outbound,
  ReportExecutionSummary$outboundSchema,
} from "./reportexecutionsummary.js";
import {
  ReportSchedule,
  ReportSchedule$inboundSchema,
  ReportSchedule$outboundSchema,
} from "./reportschedule.js";
import {
  ReportSpec,
  ReportSpec$inboundSchema,
  ReportSpec$Outbound,
  ReportSpec$outboundSchema,
} from "./reportspec.js";

export type Report = {
  /**
   * Always `report`.
   */
  type?: "report" | undefined;
  /**
   * The unique ID for the report.
   */
  id: string;
  /**
   * The merchant account ID this report belongs to.
   */
  merchantAccountId: string;
  /**
   * The name of the report.
   */
  name: string;
  /**
   * The ID of the user who created the report.
   */
  creatorId?: string | null | undefined;
  /**
   * The display name of the report creator.
   */
  creatorDisplayName?: string | null | undefined;
  /**
   * The type of the report creator.
   */
  creatorType?: ReportCreatorType | null | undefined;
  /**
   * The date this report was created at.
   */
  createdAt: Date;
  /**
   * The date this report was last updated.
   */
  updatedAt: Date;
  /**
   * The next scheduled execution time for the report.
   */
  nextExecutionAt?: Date | null | undefined;
  /**
   * A description of the report.
   */
  description?: string | null | undefined;
  schedule: ReportSchedule;
  /**
   * Whether the report schedule is enabled.
   */
  scheduleEnabled: boolean;
  /**
   * The timezone for the report schedule.
   */
  scheduleTimezone: string;
  spec: ReportSpec;
  /**
   * The latest execution summary for the report.
   */
  latestExecution?: ReportExecutionSummary | null | undefined;
};

/** @internal */
export const Report$inboundSchema: z.ZodType<Report, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("report").default("report"),
    id: z.string(),
    merchant_account_id: z.string(),
    name: z.string(),
    creator_id: z.nullable(z.string()).optional(),
    creator_display_name: z.nullable(z.string()).optional(),
    creator_type: z.nullable(ReportCreatorType$inboundSchema).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    next_execution_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    description: z.nullable(z.string()).optional(),
    schedule: ReportSchedule$inboundSchema,
    schedule_enabled: z.boolean(),
    schedule_timezone: z.string(),
    spec: ReportSpec$inboundSchema,
    latest_execution: z.nullable(ReportExecutionSummary$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "merchant_account_id": "merchantAccountId",
      "creator_id": "creatorId",
      "creator_display_name": "creatorDisplayName",
      "creator_type": "creatorType",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "next_execution_at": "nextExecutionAt",
      "schedule_enabled": "scheduleEnabled",
      "schedule_timezone": "scheduleTimezone",
      "latest_execution": "latestExecution",
    });
  });

/** @internal */
export type Report$Outbound = {
  type: "report";
  id: string;
  merchant_account_id: string;
  name: string;
  creator_id?: string | null | undefined;
  creator_display_name?: string | null | undefined;
  creator_type?: string | null | undefined;
  created_at: string;
  updated_at: string;
  next_execution_at?: string | null | undefined;
  description?: string | null | undefined;
  schedule: string;
  schedule_enabled: boolean;
  schedule_timezone: string;
  spec: ReportSpec$Outbound;
  latest_execution?: ReportExecutionSummary$Outbound | null | undefined;
};

/** @internal */
export const Report$outboundSchema: z.ZodType<
  Report$Outbound,
  z.ZodTypeDef,
  Report
> = z.object({
  type: z.literal("report").default("report" as const),
  id: z.string(),
  merchantAccountId: z.string(),
  name: z.string(),
  creatorId: z.nullable(z.string()).optional(),
  creatorDisplayName: z.nullable(z.string()).optional(),
  creatorType: z.nullable(ReportCreatorType$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  nextExecutionAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  description: z.nullable(z.string()).optional(),
  schedule: ReportSchedule$outboundSchema,
  scheduleEnabled: z.boolean(),
  scheduleTimezone: z.string(),
  spec: ReportSpec$outboundSchema,
  latestExecution: z.nullable(ReportExecutionSummary$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    creatorId: "creator_id",
    creatorDisplayName: "creator_display_name",
    creatorType: "creator_type",
    createdAt: "created_at",
    updatedAt: "updated_at",
    nextExecutionAt: "next_execution_at",
    scheduleEnabled: "schedule_enabled",
    scheduleTimezone: "schedule_timezone",
    latestExecution: "latest_execution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Report$ {
  /** @deprecated use `Report$inboundSchema` instead. */
  export const inboundSchema = Report$inboundSchema;
  /** @deprecated use `Report$outboundSchema` instead. */
  export const outboundSchema = Report$outboundSchema;
  /** @deprecated use `Report$Outbound` instead. */
  export type Outbound = Report$Outbound;
}

export function reportToJSON(report: Report): string {
  return JSON.stringify(Report$outboundSchema.parse(report));
}

export function reportFromJSON(
  jsonString: string,
): SafeParseResult<Report, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Report$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Report' from JSON`,
  );
}
