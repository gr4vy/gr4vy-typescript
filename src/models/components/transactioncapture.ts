/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AirlineLeg,
  AirlineLeg$inboundSchema,
  AirlineLeg$Outbound,
  AirlineLeg$outboundSchema,
} from "./airlineleg.js";
import {
  AirlinePassenger,
  AirlinePassenger$inboundSchema,
  AirlinePassenger$Outbound,
  AirlinePassenger$outboundSchema,
} from "./airlinepassenger.js";

/**
 * The delivery method of the ticket.
 */
export const TicketDeliveryMethod = {
  Electronic: "electronic",
  Other: "other",
} as const;
/**
 * The delivery method of the ticket.
 */
export type TicketDeliveryMethod = ClosedEnum<typeof TicketDeliveryMethod>;

/**
 * The airline data to submit to the payment service during the capture call.
 */
export type Airline = {
  /**
   * The unique identifier of the reservation in the global distribution system.
   */
  bookingCode?: string | undefined;
  /**
   * The address of the place/agency that issued the ticket.
   */
  issuedAddress?: string | undefined;
  /**
   * The date that the ticket was last issued in the airline reservation system.
   */
  issuedAt?: Date | undefined;
  /**
   * For airline aggregators, two-character IATA code of the airline issuing the ticket.
   */
  issuingCarrierCode?: string | undefined;
  /**
   * An array of separate trip segments. Each leg contains detailed itinerary information.
   */
  legs?: Array<AirlineLeg> | undefined;
  /**
   * The Passenger Name Record (PNR) in the airline reservation system.
   */
  passengerNameRecord?: string | undefined;
  /**
   * An array of the travelling passengers.
   */
  passengers?: Array<AirlinePassenger> | undefined;
  /**
   * The name of the reservation system.
   */
  reservationSystem?: string | undefined;
  /**
   * Indicates whether the ticket is restricted (refundable).
   */
  restrictedTicket?: boolean | undefined;
  /**
   * The delivery method of the ticket.
   */
  ticketDeliveryMethod?: TicketDeliveryMethod | undefined;
  /**
   * The airline's unique ticket number.
   */
  ticketNumber?: string | undefined;
  /**
   * The IATA travel agency code.
   */
  travelAgencyCode?: string | undefined;
  /**
   * The reference number of the invoice that was issued by the travel agency.
   */
  travelAgencyInvoiceNumber?: string | undefined;
  /**
   * The name of the travel agency.
   */
  travelAgencyName?: string | undefined;
  /**
   * The name of the travel agency plan.
   */
  travelAgencyPlanName?: string | undefined;
};

/**
 * Request body for capturing an authorized transaction
 */
export type TransactionCapture = {
  /**
   * The amount to capture. This normally needs to be equal or less than the authorized amount, unless over-capture is available.
   */
  amount?: number | undefined;
  /**
   * The airline data to submit to the payment service during the capture call.
   */
  airline?: Airline | undefined;
};

/** @internal */
export const TicketDeliveryMethod$inboundSchema: z.ZodNativeEnum<
  typeof TicketDeliveryMethod
> = z.nativeEnum(TicketDeliveryMethod);

/** @internal */
export const TicketDeliveryMethod$outboundSchema: z.ZodNativeEnum<
  typeof TicketDeliveryMethod
> = TicketDeliveryMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketDeliveryMethod$ {
  /** @deprecated use `TicketDeliveryMethod$inboundSchema` instead. */
  export const inboundSchema = TicketDeliveryMethod$inboundSchema;
  /** @deprecated use `TicketDeliveryMethod$outboundSchema` instead. */
  export const outboundSchema = TicketDeliveryMethod$outboundSchema;
}

/** @internal */
export const Airline$inboundSchema: z.ZodType<Airline, z.ZodTypeDef, unknown> =
  z.object({
    booking_code: z.string().optional(),
    issued_address: z.string().optional(),
    issued_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    issuing_carrier_code: z.string().optional(),
    legs: z.array(AirlineLeg$inboundSchema).optional(),
    passenger_name_record: z.string().optional(),
    passengers: z.array(AirlinePassenger$inboundSchema).optional(),
    reservation_system: z.string().optional(),
    restricted_ticket: z.boolean().optional(),
    ticket_delivery_method: TicketDeliveryMethod$inboundSchema.default(
      "electronic",
    ),
    ticket_number: z.string().optional(),
    travel_agency_code: z.string().optional(),
    travel_agency_invoice_number: z.string().optional(),
    travel_agency_name: z.string().optional(),
    travel_agency_plan_name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "booking_code": "bookingCode",
      "issued_address": "issuedAddress",
      "issued_at": "issuedAt",
      "issuing_carrier_code": "issuingCarrierCode",
      "passenger_name_record": "passengerNameRecord",
      "reservation_system": "reservationSystem",
      "restricted_ticket": "restrictedTicket",
      "ticket_delivery_method": "ticketDeliveryMethod",
      "ticket_number": "ticketNumber",
      "travel_agency_code": "travelAgencyCode",
      "travel_agency_invoice_number": "travelAgencyInvoiceNumber",
      "travel_agency_name": "travelAgencyName",
      "travel_agency_plan_name": "travelAgencyPlanName",
    });
  });

/** @internal */
export type Airline$Outbound = {
  booking_code?: string | undefined;
  issued_address?: string | undefined;
  issued_at?: string | undefined;
  issuing_carrier_code?: string | undefined;
  legs?: Array<AirlineLeg$Outbound> | undefined;
  passenger_name_record?: string | undefined;
  passengers?: Array<AirlinePassenger$Outbound> | undefined;
  reservation_system?: string | undefined;
  restricted_ticket?: boolean | undefined;
  ticket_delivery_method: string;
  ticket_number?: string | undefined;
  travel_agency_code?: string | undefined;
  travel_agency_invoice_number?: string | undefined;
  travel_agency_name?: string | undefined;
  travel_agency_plan_name?: string | undefined;
};

/** @internal */
export const Airline$outboundSchema: z.ZodType<
  Airline$Outbound,
  z.ZodTypeDef,
  Airline
> = z.object({
  bookingCode: z.string().optional(),
  issuedAddress: z.string().optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  issuingCarrierCode: z.string().optional(),
  legs: z.array(AirlineLeg$outboundSchema).optional(),
  passengerNameRecord: z.string().optional(),
  passengers: z.array(AirlinePassenger$outboundSchema).optional(),
  reservationSystem: z.string().optional(),
  restrictedTicket: z.boolean().optional(),
  ticketDeliveryMethod: TicketDeliveryMethod$outboundSchema.default(
    "electronic",
  ),
  ticketNumber: z.string().optional(),
  travelAgencyCode: z.string().optional(),
  travelAgencyInvoiceNumber: z.string().optional(),
  travelAgencyName: z.string().optional(),
  travelAgencyPlanName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bookingCode: "booking_code",
    issuedAddress: "issued_address",
    issuedAt: "issued_at",
    issuingCarrierCode: "issuing_carrier_code",
    passengerNameRecord: "passenger_name_record",
    reservationSystem: "reservation_system",
    restrictedTicket: "restricted_ticket",
    ticketDeliveryMethod: "ticket_delivery_method",
    ticketNumber: "ticket_number",
    travelAgencyCode: "travel_agency_code",
    travelAgencyInvoiceNumber: "travel_agency_invoice_number",
    travelAgencyName: "travel_agency_name",
    travelAgencyPlanName: "travel_agency_plan_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Airline$ {
  /** @deprecated use `Airline$inboundSchema` instead. */
  export const inboundSchema = Airline$inboundSchema;
  /** @deprecated use `Airline$outboundSchema` instead. */
  export const outboundSchema = Airline$outboundSchema;
  /** @deprecated use `Airline$Outbound` instead. */
  export type Outbound = Airline$Outbound;
}

export function airlineToJSON(airline: Airline): string {
  return JSON.stringify(Airline$outboundSchema.parse(airline));
}

export function airlineFromJSON(
  jsonString: string,
): SafeParseResult<Airline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Airline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Airline' from JSON`,
  );
}

/** @internal */
export const TransactionCapture$inboundSchema: z.ZodType<
  TransactionCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  airline: z.lazy(() => Airline$inboundSchema).optional(),
});

/** @internal */
export type TransactionCapture$Outbound = {
  amount?: number | undefined;
  airline?: Airline$Outbound | undefined;
};

/** @internal */
export const TransactionCapture$outboundSchema: z.ZodType<
  TransactionCapture$Outbound,
  z.ZodTypeDef,
  TransactionCapture
> = z.object({
  amount: z.number().int().optional(),
  airline: z.lazy(() => Airline$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCapture$ {
  /** @deprecated use `TransactionCapture$inboundSchema` instead. */
  export const inboundSchema = TransactionCapture$inboundSchema;
  /** @deprecated use `TransactionCapture$outboundSchema` instead. */
  export const outboundSchema = TransactionCapture$outboundSchema;
  /** @deprecated use `TransactionCapture$Outbound` instead. */
  export type Outbound = TransactionCapture$Outbound;
}

export function transactionCaptureToJSON(
  transactionCapture: TransactionCapture,
): string {
  return JSON.stringify(
    TransactionCapture$outboundSchema.parse(transactionCapture),
  );
}

export function transactionCaptureFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCapture' from JSON`,
  );
}
