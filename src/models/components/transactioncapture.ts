/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CaptureStatus,
  CaptureStatus$inboundSchema,
  CaptureStatus$outboundSchema,
} from "./capturestatus.js";
import {
  Transaction,
  Transaction$inboundSchema,
  Transaction$Outbound,
  Transaction$outboundSchema,
} from "./transaction.js";

export type TransactionCapture = {
  /**
   * Always `transaction-capture`.
   */
  type?: "transaction-capture" | undefined;
  status: CaptureStatus;
  /**
   * The standardized error code set by Gr4vy.
   */
  code: string | null;
  /**
   * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseCode: string | null;
  /**
   * This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseDescription: string | null;
  /**
   * A full transaction resource.
   */
  transaction: Transaction;
};

/** @internal */
export const TransactionCapture$inboundSchema: z.ZodType<
  TransactionCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("transaction-capture").default("transaction-capture"),
  status: CaptureStatus$inboundSchema,
  code: z.nullable(z.string()),
  raw_response_code: z.nullable(z.string()),
  raw_response_description: z.nullable(z.string()),
  transaction: Transaction$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "raw_response_code": "rawResponseCode",
    "raw_response_description": "rawResponseDescription",
  });
});

/** @internal */
export type TransactionCapture$Outbound = {
  type: "transaction-capture";
  status: string;
  code: string | null;
  raw_response_code: string | null;
  raw_response_description: string | null;
  transaction: Transaction$Outbound;
};

/** @internal */
export const TransactionCapture$outboundSchema: z.ZodType<
  TransactionCapture$Outbound,
  z.ZodTypeDef,
  TransactionCapture
> = z.object({
  type: z.literal("transaction-capture").default(
    "transaction-capture" as const,
  ),
  status: CaptureStatus$outboundSchema,
  code: z.nullable(z.string()),
  rawResponseCode: z.nullable(z.string()),
  rawResponseDescription: z.nullable(z.string()),
  transaction: Transaction$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    rawResponseCode: "raw_response_code",
    rawResponseDescription: "raw_response_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCapture$ {
  /** @deprecated use `TransactionCapture$inboundSchema` instead. */
  export const inboundSchema = TransactionCapture$inboundSchema;
  /** @deprecated use `TransactionCapture$outboundSchema` instead. */
  export const outboundSchema = TransactionCapture$outboundSchema;
  /** @deprecated use `TransactionCapture$Outbound` instead. */
  export type Outbound = TransactionCapture$Outbound;
}

export function transactionCaptureToJSON(
  transactionCapture: TransactionCapture,
): string {
  return JSON.stringify(
    TransactionCapture$outboundSchema.parse(transactionCapture),
  );
}

export function transactionCaptureFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCapture' from JSON`,
  );
}
