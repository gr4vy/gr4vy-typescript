/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FiservInstallmentOptions,
  FiservInstallmentOptions$inboundSchema,
  FiservInstallmentOptions$Outbound,
  FiservInstallmentOptions$outboundSchema,
} from "./fiservinstallmentoptions.js";

export type FiservOptions = {
  /**
   * Passes installment data to the Fiserv API. This is now also a dedicated feature on the Gr4vy API.
   */
  installmentOptions?: FiservInstallmentOptions | null | undefined;
};

/** @internal */
export const FiservOptions$inboundSchema: z.ZodType<
  FiservOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  installmentOptions: z.nullable(FiservInstallmentOptions$inboundSchema)
    .optional(),
});

/** @internal */
export type FiservOptions$Outbound = {
  installmentOptions?: FiservInstallmentOptions$Outbound | null | undefined;
};

/** @internal */
export const FiservOptions$outboundSchema: z.ZodType<
  FiservOptions$Outbound,
  z.ZodTypeDef,
  FiservOptions
> = z.object({
  installmentOptions: z.nullable(FiservInstallmentOptions$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiservOptions$ {
  /** @deprecated use `FiservOptions$inboundSchema` instead. */
  export const inboundSchema = FiservOptions$inboundSchema;
  /** @deprecated use `FiservOptions$outboundSchema` instead. */
  export const outboundSchema = FiservOptions$outboundSchema;
  /** @deprecated use `FiservOptions$Outbound` instead. */
  export type Outbound = FiservOptions$Outbound;
}

export function fiservOptionsToJSON(fiservOptions: FiservOptions): string {
  return JSON.stringify(FiservOptions$outboundSchema.parse(fiservOptions));
}

export function fiservOptionsFromJSON(
  jsonString: string,
): SafeParseResult<FiservOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiservOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiservOptions' from JSON`,
  );
}
