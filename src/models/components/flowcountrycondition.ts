/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCountryConditionName {
    Country = "country",
}

/**
 * The comparison to make on the country code `value`.
 */
export enum FlowCountryConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Country conditions with a name, operator, and value.
 */
export type FlowCountryCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCountryConditionName;
    /**
     * The comparison to make on the country code `value`.
     */
    operator: FlowCountryConditionOperator;
    /**
     * Country two-letter ISO codes to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export namespace FlowCountryConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowCountryConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCountryConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowCountryConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCountryCondition$ {
    export const inboundSchema: z.ZodType<FlowCountryCondition, z.ZodTypeDef, unknown> = z.object({
        name: FlowCountryConditionName$.inboundSchema,
        operator: FlowCountryConditionOperator$.inboundSchema,
        value: z.array(z.string()),
    });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCountryCondition> = z.object(
        {
            name: FlowCountryConditionName$.outboundSchema,
            operator: FlowCountryConditionOperator$.outboundSchema,
            value: z.array(z.string()),
        }
    );
}
