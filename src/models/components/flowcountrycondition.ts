/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowCountryConditionName = {
    Country: "country",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowCountryConditionName = ClosedEnum<typeof FlowCountryConditionName>;

/**
 * The comparison to make on the country code `value`.
 */
export const FlowCountryConditionOperator = {
    IsOneOf: "is_one_of",
    IsNotOneOf: "is_not_one_of",
} as const;
/**
 * The comparison to make on the country code `value`.
 */
export type FlowCountryConditionOperator = ClosedEnum<typeof FlowCountryConditionOperator>;

/**
 * Country conditions with a name, operator, and value.
 */
export type FlowCountryCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCountryConditionName;
    /**
     * The comparison to make on the country code `value`.
     */
    operator: FlowCountryConditionOperator;
    /**
     * Country two-letter ISO codes to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export const FlowCountryConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowCountryConditionName
> = z.nativeEnum(FlowCountryConditionName);

/** @internal */
export const FlowCountryConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowCountryConditionName
> = FlowCountryConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCountryConditionName$ {
    /** @deprecated use `FlowCountryConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowCountryConditionName$inboundSchema;
    /** @deprecated use `FlowCountryConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowCountryConditionName$outboundSchema;
}

/** @internal */
export const FlowCountryConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowCountryConditionOperator
> = z.nativeEnum(FlowCountryConditionOperator);

/** @internal */
export const FlowCountryConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowCountryConditionOperator
> = FlowCountryConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCountryConditionOperator$ {
    /** @deprecated use `FlowCountryConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowCountryConditionOperator$inboundSchema;
    /** @deprecated use `FlowCountryConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowCountryConditionOperator$outboundSchema;
}

/** @internal */
export const FlowCountryCondition$inboundSchema: z.ZodType<
    FlowCountryCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowCountryConditionName$inboundSchema,
    operator: FlowCountryConditionOperator$inboundSchema,
    value: z.array(z.string()),
});

/** @internal */
export type FlowCountryCondition$Outbound = {
    name: string;
    operator: string;
    value: Array<string>;
};

/** @internal */
export const FlowCountryCondition$outboundSchema: z.ZodType<
    FlowCountryCondition$Outbound,
    z.ZodTypeDef,
    FlowCountryCondition
> = z.object({
    name: FlowCountryConditionName$outboundSchema,
    operator: FlowCountryConditionOperator$outboundSchema,
    value: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCountryCondition$ {
    /** @deprecated use `FlowCountryCondition$inboundSchema` instead. */
    export const inboundSchema = FlowCountryCondition$inboundSchema;
    /** @deprecated use `FlowCountryCondition$outboundSchema` instead. */
    export const outboundSchema = FlowCountryCondition$outboundSchema;
    /** @deprecated use `FlowCountryCondition$Outbound` instead. */
    export type Outbound = FlowCountryCondition$Outbound;
}
