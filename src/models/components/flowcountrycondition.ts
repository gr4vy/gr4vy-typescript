/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCountryConditionName {
    Country = "country",
}

/**
 * The comparison to make on the country code `value`.
 */
export enum FlowCountryConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Country conditions with a name, operator, and value.
 */
export type FlowCountryCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCountryConditionName;
    /**
     * The comparison to make on the country code `value`.
     */
    operator: FlowCountryConditionOperator;
    /**
     * Country two-letter ISO codes to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export const FlowCountryConditionName$ = z.nativeEnum(FlowCountryConditionName);

/** @internal */
export const FlowCountryConditionOperator$ = z.nativeEnum(FlowCountryConditionOperator);

/** @internal */
export namespace FlowCountryCondition$ {
    export type Inbound = {
        name: FlowCountryConditionName;
        operator: FlowCountryConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowCountryCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowCountryConditionName$,
            operator: FlowCountryConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowCountryConditionName;
        operator: FlowCountryConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCountryCondition> = z
        .object({
            name: FlowCountryConditionName$,
            operator: FlowCountryConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
