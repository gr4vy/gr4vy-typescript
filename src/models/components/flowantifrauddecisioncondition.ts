/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowAntiFraudDecisionConditionName {
    AntiFraudDecision = "anti_fraud_decision",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowAntiFraudDecisionConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowAntiFraudDecisionConditionValue {
    Accept = "accept",
    Error = "error",
    Reject = "reject",
    Review = "review",
    Exception = "exception",
    Skipped = "skipped",
}

/**
 * Anti-fraud decision condition with a name, operator, and value.
 */
export type FlowAntiFraudDecisionCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAntiFraudDecisionConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowAntiFraudDecisionConditionOperator;
    /**
     * A list of anti-fraud decisions to match.
     */
    value: Array<FlowAntiFraudDecisionConditionValue>;
};

/** @internal */
export namespace FlowAntiFraudDecisionConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowAntiFraudDecisionConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowAntiFraudDecisionConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowAntiFraudDecisionConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowAntiFraudDecisionConditionValue$ {
    export const inboundSchema = z.nativeEnum(FlowAntiFraudDecisionConditionValue);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowAntiFraudDecisionCondition$ {
    export const inboundSchema: z.ZodType<FlowAntiFraudDecisionCondition, z.ZodTypeDef, unknown> =
        z.object({
            name: FlowAntiFraudDecisionConditionName$.inboundSchema,
            operator: FlowAntiFraudDecisionConditionOperator$.inboundSchema,
            value: z.array(FlowAntiFraudDecisionConditionValue$.inboundSchema),
        });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAntiFraudDecisionCondition> =
        z.object({
            name: FlowAntiFraudDecisionConditionName$.outboundSchema,
            operator: FlowAntiFraudDecisionConditionOperator$.outboundSchema,
            value: z.array(FlowAntiFraudDecisionConditionValue$.outboundSchema),
        });
}
