/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowAntiFraudDecisionConditionName {
    AntiFraudDecision = "anti_fraud_decision",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowAntiFraudDecisionConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowAntiFraudDecisionConditionValue {
    Accept = "accept",
    Error = "error",
    Reject = "reject",
    Review = "review",
    Exception = "exception",
    Skipped = "skipped",
}

/**
 * Anti-fraud decision condition with a name, operator, and value.
 */
export type FlowAntiFraudDecisionCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAntiFraudDecisionConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowAntiFraudDecisionConditionOperator;
    /**
     * A list of anti-fraud decisions to match.
     */
    value: Array<FlowAntiFraudDecisionConditionValue>;
};

/** @internal */
export const FlowAntiFraudDecisionConditionName$: z.ZodNativeEnum<
    typeof FlowAntiFraudDecisionConditionName
> = z.nativeEnum(FlowAntiFraudDecisionConditionName);

/** @internal */
export const FlowAntiFraudDecisionConditionOperator$: z.ZodNativeEnum<
    typeof FlowAntiFraudDecisionConditionOperator
> = z.nativeEnum(FlowAntiFraudDecisionConditionOperator);

/** @internal */
export const FlowAntiFraudDecisionConditionValue$: z.ZodNativeEnum<
    typeof FlowAntiFraudDecisionConditionValue
> = z.nativeEnum(FlowAntiFraudDecisionConditionValue);

/** @internal */
export namespace FlowAntiFraudDecisionCondition$ {
    export type Inbound = {
        name: FlowAntiFraudDecisionConditionName;
        operator: FlowAntiFraudDecisionConditionOperator;
        value: Array<FlowAntiFraudDecisionConditionValue>;
    };

    export const inboundSchema: z.ZodType<FlowAntiFraudDecisionCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowAntiFraudDecisionConditionName$,
            operator: FlowAntiFraudDecisionConditionOperator$,
            value: z.array(FlowAntiFraudDecisionConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowAntiFraudDecisionConditionName;
        operator: FlowAntiFraudDecisionConditionOperator;
        value: Array<FlowAntiFraudDecisionConditionValue>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAntiFraudDecisionCondition> =
        z
            .object({
                name: FlowAntiFraudDecisionConditionName$,
                operator: FlowAntiFraudDecisionConditionOperator$,
                value: z.array(FlowAntiFraudDecisionConditionValue$),
            })
            .transform((v) => {
                return {
                    name: v.name,
                    operator: v.operator,
                    value: v.value,
                };
            });
}
