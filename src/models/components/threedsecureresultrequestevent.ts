/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum ThreeDSecureResultRequestEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `three-d-secure-result-request`.
 */
export enum ThreeDSecureResultRequestEventName {
    ThreeDSecureResultRequest = "three-d-secure-result-request",
}

/**
 * 3DS post-authentication context.
 */
export type ThreeDSecureResultRequestEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The request body sent to the `url`.
     */
    request?: string | undefined;
    /**
     * The response body received from the `url`.
     */
    response?: string | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * The 3DS CAVV value parsed from the `response`.
     */
    cavv?: string | undefined;
    /**
     * The 3DS ECI value parsed from the `response`.
     */
    eci?: string | undefined;
    /**
     * The `transStatus` parsed from the post-authorization `response`.
     */
    authenticationResponse?: string | undefined;
    /**
     * The `transStatus` parsed from the authorization `response`.
     */
    directoryResponse?: string | undefined;
    /**
     * The `dsTransID` parsed from the `response`.
     */
    directoryTransactionId?: string | undefined;
    /**
     * The version of 3DS used.
     */
    version?: string | undefined;
};

/**
 * The result and raw data for a 3DS post-authorization call.
 */
export type ThreeDSecureResultRequestEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureResultRequestEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-result-request`.
     */
    name?: ThreeDSecureResultRequestEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS post-authentication context.
     */
    context?: ThreeDSecureResultRequestEventContext | undefined;
};

/** @internal */
export namespace ThreeDSecureResultRequestEventType$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureResultRequestEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureResultRequestEventName$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureResultRequestEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureResultRequestEventContext$ {
    export const inboundSchema: z.ZodType<
        ThreeDSecureResultRequestEventContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            url: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            response_status_code: z.number().int().optional(),
            cavv: z.string().optional(),
            eci: z.string().optional(),
            authentication_response: z.string().optional(),
            directory_response: z.string().optional(),
            directory_transaction_id: z.string().optional(),
            version: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                response_status_code: "responseStatusCode",
                authentication_response: "authenticationResponse",
                directory_response: "directoryResponse",
                directory_transaction_id: "directoryTransactionId",
            });
        });

    export type Outbound = {
        url?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
        cavv?: string | undefined;
        eci?: string | undefined;
        authentication_response?: string | undefined;
        directory_response?: string | undefined;
        directory_transaction_id?: string | undefined;
        version?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureResultRequestEventContext
    > = z
        .object({
            url: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            responseStatusCode: z.number().int().optional(),
            cavv: z.string().optional(),
            eci: z.string().optional(),
            authenticationResponse: z.string().optional(),
            directoryResponse: z.string().optional(),
            directoryTransactionId: z.string().optional(),
            version: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                responseStatusCode: "response_status_code",
                authenticationResponse: "authentication_response",
                directoryResponse: "directory_response",
                directoryTransactionId: "directory_transaction_id",
            });
        });
}

/** @internal */
export namespace ThreeDSecureResultRequestEvent$ {
    export const inboundSchema: z.ZodType<ThreeDSecureResultRequestEvent, z.ZodTypeDef, unknown> = z
        .object({
            type: ThreeDSecureResultRequestEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: ThreeDSecureResultRequestEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => ThreeDSecureResultRequestEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureResultRequestEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureResultRequestEvent> =
        z
            .object({
                type: ThreeDSecureResultRequestEventType$.outboundSchema.optional(),
                id: z.string().optional(),
                name: ThreeDSecureResultRequestEventName$.outboundSchema.optional(),
                createdAt: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
                context: z
                    .lazy(() => ThreeDSecureResultRequestEventContext$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    createdAt: "created_at",
                });
            });
}
