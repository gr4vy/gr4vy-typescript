/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReportExecutionContext = {
  /**
   * The reference timestamp for the report execution context.
   */
  referenceTimestamp: Date;
  /**
   * The reference timezone for the report execution context.
   */
  referenceTimezone: string;
};

/** @internal */
export const ReportExecutionContext$inboundSchema: z.ZodType<
  ReportExecutionContext,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference_timestamp: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  reference_timezone: z.string(),
}).transform((v) => {
  return remap$(v, {
    "reference_timestamp": "referenceTimestamp",
    "reference_timezone": "referenceTimezone",
  });
});

/** @internal */
export type ReportExecutionContext$Outbound = {
  reference_timestamp: string;
  reference_timezone: string;
};

/** @internal */
export const ReportExecutionContext$outboundSchema: z.ZodType<
  ReportExecutionContext$Outbound,
  z.ZodTypeDef,
  ReportExecutionContext
> = z.object({
  referenceTimestamp: z.date().transform(v => v.toISOString()),
  referenceTimezone: z.string(),
}).transform((v) => {
  return remap$(v, {
    referenceTimestamp: "reference_timestamp",
    referenceTimezone: "reference_timezone",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionContext$ {
  /** @deprecated use `ReportExecutionContext$inboundSchema` instead. */
  export const inboundSchema = ReportExecutionContext$inboundSchema;
  /** @deprecated use `ReportExecutionContext$outboundSchema` instead. */
  export const outboundSchema = ReportExecutionContext$outboundSchema;
  /** @deprecated use `ReportExecutionContext$Outbound` instead. */
  export type Outbound = ReportExecutionContext$Outbound;
}

export function reportExecutionContextToJSON(
  reportExecutionContext: ReportExecutionContext,
): string {
  return JSON.stringify(
    ReportExecutionContext$outboundSchema.parse(reportExecutionContext),
  );
}

export function reportExecutionContextFromJSON(
  jsonString: string,
): SafeParseResult<ReportExecutionContext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportExecutionContext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportExecutionContext' from JSON`,
  );
}
