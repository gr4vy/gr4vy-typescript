/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `shipping-details`.
 */
export const ShippingDetailType = {
    ShippingDetails: "shipping-details",
} as const;
/**
 * The type of this resource. Is always `shipping-details`.
 */
export type ShippingDetailType = ClosedEnum<typeof ShippingDetailType>;

/**
 * The physical shipping address associated to this buyer.
 */
export type ShippingDetailAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * Shipping detail for a buyer.
 */
export type ShippingDetail = {
    /**
     * The type of this resource. Is always `shipping-details`.
     */
    type?: ShippingDetailType | undefined;
    /**
     * The unique ID for a buyer's shipping detail.
     */
    id?: string | undefined;
    /**
     * The unique ID for a buyer.
     */
    buyerId?: string | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The physical shipping address associated to this buyer.
     */
    address?: ShippingDetailAddress | null | undefined;
};

/** @internal */
export const ShippingDetailType$inboundSchema: z.ZodNativeEnum<typeof ShippingDetailType> =
    z.nativeEnum(ShippingDetailType);

/** @internal */
export const ShippingDetailType$outboundSchema: z.ZodNativeEnum<typeof ShippingDetailType> =
    ShippingDetailType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShippingDetailType$ {
    /** @deprecated use `ShippingDetailType$inboundSchema` instead. */
    export const inboundSchema = ShippingDetailType$inboundSchema;
    /** @deprecated use `ShippingDetailType$outboundSchema` instead. */
    export const outboundSchema = ShippingDetailType$outboundSchema;
}

/** @internal */
export const ShippingDetailAddress$inboundSchema: z.ZodType<
    ShippingDetailAddress,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postal_code: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type ShippingDetailAddress$Outbound = {
    city?: string | null | undefined;
    country?: string | null | undefined;
    postal_code?: string | null | undefined;
    state?: string | null | undefined;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const ShippingDetailAddress$outboundSchema: z.ZodType<
    ShippingDetailAddress$Outbound,
    z.ZodTypeDef,
    ShippingDetailAddress
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postalCode: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShippingDetailAddress$ {
    /** @deprecated use `ShippingDetailAddress$inboundSchema` instead. */
    export const inboundSchema = ShippingDetailAddress$inboundSchema;
    /** @deprecated use `ShippingDetailAddress$outboundSchema` instead. */
    export const outboundSchema = ShippingDetailAddress$outboundSchema;
    /** @deprecated use `ShippingDetailAddress$Outbound` instead. */
    export type Outbound = ShippingDetailAddress$Outbound;
}

/** @internal */
export const ShippingDetail$inboundSchema: z.ZodType<ShippingDetail, z.ZodTypeDef, unknown> = z
    .object({
        type: ShippingDetailType$inboundSchema.optional(),
        id: z.string().optional(),
        buyer_id: z.string().optional(),
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => ShippingDetailAddress$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyer_id: "buyerId",
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
        });
    });

/** @internal */
export type ShippingDetail$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    buyer_id?: string | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: ShippingDetailAddress$Outbound | null | undefined;
};

/** @internal */
export const ShippingDetail$outboundSchema: z.ZodType<
    ShippingDetail$Outbound,
    z.ZodTypeDef,
    ShippingDetail
> = z
    .object({
        type: ShippingDetailType$outboundSchema.optional(),
        id: z.string().optional(),
        buyerId: z.string().optional(),
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => ShippingDetailAddress$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyerId: "buyer_id",
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShippingDetail$ {
    /** @deprecated use `ShippingDetail$inboundSchema` instead. */
    export const inboundSchema = ShippingDetail$inboundSchema;
    /** @deprecated use `ShippingDetail$outboundSchema` instead. */
    export const outboundSchema = ShippingDetail$outboundSchema;
    /** @deprecated use `ShippingDetail$Outbound` instead. */
    export type Outbound = ShippingDetail$Outbound;
}
