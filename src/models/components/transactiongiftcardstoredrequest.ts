/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Create a transaction with a stored gift card.
 */
export type TransactionGiftCardStoredRequest = {
    /**
     * The ID of the gift card to check a balance for.
     */
    id: string;
    /**
     * The monetary amount to charge for this gift card, in the smallest
     *
     * @remarks
     * currency unit for the given currency, for example `1299` cents to create
     * an authorization for `$12.99`.
     *
     * All gift card amounts are subtracted from the total transaction amount. The
     * remainder is charged to the provided `payment_method`.
     */
    amount: number;
};

/** @internal */
export namespace TransactionGiftCardStoredRequest$ {
    export type Inbound = {
        id: string;
        amount: number;
    };

    export const inboundSchema: z.ZodType<TransactionGiftCardStoredRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string(),
                amount: z.number().int(),
            })
            .transform((v) => {
                return {
                    id: v.id,
                    amount: v.amount,
                };
            });

    export type Outbound = {
        id: string;
        amount: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionGiftCardStoredRequest
    > = z
        .object({
            id: z.string(),
            amount: z.number().int(),
        })
        .transform((v) => {
            return {
                id: v.id,
                amount: v.amount,
            };
        });
}
