/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ForterAntiFraudOptionsCartItemBeneficiaryAddress = {
  /**
   * The country code of the beneficiary's address.
   */
  country: string;
  /**
   * First line of the beneficiary's address.
   */
  address1?: string | null | undefined;
  /**
   * Second line of the beneficiary's address.
   */
  address2?: string | null | undefined;
  /**
   * Zip or postal code of the beneficiary's address.
   */
  zip?: string | null | undefined;
  /**
   * State or region of the beneficiary's address.
   */
  region?: string | null | undefined;
  /**
   * Company name associated with the beneficiary's address.
   */
  company?: string | null | undefined;
  /**
   * City of the beneficiary's address.
   */
  city?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsCartItemBeneficiaryAddress$inboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemBeneficiaryAddress,
    z.ZodTypeDef,
    unknown
  > = z.object({
    country: z.string(),
    address1: z.nullable(z.string()).optional(),
    address2: z.nullable(z.string()).optional(),
    zip: z.nullable(z.string()).optional(),
    region: z.nullable(z.string()).optional(),
    company: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
  });

/** @internal */
export type ForterAntiFraudOptionsCartItemBeneficiaryAddress$Outbound = {
  country: string;
  address1?: string | null | undefined;
  address2?: string | null | undefined;
  zip?: string | null | undefined;
  region?: string | null | undefined;
  company?: string | null | undefined;
  city?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsCartItemBeneficiaryAddress$outboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemBeneficiaryAddress$Outbound,
    z.ZodTypeDef,
    ForterAntiFraudOptionsCartItemBeneficiaryAddress
  > = z.object({
    country: z.string(),
    address1: z.nullable(z.string()).optional(),
    address2: z.nullable(z.string()).optional(),
    zip: z.nullable(z.string()).optional(),
    region: z.nullable(z.string()).optional(),
    company: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterAntiFraudOptionsCartItemBeneficiaryAddress$ {
  /** @deprecated use `ForterAntiFraudOptionsCartItemBeneficiaryAddress$inboundSchema` instead. */
  export const inboundSchema =
    ForterAntiFraudOptionsCartItemBeneficiaryAddress$inboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemBeneficiaryAddress$outboundSchema` instead. */
  export const outboundSchema =
    ForterAntiFraudOptionsCartItemBeneficiaryAddress$outboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemBeneficiaryAddress$Outbound` instead. */
  export type Outbound =
    ForterAntiFraudOptionsCartItemBeneficiaryAddress$Outbound;
}

export function forterAntiFraudOptionsCartItemBeneficiaryAddressToJSON(
  forterAntiFraudOptionsCartItemBeneficiaryAddress:
    ForterAntiFraudOptionsCartItemBeneficiaryAddress,
): string {
  return JSON.stringify(
    ForterAntiFraudOptionsCartItemBeneficiaryAddress$outboundSchema.parse(
      forterAntiFraudOptionsCartItemBeneficiaryAddress,
    ),
  );
}

export function forterAntiFraudOptionsCartItemBeneficiaryAddressFromJSON(
  jsonString: string,
): SafeParseResult<
  ForterAntiFraudOptionsCartItemBeneficiaryAddress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ForterAntiFraudOptionsCartItemBeneficiaryAddress$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ForterAntiFraudOptionsCartItemBeneficiaryAddress' from JSON`,
  );
}
