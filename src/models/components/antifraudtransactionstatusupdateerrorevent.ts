/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudTransactionStatusUpdateErrorEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudTransactionStatusUpdateErrorEventType = ClosedEnum<
    typeof AntiFraudTransactionStatusUpdateErrorEventType
>;

/**
 * The name of this resource. Is always `anti-fraud-transaction-status-update-error`.
 */
export const AntiFraudTransactionStatusUpdateErrorEventName = {
    AntiFraudTransactionStatusUpdateError: "anti-fraud-transaction-status-update-error",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-transaction-status-update-error`.
 */
export type AntiFraudTransactionStatusUpdateErrorEventName = ClosedEnum<
    typeof AntiFraudTransactionStatusUpdateErrorEventName
>;

/**
 * Additional context for this event.
 */
export type AntiFraudTransactionStatusUpdateErrorEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The reason we could not get the anti-fraud decision.
     */
    reason?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | null | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | null | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | null | undefined;
};

/**
 * This event logs the reason why we were unable to update an anti-fraud transaction.
 */
export type AntiFraudTransactionStatusUpdateErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudTransactionStatusUpdateErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-transaction-status-update-error`.
     */
    name?: AntiFraudTransactionStatusUpdateErrorEventName | undefined;
    /**
     * The date and time when this transaction event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudTransactionStatusUpdateErrorEventContext | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateErrorEventType
> = z.nativeEnum(AntiFraudTransactionStatusUpdateErrorEventType);

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateErrorEventType
> = AntiFraudTransactionStatusUpdateErrorEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateErrorEventType$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateErrorEventType$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateErrorEventType$outboundSchema;
}

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateErrorEventName
> = z.nativeEnum(AntiFraudTransactionStatusUpdateErrorEventName);

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateErrorEventName
> = AntiFraudTransactionStatusUpdateErrorEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateErrorEventName$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateErrorEventName$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateErrorEventName$outboundSchema;
}

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEventContext$inboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateErrorEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        reason: z.string().optional(),
        request: z.nullable(z.string()).optional(),
        response: z.nullable(z.string()).optional(),
        response_status_code: z.nullable(z.number()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type AntiFraudTransactionStatusUpdateErrorEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    reason?: string | undefined;
    request?: string | null | undefined;
    response?: string | null | undefined;
    response_status_code?: number | null | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEventContext$outboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateErrorEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudTransactionStatusUpdateErrorEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        reason: z.string().optional(),
        request: z.nullable(z.string()).optional(),
        response: z.nullable(z.string()).optional(),
        responseStatusCode: z.nullable(z.number()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateErrorEventContext$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateErrorEventContext$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateErrorEventContext$outboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEventContext$Outbound` instead. */
    export type Outbound = AntiFraudTransactionStatusUpdateErrorEventContext$Outbound;
}

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEvent$inboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateErrorEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudTransactionStatusUpdateErrorEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudTransactionStatusUpdateErrorEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => AntiFraudTransactionStatusUpdateErrorEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudTransactionStatusUpdateErrorEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudTransactionStatusUpdateErrorEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateErrorEvent$outboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateErrorEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudTransactionStatusUpdateErrorEvent
> = z
    .object({
        type: AntiFraudTransactionStatusUpdateErrorEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudTransactionStatusUpdateErrorEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => AntiFraudTransactionStatusUpdateErrorEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateErrorEvent$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateErrorEvent$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateErrorEvent$outboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateErrorEvent$Outbound` instead. */
    export type Outbound = AntiFraudTransactionStatusUpdateErrorEvent$Outbound;
}
