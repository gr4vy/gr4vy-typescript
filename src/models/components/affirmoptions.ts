/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AffirmItineraryOptions,
  AffirmItineraryOptions$inboundSchema,
  AffirmItineraryOptions$Outbound,
  AffirmItineraryOptions$outboundSchema,
} from "./affirmitineraryoptions.js";

export type AffirmOptions = {
  /**
   * Passes additional discounts to the Affirm widget.
   */
  discounts?: { [k: string]: { [k: string]: any } } | null | undefined;
  /**
   * Passes itinerary data to the Affirm API.
   */
  itinerary?: AffirmItineraryOptions | null | undefined;
};

/** @internal */
export const AffirmOptions$inboundSchema: z.ZodType<
  AffirmOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  discounts: z.nullable(z.record(z.record(z.any()))).optional(),
  itinerary: z.nullable(AffirmItineraryOptions$inboundSchema).optional(),
});

/** @internal */
export type AffirmOptions$Outbound = {
  discounts?: { [k: string]: { [k: string]: any } } | null | undefined;
  itinerary?: AffirmItineraryOptions$Outbound | null | undefined;
};

/** @internal */
export const AffirmOptions$outboundSchema: z.ZodType<
  AffirmOptions$Outbound,
  z.ZodTypeDef,
  AffirmOptions
> = z.object({
  discounts: z.nullable(z.record(z.record(z.any()))).optional(),
  itinerary: z.nullable(AffirmItineraryOptions$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AffirmOptions$ {
  /** @deprecated use `AffirmOptions$inboundSchema` instead. */
  export const inboundSchema = AffirmOptions$inboundSchema;
  /** @deprecated use `AffirmOptions$outboundSchema` instead. */
  export const outboundSchema = AffirmOptions$outboundSchema;
  /** @deprecated use `AffirmOptions$Outbound` instead. */
  export type Outbound = AffirmOptions$Outbound;
}

export function affirmOptionsToJSON(affirmOptions: AffirmOptions): string {
  return JSON.stringify(AffirmOptions$outboundSchema.parse(affirmOptions));
}

export function affirmOptionsFromJSON(
  jsonString: string,
): SafeParseResult<AffirmOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AffirmOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AffirmOptions' from JSON`,
  );
}
