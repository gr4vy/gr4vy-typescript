/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThreeDSecureV2 = {
  version: string;
  authenticationResponse?: string | null | undefined;
  directoryResponse?: string | null | undefined;
  directoryTransactionId?: string | null | undefined;
  transactionReason?: string | null | undefined;
  cavv?: string | null | undefined;
  eci?: string | null | undefined;
  cardholderInfo?: string | null | undefined;
};

/** @internal */
export const ThreeDSecureV2$inboundSchema: z.ZodType<
  ThreeDSecureV2,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  authentication_response: z.nullable(z.string()).optional(),
  directory_response: z.nullable(z.string()).optional(),
  directory_transaction_id: z.nullable(z.string()).optional(),
  transaction_reason: z.nullable(z.string()).optional(),
  cavv: z.nullable(z.string()).optional(),
  eci: z.nullable(z.string()).optional(),
  cardholder_info: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "authentication_response": "authenticationResponse",
    "directory_response": "directoryResponse",
    "directory_transaction_id": "directoryTransactionId",
    "transaction_reason": "transactionReason",
    "cardholder_info": "cardholderInfo",
  });
});

/** @internal */
export type ThreeDSecureV2$Outbound = {
  version: string;
  authentication_response?: string | null | undefined;
  directory_response?: string | null | undefined;
  directory_transaction_id?: string | null | undefined;
  transaction_reason?: string | null | undefined;
  cavv?: string | null | undefined;
  eci?: string | null | undefined;
  cardholder_info?: string | null | undefined;
};

/** @internal */
export const ThreeDSecureV2$outboundSchema: z.ZodType<
  ThreeDSecureV2$Outbound,
  z.ZodTypeDef,
  ThreeDSecureV2
> = z.object({
  version: z.string(),
  authenticationResponse: z.nullable(z.string()).optional(),
  directoryResponse: z.nullable(z.string()).optional(),
  directoryTransactionId: z.nullable(z.string()).optional(),
  transactionReason: z.nullable(z.string()).optional(),
  cavv: z.nullable(z.string()).optional(),
  eci: z.nullable(z.string()).optional(),
  cardholderInfo: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    authenticationResponse: "authentication_response",
    directoryResponse: "directory_response",
    directoryTransactionId: "directory_transaction_id",
    transactionReason: "transaction_reason",
    cardholderInfo: "cardholder_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureV2$ {
  /** @deprecated use `ThreeDSecureV2$inboundSchema` instead. */
  export const inboundSchema = ThreeDSecureV2$inboundSchema;
  /** @deprecated use `ThreeDSecureV2$outboundSchema` instead. */
  export const outboundSchema = ThreeDSecureV2$outboundSchema;
  /** @deprecated use `ThreeDSecureV2$Outbound` instead. */
  export type Outbound = ThreeDSecureV2$Outbound;
}

export function threeDSecureV2ToJSON(threeDSecureV2: ThreeDSecureV2): string {
  return JSON.stringify(ThreeDSecureV2$outboundSchema.parse(threeDSecureV2));
}

export function threeDSecureV2FromJSON(
  jsonString: string,
): SafeParseResult<ThreeDSecureV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreeDSecureV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreeDSecureV2' from JSON`,
  );
}
