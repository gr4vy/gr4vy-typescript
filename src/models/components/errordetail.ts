/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The location where the error caused an issue.
 */
export enum Location {
    Query = "query",
    Body = "body",
    Path = "path",
    Header = "header",
}

/**
 * Additional detail about the part of a request body that caused an issue.
 */
export type ErrorDetail = {
    /**
     * The location where the error caused an issue.
     */
    location?: Location | undefined;
    /**
     * A unique identifier for the type of error that occurred.
     */
    type?: string | undefined;
    /**
     * The exact item for which the validation did not succeed. This is a JSON
     *
     * @remarks
     * pointer for request bodies, while for query, path, and header parameters
     * it is the name of the parameter.
     */
    pointer?: string | undefined;
    /**
     * A human readable message for this error detail.
     */
    message?: string | undefined;
};

/** @internal */
export const Location$ = z.nativeEnum(Location);

/** @internal */
export namespace ErrorDetail$ {
    export type Inbound = {
        location?: Location | undefined;
        type?: string | undefined;
        pointer?: string | undefined;
        message?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ErrorDetail, z.ZodTypeDef, Inbound> = z
        .object({
            location: Location$.optional(),
            type: z.string().optional(),
            pointer: z.string().optional(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.location === undefined ? null : { location: v.location }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.pointer === undefined ? null : { pointer: v.pointer }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });

    export type Outbound = {
        location?: Location | undefined;
        type?: string | undefined;
        pointer?: string | undefined;
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorDetail> = z
        .object({
            location: Location$.optional(),
            type: z.string().optional(),
            pointer: z.string().optional(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.location === undefined ? null : { location: v.location }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.pointer === undefined ? null : { pointer: v.pointer }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });
}
