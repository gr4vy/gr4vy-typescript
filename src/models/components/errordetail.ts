/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The location where the error caused an issue.
 */
export const Location = {
    Query: "query",
    Body: "body",
    Path: "path",
    Header: "header",
} as const;
/**
 * The location where the error caused an issue.
 */
export type Location = ClosedEnum<typeof Location>;

/**
 * Additional detail about the part of a request body that caused an issue.
 */
export type ErrorDetail = {
    /**
     * The location where the error caused an issue.
     */
    location?: Location | undefined;
    /**
     * A unique identifier for the type of error that occurred.
     */
    type?: string | undefined;
    /**
     * The exact item for which the validation did not succeed. This is a JSON
     *
     * @remarks
     * pointer for request bodies, while for query, path, and header parameters
     * it is the name of the parameter.
     */
    pointer?: string | undefined;
    /**
     * A human readable message for this error detail.
     */
    message?: string | undefined;
};

/** @internal */
export const Location$inboundSchema: z.ZodNativeEnum<typeof Location> = z.nativeEnum(Location);

/** @internal */
export const Location$outboundSchema: z.ZodNativeEnum<typeof Location> = Location$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
    /** @deprecated use `Location$inboundSchema` instead. */
    export const inboundSchema = Location$inboundSchema;
    /** @deprecated use `Location$outboundSchema` instead. */
    export const outboundSchema = Location$outboundSchema;
}

/** @internal */
export const ErrorDetail$inboundSchema: z.ZodType<ErrorDetail, z.ZodTypeDef, unknown> = z.object({
    location: Location$inboundSchema.optional(),
    type: z.string().optional(),
    pointer: z.string().optional(),
    message: z.string().optional(),
});

/** @internal */
export type ErrorDetail$Outbound = {
    location?: string | undefined;
    type?: string | undefined;
    pointer?: string | undefined;
    message?: string | undefined;
};

/** @internal */
export const ErrorDetail$outboundSchema: z.ZodType<
    ErrorDetail$Outbound,
    z.ZodTypeDef,
    ErrorDetail
> = z.object({
    location: Location$outboundSchema.optional(),
    type: z.string().optional(),
    pointer: z.string().optional(),
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDetail$ {
    /** @deprecated use `ErrorDetail$inboundSchema` instead. */
    export const inboundSchema = ErrorDetail$inboundSchema;
    /** @deprecated use `ErrorDetail$outboundSchema` instead. */
    export const outboundSchema = ErrorDetail$outboundSchema;
    /** @deprecated use `ErrorDetail$Outbound` instead. */
    export type Outbound = ErrorDetail$Outbound;
}
