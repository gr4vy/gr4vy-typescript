/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ErrorLocation,
  ErrorLocation$inboundSchema,
  ErrorLocation$outboundSchema,
} from "./errorlocation.js";

export type ErrorDetail = {
  location: ErrorLocation;
  /**
   * A JSON pointer for the particular property that caused the error.
   */
  pointer: string;
  /**
   * A human-readdable explanation of the error.
   */
  message: string;
  /**
   * The type of error that was raised for this property.
   */
  type: string;
};

/** @internal */
export const ErrorDetail$inboundSchema: z.ZodType<
  ErrorDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: ErrorLocation$inboundSchema,
  pointer: z.string(),
  message: z.string(),
  type: z.string(),
});

/** @internal */
export type ErrorDetail$Outbound = {
  location: string;
  pointer: string;
  message: string;
  type: string;
};

/** @internal */
export const ErrorDetail$outboundSchema: z.ZodType<
  ErrorDetail$Outbound,
  z.ZodTypeDef,
  ErrorDetail
> = z.object({
  location: ErrorLocation$outboundSchema,
  pointer: z.string(),
  message: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDetail$ {
  /** @deprecated use `ErrorDetail$inboundSchema` instead. */
  export const inboundSchema = ErrorDetail$inboundSchema;
  /** @deprecated use `ErrorDetail$outboundSchema` instead. */
  export const outboundSchema = ErrorDetail$outboundSchema;
  /** @deprecated use `ErrorDetail$Outbound` instead. */
  export type Outbound = ErrorDetail$Outbound;
}

export function errorDetailToJSON(errorDetail: ErrorDetail): string {
  return JSON.stringify(ErrorDetail$outboundSchema.parse(errorDetail));
}

export function errorDetailFromJSON(
  jsonString: string,
): SafeParseResult<ErrorDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorDetail' from JSON`,
  );
}
