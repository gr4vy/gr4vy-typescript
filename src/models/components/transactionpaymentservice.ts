/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Method,
  Method$inboundSchema,
  Method$outboundSchema,
} from "./method.js";

export type TransactionPaymentService = {
  /**
   * Always `payment-service`.
   */
  type?: "payment-service" | undefined;
  /**
   * The ID for the payment-service.
   */
  id: string;
  /**
   * The definition ID of the service used to process this payment.
   */
  paymentServiceDefinitionId: string;
  method: Method;
  /**
   * The display name for the payment service.
   */
  displayName: string;
};

/** @internal */
export const TransactionPaymentService$inboundSchema: z.ZodType<
  TransactionPaymentService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("payment-service").default("payment-service"),
  id: z.string(),
  payment_service_definition_id: z.string(),
  method: Method$inboundSchema,
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_service_definition_id": "paymentServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type TransactionPaymentService$Outbound = {
  type: "payment-service";
  id: string;
  payment_service_definition_id: string;
  method: string;
  display_name: string;
};

/** @internal */
export const TransactionPaymentService$outboundSchema: z.ZodType<
  TransactionPaymentService$Outbound,
  z.ZodTypeDef,
  TransactionPaymentService
> = z.object({
  type: z.literal("payment-service").default("payment-service" as const),
  id: z.string(),
  paymentServiceDefinitionId: z.string(),
  method: Method$outboundSchema,
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentServiceDefinitionId: "payment_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentService$ {
  /** @deprecated use `TransactionPaymentService$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentService$inboundSchema;
  /** @deprecated use `TransactionPaymentService$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentService$outboundSchema;
  /** @deprecated use `TransactionPaymentService$Outbound` instead. */
  export type Outbound = TransactionPaymentService$Outbound;
}

export function transactionPaymentServiceToJSON(
  transactionPaymentService: TransactionPaymentService,
): string {
  return JSON.stringify(
    TransactionPaymentService$outboundSchema.parse(transactionPaymentService),
  );
}

export function transactionPaymentServiceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionPaymentService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionPaymentService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionPaymentService' from JSON`,
  );
}
