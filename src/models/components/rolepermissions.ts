/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The permissions associated with a role.
 */
export type RolePermissions = {
    /**
     * The list of permissions to allow for a role.
     */
    allow?: Array<string> | undefined;
};

/** @internal */
export namespace RolePermissions$ {
    export type Inbound = {
        allow?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<RolePermissions, z.ZodTypeDef, Inbound> = z
        .object({
            allow: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allow === undefined ? null : { allow: v.allow }),
            };
        });

    export type Outbound = {
        allow?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RolePermissions> = z
        .object({
            allow: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.allow === undefined ? null : { allow: v.allow }),
            };
        });
}
