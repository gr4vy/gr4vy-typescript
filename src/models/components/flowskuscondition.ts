/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowSKUsConditionName {
    Skus = "skus",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowSKUsConditionOperator {
    IncludesAll = "includes_all",
    IncludesAtLeastOne = "includes_at_least_one",
    IncludesNone = "includes_none",
}

/**
 * Cart items' SKUs conditions with a name, operator, and value.
 */
export type FlowSKUsCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowSKUsConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowSKUsConditionOperator;
    /**
     * Cart items' SKU values to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export namespace FlowSKUsConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowSKUsConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowSKUsConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowSKUsConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowSKUsCondition$ {
    export const inboundSchema: z.ZodType<FlowSKUsCondition, z.ZodTypeDef, unknown> = z.object({
        name: FlowSKUsConditionName$.inboundSchema,
        operator: FlowSKUsConditionOperator$.inboundSchema,
        value: z.array(z.string()),
    });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowSKUsCondition> = z.object({
        name: FlowSKUsConditionName$.outboundSchema,
        operator: FlowSKUsConditionOperator$.outboundSchema,
        value: z.array(z.string()),
    });
}
