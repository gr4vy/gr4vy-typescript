/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowProductTypesConditionName {
    ProductTypes = "product_types",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowProductTypesConditionOperator {
    IncludesAll = "includes_all",
    IncludesAtLeastOne = "includes_at_least_one",
    IncludesNone = "includes_none",
}

export enum FlowProductTypesConditionValue {
    Physical = "physical",
    Discount = "discount",
    ShippingFee = "shipping_fee",
    SalesTax = "sales_tax",
    Digital = "digital",
    GiftCard = "gift_card",
    StoreCredit = "store_credit",
    Surcharge = "surcharge",
}

/**
 * Cart items' product types conditions with a name, operator, and value.
 */
export type FlowProductTypesCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowProductTypesConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowProductTypesConditionOperator;
    /**
     * Cart items' product types to compare the transaction to.
     */
    value: Array<FlowProductTypesConditionValue>;
};

/** @internal */
export const FlowProductTypesConditionName$ = z.nativeEnum(FlowProductTypesConditionName);

/** @internal */
export const FlowProductTypesConditionOperator$ = z.nativeEnum(FlowProductTypesConditionOperator);

/** @internal */
export const FlowProductTypesConditionValue$ = z.nativeEnum(FlowProductTypesConditionValue);

/** @internal */
export namespace FlowProductTypesCondition$ {
    export type Inbound = {
        name: FlowProductTypesConditionName;
        operator: FlowProductTypesConditionOperator;
        value: Array<FlowProductTypesConditionValue>;
    };

    export const inboundSchema: z.ZodType<FlowProductTypesCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowProductTypesConditionName$,
            operator: FlowProductTypesConditionOperator$,
            value: z.array(FlowProductTypesConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowProductTypesConditionName;
        operator: FlowProductTypesConditionOperator;
        value: Array<FlowProductTypesConditionValue>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowProductTypesCondition> = z
        .object({
            name: FlowProductTypesConditionName$,
            operator: FlowProductTypesConditionOperator$,
            value: z.array(FlowProductTypesConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
