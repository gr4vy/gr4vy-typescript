/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowProductTypesConditionName = {
    ProductTypes: "product_types",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowProductTypesConditionName = ClosedEnum<typeof FlowProductTypesConditionName>;

/**
 * The comparison to make on the `value`.
 */
export const FlowProductTypesConditionOperator = {
    IncludesAll: "includes_all",
    IncludesAtLeastOne: "includes_at_least_one",
    IncludesNone: "includes_none",
} as const;
/**
 * The comparison to make on the `value`.
 */
export type FlowProductTypesConditionOperator = ClosedEnum<
    typeof FlowProductTypesConditionOperator
>;

export const FlowProductTypesConditionValue = {
    Physical: "physical",
    Discount: "discount",
    ShippingFee: "shipping_fee",
    SalesTax: "sales_tax",
    Digital: "digital",
    GiftCard: "gift_card",
    StoreCredit: "store_credit",
    Surcharge: "surcharge",
} as const;
export type FlowProductTypesConditionValue = ClosedEnum<typeof FlowProductTypesConditionValue>;

/**
 * Cart items' product types conditions with a name, operator, and value.
 */
export type FlowProductTypesCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowProductTypesConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowProductTypesConditionOperator;
    /**
     * Cart items' product types to compare the transaction to.
     */
    value: Array<FlowProductTypesConditionValue>;
};

/** @internal */
export const FlowProductTypesConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowProductTypesConditionName
> = z.nativeEnum(FlowProductTypesConditionName);

/** @internal */
export const FlowProductTypesConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowProductTypesConditionName
> = FlowProductTypesConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowProductTypesConditionName$ {
    /** @deprecated use `FlowProductTypesConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowProductTypesConditionName$inboundSchema;
    /** @deprecated use `FlowProductTypesConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowProductTypesConditionName$outboundSchema;
}

/** @internal */
export const FlowProductTypesConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowProductTypesConditionOperator
> = z.nativeEnum(FlowProductTypesConditionOperator);

/** @internal */
export const FlowProductTypesConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowProductTypesConditionOperator
> = FlowProductTypesConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowProductTypesConditionOperator$ {
    /** @deprecated use `FlowProductTypesConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowProductTypesConditionOperator$inboundSchema;
    /** @deprecated use `FlowProductTypesConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowProductTypesConditionOperator$outboundSchema;
}

/** @internal */
export const FlowProductTypesConditionValue$inboundSchema: z.ZodNativeEnum<
    typeof FlowProductTypesConditionValue
> = z.nativeEnum(FlowProductTypesConditionValue);

/** @internal */
export const FlowProductTypesConditionValue$outboundSchema: z.ZodNativeEnum<
    typeof FlowProductTypesConditionValue
> = FlowProductTypesConditionValue$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowProductTypesConditionValue$ {
    /** @deprecated use `FlowProductTypesConditionValue$inboundSchema` instead. */
    export const inboundSchema = FlowProductTypesConditionValue$inboundSchema;
    /** @deprecated use `FlowProductTypesConditionValue$outboundSchema` instead. */
    export const outboundSchema = FlowProductTypesConditionValue$outboundSchema;
}

/** @internal */
export const FlowProductTypesCondition$inboundSchema: z.ZodType<
    FlowProductTypesCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowProductTypesConditionName$inboundSchema,
    operator: FlowProductTypesConditionOperator$inboundSchema,
    value: z.array(FlowProductTypesConditionValue$inboundSchema),
});

/** @internal */
export type FlowProductTypesCondition$Outbound = {
    name: string;
    operator: string;
    value: Array<string>;
};

/** @internal */
export const FlowProductTypesCondition$outboundSchema: z.ZodType<
    FlowProductTypesCondition$Outbound,
    z.ZodTypeDef,
    FlowProductTypesCondition
> = z.object({
    name: FlowProductTypesConditionName$outboundSchema,
    operator: FlowProductTypesConditionOperator$outboundSchema,
    value: z.array(FlowProductTypesConditionValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowProductTypesCondition$ {
    /** @deprecated use `FlowProductTypesCondition$inboundSchema` instead. */
    export const inboundSchema = FlowProductTypesCondition$inboundSchema;
    /** @deprecated use `FlowProductTypesCondition$outboundSchema` instead. */
    export const outboundSchema = FlowProductTypesCondition$outboundSchema;
    /** @deprecated use `FlowProductTypesCondition$Outbound` instead. */
    export type Outbound = FlowProductTypesCondition$Outbound;
}
