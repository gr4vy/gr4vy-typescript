/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StripeConnectOptions,
  StripeConnectOptions$inboundSchema,
  StripeConnectOptions$Outbound,
  StripeConnectOptions$outboundSchema,
} from "./stripeconnectoptions.js";

export type StripeOptions = {
  /**
   * Passes the `error_on_requires_action` option to the Stripe API. Set to true to fail the payment attempt if it transitions into requires_action. Use this parameter for simpler integrations that don't handle customer actions, such as saving cards without authentication.
   */
  errorOnRequiresAction?: boolean | null | undefined;
  /**
   * Stripe options to support Stripe Connect
   */
  stripeConnect?: StripeConnectOptions | null | undefined;
};

/** @internal */
export const StripeOptions$inboundSchema: z.ZodType<
  StripeOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  error_on_requires_action: z.nullable(z.boolean()).optional(),
  stripe_connect: z.nullable(StripeConnectOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "error_on_requires_action": "errorOnRequiresAction",
    "stripe_connect": "stripeConnect",
  });
});

/** @internal */
export type StripeOptions$Outbound = {
  error_on_requires_action?: boolean | null | undefined;
  stripe_connect?: StripeConnectOptions$Outbound | null | undefined;
};

/** @internal */
export const StripeOptions$outboundSchema: z.ZodType<
  StripeOptions$Outbound,
  z.ZodTypeDef,
  StripeOptions
> = z.object({
  errorOnRequiresAction: z.nullable(z.boolean()).optional(),
  stripeConnect: z.nullable(StripeConnectOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    errorOnRequiresAction: "error_on_requires_action",
    stripeConnect: "stripe_connect",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StripeOptions$ {
  /** @deprecated use `StripeOptions$inboundSchema` instead. */
  export const inboundSchema = StripeOptions$inboundSchema;
  /** @deprecated use `StripeOptions$outboundSchema` instead. */
  export const outboundSchema = StripeOptions$outboundSchema;
  /** @deprecated use `StripeOptions$Outbound` instead. */
  export type Outbound = StripeOptions$Outbound;
}

export function stripeOptionsToJSON(stripeOptions: StripeOptions): string {
  return JSON.stringify(StripeOptions$outboundSchema.parse(stripeOptions));
}

export function stripeOptionsFromJSON(
  jsonString: string,
): SafeParseResult<StripeOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StripeOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StripeOptions' from JSON`,
  );
}
