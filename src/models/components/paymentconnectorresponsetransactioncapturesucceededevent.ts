/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-capture-succeeded`.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventName = {
    PaymentConnectorResponseTransactionCaptureSucceeded:
        "payment-connector-response-transaction-capture-succeeded",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-capture-succeeded`.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventName
>;

/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `capture_succeeded`.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventStatus = {
    CaptureSucceeded: "capture_succeeded",
} as const;
/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `capture_succeeded`.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventStatus = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventStatus
>;

/**
 * The type of instrument used for this transaction.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType = {
    Pan: "pan",
    CardToken: "card_token",
    Redirect: "redirect",
    RedirectToken: "redirect_token",
    Googlepay: "googlepay",
    Applepay: "applepay",
    NetworkToken: "network_token",
} as const;
/**
 * The type of instrument used for this transaction.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType
>;

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    PartialMatchAddress: "partial_match_address",
    PartialMatchPostcode: "partial_match_postcode",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode
>;

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode
>;

/**
 * The card scheme sent to the connector.
 */
export const PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The card scheme sent to the connector.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme =
    ClosedEnum<typeof PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme>;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The new status code for the transaction. This is always
     *
     * @remarks
     * set to `capture_succeeded`.
     */
    status?: PaymentConnectorResponseTransactionCaptureSucceededEventStatus | undefined;
    /**
     * The type of instrument used for this transaction.
     */
    instrumentType?:
        | PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType
        | null
        | undefined;
    /**
     * This will always be `null` because the transaction succeeded.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    retryRule?: string | null | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a succeeded capture
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionCaptureSucceededEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionCaptureSucceededEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-capture-succeeded`.
     */
    name?: PaymentConnectorResponseTransactionCaptureSucceededEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionCaptureSucceededEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventType);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventType
> = PaymentConnectorResponseTransactionCaptureSucceededEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventName);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventName
> = PaymentConnectorResponseTransactionCaptureSucceededEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventName$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventStatus$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventStatus
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventStatus);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventStatus$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventStatus
> = PaymentConnectorResponseTransactionCaptureSucceededEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventStatus$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventStatus$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventStatus$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventStatus$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventStatus$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType
> = PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode
> = PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode
> = PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme
> = PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureSucceededEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
        payment_service_transaction_id: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionCaptureSucceededEventStatus$inboundSchema.optional(),
        instrument_type: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$inboundSchema
            )
            .optional(),
        retry_rule: z.nullable(z.string()).optional(),
        raw_response_code: z.nullable(z.string()).optional(),
        raw_response_description: z.nullable(z.string()).optional(),
        avs_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$inboundSchema
            )
            .optional(),
        cvv_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$inboundSchema
            )
            .optional(),
        payment_method_scheme: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            instrument_type: "instrumentType",
            retry_rule: "retryRule",
            raw_response_code: "rawResponseCode",
            raw_response_description: "rawResponseDescription",
            avs_response_code: "avsResponseCode",
            cvv_response_code: "cvvResponseCode",
            payment_method_scheme: "paymentMethodScheme",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionCaptureSucceededEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
    payment_service_transaction_id?: string | null | undefined;
    status?: string | undefined;
    instrument_type?: string | null | undefined;
    retry_rule?: string | null | undefined;
    raw_response_code?: string | null | undefined;
    raw_response_description?: string | null | undefined;
    avs_response_code?: string | null | undefined;
    cvv_response_code?: string | null | undefined;
    payment_method_scheme?: string | null | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureSucceededEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionCaptureSucceededEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
        paymentServiceTransactionId: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionCaptureSucceededEventStatus$outboundSchema.optional(),
        instrumentType: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventInstrumentType$outboundSchema
            )
            .optional(),
        retryRule: z.nullable(z.string()).optional(),
        rawResponseCode: z.nullable(z.string()).optional(),
        rawResponseDescription: z.nullable(z.string()).optional(),
        avsResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventAvsResponseCode$outboundSchema
            )
            .optional(),
        cvvResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventCvvResponseCode$outboundSchema
            )
            .optional(),
        paymentMethodScheme: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureSucceededEventPaymentMethodScheme$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            instrumentType: "instrument_type",
            retryRule: "retry_rule",
            rawResponseCode: "raw_response_code",
            rawResponseDescription: "raw_response_description",
            avsResponseCode: "avs_response_code",
            cvvResponseCode: "cvv_response_code",
            paymentMethodScheme: "payment_method_scheme",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEventContext$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionCaptureSucceededEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureSucceededEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionCaptureSucceededEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionCaptureSucceededEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(
                () => PaymentConnectorResponseTransactionCaptureSucceededEventContext$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionCaptureSucceededEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: PaymentConnectorResponseTransactionCaptureSucceededEventContext$Outbound | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionCaptureSucceededEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureSucceededEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionCaptureSucceededEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionCaptureSucceededEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionCaptureSucceededEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(
                () => PaymentConnectorResponseTransactionCaptureSucceededEventContext$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureSucceededEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEvent$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEvent$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureSucceededEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureSucceededEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionCaptureSucceededEvent$Outbound;
}
