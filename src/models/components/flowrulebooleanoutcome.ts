/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of action outcome for the given rule.
 */
export enum FlowRuleBooleanOutcomeType {
    Boolean = "boolean",
}

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a boolean.
 */
export type FlowRuleBooleanOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleBooleanOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: boolean;
};

/** @internal */
export const FlowRuleBooleanOutcomeType$: z.ZodNativeEnum<typeof FlowRuleBooleanOutcomeType> =
    z.nativeEnum(FlowRuleBooleanOutcomeType);

/** @internal */
export namespace FlowRuleBooleanOutcome$ {
    export type Inbound = {
        type: FlowRuleBooleanOutcomeType;
        result: boolean;
    };

    export const inboundSchema: z.ZodType<FlowRuleBooleanOutcome, z.ZodTypeDef, Inbound> = z
        .object({
            type: FlowRuleBooleanOutcomeType$,
            result: z.boolean(),
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
            };
        });

    export type Outbound = {
        type: FlowRuleBooleanOutcomeType;
        result: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleBooleanOutcome> = z
        .object({
            type: FlowRuleBooleanOutcomeType$,
            result: z.boolean(),
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
            };
        });
}
