/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export const AuditLogAction = {
  Created: "created",
  Updated: "updated",
  Deleted: "deleted",
  Voided: "voided",
  Canceled: "canceled",
  Captured: "captured",
} as const;
export type AuditLogAction = OpenEnum<typeof AuditLogAction>;

/** @internal */
export const AuditLogAction$inboundSchema: z.ZodType<
  AuditLogAction,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AuditLogAction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AuditLogAction$outboundSchema: z.ZodType<
  AuditLogAction,
  z.ZodTypeDef,
  AuditLogAction
> = z.union([
  z.nativeEnum(AuditLogAction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogAction$ {
  /** @deprecated use `AuditLogAction$inboundSchema` instead. */
  export const inboundSchema = AuditLogAction$inboundSchema;
  /** @deprecated use `AuditLogAction$outboundSchema` instead. */
  export const outboundSchema = AuditLogAction$outboundSchema;
}
