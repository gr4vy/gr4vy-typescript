/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReportCreatorType,
  ReportCreatorType$inboundSchema,
  ReportCreatorType$outboundSchema,
} from "./reportcreatortype.js";

export type ReportSummary = {
  /**
   * Always `report`.
   */
  type?: "report" | undefined;
  /**
   * The unique ID for the report.
   */
  id: string;
  /**
   * The merchant account ID this report belongs to.
   */
  merchantAccountId: string;
  /**
   * The name of the report.
   */
  name: string;
  /**
   * The ID of the user who created the report.
   */
  creatorId?: string | null | undefined;
  /**
   * The display name of the report creator.
   */
  creatorDisplayName?: string | null | undefined;
  /**
   * The type of the report creator.
   */
  creatorType?: ReportCreatorType | null | undefined;
};

/** @internal */
export const ReportSummary$inboundSchema: z.ZodType<
  ReportSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("report").default("report"),
  id: z.string(),
  merchant_account_id: z.string(),
  name: z.string(),
  creator_id: z.nullable(z.string()).optional(),
  creator_display_name: z.nullable(z.string()).optional(),
  creator_type: z.nullable(ReportCreatorType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "creator_id": "creatorId",
    "creator_display_name": "creatorDisplayName",
    "creator_type": "creatorType",
  });
});

/** @internal */
export type ReportSummary$Outbound = {
  type: "report";
  id: string;
  merchant_account_id: string;
  name: string;
  creator_id?: string | null | undefined;
  creator_display_name?: string | null | undefined;
  creator_type?: string | null | undefined;
};

/** @internal */
export const ReportSummary$outboundSchema: z.ZodType<
  ReportSummary$Outbound,
  z.ZodTypeDef,
  ReportSummary
> = z.object({
  type: z.literal("report").default("report" as const),
  id: z.string(),
  merchantAccountId: z.string(),
  name: z.string(),
  creatorId: z.nullable(z.string()).optional(),
  creatorDisplayName: z.nullable(z.string()).optional(),
  creatorType: z.nullable(ReportCreatorType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    creatorId: "creator_id",
    creatorDisplayName: "creator_display_name",
    creatorType: "creator_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportSummary$ {
  /** @deprecated use `ReportSummary$inboundSchema` instead. */
  export const inboundSchema = ReportSummary$inboundSchema;
  /** @deprecated use `ReportSummary$outboundSchema` instead. */
  export const outboundSchema = ReportSummary$outboundSchema;
  /** @deprecated use `ReportSummary$Outbound` instead. */
  export type Outbound = ReportSummary$Outbound;
}

export function reportSummaryToJSON(reportSummary: ReportSummary): string {
  return JSON.stringify(ReportSummary$outboundSchema.parse(reportSummary));
}

export function reportSummaryFromJSON(
  jsonString: string,
): SafeParseResult<ReportSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportSummary' from JSON`,
  );
}
