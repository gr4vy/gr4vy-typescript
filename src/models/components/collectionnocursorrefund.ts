/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Refund,
  Refund$inboundSchema,
  Refund$Outbound,
  Refund$outboundSchema,
} from "./refund.js";

export type CollectionNoCursorRefund = {
  /**
   * A list of items returned for this request.
   */
  items: Array<Refund>;
};

/** @internal */
export const CollectionNoCursorRefund$inboundSchema: z.ZodType<
  CollectionNoCursorRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(Refund$inboundSchema),
});

/** @internal */
export type CollectionNoCursorRefund$Outbound = {
  items: Array<Refund$Outbound>;
};

/** @internal */
export const CollectionNoCursorRefund$outboundSchema: z.ZodType<
  CollectionNoCursorRefund$Outbound,
  z.ZodTypeDef,
  CollectionNoCursorRefund
> = z.object({
  items: z.array(Refund$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionNoCursorRefund$ {
  /** @deprecated use `CollectionNoCursorRefund$inboundSchema` instead. */
  export const inboundSchema = CollectionNoCursorRefund$inboundSchema;
  /** @deprecated use `CollectionNoCursorRefund$outboundSchema` instead. */
  export const outboundSchema = CollectionNoCursorRefund$outboundSchema;
  /** @deprecated use `CollectionNoCursorRefund$Outbound` instead. */
  export type Outbound = CollectionNoCursorRefund$Outbound;
}

export function collectionNoCursorRefundToJSON(
  collectionNoCursorRefund: CollectionNoCursorRefund,
): string {
  return JSON.stringify(
    CollectionNoCursorRefund$outboundSchema.parse(collectionNoCursorRefund),
  );
}

export function collectionNoCursorRefundFromJSON(
  jsonString: string,
): SafeParseResult<CollectionNoCursorRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionNoCursorRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionNoCursorRefund' from JSON`,
  );
}
