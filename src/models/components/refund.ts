/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `refund`.
 */
export enum RefundType {
    Refund = "refund",
}

/**
 * The status of the refund.
 *
 * @remarks
 * It may change over time as asynchronous processing events occur.
 *
 * - `processing` - The refund is being processed.
 * - `succeeded` - The refund was successful.
 * - `declined` - The refund was declined by the underlying PSP.
 * - `failed` - The refund could not proceed due to a technical issue.
 * - `voided` - The refund was voided and will not proceed.
 */
export enum RefundStatus {
    Processing = "processing",
    Succeeded = "succeeded",
    Declined = "declined",
    Failed = "failed",
    Voided = "voided",
}

/**
 * The type of the instrument that was refunded.
 */
export enum TargetType {
    PaymentMethod = "payment-method",
    GiftCardRedemption = "gift-card-redemption",
}

/**
 * A refund record.
 *
 * @remarks
 *
 * A refund is always associated with a single transaction, while a transaction
 * can potentially have several refunds.
 */
export type Refund = {
    /**
     * The type of this resource. Is always `refund`.
     */
    type?: RefundType | undefined;
    /**
     * The unique ID of the refund.
     */
    id?: string | undefined;
    /**
     * The ID of the transaction associated with this refund.
     */
    transactionId?: string | undefined;
    /**
     * The payment service's unique ID for the refund.
     */
    paymentServiceRefundId?: string | undefined;
    /**
     * The status of the refund.
     *
     * @remarks
     * It may change over time as asynchronous processing events occur.
     *
     * - `processing` - The refund is being processed.
     * - `succeeded` - The refund was successful.
     * - `declined` - The refund was declined by the underlying PSP.
     * - `failed` - The refund could not proceed due to a technical issue.
     * - `voided` - The refund was voided and will not proceed.
     */
    status?: RefundStatus | undefined;
    /**
     * The currency code for this refund.
     *
     * @remarks
     * Will always match that of the associated transaction.
     */
    currency?: string | undefined;
    /**
     * The amount requested for this refund.
     */
    amount?: number | undefined;
    /**
     * The date and time when this refund was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this refund was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The type of the instrument that was refunded.
     */
    targetType?: TargetType | undefined;
    /**
     * The optional ID of the instrument that was refunded. This may be `null` if
     *
     * @remarks
     * the instrument was not stored.
     */
    targetId?: string | null | undefined;
};

/** @internal */
export const RefundType$ = z.nativeEnum(RefundType);

/** @internal */
export const RefundStatus$ = z.nativeEnum(RefundStatus);

/** @internal */
export const TargetType$ = z.nativeEnum(TargetType);

/** @internal */
export namespace Refund$ {
    export type Inbound = {
        type?: RefundType | undefined;
        id?: string | undefined;
        transaction_id?: string | undefined;
        payment_service_refund_id?: string | undefined;
        status?: RefundStatus | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        target_type?: TargetType | undefined;
        target_id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, Inbound> = z
        .object({
            type: RefundType$.optional(),
            id: z.string().optional(),
            transaction_id: z.string().optional(),
            payment_service_refund_id: z.string().optional(),
            status: RefundStatus$.optional(),
            currency: z.string().optional(),
            amount: z.number().int().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            target_type: TargetType$.optional(),
            target_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.transaction_id === undefined ? null : { transactionId: v.transaction_id }),
                ...(v.payment_service_refund_id === undefined
                    ? null
                    : { paymentServiceRefundId: v.payment_service_refund_id }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.target_type === undefined ? null : { targetType: v.target_type }),
                ...(v.target_id === undefined ? null : { targetId: v.target_id }),
            };
        });

    export type Outbound = {
        type?: RefundType | undefined;
        id?: string | undefined;
        transaction_id?: string | undefined;
        payment_service_refund_id?: string | undefined;
        status?: RefundStatus | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        target_type?: TargetType | undefined;
        target_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Refund> = z
        .object({
            type: RefundType$.optional(),
            id: z.string().optional(),
            transactionId: z.string().optional(),
            paymentServiceRefundId: z.string().optional(),
            status: RefundStatus$.optional(),
            currency: z.string().optional(),
            amount: z.number().int().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            targetType: TargetType$.optional(),
            targetId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.transactionId === undefined ? null : { transaction_id: v.transactionId }),
                ...(v.paymentServiceRefundId === undefined
                    ? null
                    : { payment_service_refund_id: v.paymentServiceRefundId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.targetType === undefined ? null : { target_type: v.targetType }),
                ...(v.targetId === undefined ? null : { target_id: v.targetId }),
            };
        });
}
