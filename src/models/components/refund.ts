/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `refund`.
 */
export enum RefundType {
    Refund = "refund",
}

/**
 * The status of the refund.
 *
 * @remarks
 * It may change over time as asynchronous processing events occur.
 *
 * - `processing` - The refund is being processed.
 * - `succeeded` - The refund was successful.
 * - `declined` - The refund was declined by the underlying PSP.
 * - `failed` - The refund could not proceed due to a technical issue.
 * - `voided` - The refund was voided and will not proceed.
 */
export enum RefundStatus {
    Processing = "processing",
    Succeeded = "succeeded",
    Declined = "declined",
    Failed = "failed",
    Voided = "voided",
}

/**
 * The type of the instrument that was refunded.
 */
export enum TargetType {
    PaymentMethod = "payment-method",
    GiftCardRedemption = "gift-card-redemption",
}

/**
 * A refund record.
 *
 * @remarks
 *
 * A refund is always associated with a single transaction, while a transaction
 * can potentially have several refunds.
 */
export type Refund = {
    /**
     * The type of this resource. Is always `refund`.
     */
    type?: RefundType | undefined;
    /**
     * The unique ID of the refund.
     */
    id?: string | undefined;
    /**
     * The ID of the transaction associated with this refund.
     */
    transactionId?: string | undefined;
    /**
     * The payment service's unique ID for the refund.
     */
    paymentServiceRefundId?: string | undefined;
    /**
     * The status of the refund.
     *
     * @remarks
     * It may change over time as asynchronous processing events occur.
     *
     * - `processing` - The refund is being processed.
     * - `succeeded` - The refund was successful.
     * - `declined` - The refund was declined by the underlying PSP.
     * - `failed` - The refund could not proceed due to a technical issue.
     * - `voided` - The refund was voided and will not proceed.
     */
    status?: RefundStatus | undefined;
    /**
     * The currency code for this refund.
     *
     * @remarks
     * Will always match that of the associated transaction.
     */
    currency?: string | undefined;
    /**
     * The amount requested for this refund.
     */
    amount?: number | undefined;
    /**
     * The reason for this refund.
     *
     * @remarks
     * Could be a multiline string.
     */
    reason?: string | null | undefined;
    /**
     * The date and time when this refund was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this refund was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The type of the instrument that was refunded.
     */
    targetType?: TargetType | undefined;
    /**
     * The optional ID of the instrument that was refunded. This may be `null` if
     *
     * @remarks
     * the instrument was not stored.
     */
    targetId?: string | null | undefined;
};

/** @internal */
export namespace RefundType$ {
    export const inboundSchema = z.nativeEnum(RefundType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RefundStatus$ {
    export const inboundSchema = z.nativeEnum(RefundStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TargetType$ {
    export const inboundSchema = z.nativeEnum(TargetType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Refund$ {
    export const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown> = z
        .object({
            type: RefundType$.inboundSchema.optional(),
            id: z.string().optional(),
            transaction_id: z.string().optional(),
            payment_service_refund_id: z.string().optional(),
            status: RefundStatus$.inboundSchema.optional(),
            currency: z.string().optional(),
            amount: z.number().int().optional(),
            reason: z.nullable(z.string()).default(null),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            target_type: TargetType$.inboundSchema.optional(),
            target_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                transaction_id: "transactionId",
                payment_service_refund_id: "paymentServiceRefundId",
                created_at: "createdAt",
                updated_at: "updatedAt",
                target_type: "targetType",
                target_id: "targetId",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        transaction_id?: string | undefined;
        payment_service_refund_id?: string | undefined;
        status?: string | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
        reason: string | null;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        target_type?: string | undefined;
        target_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Refund> = z
        .object({
            type: RefundType$.outboundSchema.optional(),
            id: z.string().optional(),
            transactionId: z.string().optional(),
            paymentServiceRefundId: z.string().optional(),
            status: RefundStatus$.outboundSchema.optional(),
            currency: z.string().optional(),
            amount: z.number().int().optional(),
            reason: z.nullable(z.string()).default(null),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            targetType: TargetType$.outboundSchema.optional(),
            targetId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                transactionId: "transaction_id",
                paymentServiceRefundId: "payment_service_refund_id",
                createdAt: "created_at",
                updatedAt: "updated_at",
                targetType: "target_type",
                targetId: "target_id",
            });
        });
}
