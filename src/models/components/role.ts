/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RolePermissions, RolePermissions$ } from "./rolepermissions";
import * as z from "zod";

/**
 * The type of this resource. Always `role`.
 */
export enum RoleType {
    Role = "role",
}

export type Role = {
    /**
     * The type of this resource. Always `role`.
     */
    type?: RoleType | undefined;
    /**
     * The unique ID for this role.
     */
    id?: string | undefined;
    /**
     * The unique name for this role.
     */
    name?: string | undefined;
    /**
     * The description for this role.
     */
    description?: string | undefined;
    /**
     * The permissions associated with a role.
     */
    permissions?: RolePermissions | undefined;
};

/** @internal */
export namespace RoleType$ {
    export const inboundSchema = z.nativeEnum(RoleType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Role$ {
    export const inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z.object({
        type: RoleType$.inboundSchema.optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        description: z.string().optional(),
        permissions: RolePermissions$.inboundSchema.optional(),
    });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        permissions?: RolePermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Role> = z.object({
        type: RoleType$.outboundSchema.optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        description: z.string().optional(),
        permissions: RolePermissions$.outboundSchema.optional(),
    });
}
