/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const RoleType = {
    Role: "role",
} as const;
export type RoleType = ClosedEnum<typeof RoleType>;

/**
 * Base model with JSON encoders.
 */
export type Role = {
    type?: RoleType | undefined;
    id: string;
};

/** @internal */
export const RoleType$inboundSchema: z.ZodNativeEnum<typeof RoleType> = z.nativeEnum(RoleType);

/** @internal */
export const RoleType$outboundSchema: z.ZodNativeEnum<typeof RoleType> = RoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleType$ {
    /** @deprecated use `RoleType$inboundSchema` instead. */
    export const inboundSchema = RoleType$inboundSchema;
    /** @deprecated use `RoleType$outboundSchema` instead. */
    export const outboundSchema = RoleType$outboundSchema;
}

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z.object({
    type: RoleType$inboundSchema.default("role"),
    id: z.string(),
});

/** @internal */
export type Role$Outbound = {
    type: string;
    id: string;
};

/** @internal */
export const Role$outboundSchema: z.ZodType<Role$Outbound, z.ZodTypeDef, Role> = z.object({
    type: RoleType$outboundSchema.default("role"),
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
    /** @deprecated use `Role$inboundSchema` instead. */
    export const inboundSchema = Role$inboundSchema;
    /** @deprecated use `Role$outboundSchema` instead. */
    export const outboundSchema = Role$outboundSchema;
    /** @deprecated use `Role$Outbound` instead. */
    export type Outbound = Role$Outbound;
}
