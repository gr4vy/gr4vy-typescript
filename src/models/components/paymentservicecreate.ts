/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ApiRoutersPaymentServicesSchemasField,
    ApiRoutersPaymentServicesSchemasField$inboundSchema,
    ApiRoutersPaymentServicesSchemasField$Outbound,
    ApiRoutersPaymentServicesSchemasField$outboundSchema,
} from "./apirouterspaymentservicesschemasfield.js";
import {
    MerchantProfileScheme,
    MerchantProfileScheme$inboundSchema,
    MerchantProfileScheme$Outbound,
    MerchantProfileScheme$outboundSchema,
} from "./merchantprofilescheme.js";
import * as z from "zod";

/**
 * Request body for activating a payment service
 */
export type PaymentServiceCreate = {
    displayName: string;
    paymentServiceDefinitionId: string;
    fields: Array<ApiRoutersPaymentServicesSchemasField>;
    position?: number | undefined;
    acceptedCurrencies: Array<string>;
    acceptedCountries: Array<string>;
    active?: boolean | undefined;
    threeDSecureEnabled?: boolean | undefined;
    merchantProfile?: { [k: string]: MerchantProfileScheme } | undefined;
    merchantName?: string | undefined;
    merchantCountryCode?: string | undefined;
    merchantCategoryCode?: string | undefined;
    merchantUrl?: string | undefined;
    acquirerMerchantId?: string | undefined;
    acquirerBinVisa?: string | undefined;
    acquirerBinMastercard?: string | undefined;
    acquirerBinAmex?: string | undefined;
    acquirerBinDiscover?: string | undefined;
    paymentMethodTokenizationEnabled?: boolean | undefined;
    networkTokensEnabled?: boolean | undefined;
    openLoop?: boolean | undefined;
    settlementReportingEnabled?: boolean | undefined;
};

/** @internal */
export const PaymentServiceCreate$inboundSchema: z.ZodType<
    PaymentServiceCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        display_name: z.string(),
        payment_service_definition_id: z.string(),
        fields: z.array(ApiRoutersPaymentServicesSchemasField$inboundSchema),
        position: z.number().int().optional(),
        accepted_currencies: z.array(z.string()),
        accepted_countries: z.array(z.string()),
        active: z.boolean().default(true),
        three_d_secure_enabled: z.boolean().default(false),
        merchant_profile: z.record(MerchantProfileScheme$inboundSchema).optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        merchant_url: z.string().optional(),
        acquirer_merchant_id: z.string().optional(),
        acquirer_bin_visa: z.string().optional(),
        acquirer_bin_mastercard: z.string().optional(),
        acquirer_bin_amex: z.string().optional(),
        acquirer_bin_discover: z.string().optional(),
        payment_method_tokenization_enabled: z.boolean().optional(),
        network_tokens_enabled: z.boolean().optional(),
        open_loop: z.boolean().optional(),
        settlement_reporting_enabled: z.boolean().default(false),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            accepted_currencies: "acceptedCurrencies",
            accepted_countries: "acceptedCountries",
            three_d_secure_enabled: "threeDSecureEnabled",
            merchant_profile: "merchantProfile",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            merchant_url: "merchantUrl",
            acquirer_merchant_id: "acquirerMerchantId",
            acquirer_bin_visa: "acquirerBinVisa",
            acquirer_bin_mastercard: "acquirerBinMastercard",
            acquirer_bin_amex: "acquirerBinAmex",
            acquirer_bin_discover: "acquirerBinDiscover",
            payment_method_tokenization_enabled: "paymentMethodTokenizationEnabled",
            network_tokens_enabled: "networkTokensEnabled",
            open_loop: "openLoop",
            settlement_reporting_enabled: "settlementReportingEnabled",
        });
    });

/** @internal */
export type PaymentServiceCreate$Outbound = {
    display_name: string;
    payment_service_definition_id: string;
    fields: Array<ApiRoutersPaymentServicesSchemasField$Outbound>;
    position?: number | undefined;
    accepted_currencies: Array<string>;
    accepted_countries: Array<string>;
    active: boolean;
    three_d_secure_enabled: boolean;
    merchant_profile?: { [k: string]: MerchantProfileScheme$Outbound } | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    merchant_url?: string | undefined;
    acquirer_merchant_id?: string | undefined;
    acquirer_bin_visa?: string | undefined;
    acquirer_bin_mastercard?: string | undefined;
    acquirer_bin_amex?: string | undefined;
    acquirer_bin_discover?: string | undefined;
    payment_method_tokenization_enabled?: boolean | undefined;
    network_tokens_enabled?: boolean | undefined;
    open_loop?: boolean | undefined;
    settlement_reporting_enabled: boolean;
};

/** @internal */
export const PaymentServiceCreate$outboundSchema: z.ZodType<
    PaymentServiceCreate$Outbound,
    z.ZodTypeDef,
    PaymentServiceCreate
> = z
    .object({
        displayName: z.string(),
        paymentServiceDefinitionId: z.string(),
        fields: z.array(ApiRoutersPaymentServicesSchemasField$outboundSchema),
        position: z.number().int().optional(),
        acceptedCurrencies: z.array(z.string()),
        acceptedCountries: z.array(z.string()),
        active: z.boolean().default(true),
        threeDSecureEnabled: z.boolean().default(false),
        merchantProfile: z.record(MerchantProfileScheme$outboundSchema).optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        merchantUrl: z.string().optional(),
        acquirerMerchantId: z.string().optional(),
        acquirerBinVisa: z.string().optional(),
        acquirerBinMastercard: z.string().optional(),
        acquirerBinAmex: z.string().optional(),
        acquirerBinDiscover: z.string().optional(),
        paymentMethodTokenizationEnabled: z.boolean().optional(),
        networkTokensEnabled: z.boolean().optional(),
        openLoop: z.boolean().optional(),
        settlementReportingEnabled: z.boolean().default(false),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            acceptedCurrencies: "accepted_currencies",
            acceptedCountries: "accepted_countries",
            threeDSecureEnabled: "three_d_secure_enabled",
            merchantProfile: "merchant_profile",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            merchantUrl: "merchant_url",
            acquirerMerchantId: "acquirer_merchant_id",
            acquirerBinVisa: "acquirer_bin_visa",
            acquirerBinMastercard: "acquirer_bin_mastercard",
            acquirerBinAmex: "acquirer_bin_amex",
            acquirerBinDiscover: "acquirer_bin_discover",
            paymentMethodTokenizationEnabled: "payment_method_tokenization_enabled",
            networkTokensEnabled: "network_tokens_enabled",
            openLoop: "open_loop",
            settlementReportingEnabled: "settlement_reporting_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceCreate$ {
    /** @deprecated use `PaymentServiceCreate$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceCreate$inboundSchema;
    /** @deprecated use `PaymentServiceCreate$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceCreate$outboundSchema;
    /** @deprecated use `PaymentServiceCreate$Outbound` instead. */
    export type Outbound = PaymentServiceCreate$Outbound;
}
