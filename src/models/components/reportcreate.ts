/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Specifies the schedule of the report.
 *
 * @remarks
 *
 * If this is a one-off report, set this value to `once`.
 *
 * If this is a recurring report, this value should be set to the
 * frequency by which the report will be executed. For example, a
 * `monthly` schedule means that the report will be periodically
 * executed at the start of each month.
 *
 * Note that a `weekly` schedule means that the report will be
 * executed at the start of every Monday.
 */
export enum Schedule {
    Daily = "daily",
    Monthly = "monthly",
    Once = "once",
    Weekly = "weekly",
}

/**
 * The model (dataset) that the data used for the report is retrieved
 *
 * @remarks
 * from.
 */
export enum ReportCreateModel {
    Transactions = "transactions",
}

export enum ReportCreateFields {
    Id = "id",
    ExternalIdentifier = "external_identifier",
    Status = "status",
    CreatedAt = "created_at",
    UpdatedAt = "updated_at",
    AuthorizedAt = "authorized_at",
    CapturedAt = "captured_at",
    VoidedAt = "voided_at",
    Amount = "amount",
    Currency = "currency",
    CapturedAmount = "captured_amount",
    RefundedAmount = "refunded_amount",
    Method = "method",
    Scheme = "scheme",
    PaymentServiceTransactionId = "payment_service_transaction_id",
    PaymentServiceId = "payment_service_id",
    PaymentServiceDefinitionId = "payment_service_definition_id",
    PaymentServiceDisplayName = "payment_service_display_name",
    AuthResponseCode = "auth_response_code",
    RawResponseCode = "raw_response_code",
    RawResponseDescription = "raw_response_description",
    Metadata = "metadata",
    ThreeDSecureStatus = "three_d_secure_status",
    ThreeDSecureEci = "three_d_secure_eci",
    ThreeDSecureAuthResp = "three_d_secure_auth_resp",
    ThreeDSecureMethod = "three_d_secure_method",
    BuyerExternalIdentifier = "buyer_external_identifier",
    BillingDetailsFirstName = "billing_details_first_name",
    BillingDetailsLastName = "billing_details_last_name",
    BillingDetailsEmailAddress = "billing_details_email_address",
    BillingDetailsPhoneNumber = "billing_details_phone_number",
    BillingDetailsAddressCity = "billing_details_address_city",
    BillingDetailsAddressCountry = "billing_details_address_country",
    BillingDetailsAddressPostalCode = "billing_details_address_postal_code",
    BillingDetailsAddressState = "billing_details_address_state",
    BillingDetailsAddressStateCode = "billing_details_address_state_code",
    BillingDetailsAddressHouseNumberOrName = "billing_details_address_house_number_or_name",
    BillingDetailsAddressLine1 = "billing_details_address_line1",
    BillingDetailsAddressLine2 = "billing_details_address_line2",
    BillingDetailsAddressOrganization = "billing_details_address_organization",
    BillingDetailsTaxId = "billing_details_tax_id",
    BillingDetailsTaxIdKind = "billing_details_tax_id_kind",
}

/**
 * The filters for the report.
 */
export type ReportCreateFilters = {
    /**
     * A list of status' to filter by.
     */
    status?: Array<string> | undefined;
    /**
     * The created date and time to filter by.
     */
    createdAt?: string | undefined;
    /**
     * The updated date and time to filter by.
     */
    updatedAt?: string | undefined;
    /**
     * The authorized date and time to filter by.
     */
    authorizedAt?: string | undefined;
    /**
     * The captured date and time to filter by.
     */
    capturedAt?: string | undefined;
    /**
     * The voided date and time to filter by.
     */
    voidedAt?: string | undefined;
    /**
     * A list of currencies to filter by.
     */
    currency?: Array<string> | undefined;
    /**
     * A list of methods to filter by.
     */
    method?: Array<string> | undefined;
    /**
     * A list of schemes to filter by.
     */
    scheme?: Array<string> | undefined;
    /**
     * A list of metadata to filter by.
     */
    metadata?: Array<string> | undefined;
    /**
     * A list of 3DS status to filter by.
     */
    threeDSecureStatus?: Array<string> | undefined;
    /**
     * A list of electric commerce indicators to filter by.
     */
    threeDSecureEci?: Array<string> | undefined;
    /**
     * A list of 3DS responses to filter by.
     */
    threeDSecureAuthResp?: Array<string> | undefined;
};

export type ReportCreateSort = {};

/**
 * Parameters used to configure the report. Acceptable values for
 *
 * @remarks
 * this property depend on the value specified for `model`.
 */
export type ReportCreateParams = {
    /**
     * A list of fields for the report.
     */
    fields?: Array<ReportCreateFields> | undefined;
    /**
     * The filters for the report.
     */
    filters?: ReportCreateFilters | undefined;
    /**
     * A list of fields to sort the report.
     */
    sort?: Array<ReportCreateSort> | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The specifications of the report.
 */
export type ReportSpecification = {
    /**
     * The model (dataset) that the data used for the report is retrieved
     *
     * @remarks
     * from.
     */
    model: ReportCreateModel;
    /**
     * Parameters used to configure the report. Acceptable values for
     *
     * @remarks
     * this property depend on the value specified for `model`.
     */
    params: ReportCreateParams;
};

/**
 * A request to create a report.
 */
export type ReportCreate = {
    /**
     * The name of the report.
     */
    name: string;
    /**
     * The description of the report.
     */
    description?: string | null | undefined;
    /**
     * Specifies the schedule of the report.
     *
     * @remarks
     *
     * If this is a one-off report, set this value to `once`.
     *
     * If this is a recurring report, this value should be set to the
     * frequency by which the report will be executed. For example, a
     * `monthly` schedule means that the report will be periodically
     * executed at the start of each month.
     *
     * Note that a `weekly` schedule means that the report will be
     * executed at the start of every Monday.
     */
    schedule?: Schedule | undefined;
    /**
     * Indicates whether the report's scheduling is enabled. This value
     *
     * @remarks
     * can only be set to `true` if this is a recurring report.
     *
     * If this value is set to `true`, the report will be executed at
     * the `next_execution_at` date and time.
     *
     * If this is a recurring report and this value is set to `false`,
     * executions of the report will not occur until this value is set
     * to `true`.
     *
     * If this value is not provided, `schedule_enabled` will
     * automatically be set to `false` if `schedule` is `once` and set to
     * `true` otherwise.
     */
    scheduleEnabled?: boolean | null | undefined;
    /**
     * The time zone in which the report's executions will be scheduled.
     *
     * @remarks
     * This value is used to compute the report's `next_execution_at`
     * value and is only relevant when this is a recurring report. This
     * time zone is also used to calculate the timestamp range for reports
     * that use date-time placeholders. Date-time placeholders are dynamic
     * timestamps that change with every report execution.
     *
     * This value must be set to the time zone's name as presented in
     * the IANA time zone database. For example, to schedule reports in
     * the time zone of New York, set this value to `America/New_York`.
     */
    scheduleTimezone?: string | undefined;
    /**
     * The specifications of the report.
     */
    spec: ReportSpecification;
};

/** @internal */
export const Schedule$: z.ZodNativeEnum<typeof Schedule> = z.nativeEnum(Schedule);

/** @internal */
export const ReportCreateModel$: z.ZodNativeEnum<typeof ReportCreateModel> =
    z.nativeEnum(ReportCreateModel);

/** @internal */
export const ReportCreateFields$: z.ZodNativeEnum<typeof ReportCreateFields> =
    z.nativeEnum(ReportCreateFields);

/** @internal */
export namespace ReportCreateFilters$ {
    export type Inbound = {
        status?: Array<string> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        authorized_at?: string | undefined;
        captured_at?: string | undefined;
        voided_at?: string | undefined;
        currency?: Array<string> | undefined;
        method?: Array<string> | undefined;
        scheme?: Array<string> | undefined;
        metadata?: Array<string> | undefined;
        three_d_secure_status?: Array<string> | undefined;
        three_d_secure_eci?: Array<string> | undefined;
        three_d_secure_auth_resp?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<ReportCreateFilters, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.array(z.string()).optional(),
            created_at: z.string().optional(),
            updated_at: z.string().optional(),
            authorized_at: z.string().optional(),
            captured_at: z.string().optional(),
            voided_at: z.string().optional(),
            currency: z.array(z.string()).optional(),
            method: z.array(z.string()).optional(),
            scheme: z.array(z.string()).optional(),
            metadata: z.array(z.string()).optional(),
            three_d_secure_status: z.array(z.string()).optional(),
            three_d_secure_eci: z.array(z.string()).optional(),
            three_d_secure_auth_resp: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.authorized_at === undefined ? null : { authorizedAt: v.authorized_at }),
                ...(v.captured_at === undefined ? null : { capturedAt: v.captured_at }),
                ...(v.voided_at === undefined ? null : { voidedAt: v.voided_at }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.three_d_secure_status === undefined
                    ? null
                    : { threeDSecureStatus: v.three_d_secure_status }),
                ...(v.three_d_secure_eci === undefined
                    ? null
                    : { threeDSecureEci: v.three_d_secure_eci }),
                ...(v.three_d_secure_auth_resp === undefined
                    ? null
                    : { threeDSecureAuthResp: v.three_d_secure_auth_resp }),
            };
        });

    export type Outbound = {
        status?: Array<string> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        authorized_at?: string | undefined;
        captured_at?: string | undefined;
        voided_at?: string | undefined;
        currency?: Array<string> | undefined;
        method?: Array<string> | undefined;
        scheme?: Array<string> | undefined;
        metadata?: Array<string> | undefined;
        three_d_secure_status?: Array<string> | undefined;
        three_d_secure_eci?: Array<string> | undefined;
        three_d_secure_auth_resp?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportCreateFilters> = z
        .object({
            status: z.array(z.string()).optional(),
            createdAt: z.string().optional(),
            updatedAt: z.string().optional(),
            authorizedAt: z.string().optional(),
            capturedAt: z.string().optional(),
            voidedAt: z.string().optional(),
            currency: z.array(z.string()).optional(),
            method: z.array(z.string()).optional(),
            scheme: z.array(z.string()).optional(),
            metadata: z.array(z.string()).optional(),
            threeDSecureStatus: z.array(z.string()).optional(),
            threeDSecureEci: z.array(z.string()).optional(),
            threeDSecureAuthResp: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.authorizedAt === undefined ? null : { authorized_at: v.authorizedAt }),
                ...(v.capturedAt === undefined ? null : { captured_at: v.capturedAt }),
                ...(v.voidedAt === undefined ? null : { voided_at: v.voidedAt }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.threeDSecureStatus === undefined
                    ? null
                    : { three_d_secure_status: v.threeDSecureStatus }),
                ...(v.threeDSecureEci === undefined
                    ? null
                    : { three_d_secure_eci: v.threeDSecureEci }),
                ...(v.threeDSecureAuthResp === undefined
                    ? null
                    : { three_d_secure_auth_resp: v.threeDSecureAuthResp }),
            };
        });
}

/** @internal */
export namespace ReportCreateSort$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<ReportCreateSort, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportCreateSort> = z.object({});
}

/** @internal */
export namespace ReportCreateParams$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        fields?: Array<ReportCreateFields> | undefined;
        filters?: ReportCreateFilters$.Inbound | undefined;
        sort?: Array<ReportCreateSort$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ReportCreateParams, z.ZodTypeDef, Inbound> = z
        .object({
            fields: z.array(ReportCreateFields$).optional(),
            filters: z.lazy(() => ReportCreateFilters$.inboundSchema).optional(),
            sort: z.array(z.lazy(() => ReportCreateSort$.inboundSchema)).optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { fields, filters, sort, ...additionalProperties } = v;

            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                additionalProperties,
            };
        });

    export type Outbound = {
        fields?: Array<ReportCreateFields> | undefined;
        filters?: ReportCreateFilters$.Outbound | undefined;
        sort?: Array<ReportCreateSort$.Outbound> | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportCreateParams> = z
        .object({
            fields: z.array(ReportCreateFields$).optional(),
            filters: z.lazy(() => ReportCreateFilters$.outboundSchema).optional(),
            sort: z.array(z.lazy(() => ReportCreateSort$.outboundSchema)).optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}

/** @internal */
export namespace ReportSpecification$ {
    export type Inbound = {
        model: ReportCreateModel;
        params: ReportCreateParams$.Inbound;
    };

    export const inboundSchema: z.ZodType<ReportSpecification, z.ZodTypeDef, Inbound> = z
        .object({
            model: ReportCreateModel$,
            params: z.lazy(() => ReportCreateParams$.inboundSchema),
        })
        .transform((v) => {
            return {
                model: v.model,
                params: v.params,
            };
        });

    export type Outbound = {
        model: ReportCreateModel;
        params: ReportCreateParams$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportSpecification> = z
        .object({
            model: ReportCreateModel$,
            params: z.lazy(() => ReportCreateParams$.outboundSchema),
        })
        .transform((v) => {
            return {
                model: v.model,
                params: v.params,
            };
        });
}

/** @internal */
export namespace ReportCreate$ {
    export type Inbound = {
        name: string;
        description?: string | null | undefined;
        schedule?: Schedule | undefined;
        schedule_enabled?: boolean | null | undefined;
        schedule_timezone?: string | undefined;
        spec: ReportSpecification$.Inbound;
    };

    export const inboundSchema: z.ZodType<ReportCreate, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            description: z.nullable(z.string()).optional(),
            schedule: Schedule$.default(Schedule.Once),
            schedule_enabled: z.nullable(z.boolean()).optional(),
            schedule_timezone: z.string().default("Etc/UTC"),
            spec: z.lazy(() => ReportSpecification$.inboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.description === undefined ? null : { description: v.description }),
                schedule: v.schedule,
                ...(v.schedule_enabled === undefined
                    ? null
                    : { scheduleEnabled: v.schedule_enabled }),
                scheduleTimezone: v.schedule_timezone,
                spec: v.spec,
            };
        });

    export type Outbound = {
        name: string;
        description?: string | null | undefined;
        schedule: Schedule;
        schedule_enabled?: boolean | null | undefined;
        schedule_timezone: string;
        spec: ReportSpecification$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportCreate> = z
        .object({
            name: z.string(),
            description: z.nullable(z.string()).optional(),
            schedule: Schedule$.default(Schedule.Once),
            scheduleEnabled: z.nullable(z.boolean()).optional(),
            scheduleTimezone: z.string().default("Etc/UTC"),
            spec: z.lazy(() => ReportSpecification$.outboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.description === undefined ? null : { description: v.description }),
                schedule: v.schedule,
                ...(v.scheduleEnabled === undefined
                    ? null
                    : { schedule_enabled: v.scheduleEnabled }),
                schedule_timezone: v.scheduleTimezone,
                spec: v.spec,
            };
        });
}
