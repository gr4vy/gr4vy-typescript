/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DetailedSettlementReportSpec,
  DetailedSettlementReportSpec$inboundSchema,
  DetailedSettlementReportSpec$Outbound,
  DetailedSettlementReportSpec$outboundSchema,
} from "./detailedsettlementreportspec.js";
import {
  ReportSchedule,
  ReportSchedule$inboundSchema,
  ReportSchedule$outboundSchema,
} from "./reportschedule.js";
import {
  TransactionRetriesReportSpec,
  TransactionRetriesReportSpec$inboundSchema,
  TransactionRetriesReportSpec$Outbound,
  TransactionRetriesReportSpec$outboundSchema,
} from "./transactionretriesreportspec.js";
import {
  TransactionsReportSpec,
  TransactionsReportSpec$inboundSchema,
  TransactionsReportSpec$Outbound,
  TransactionsReportSpec$outboundSchema,
} from "./transactionsreportspec.js";

/**
 * The report specification.
 */
export type Spec =
  | (DetailedSettlementReportSpec & { model: "detailed_settlement" })
  | (TransactionRetriesReportSpec & { model: "transaction_retries" })
  | (TransactionsReportSpec & { model: "transactions" });

export type ReportCreate = {
  /**
   * The name of the report.
   */
  name: string;
  /**
   * A description of the report.
   */
  description?: string | null | undefined;
  schedule: ReportSchedule;
  /**
   * Whether the report schedule is enabled.
   */
  scheduleEnabled: boolean;
  /**
   * The timezone for the report schedule.
   */
  scheduleTimezone?: string | undefined;
  /**
   * The report specification.
   */
  spec:
    | (DetailedSettlementReportSpec & { model: "detailed_settlement" })
    | (TransactionRetriesReportSpec & { model: "transaction_retries" })
    | (TransactionsReportSpec & { model: "transactions" });
};

/** @internal */
export const Spec$inboundSchema: z.ZodType<Spec, z.ZodTypeDef, unknown> = z
  .union([
    DetailedSettlementReportSpec$inboundSchema.and(
      z.object({ model: z.literal("detailed_settlement") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionRetriesReportSpec$inboundSchema.and(
      z.object({ model: z.literal("transaction_retries") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionsReportSpec$inboundSchema.and(
      z.object({ model: z.literal("transactions") }).transform((v) => ({
        model: v.model,
      })),
    ),
  ]);

/** @internal */
export type Spec$Outbound =
  | (DetailedSettlementReportSpec$Outbound & { model: "detailed_settlement" })
  | (TransactionRetriesReportSpec$Outbound & { model: "transaction_retries" })
  | (TransactionsReportSpec$Outbound & { model: "transactions" });

/** @internal */
export const Spec$outboundSchema: z.ZodType<Spec$Outbound, z.ZodTypeDef, Spec> =
  z.union([
    DetailedSettlementReportSpec$outboundSchema.and(
      z.object({ model: z.literal("detailed_settlement") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionRetriesReportSpec$outboundSchema.and(
      z.object({ model: z.literal("transaction_retries") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionsReportSpec$outboundSchema.and(
      z.object({ model: z.literal("transactions") }).transform((v) => ({
        model: v.model,
      })),
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Spec$ {
  /** @deprecated use `Spec$inboundSchema` instead. */
  export const inboundSchema = Spec$inboundSchema;
  /** @deprecated use `Spec$outboundSchema` instead. */
  export const outboundSchema = Spec$outboundSchema;
  /** @deprecated use `Spec$Outbound` instead. */
  export type Outbound = Spec$Outbound;
}

export function specToJSON(spec: Spec): string {
  return JSON.stringify(Spec$outboundSchema.parse(spec));
}

export function specFromJSON(
  jsonString: string,
): SafeParseResult<Spec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Spec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Spec' from JSON`,
  );
}

/** @internal */
export const ReportCreate$inboundSchema: z.ZodType<
  ReportCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  schedule: ReportSchedule$inboundSchema,
  schedule_enabled: z.boolean(),
  schedule_timezone: z.string().default("Etc/UTC"),
  spec: z.union([
    DetailedSettlementReportSpec$inboundSchema.and(
      z.object({ model: z.literal("detailed_settlement") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionRetriesReportSpec$inboundSchema.and(
      z.object({ model: z.literal("transaction_retries") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionsReportSpec$inboundSchema.and(
      z.object({ model: z.literal("transactions") }).transform((v) => ({
        model: v.model,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    "schedule_enabled": "scheduleEnabled",
    "schedule_timezone": "scheduleTimezone",
  });
});

/** @internal */
export type ReportCreate$Outbound = {
  name: string;
  description?: string | null | undefined;
  schedule: string;
  schedule_enabled: boolean;
  schedule_timezone: string;
  spec:
    | (DetailedSettlementReportSpec$Outbound & { model: "detailed_settlement" })
    | (TransactionRetriesReportSpec$Outbound & { model: "transaction_retries" })
    | (TransactionsReportSpec$Outbound & { model: "transactions" });
};

/** @internal */
export const ReportCreate$outboundSchema: z.ZodType<
  ReportCreate$Outbound,
  z.ZodTypeDef,
  ReportCreate
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  schedule: ReportSchedule$outboundSchema,
  scheduleEnabled: z.boolean(),
  scheduleTimezone: z.string().default("Etc/UTC"),
  spec: z.union([
    DetailedSettlementReportSpec$outboundSchema.and(
      z.object({ model: z.literal("detailed_settlement") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionRetriesReportSpec$outboundSchema.and(
      z.object({ model: z.literal("transaction_retries") }).transform((v) => ({
        model: v.model,
      })),
    ),
    TransactionsReportSpec$outboundSchema.and(
      z.object({ model: z.literal("transactions") }).transform((v) => ({
        model: v.model,
      })),
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    scheduleEnabled: "schedule_enabled",
    scheduleTimezone: "schedule_timezone",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreate$ {
  /** @deprecated use `ReportCreate$inboundSchema` instead. */
  export const inboundSchema = ReportCreate$inboundSchema;
  /** @deprecated use `ReportCreate$outboundSchema` instead. */
  export const outboundSchema = ReportCreate$outboundSchema;
  /** @deprecated use `ReportCreate$Outbound` instead. */
  export type Outbound = ReportCreate$Outbound;
}

export function reportCreateToJSON(reportCreate: ReportCreate): string {
  return JSON.stringify(ReportCreate$outboundSchema.parse(reportCreate));
}

export function reportCreateFromJSON(
  jsonString: string,
): SafeParseResult<ReportCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportCreate' from JSON`,
  );
}
