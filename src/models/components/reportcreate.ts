/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Specifies the schedule of the report.
 *
 * @remarks
 *
 * If this is a one-off report, set this value to `once`.
 *
 * If this is a recurring report, this value should be set to the
 * frequency by which the report will be executed. For example, a
 * `monthly` schedule means that the report will be periodically
 * executed at the start of each month.
 *
 * Note that a `weekly` schedule means that the report will be
 * executed at the start of every Monday.
 */
export const Schedule = {
    Daily: "daily",
    Monthly: "monthly",
    Once: "once",
    Weekly: "weekly",
} as const;
/**
 * Specifies the schedule of the report.
 *
 * @remarks
 *
 * If this is a one-off report, set this value to `once`.
 *
 * If this is a recurring report, this value should be set to the
 * frequency by which the report will be executed. For example, a
 * `monthly` schedule means that the report will be periodically
 * executed at the start of each month.
 *
 * Note that a `weekly` schedule means that the report will be
 * executed at the start of every Monday.
 */
export type Schedule = ClosedEnum<typeof Schedule>;

/**
 * The model (dataset) that the data used for the report is retrieved
 *
 * @remarks
 * from.
 */
export const ReportCreateModel = {
    Transactions: "transactions",
} as const;
/**
 * The model (dataset) that the data used for the report is retrieved
 *
 * @remarks
 * from.
 */
export type ReportCreateModel = ClosedEnum<typeof ReportCreateModel>;

export const ReportCreateFields = {
    Id: "id",
    ExternalIdentifier: "external_identifier",
    Status: "status",
    CreatedAt: "created_at",
    UpdatedAt: "updated_at",
    AuthorizedAt: "authorized_at",
    CapturedAt: "captured_at",
    VoidedAt: "voided_at",
    Amount: "amount",
    Currency: "currency",
    CapturedAmount: "captured_amount",
    RefundedAmount: "refunded_amount",
    Method: "method",
    Scheme: "scheme",
    PaymentServiceTransactionId: "payment_service_transaction_id",
    PaymentServiceId: "payment_service_id",
    PaymentServiceDefinitionId: "payment_service_definition_id",
    PaymentServiceDisplayName: "payment_service_display_name",
    AuthResponseCode: "auth_response_code",
    RawResponseCode: "raw_response_code",
    RawResponseDescription: "raw_response_description",
    Metadata: "metadata",
    IsSubsequentPayment: "is_subsequent_payment",
    MerchantInitiated: "merchant_initiated",
    PaymentSource: "payment_source",
    ThreeDSecureStatus: "three_d_secure_status",
    ThreeDSecureEci: "three_d_secure_eci",
    ThreeDSecureAuthResp: "three_d_secure_auth_resp",
    ThreeDSecureMethod: "three_d_secure_method",
    BuyerExternalIdentifier: "buyer_external_identifier",
    BillingDetailsFirstName: "billing_details_first_name",
    BillingDetailsLastName: "billing_details_last_name",
    BillingDetailsEmailAddress: "billing_details_email_address",
    BillingDetailsPhoneNumber: "billing_details_phone_number",
    BillingDetailsAddressCity: "billing_details_address_city",
    BillingDetailsAddressCountry: "billing_details_address_country",
    BillingDetailsAddressPostalCode: "billing_details_address_postal_code",
    BillingDetailsAddressState: "billing_details_address_state",
    BillingDetailsAddressStateCode: "billing_details_address_state_code",
    BillingDetailsAddressHouseNumberOrName: "billing_details_address_house_number_or_name",
    BillingDetailsAddressLine1: "billing_details_address_line1",
    BillingDetailsAddressLine2: "billing_details_address_line2",
    BillingDetailsAddressOrganization: "billing_details_address_organization",
    BillingDetailsTaxId: "billing_details_tax_id",
    BillingDetailsTaxIdKind: "billing_details_tax_id_kind",
} as const;
export type ReportCreateFields = ClosedEnum<typeof ReportCreateFields>;

/**
 * The filters for the report.
 */
export type ReportCreateFilters = {
    /**
     * A list of status' to filter by.
     */
    status?: Array<string> | undefined;
    /**
     * The created date and time to filter by.
     */
    createdAt?: string | undefined;
    /**
     * The updated date and time to filter by.
     */
    updatedAt?: string | undefined;
    /**
     * The authorized date and time to filter by.
     */
    authorizedAt?: string | undefined;
    /**
     * The captured date and time to filter by.
     */
    capturedAt?: string | undefined;
    /**
     * The voided date and time to filter by.
     */
    voidedAt?: string | undefined;
    /**
     * A list of currencies to filter by.
     */
    currency?: Array<string> | undefined;
    /**
     * A list of methods to filter by.
     */
    method?: Array<string> | undefined;
    /**
     * A list of schemes to filter by.
     */
    scheme?: Array<string> | undefined;
    /**
     * A list of metadata to filter by.
     */
    metadata?: Array<string> | undefined;
    /**
     * A boolean indicating transactions with subsequent payments to filter by.
     */
    isSubsequentPayment?: boolean | undefined;
    /**
     * A boolean indicating transactions initiated by the merchant to filter by.
     */
    merchantInitiated?: boolean | undefined;
    /**
     * A list of transaction sources to filter by.
     */
    paymentSource?: Array<string> | undefined;
    /**
     * A list of 3DS status to filter by.
     */
    threeDSecureStatus?: Array<string> | undefined;
    /**
     * A list of electric commerce indicators to filter by.
     */
    threeDSecureEci?: Array<string> | undefined;
    /**
     * A list of 3DS responses to filter by.
     */
    threeDSecureAuthResp?: Array<string> | undefined;
};

export type ReportCreateSort = {};

/**
 * Parameters used to configure the report. Acceptable values for
 *
 * @remarks
 * this property depend on the value specified for `model`.
 */
export type ReportCreateParams = {
    /**
     * A list of fields for the report.
     */
    fields?: Array<ReportCreateFields> | undefined;
    /**
     * The filters for the report.
     */
    filters?: ReportCreateFilters | undefined;
    /**
     * A list of fields to sort the report.
     */
    sort?: Array<ReportCreateSort> | undefined;
};

/**
 * The specifications of the report.
 */
export type ReportSpecification = {
    /**
     * The model (dataset) that the data used for the report is retrieved
     *
     * @remarks
     * from.
     */
    model: ReportCreateModel;
    /**
     * Parameters used to configure the report. Acceptable values for
     *
     * @remarks
     * this property depend on the value specified for `model`.
     */
    params: ReportCreateParams;
};

/**
 * A request to create a report.
 */
export type ReportCreate = {
    /**
     * The name of the report.
     */
    name: string;
    /**
     * The description of the report.
     */
    description?: string | null | undefined;
    /**
     * Specifies the schedule of the report.
     *
     * @remarks
     *
     * If this is a one-off report, set this value to `once`.
     *
     * If this is a recurring report, this value should be set to the
     * frequency by which the report will be executed. For example, a
     * `monthly` schedule means that the report will be periodically
     * executed at the start of each month.
     *
     * Note that a `weekly` schedule means that the report will be
     * executed at the start of every Monday.
     */
    schedule?: Schedule | undefined;
    /**
     * Indicates whether the report's scheduling is enabled. This value
     *
     * @remarks
     * can only be set to `true` if this is a recurring report.
     *
     * If this value is set to `true`, the report will be executed at
     * the `next_execution_at` date and time.
     *
     * If this is a recurring report and this value is set to `false`,
     * executions of the report will not occur until this value is set
     * to `true`.
     *
     * If this value is not provided, `schedule_enabled` will
     * automatically be set to `false` if `schedule` is `once` and set to
     * `true` otherwise.
     */
    scheduleEnabled?: boolean | null | undefined;
    /**
     * The time zone in which the report's executions will be scheduled.
     *
     * @remarks
     * This value is used to compute the report's `next_execution_at`
     * value and is only relevant when this is a recurring report. This
     * time zone is also used to calculate the timestamp range for reports
     * that use date-time placeholders. Date-time placeholders are dynamic
     * timestamps that change with every report execution.
     *
     * This value must be set to the time zone's name as presented in
     * the IANA time zone database. For example, to schedule reports in
     * the time zone of New York, set this value to `America/New_York`.
     */
    scheduleTimezone?: string | undefined;
    /**
     * The specifications of the report.
     */
    spec: ReportSpecification;
};

/** @internal */
export const Schedule$inboundSchema: z.ZodNativeEnum<typeof Schedule> = z.nativeEnum(Schedule);

/** @internal */
export const Schedule$outboundSchema: z.ZodNativeEnum<typeof Schedule> = Schedule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schedule$ {
    /** @deprecated use `Schedule$inboundSchema` instead. */
    export const inboundSchema = Schedule$inboundSchema;
    /** @deprecated use `Schedule$outboundSchema` instead. */
    export const outboundSchema = Schedule$outboundSchema;
}

/** @internal */
export const ReportCreateModel$inboundSchema: z.ZodNativeEnum<typeof ReportCreateModel> =
    z.nativeEnum(ReportCreateModel);

/** @internal */
export const ReportCreateModel$outboundSchema: z.ZodNativeEnum<typeof ReportCreateModel> =
    ReportCreateModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreateModel$ {
    /** @deprecated use `ReportCreateModel$inboundSchema` instead. */
    export const inboundSchema = ReportCreateModel$inboundSchema;
    /** @deprecated use `ReportCreateModel$outboundSchema` instead. */
    export const outboundSchema = ReportCreateModel$outboundSchema;
}

/** @internal */
export const ReportCreateFields$inboundSchema: z.ZodNativeEnum<typeof ReportCreateFields> =
    z.nativeEnum(ReportCreateFields);

/** @internal */
export const ReportCreateFields$outboundSchema: z.ZodNativeEnum<typeof ReportCreateFields> =
    ReportCreateFields$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreateFields$ {
    /** @deprecated use `ReportCreateFields$inboundSchema` instead. */
    export const inboundSchema = ReportCreateFields$inboundSchema;
    /** @deprecated use `ReportCreateFields$outboundSchema` instead. */
    export const outboundSchema = ReportCreateFields$outboundSchema;
}

/** @internal */
export const ReportCreateFilters$inboundSchema: z.ZodType<
    ReportCreateFilters,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: z.array(z.string()).optional(),
        created_at: z.string().optional(),
        updated_at: z.string().optional(),
        authorized_at: z.string().optional(),
        captured_at: z.string().optional(),
        voided_at: z.string().optional(),
        currency: z.array(z.string()).optional(),
        method: z.array(z.string()).optional(),
        scheme: z.array(z.string()).optional(),
        metadata: z.array(z.string()).optional(),
        is_subsequent_payment: z.boolean().optional(),
        merchant_initiated: z.boolean().optional(),
        payment_source: z.array(z.string()).optional(),
        three_d_secure_status: z.array(z.string()).optional(),
        three_d_secure_eci: z.array(z.string()).optional(),
        three_d_secure_auth_resp: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
            authorized_at: "authorizedAt",
            captured_at: "capturedAt",
            voided_at: "voidedAt",
            is_subsequent_payment: "isSubsequentPayment",
            merchant_initiated: "merchantInitiated",
            payment_source: "paymentSource",
            three_d_secure_status: "threeDSecureStatus",
            three_d_secure_eci: "threeDSecureEci",
            three_d_secure_auth_resp: "threeDSecureAuthResp",
        });
    });

/** @internal */
export type ReportCreateFilters$Outbound = {
    status?: Array<string> | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    authorized_at?: string | undefined;
    captured_at?: string | undefined;
    voided_at?: string | undefined;
    currency?: Array<string> | undefined;
    method?: Array<string> | undefined;
    scheme?: Array<string> | undefined;
    metadata?: Array<string> | undefined;
    is_subsequent_payment?: boolean | undefined;
    merchant_initiated?: boolean | undefined;
    payment_source?: Array<string> | undefined;
    three_d_secure_status?: Array<string> | undefined;
    three_d_secure_eci?: Array<string> | undefined;
    three_d_secure_auth_resp?: Array<string> | undefined;
};

/** @internal */
export const ReportCreateFilters$outboundSchema: z.ZodType<
    ReportCreateFilters$Outbound,
    z.ZodTypeDef,
    ReportCreateFilters
> = z
    .object({
        status: z.array(z.string()).optional(),
        createdAt: z.string().optional(),
        updatedAt: z.string().optional(),
        authorizedAt: z.string().optional(),
        capturedAt: z.string().optional(),
        voidedAt: z.string().optional(),
        currency: z.array(z.string()).optional(),
        method: z.array(z.string()).optional(),
        scheme: z.array(z.string()).optional(),
        metadata: z.array(z.string()).optional(),
        isSubsequentPayment: z.boolean().optional(),
        merchantInitiated: z.boolean().optional(),
        paymentSource: z.array(z.string()).optional(),
        threeDSecureStatus: z.array(z.string()).optional(),
        threeDSecureEci: z.array(z.string()).optional(),
        threeDSecureAuthResp: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
            authorizedAt: "authorized_at",
            capturedAt: "captured_at",
            voidedAt: "voided_at",
            isSubsequentPayment: "is_subsequent_payment",
            merchantInitiated: "merchant_initiated",
            paymentSource: "payment_source",
            threeDSecureStatus: "three_d_secure_status",
            threeDSecureEci: "three_d_secure_eci",
            threeDSecureAuthResp: "three_d_secure_auth_resp",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreateFilters$ {
    /** @deprecated use `ReportCreateFilters$inboundSchema` instead. */
    export const inboundSchema = ReportCreateFilters$inboundSchema;
    /** @deprecated use `ReportCreateFilters$outboundSchema` instead. */
    export const outboundSchema = ReportCreateFilters$outboundSchema;
    /** @deprecated use `ReportCreateFilters$Outbound` instead. */
    export type Outbound = ReportCreateFilters$Outbound;
}

/** @internal */
export const ReportCreateSort$inboundSchema: z.ZodType<ReportCreateSort, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type ReportCreateSort$Outbound = {};

/** @internal */
export const ReportCreateSort$outboundSchema: z.ZodType<
    ReportCreateSort$Outbound,
    z.ZodTypeDef,
    ReportCreateSort
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreateSort$ {
    /** @deprecated use `ReportCreateSort$inboundSchema` instead. */
    export const inboundSchema = ReportCreateSort$inboundSchema;
    /** @deprecated use `ReportCreateSort$outboundSchema` instead. */
    export const outboundSchema = ReportCreateSort$outboundSchema;
    /** @deprecated use `ReportCreateSort$Outbound` instead. */
    export type Outbound = ReportCreateSort$Outbound;
}

/** @internal */
export const ReportCreateParams$inboundSchema: z.ZodType<
    ReportCreateParams,
    z.ZodTypeDef,
    unknown
> = z.object({
    fields: z.array(ReportCreateFields$inboundSchema).optional(),
    filters: z.lazy(() => ReportCreateFilters$inboundSchema).optional(),
    sort: z.array(z.lazy(() => ReportCreateSort$inboundSchema)).optional(),
});

/** @internal */
export type ReportCreateParams$Outbound = {
    fields?: Array<string> | undefined;
    filters?: ReportCreateFilters$Outbound | undefined;
    sort?: Array<ReportCreateSort$Outbound> | undefined;
};

/** @internal */
export const ReportCreateParams$outboundSchema: z.ZodType<
    ReportCreateParams$Outbound,
    z.ZodTypeDef,
    ReportCreateParams
> = z.object({
    fields: z.array(ReportCreateFields$outboundSchema).optional(),
    filters: z.lazy(() => ReportCreateFilters$outboundSchema).optional(),
    sort: z.array(z.lazy(() => ReportCreateSort$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreateParams$ {
    /** @deprecated use `ReportCreateParams$inboundSchema` instead. */
    export const inboundSchema = ReportCreateParams$inboundSchema;
    /** @deprecated use `ReportCreateParams$outboundSchema` instead. */
    export const outboundSchema = ReportCreateParams$outboundSchema;
    /** @deprecated use `ReportCreateParams$Outbound` instead. */
    export type Outbound = ReportCreateParams$Outbound;
}

/** @internal */
export const ReportSpecification$inboundSchema: z.ZodType<
    ReportSpecification,
    z.ZodTypeDef,
    unknown
> = z.object({
    model: ReportCreateModel$inboundSchema,
    params: z.lazy(() => ReportCreateParams$inboundSchema),
});

/** @internal */
export type ReportSpecification$Outbound = {
    model: string;
    params: ReportCreateParams$Outbound;
};

/** @internal */
export const ReportSpecification$outboundSchema: z.ZodType<
    ReportSpecification$Outbound,
    z.ZodTypeDef,
    ReportSpecification
> = z.object({
    model: ReportCreateModel$outboundSchema,
    params: z.lazy(() => ReportCreateParams$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportSpecification$ {
    /** @deprecated use `ReportSpecification$inboundSchema` instead. */
    export const inboundSchema = ReportSpecification$inboundSchema;
    /** @deprecated use `ReportSpecification$outboundSchema` instead. */
    export const outboundSchema = ReportSpecification$outboundSchema;
    /** @deprecated use `ReportSpecification$Outbound` instead. */
    export type Outbound = ReportSpecification$Outbound;
}

/** @internal */
export const ReportCreate$inboundSchema: z.ZodType<ReportCreate, z.ZodTypeDef, unknown> = z
    .object({
        name: z.string(),
        description: z.nullable(z.string()).optional(),
        schedule: Schedule$inboundSchema.default("once"),
        schedule_enabled: z.nullable(z.boolean()).optional(),
        schedule_timezone: z.string().default("Etc/UTC"),
        spec: z.lazy(() => ReportSpecification$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            schedule_enabled: "scheduleEnabled",
            schedule_timezone: "scheduleTimezone",
        });
    });

/** @internal */
export type ReportCreate$Outbound = {
    name: string;
    description?: string | null | undefined;
    schedule: string;
    schedule_enabled?: boolean | null | undefined;
    schedule_timezone: string;
    spec: ReportSpecification$Outbound;
};

/** @internal */
export const ReportCreate$outboundSchema: z.ZodType<
    ReportCreate$Outbound,
    z.ZodTypeDef,
    ReportCreate
> = z
    .object({
        name: z.string(),
        description: z.nullable(z.string()).optional(),
        schedule: Schedule$outboundSchema.default("once"),
        scheduleEnabled: z.nullable(z.boolean()).optional(),
        scheduleTimezone: z.string().default("Etc/UTC"),
        spec: z.lazy(() => ReportSpecification$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            scheduleEnabled: "schedule_enabled",
            scheduleTimezone: "schedule_timezone",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreate$ {
    /** @deprecated use `ReportCreate$inboundSchema` instead. */
    export const inboundSchema = ReportCreate$inboundSchema;
    /** @deprecated use `ReportCreate$outboundSchema` instead. */
    export const outboundSchema = ReportCreate$outboundSchema;
    /** @deprecated use `ReportCreate$Outbound` instead. */
    export type Outbound = ReportCreate$Outbound;
}
