/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    DetailedSettlementReportSpec,
    DetailedSettlementReportSpec$inboundSchema,
    DetailedSettlementReportSpec$Outbound,
    DetailedSettlementReportSpec$outboundSchema,
} from "./detailedsettlementreportspec.js";
import {
    ReportSchedule,
    ReportSchedule$inboundSchema,
    ReportSchedule$outboundSchema,
} from "./reportschedule.js";
import {
    TransactionRetriesReportSpec,
    TransactionRetriesReportSpec$inboundSchema,
    TransactionRetriesReportSpec$Outbound,
    TransactionRetriesReportSpec$outboundSchema,
} from "./transactionretriesreportspec.js";
import {
    TransactionsReportSpec,
    TransactionsReportSpec$inboundSchema,
    TransactionsReportSpec$Outbound,
    TransactionsReportSpec$outboundSchema,
} from "./transactionsreportspec.js";
import * as z from "zod";

export type Spec =
    | (TransactionsReportSpec & { model: "transactions" })
    | (TransactionRetriesReportSpec & { model: "transaction_retries" })
    | (DetailedSettlementReportSpec & { model: "detailed_settlement" });

/**
 * Base model with JSON encoders.
 */
export type ReportCreate = {
    name: string;
    description?: string | undefined;
    /**
     * An enumeration.
     */
    schedule: ReportSchedule;
    scheduleEnabled: boolean;
    scheduleTimezone?: string | undefined;
    spec:
        | (TransactionsReportSpec & { model: "transactions" })
        | (TransactionRetriesReportSpec & { model: "transaction_retries" })
        | (DetailedSettlementReportSpec & { model: "detailed_settlement" });
};

/** @internal */
export const Spec$inboundSchema: z.ZodType<Spec, z.ZodTypeDef, unknown> = z.union([
    TransactionsReportSpec$inboundSchema.and(
        z.object({ model: z.literal("transactions") }).transform((v) => ({ model: v.model }))
    ),
    TransactionRetriesReportSpec$inboundSchema.and(
        z.object({ model: z.literal("transaction_retries") }).transform((v) => ({ model: v.model }))
    ),
    DetailedSettlementReportSpec$inboundSchema.and(
        z.object({ model: z.literal("detailed_settlement") }).transform((v) => ({ model: v.model }))
    ),
]);

/** @internal */
export type Spec$Outbound =
    | (TransactionsReportSpec$Outbound & { model: "transactions" })
    | (TransactionRetriesReportSpec$Outbound & { model: "transaction_retries" })
    | (DetailedSettlementReportSpec$Outbound & { model: "detailed_settlement" });

/** @internal */
export const Spec$outboundSchema: z.ZodType<Spec$Outbound, z.ZodTypeDef, Spec> = z.union([
    TransactionsReportSpec$outboundSchema.and(
        z.object({ model: z.literal("transactions") }).transform((v) => ({ model: v.model }))
    ),
    TransactionRetriesReportSpec$outboundSchema.and(
        z.object({ model: z.literal("transaction_retries") }).transform((v) => ({ model: v.model }))
    ),
    DetailedSettlementReportSpec$outboundSchema.and(
        z.object({ model: z.literal("detailed_settlement") }).transform((v) => ({ model: v.model }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Spec$ {
    /** @deprecated use `Spec$inboundSchema` instead. */
    export const inboundSchema = Spec$inboundSchema;
    /** @deprecated use `Spec$outboundSchema` instead. */
    export const outboundSchema = Spec$outboundSchema;
    /** @deprecated use `Spec$Outbound` instead. */
    export type Outbound = Spec$Outbound;
}

/** @internal */
export const ReportCreate$inboundSchema: z.ZodType<ReportCreate, z.ZodTypeDef, unknown> = z
    .object({
        name: z.string(),
        description: z.string().optional(),
        schedule: ReportSchedule$inboundSchema,
        schedule_enabled: z.boolean(),
        schedule_timezone: z.string().default("Etc/UTC"),
        spec: z.union([
            TransactionsReportSpec$inboundSchema.and(
                z
                    .object({ model: z.literal("transactions") })
                    .transform((v) => ({ model: v.model }))
            ),
            TransactionRetriesReportSpec$inboundSchema.and(
                z
                    .object({ model: z.literal("transaction_retries") })
                    .transform((v) => ({ model: v.model }))
            ),
            DetailedSettlementReportSpec$inboundSchema.and(
                z
                    .object({ model: z.literal("detailed_settlement") })
                    .transform((v) => ({ model: v.model }))
            ),
        ]),
    })
    .transform((v) => {
        return remap$(v, {
            schedule_enabled: "scheduleEnabled",
            schedule_timezone: "scheduleTimezone",
        });
    });

/** @internal */
export type ReportCreate$Outbound = {
    name: string;
    description?: string | undefined;
    schedule: string;
    schedule_enabled: boolean;
    schedule_timezone: string;
    spec:
        | (TransactionsReportSpec$Outbound & { model: "transactions" })
        | (TransactionRetriesReportSpec$Outbound & { model: "transaction_retries" })
        | (DetailedSettlementReportSpec$Outbound & { model: "detailed_settlement" });
};

/** @internal */
export const ReportCreate$outboundSchema: z.ZodType<
    ReportCreate$Outbound,
    z.ZodTypeDef,
    ReportCreate
> = z
    .object({
        name: z.string(),
        description: z.string().optional(),
        schedule: ReportSchedule$outboundSchema,
        scheduleEnabled: z.boolean(),
        scheduleTimezone: z.string().default("Etc/UTC"),
        spec: z.union([
            TransactionsReportSpec$outboundSchema.and(
                z
                    .object({ model: z.literal("transactions") })
                    .transform((v) => ({ model: v.model }))
            ),
            TransactionRetriesReportSpec$outboundSchema.and(
                z
                    .object({ model: z.literal("transaction_retries") })
                    .transform((v) => ({ model: v.model }))
            ),
            DetailedSettlementReportSpec$outboundSchema.and(
                z
                    .object({ model: z.literal("detailed_settlement") })
                    .transform((v) => ({ model: v.model }))
            ),
        ]),
    })
    .transform((v) => {
        return remap$(v, {
            scheduleEnabled: "schedule_enabled",
            scheduleTimezone: "schedule_timezone",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCreate$ {
    /** @deprecated use `ReportCreate$inboundSchema` instead. */
    export const inboundSchema = ReportCreate$inboundSchema;
    /** @deprecated use `ReportCreate$outboundSchema` instead. */
    export const outboundSchema = ReportCreate$outboundSchema;
    /** @deprecated use `ReportCreate$Outbound` instead. */
    export type Outbound = ReportCreate$Outbound;
}
