/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `card-scheme-definition`.
 */
export const CardSchemeDefinitionType = {
  CardSchemeDefinition: "card-scheme-definition",
} as const;
/**
 * Always `card-scheme-definition`.
 */
export type CardSchemeDefinitionType = ClosedEnum<
  typeof CardSchemeDefinitionType
>;

/**
 * Base model with JSON encoders.
 */
export type CardSchemeDefinition = {
  /**
   * Always `card-scheme-definition`.
   */
  type?: CardSchemeDefinitionType | undefined;
  /**
   * The ID for the card scheme.
   */
  id: string;
  /**
   * The icon for this card scheme.
   */
  iconUrl: string;
  /**
   * The display name of this card scheme.
   */
  displayName: string;
};

/** @internal */
export const CardSchemeDefinitionType$inboundSchema: z.ZodNativeEnum<
  typeof CardSchemeDefinitionType
> = z.nativeEnum(CardSchemeDefinitionType);

/** @internal */
export const CardSchemeDefinitionType$outboundSchema: z.ZodNativeEnum<
  typeof CardSchemeDefinitionType
> = CardSchemeDefinitionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardSchemeDefinitionType$ {
  /** @deprecated use `CardSchemeDefinitionType$inboundSchema` instead. */
  export const inboundSchema = CardSchemeDefinitionType$inboundSchema;
  /** @deprecated use `CardSchemeDefinitionType$outboundSchema` instead. */
  export const outboundSchema = CardSchemeDefinitionType$outboundSchema;
}

/** @internal */
export const CardSchemeDefinition$inboundSchema: z.ZodType<
  CardSchemeDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CardSchemeDefinitionType$inboundSchema.default(
    "card-scheme-definition",
  ),
  id: z.string(),
  icon_url: z.string(),
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "icon_url": "iconUrl",
    "display_name": "displayName",
  });
});

/** @internal */
export type CardSchemeDefinition$Outbound = {
  type: string;
  id: string;
  icon_url: string;
  display_name: string;
};

/** @internal */
export const CardSchemeDefinition$outboundSchema: z.ZodType<
  CardSchemeDefinition$Outbound,
  z.ZodTypeDef,
  CardSchemeDefinition
> = z.object({
  type: CardSchemeDefinitionType$outboundSchema.default(
    "card-scheme-definition",
  ),
  id: z.string(),
  iconUrl: z.string(),
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    iconUrl: "icon_url",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardSchemeDefinition$ {
  /** @deprecated use `CardSchemeDefinition$inboundSchema` instead. */
  export const inboundSchema = CardSchemeDefinition$inboundSchema;
  /** @deprecated use `CardSchemeDefinition$outboundSchema` instead. */
  export const outboundSchema = CardSchemeDefinition$outboundSchema;
  /** @deprecated use `CardSchemeDefinition$Outbound` instead. */
  export type Outbound = CardSchemeDefinition$Outbound;
}

export function cardSchemeDefinitionToJSON(
  cardSchemeDefinition: CardSchemeDefinition,
): string {
  return JSON.stringify(
    CardSchemeDefinition$outboundSchema.parse(cardSchemeDefinition),
  );
}

export function cardSchemeDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<CardSchemeDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardSchemeDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardSchemeDefinition' from JSON`,
  );
}
