/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * `card-scheme-definition`.
 */
export const CardSchemeDefinitionType = {
    CardSchemeDefinition: "card-scheme-definition",
} as const;
/**
 * `card-scheme-definition`.
 */
export type CardSchemeDefinitionType = ClosedEnum<typeof CardSchemeDefinitionType>;

/**
 * Definitions of a card scheme including icon, label, etc.
 */
export type CardSchemeDefinition = {
    /**
     * `card-scheme-definition`.
     */
    type?: CardSchemeDefinitionType | undefined;
    /**
     * The name of this card scheme.
     */
    id?: string | undefined;
    /**
     * The icon for this card scheme.
     */
    iconUrl?: string | undefined;
    /**
     * The display name of this card scheme.
     */
    displayName?: string | undefined;
};

/** @internal */
export const CardSchemeDefinitionType$inboundSchema: z.ZodNativeEnum<
    typeof CardSchemeDefinitionType
> = z.nativeEnum(CardSchemeDefinitionType);

/** @internal */
export const CardSchemeDefinitionType$outboundSchema: z.ZodNativeEnum<
    typeof CardSchemeDefinitionType
> = CardSchemeDefinitionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardSchemeDefinitionType$ {
    /** @deprecated use `CardSchemeDefinitionType$inboundSchema` instead. */
    export const inboundSchema = CardSchemeDefinitionType$inboundSchema;
    /** @deprecated use `CardSchemeDefinitionType$outboundSchema` instead. */
    export const outboundSchema = CardSchemeDefinitionType$outboundSchema;
}

/** @internal */
export const CardSchemeDefinition$inboundSchema: z.ZodType<
    CardSchemeDefinition,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: CardSchemeDefinitionType$inboundSchema.optional(),
        id: z.string().optional(),
        icon_url: z.string().optional(),
        display_name: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            icon_url: "iconUrl",
            display_name: "displayName",
        });
    });

/** @internal */
export type CardSchemeDefinition$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    icon_url?: string | undefined;
    display_name?: string | undefined;
};

/** @internal */
export const CardSchemeDefinition$outboundSchema: z.ZodType<
    CardSchemeDefinition$Outbound,
    z.ZodTypeDef,
    CardSchemeDefinition
> = z
    .object({
        type: CardSchemeDefinitionType$outboundSchema.optional(),
        id: z.string().optional(),
        iconUrl: z.string().optional(),
        displayName: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            iconUrl: "icon_url",
            displayName: "display_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardSchemeDefinition$ {
    /** @deprecated use `CardSchemeDefinition$inboundSchema` instead. */
    export const inboundSchema = CardSchemeDefinition$inboundSchema;
    /** @deprecated use `CardSchemeDefinition$outboundSchema` instead. */
    export const outboundSchema = CardSchemeDefinition$outboundSchema;
    /** @deprecated use `CardSchemeDefinition$Outbound` instead. */
    export type Outbound = CardSchemeDefinition$Outbound;
}
