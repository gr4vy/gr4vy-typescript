/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * `card-scheme-definition`.
 */
export enum CardSchemeDefinitionType {
    CardSchemeDefinition = "card-scheme-definition",
}

/**
 * Definitions of a card scheme including icon, label, etc.
 */
export type CardSchemeDefinition = {
    /**
     * `card-scheme-definition`.
     */
    type?: CardSchemeDefinitionType | undefined;
    /**
     * The name of this card scheme.
     */
    id?: string | undefined;
    /**
     * The icon for this card scheme.
     */
    iconUrl?: string | undefined;
    /**
     * The display name of this card scheme.
     */
    displayName?: string | undefined;
};

/** @internal */
export namespace CardSchemeDefinitionType$ {
    export const inboundSchema = z.nativeEnum(CardSchemeDefinitionType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CardSchemeDefinition$ {
    export const inboundSchema: z.ZodType<CardSchemeDefinition, z.ZodTypeDef, unknown> = z
        .object({
            type: CardSchemeDefinitionType$.inboundSchema.optional(),
            id: z.string().optional(),
            icon_url: z.string().optional(),
            display_name: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                icon_url: "iconUrl",
                display_name: "displayName",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        icon_url?: string | undefined;
        display_name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CardSchemeDefinition> = z
        .object({
            type: CardSchemeDefinitionType$.outboundSchema.optional(),
            id: z.string().optional(),
            iconUrl: z.string().optional(),
            displayName: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                iconUrl: "icon_url",
                displayName: "display_name",
            });
        });
}
