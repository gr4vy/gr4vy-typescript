/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AccountUpdaterInquirySummary,
    AccountUpdaterInquirySummary$,
} from "./accountupdaterinquirysummary";
import * as z from "zod";

/**
 * The type of this resource. Is always `account-updater-job`.
 */
export enum Type {
    AccountUpdaterJob = "account-updater-job",
}

/**
 * An Account Updater job.
 */
export type AccountUpdaterJob = {
    /**
     * The type of this resource. Is always `account-updater-job`.
     */
    type?: Type | undefined;
    /**
     * The unique identifier for this Account Updater job.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The date and time when this Account Updater job was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this Account Updater job was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * A list of inquiries associated with this Account Updater job.
     */
    inquiries?: Array<AccountUpdaterInquirySummary> | undefined;
};

/** @internal */
export const Type$: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export namespace AccountUpdaterJob$ {
    export type Inbound = {
        type?: Type | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        inquiries?: Array<AccountUpdaterInquirySummary$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<AccountUpdaterJob, z.ZodTypeDef, Inbound> = z
        .object({
            type: Type$.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            inquiries: z.array(AccountUpdaterInquirySummary$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.inquiries === undefined ? null : { inquiries: v.inquiries }),
            };
        });

    export type Outbound = {
        type?: Type | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        inquiries?: Array<AccountUpdaterInquirySummary$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountUpdaterJob> = z
        .object({
            type: Type$.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            inquiries: z.array(AccountUpdaterInquirySummary$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.inquiries === undefined ? null : { inquiries: v.inquiries }),
            };
        });
}
