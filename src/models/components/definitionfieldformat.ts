/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export const DefinitionFieldFormat = {
  Text: "text",
  Multiline: "multiline",
  Number: "number",
  Timezone: "timezone",
  Boolean: "boolean",
} as const;
export type DefinitionFieldFormat = OpenEnum<typeof DefinitionFieldFormat>;

/** @internal */
export const DefinitionFieldFormat$inboundSchema: z.ZodType<
  DefinitionFieldFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(DefinitionFieldFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const DefinitionFieldFormat$outboundSchema: z.ZodType<
  DefinitionFieldFormat,
  z.ZodTypeDef,
  DefinitionFieldFormat
> = z.union([
  z.nativeEnum(DefinitionFieldFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefinitionFieldFormat$ {
  /** @deprecated use `DefinitionFieldFormat$inboundSchema` instead. */
  export const inboundSchema = DefinitionFieldFormat$inboundSchema;
  /** @deprecated use `DefinitionFieldFormat$outboundSchema` instead. */
  export const outboundSchema = DefinitionFieldFormat$outboundSchema;
}
