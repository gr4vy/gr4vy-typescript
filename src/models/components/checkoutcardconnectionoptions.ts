/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CheckoutCardConnectionOptions = {
  /**
   * The processing channel to be used for the payment.
   */
  processingChannelId: string;
  /**
   * The ID of the currency account that will fund the payout.
   */
  sourceId: string;
};

/** @internal */
export const CheckoutCardConnectionOptions$inboundSchema: z.ZodType<
  CheckoutCardConnectionOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  processing_channel_id: z.string(),
  source_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "processing_channel_id": "processingChannelId",
    "source_id": "sourceId",
  });
});

/** @internal */
export type CheckoutCardConnectionOptions$Outbound = {
  processing_channel_id: string;
  source_id: string;
};

/** @internal */
export const CheckoutCardConnectionOptions$outboundSchema: z.ZodType<
  CheckoutCardConnectionOptions$Outbound,
  z.ZodTypeDef,
  CheckoutCardConnectionOptions
> = z.object({
  processingChannelId: z.string(),
  sourceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    processingChannelId: "processing_channel_id",
    sourceId: "source_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutCardConnectionOptions$ {
  /** @deprecated use `CheckoutCardConnectionOptions$inboundSchema` instead. */
  export const inboundSchema = CheckoutCardConnectionOptions$inboundSchema;
  /** @deprecated use `CheckoutCardConnectionOptions$outboundSchema` instead. */
  export const outboundSchema = CheckoutCardConnectionOptions$outboundSchema;
  /** @deprecated use `CheckoutCardConnectionOptions$Outbound` instead. */
  export type Outbound = CheckoutCardConnectionOptions$Outbound;
}

export function checkoutCardConnectionOptionsToJSON(
  checkoutCardConnectionOptions: CheckoutCardConnectionOptions,
): string {
  return JSON.stringify(
    CheckoutCardConnectionOptions$outboundSchema.parse(
      checkoutCardConnectionOptions,
    ),
  );
}

export function checkoutCardConnectionOptionsFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutCardConnectionOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutCardConnectionOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutCardConnectionOptions' from JSON`,
  );
}
