/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * A key-value pair that represents a field defined in the definition for this payment service.
 */
export type PaymentServiceUpdateFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set; you can unset optional fields by setting this to an empty string `""`.
     */
    value: string;
};

/**
 * Merchant profile for Amex.
 */
export type PaymentServiceUpdateMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Dankort.
 */
export type PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Discover.
 */
export type PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for JCB.
 */
export type PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Mastercard.
 */
export type PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for UnionPay.
 */
export type PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Visa.
 */
export type PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Configuration for each supported card scheme.
 *
 * @remarks
 * When updating a Payment Service, a key not being present will
 * indicate no updates to be done on that scheme, whereas an object being
 * sent as Null for a key will empty the configuration for that scheme.
 */
export type PaymentServiceUpdateMerchantProfile = {
    /**
     * Merchant profile for Amex.
     */
    amex?: PaymentServiceUpdateMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Dankort.
     */
    dankort?: PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Discover.
     */
    discover?:
        | PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for JCB.
     */
    jcb?: PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Mastercard.
     */
    mastercard?:
        | PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for UnionPay.
     */
    unionpay?:
        | PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for Visa.
     */
    visa?: PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme | null | undefined;
};

/**
 * Request body for updating an active payment service.
 */
export type PaymentServiceUpdate = {
    /**
     * A custom name for the payment service. This will be shown in the Admin UI.
     */
    displayName?: string | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent within this field.
     */
    fields?: Array<PaymentServiceUpdateFields> | undefined;
    /**
     * A list of countries that this payment service needs to support in ISO two-letter code format.
     */
    acceptedCountries?: Array<string> | undefined;
    /**
     * A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.
     */
    acceptedCurrencies?: Array<string> | undefined;
    /**
     * Defines if 3-D Secure is enabled for the service (can only be
     *
     * @remarks
     * enabled if the payment service definition supports
     * the `three_d_secure_hosted` feature).
     * This does not affect pass through 3-D Secure data.
     */
    threeDSecureEnabled?: boolean | undefined;
    /**
     * Configuration for each supported card scheme.
     *
     * @remarks
     * When updating a Payment Service, a key not being present will
     * indicate no updates to be done on that scheme, whereas an object being
     * sent as Null for a key will empty the configuration for that scheme.
     */
    merchantProfile?: PaymentServiceUpdateMerchantProfile | null | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * Defines if the service works as an open-loop service. This feature
     *
     * @remarks
     * can only be enabled if the PSP is set up to accept previous scheme
     * transaction IDs.
     *
     * If this value is set to `null`, it will be set to the value of
     * `open_loop` in the payment service definition.
     *
     * If `open_loop_toggle` is `false` in the payment service definition,
     * `open_loop` should either not be provided or set to `null`, or it
     * will fail with a validation error.
     */
    openLoop?: boolean | null | undefined;
    /**
     * Defines if tokenization is enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is NOT set as `open_loop`
     * and the PSP is set up to tokenize.
     */
    paymentMethodTokenizationEnabled?: boolean | null | undefined;
    /**
     * Defines if network tokens are enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is set as `open_loop` and
     * the PSP is set up to accept network tokens.
     *
     * If this value is set to `null`, it will be set to the value of
     * `network_tokens_default` in the payment service definition.
     *
     * If `network_tokens_toggle` is `false` in the payment service definition,
     * `network_tokens_enabled` should either not be provided or set to `null`,
     * or it will fail with a validation error.
     */
    networkTokensEnabled?: boolean | null | undefined;
};

/** @internal */
export const PaymentServiceUpdateFields$inboundSchema: z.ZodType<
    PaymentServiceUpdateFields,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string(),
    value: z.string(),
});

/** @internal */
export type PaymentServiceUpdateFields$Outbound = {
    key: string;
    value: string;
};

/** @internal */
export const PaymentServiceUpdateFields$outboundSchema: z.ZodType<
    PaymentServiceUpdateFields$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateFields
> = z.object({
    key: z.string(),
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateFields$ {
    /** @deprecated use `PaymentServiceUpdateFields$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceUpdateFields$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateFields$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceUpdateFields$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateFields$Outbound` instead. */
    export type Outbound = PaymentServiceUpdateFields$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceUpdateMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceUpdateMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceUpdateMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceUpdateMerchantProfile$inboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfile,
    z.ZodTypeDef,
    unknown
> = z.object({
    amex: z
        .nullable(z.lazy(() => PaymentServiceUpdateMerchantProfileSingleScheme$inboundSchema))
        .optional(),
    dankort: z
        .nullable(
            z.lazy(
                () => PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    discover: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    jcb: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    mastercard: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    unionpay: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    visa: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
});

/** @internal */
export type PaymentServiceUpdateMerchantProfile$Outbound = {
    amex?: PaymentServiceUpdateMerchantProfileSingleScheme$Outbound | null | undefined;
    dankort?:
        | PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    discover?:
        | PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    jcb?:
        | PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    mastercard?:
        | PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    unionpay?:
        | PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    visa?:
        | PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
};

/** @internal */
export const PaymentServiceUpdateMerchantProfile$outboundSchema: z.ZodType<
    PaymentServiceUpdateMerchantProfile$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdateMerchantProfile
> = z.object({
    amex: z
        .nullable(z.lazy(() => PaymentServiceUpdateMerchantProfileSingleScheme$outboundSchema))
        .optional(),
    dankort: z
        .nullable(
            z.lazy(
                () => PaymentServiceUpdateMerchantProfileMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    discover: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    jcb: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    mastercard: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    unionpay: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    visa: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceUpdateMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdateMerchantProfile$ {
    /** @deprecated use `PaymentServiceUpdateMerchantProfile$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceUpdateMerchantProfile$inboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfile$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceUpdateMerchantProfile$outboundSchema;
    /** @deprecated use `PaymentServiceUpdateMerchantProfile$Outbound` instead. */
    export type Outbound = PaymentServiceUpdateMerchantProfile$Outbound;
}

/** @internal */
export const PaymentServiceUpdate$inboundSchema: z.ZodType<
    PaymentServiceUpdate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        display_name: z.string().optional(),
        fields: z.array(z.lazy(() => PaymentServiceUpdateFields$inboundSchema)).optional(),
        accepted_countries: z.array(z.string()).optional(),
        accepted_currencies: z.array(z.string()).optional(),
        three_d_secure_enabled: z.boolean().default(false),
        merchant_profile: z
            .nullable(z.lazy(() => PaymentServiceUpdateMerchantProfile$inboundSchema))
            .optional(),
        active: z.boolean().default(true),
        open_loop: z.nullable(z.boolean()).optional(),
        payment_method_tokenization_enabled: z.nullable(z.boolean()).optional(),
        network_tokens_enabled: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
            accepted_countries: "acceptedCountries",
            accepted_currencies: "acceptedCurrencies",
            three_d_secure_enabled: "threeDSecureEnabled",
            merchant_profile: "merchantProfile",
            open_loop: "openLoop",
            payment_method_tokenization_enabled: "paymentMethodTokenizationEnabled",
            network_tokens_enabled: "networkTokensEnabled",
        });
    });

/** @internal */
export type PaymentServiceUpdate$Outbound = {
    display_name?: string | undefined;
    fields?: Array<PaymentServiceUpdateFields$Outbound> | undefined;
    accepted_countries?: Array<string> | undefined;
    accepted_currencies?: Array<string> | undefined;
    three_d_secure_enabled: boolean;
    merchant_profile?: PaymentServiceUpdateMerchantProfile$Outbound | null | undefined;
    active: boolean;
    open_loop?: boolean | null | undefined;
    payment_method_tokenization_enabled?: boolean | null | undefined;
    network_tokens_enabled?: boolean | null | undefined;
};

/** @internal */
export const PaymentServiceUpdate$outboundSchema: z.ZodType<
    PaymentServiceUpdate$Outbound,
    z.ZodTypeDef,
    PaymentServiceUpdate
> = z
    .object({
        displayName: z.string().optional(),
        fields: z.array(z.lazy(() => PaymentServiceUpdateFields$outboundSchema)).optional(),
        acceptedCountries: z.array(z.string()).optional(),
        acceptedCurrencies: z.array(z.string()).optional(),
        threeDSecureEnabled: z.boolean().default(false),
        merchantProfile: z
            .nullable(z.lazy(() => PaymentServiceUpdateMerchantProfile$outboundSchema))
            .optional(),
        active: z.boolean().default(true),
        openLoop: z.nullable(z.boolean()).optional(),
        paymentMethodTokenizationEnabled: z.nullable(z.boolean()).optional(),
        networkTokensEnabled: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
            acceptedCountries: "accepted_countries",
            acceptedCurrencies: "accepted_currencies",
            threeDSecureEnabled: "three_d_secure_enabled",
            merchantProfile: "merchant_profile",
            openLoop: "open_loop",
            paymentMethodTokenizationEnabled: "payment_method_tokenization_enabled",
            networkTokensEnabled: "network_tokens_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceUpdate$ {
    /** @deprecated use `PaymentServiceUpdate$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceUpdate$inboundSchema;
    /** @deprecated use `PaymentServiceUpdate$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceUpdate$outboundSchema;
    /** @deprecated use `PaymentServiceUpdate$Outbound` instead. */
    export type Outbound = PaymentServiceUpdate$Outbound;
}
