/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardScheme,
  CardScheme$inboundSchema,
  CardScheme$outboundSchema,
} from "./cardscheme.js";
import {
  Method,
  Method$inboundSchema,
  Method$outboundSchema,
} from "./method.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  PaymentMethodDetailsCard,
  PaymentMethodDetailsCard$inboundSchema,
  PaymentMethodDetailsCard$Outbound,
  PaymentMethodDetailsCard$outboundSchema,
} from "./paymentmethoddetailscard.js";

/**
 * Payment Method
 *
 * @remarks
 *
 * A summary of a payment method.
 */
export type PaymentMethodSummary = {
  /**
   * Always `payment-method`.
   */
  type?: "payment-method" | undefined;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize their payment.
   */
  approvalUrl?: string | null | undefined;
  /**
   * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
   */
  country?: string | null | undefined;
  /**
   * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
   */
  currency?: string | null | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: PaymentMethodDetailsCard | null | undefined;
  /**
   * The expiration date for the payment method.
   */
  expirationDate?: string | null | undefined;
  /**
   * The unique hash derived from the payment method identifier (e.g. card number).
   */
  fingerprint?: string | null | undefined;
  /**
   * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
   */
  label?: string | null | undefined;
  /**
   * The date and time when this card was last replaced by the account updater.
   */
  lastReplacedAt?: Date | null | undefined;
  method: Method;
  /**
   * The mode to use with this payment method.
   */
  mode?: Mode | null | undefined;
  /**
   * The scheme of the card. Only applies to card payments.
   */
  scheme?: CardScheme | null | undefined;
  /**
   * The ID for the payment method.
   */
  id: string;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
   */
  additionalSchemes?: Array<CardScheme> | null | undefined;
  /**
   * The timestamp when this payment method was last used in a transaction for client initiated transactions.
   */
  citLastUsedAt?: Date | null | undefined;
  /**
   * The number of times this payment method has been used in transactions for client initiated transactions.
   */
  citUsageCount: number;
  /**
   * Whether this card has a pending replacement that hasn't been applied yet.
   */
  hasReplacement: boolean;
  /**
   * The timestamp when this payment method was last used in a transaction.
   */
  lastUsedAt?: Date | null | undefined;
  /**
   * The number of times this payment method has been used in transactions.
   */
  usageCount: number;
};

/** @internal */
export const PaymentMethodSummary$inboundSchema: z.ZodType<
  PaymentMethodSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("payment-method").default("payment-method"),
  approval_url: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  details: z.nullable(PaymentMethodDetailsCard$inboundSchema).optional(),
  expiration_date: z.nullable(z.string()).optional(),
  fingerprint: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  last_replaced_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  method: Method$inboundSchema,
  mode: z.nullable(Mode$inboundSchema).optional(),
  scheme: z.nullable(CardScheme$inboundSchema).optional(),
  id: z.string(),
  merchant_account_id: z.string(),
  additional_schemes: z.nullable(z.array(CardScheme$inboundSchema)).optional(),
  cit_last_used_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  cit_usage_count: z.number().int(),
  has_replacement: z.boolean(),
  last_used_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  usage_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "approval_url": "approvalUrl",
    "expiration_date": "expirationDate",
    "last_replaced_at": "lastReplacedAt",
    "merchant_account_id": "merchantAccountId",
    "additional_schemes": "additionalSchemes",
    "cit_last_used_at": "citLastUsedAt",
    "cit_usage_count": "citUsageCount",
    "has_replacement": "hasReplacement",
    "last_used_at": "lastUsedAt",
    "usage_count": "usageCount",
  });
});

/** @internal */
export type PaymentMethodSummary$Outbound = {
  type: "payment-method";
  approval_url?: string | null | undefined;
  country?: string | null | undefined;
  currency?: string | null | undefined;
  details?: PaymentMethodDetailsCard$Outbound | null | undefined;
  expiration_date?: string | null | undefined;
  fingerprint?: string | null | undefined;
  label?: string | null | undefined;
  last_replaced_at?: string | null | undefined;
  method: string;
  mode?: string | null | undefined;
  scheme?: string | null | undefined;
  id: string;
  merchant_account_id: string;
  additional_schemes?: Array<string> | null | undefined;
  cit_last_used_at?: string | null | undefined;
  cit_usage_count: number;
  has_replacement: boolean;
  last_used_at?: string | null | undefined;
  usage_count: number;
};

/** @internal */
export const PaymentMethodSummary$outboundSchema: z.ZodType<
  PaymentMethodSummary$Outbound,
  z.ZodTypeDef,
  PaymentMethodSummary
> = z.object({
  type: z.literal("payment-method").default("payment-method" as const),
  approvalUrl: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  details: z.nullable(PaymentMethodDetailsCard$outboundSchema).optional(),
  expirationDate: z.nullable(z.string()).optional(),
  fingerprint: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  lastReplacedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  method: Method$outboundSchema,
  mode: z.nullable(Mode$outboundSchema).optional(),
  scheme: z.nullable(CardScheme$outboundSchema).optional(),
  id: z.string(),
  merchantAccountId: z.string(),
  additionalSchemes: z.nullable(z.array(CardScheme$outboundSchema)).optional(),
  citLastUsedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  citUsageCount: z.number().int(),
  hasReplacement: z.boolean(),
  lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  usageCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    approvalUrl: "approval_url",
    expirationDate: "expiration_date",
    lastReplacedAt: "last_replaced_at",
    merchantAccountId: "merchant_account_id",
    additionalSchemes: "additional_schemes",
    citLastUsedAt: "cit_last_used_at",
    citUsageCount: "cit_usage_count",
    hasReplacement: "has_replacement",
    lastUsedAt: "last_used_at",
    usageCount: "usage_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodSummary$ {
  /** @deprecated use `PaymentMethodSummary$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodSummary$inboundSchema;
  /** @deprecated use `PaymentMethodSummary$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodSummary$outboundSchema;
  /** @deprecated use `PaymentMethodSummary$Outbound` instead. */
  export type Outbound = PaymentMethodSummary$Outbound;
}

export function paymentMethodSummaryToJSON(
  paymentMethodSummary: PaymentMethodSummary,
): string {
  return JSON.stringify(
    PaymentMethodSummary$outboundSchema.parse(paymentMethodSummary),
  );
}

export function paymentMethodSummaryFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodSummary' from JSON`,
  );
}
