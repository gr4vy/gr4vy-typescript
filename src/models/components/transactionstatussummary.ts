/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `transaction`.
 */
export const TransactionStatusSummaryType = {
  Transaction: "transaction",
} as const;
/**
 * Always `transaction`.
 */
export type TransactionStatusSummaryType = ClosedEnum<
  typeof TransactionStatusSummaryType
>;

/**
 * The status of the transaction.
 */
export const TransactionStatusSummaryTransactionStatus = {
  Processing: "processing",
  AuthorizationSucceeded: "authorization_succeeded",
  AuthorizationDeclined: "authorization_declined",
  AuthorizationFailed: "authorization_failed",
  AuthorizationVoided: "authorization_voided",
  AuthorizationVoidPending: "authorization_void_pending",
  CaptureSucceeded: "capture_succeeded",
  CapturePending: "capture_pending",
  BuyerApprovalPending: "buyer_approval_pending",
} as const;
/**
 * The status of the transaction.
 */
export type TransactionStatusSummaryTransactionStatus = ClosedEnum<
  typeof TransactionStatusSummaryTransactionStatus
>;

/**
 * Base model with JSON encoders.
 */
export type TransactionStatusSummary = {
  /**
   * Always `transaction`.
   */
  type?: TransactionStatusSummaryType | undefined;
  /**
   * The ID for the transaction.
   */
  id: string;
  /**
   * The status of the transaction.
   */
  status: TransactionStatusSummaryTransactionStatus;
};

/** @internal */
export const TransactionStatusSummaryType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionStatusSummaryType
> = z.nativeEnum(TransactionStatusSummaryType);

/** @internal */
export const TransactionStatusSummaryType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionStatusSummaryType
> = TransactionStatusSummaryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionStatusSummaryType$ {
  /** @deprecated use `TransactionStatusSummaryType$inboundSchema` instead. */
  export const inboundSchema = TransactionStatusSummaryType$inboundSchema;
  /** @deprecated use `TransactionStatusSummaryType$outboundSchema` instead. */
  export const outboundSchema = TransactionStatusSummaryType$outboundSchema;
}

/** @internal */
export const TransactionStatusSummaryTransactionStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionStatusSummaryTransactionStatus> = z
    .nativeEnum(TransactionStatusSummaryTransactionStatus);

/** @internal */
export const TransactionStatusSummaryTransactionStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionStatusSummaryTransactionStatus> =
    TransactionStatusSummaryTransactionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionStatusSummaryTransactionStatus$ {
  /** @deprecated use `TransactionStatusSummaryTransactionStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionStatusSummaryTransactionStatus$inboundSchema;
  /** @deprecated use `TransactionStatusSummaryTransactionStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionStatusSummaryTransactionStatus$outboundSchema;
}

/** @internal */
export const TransactionStatusSummary$inboundSchema: z.ZodType<
  TransactionStatusSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionStatusSummaryType$inboundSchema.default("transaction"),
  id: z.string(),
  status: TransactionStatusSummaryTransactionStatus$inboundSchema,
});

/** @internal */
export type TransactionStatusSummary$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const TransactionStatusSummary$outboundSchema: z.ZodType<
  TransactionStatusSummary$Outbound,
  z.ZodTypeDef,
  TransactionStatusSummary
> = z.object({
  type: TransactionStatusSummaryType$outboundSchema.default("transaction"),
  id: z.string(),
  status: TransactionStatusSummaryTransactionStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionStatusSummary$ {
  /** @deprecated use `TransactionStatusSummary$inboundSchema` instead. */
  export const inboundSchema = TransactionStatusSummary$inboundSchema;
  /** @deprecated use `TransactionStatusSummary$outboundSchema` instead. */
  export const outboundSchema = TransactionStatusSummary$outboundSchema;
  /** @deprecated use `TransactionStatusSummary$Outbound` instead. */
  export type Outbound = TransactionStatusSummary$Outbound;
}

export function transactionStatusSummaryToJSON(
  transactionStatusSummary: TransactionStatusSummary,
): string {
  return JSON.stringify(
    TransactionStatusSummary$outboundSchema.parse(transactionStatusSummary),
  );
}

export function transactionStatusSummaryFromJSON(
  jsonString: string,
): SafeParseResult<TransactionStatusSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionStatusSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionStatusSummary' from JSON`,
  );
}
