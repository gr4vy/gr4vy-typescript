/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction`.
 */
export enum TransactionStatusSummaryType {
    Transaction = "transaction",
}

/**
 * The status of the transaction. The status may change over time as
 *
 * @remarks
 * asynchronous processing events occur.
 */
export enum TransactionStatusSummaryStatus {
    Processing = "processing",
    BuyerApprovalPending = "buyer_approval_pending",
    AuthorizationSucceeded = "authorization_succeeded",
    AuthorizationFailed = "authorization_failed",
    AuthorizationDeclined = "authorization_declined",
    CapturePending = "capture_pending",
    CaptureSucceeded = "capture_succeeded",
    AuthorizationVoidPending = "authorization_void_pending",
    AuthorizationVoided = "authorization_voided",
}

/**
 * A transaction record.
 */
export type TransactionStatusSummary = {
    /**
     * The type of this resource. Is always `transaction`.
     */
    type?: TransactionStatusSummaryType | undefined;
    /**
     * The unique identifier for this transaction.
     */
    id?: string | undefined;
    /**
     * The status of the transaction. The status may change over time as
     *
     * @remarks
     * asynchronous processing events occur.
     */
    status?: TransactionStatusSummaryStatus | undefined;
};

/** @internal */
export const TransactionStatusSummaryType$ = z.nativeEnum(TransactionStatusSummaryType);

/** @internal */
export const TransactionStatusSummaryStatus$ = z.nativeEnum(TransactionStatusSummaryStatus);

/** @internal */
export namespace TransactionStatusSummary$ {
    export type Inbound = {
        type?: TransactionStatusSummaryType | undefined;
        id?: string | undefined;
        status?: TransactionStatusSummaryStatus | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionStatusSummary, z.ZodTypeDef, Inbound> = z
        .object({
            type: TransactionStatusSummaryType$.optional(),
            id: z.string().optional(),
            status: TransactionStatusSummaryStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        type?: TransactionStatusSummaryType | undefined;
        id?: string | undefined;
        status?: TransactionStatusSummaryStatus | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionStatusSummary> = z
        .object({
            type: TransactionStatusSummaryType$.optional(),
            id: z.string().optional(),
            status: TransactionStatusSummaryStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}
