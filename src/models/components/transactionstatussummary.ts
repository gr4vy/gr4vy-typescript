/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransactionStatus,
  TransactionStatus$inboundSchema,
  TransactionStatus$outboundSchema,
} from "./transactionstatus.js";

export type TransactionStatusSummary = {
  /**
   * Always `transaction`.
   */
  type?: "transaction" | undefined;
  /**
   * The ID for the transaction.
   */
  id: string;
  status: TransactionStatus;
};

/** @internal */
export const TransactionStatusSummary$inboundSchema: z.ZodType<
  TransactionStatusSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("transaction").default("transaction"),
  id: z.string(),
  status: TransactionStatus$inboundSchema,
});

/** @internal */
export type TransactionStatusSummary$Outbound = {
  type: "transaction";
  id: string;
  status: string;
};

/** @internal */
export const TransactionStatusSummary$outboundSchema: z.ZodType<
  TransactionStatusSummary$Outbound,
  z.ZodTypeDef,
  TransactionStatusSummary
> = z.object({
  type: z.literal("transaction").default("transaction" as const),
  id: z.string(),
  status: TransactionStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionStatusSummary$ {
  /** @deprecated use `TransactionStatusSummary$inboundSchema` instead. */
  export const inboundSchema = TransactionStatusSummary$inboundSchema;
  /** @deprecated use `TransactionStatusSummary$outboundSchema` instead. */
  export const outboundSchema = TransactionStatusSummary$outboundSchema;
  /** @deprecated use `TransactionStatusSummary$Outbound` instead. */
  export type Outbound = TransactionStatusSummary$Outbound;
}

export function transactionStatusSummaryToJSON(
  transactionStatusSummary: TransactionStatusSummary,
): string {
  return JSON.stringify(
    TransactionStatusSummary$outboundSchema.parse(transactionStatusSummary),
  );
}

export function transactionStatusSummaryFromJSON(
  jsonString: string,
): SafeParseResult<TransactionStatusSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionStatusSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionStatusSummary' from JSON`,
  );
}
