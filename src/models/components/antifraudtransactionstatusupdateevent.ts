/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudTransactionStatusUpdateEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudTransactionStatusUpdateEventType = ClosedEnum<
    typeof AntiFraudTransactionStatusUpdateEventType
>;

/**
 * The name of this resource. Is always `anti-fraud-transaction-status-update`.
 */
export const AntiFraudTransactionStatusUpdateEventName = {
    AntiFraudTransactionStatusUpdate: "anti-fraud-transaction-status-update",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-transaction-status-update`.
 */
export type AntiFraudTransactionStatusUpdateEventName = ClosedEnum<
    typeof AntiFraudTransactionStatusUpdateEventName
>;

/**
 * Additional context for this event.
 */
export type AntiFraudTransactionStatusUpdateEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to an anti-fraud provider to update a transaction.
 */
export type AntiFraudTransactionStatusUpdateEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudTransactionStatusUpdateEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-transaction-status-update`.
     */
    name?: AntiFraudTransactionStatusUpdateEventName | undefined;
    /**
     * The date and time when this transaction event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudTransactionStatusUpdateEventContext | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateEventType
> = z.nativeEnum(AntiFraudTransactionStatusUpdateEventType);

/** @internal */
export const AntiFraudTransactionStatusUpdateEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateEventType
> = AntiFraudTransactionStatusUpdateEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateEventType$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateEventType$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateEventType$outboundSchema;
}

/** @internal */
export const AntiFraudTransactionStatusUpdateEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateEventName
> = z.nativeEnum(AntiFraudTransactionStatusUpdateEventName);

/** @internal */
export const AntiFraudTransactionStatusUpdateEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateEventName
> = AntiFraudTransactionStatusUpdateEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateEventName$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateEventName$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateEventName$outboundSchema;
}

/** @internal */
export const AntiFraudTransactionStatusUpdateEventContext$inboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type AntiFraudTransactionStatusUpdateEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateEventContext$outboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudTransactionStatusUpdateEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateEventContext$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateEventContext$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateEventContext$outboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateEventContext$Outbound` instead. */
    export type Outbound = AntiFraudTransactionStatusUpdateEventContext$Outbound;
}

/** @internal */
export const AntiFraudTransactionStatusUpdateEvent$inboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudTransactionStatusUpdateEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudTransactionStatusUpdateEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => AntiFraudTransactionStatusUpdateEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudTransactionStatusUpdateEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudTransactionStatusUpdateEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateEvent$outboundSchema: z.ZodType<
    AntiFraudTransactionStatusUpdateEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudTransactionStatusUpdateEvent
> = z
    .object({
        type: AntiFraudTransactionStatusUpdateEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudTransactionStatusUpdateEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => AntiFraudTransactionStatusUpdateEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudTransactionStatusUpdateEvent$ {
    /** @deprecated use `AntiFraudTransactionStatusUpdateEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudTransactionStatusUpdateEvent$inboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudTransactionStatusUpdateEvent$outboundSchema;
    /** @deprecated use `AntiFraudTransactionStatusUpdateEvent$Outbound` instead. */
    export type Outbound = AntiFraudTransactionStatusUpdateEvent$Outbound;
}
