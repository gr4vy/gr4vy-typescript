/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudTransactionStatusUpdateEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-transaction-status-update`.
 */
export enum AntiFraudTransactionStatusUpdateEventName {
    AntiFraudTransactionStatusUpdate = "anti-fraud-transaction-status-update",
}

/**
 * Additional context for this event.
 */
export type AntiFraudTransactionStatusUpdateEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to an anti-fraud provider to update a decision.
 */
export type AntiFraudTransactionStatusUpdateEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudTransactionStatusUpdateEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-transaction-status-update`.
     */
    name?: AntiFraudTransactionStatusUpdateEventName | undefined;
    /**
     * The date and time when this transaction event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudTransactionStatusUpdateEventContext | undefined;
};

/** @internal */
export namespace AntiFraudTransactionStatusUpdateEventType$ {
    export const inboundSchema = z.nativeEnum(AntiFraudTransactionStatusUpdateEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudTransactionStatusUpdateEventName$ {
    export const inboundSchema = z.nativeEnum(AntiFraudTransactionStatusUpdateEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudTransactionStatusUpdateEventContext$ {
    export const inboundSchema: z.ZodType<
        AntiFraudTransactionStatusUpdateEventContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            response_status_code: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                anti_fraud_service_id: "antiFraudServiceId",
                anti_fraud_service_name: "antiFraudServiceName",
                anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
                response_status_code: "responseStatusCode",
            });
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudTransactionStatusUpdateEventContext
    > = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            responseStatusCode: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                antiFraudServiceId: "anti_fraud_service_id",
                antiFraudServiceName: "anti_fraud_service_name",
                antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
                responseStatusCode: "response_status_code",
            });
        });
}

/** @internal */
export namespace AntiFraudTransactionStatusUpdateEvent$ {
    export const inboundSchema: z.ZodType<
        AntiFraudTransactionStatusUpdateEvent,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: AntiFraudTransactionStatusUpdateEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudTransactionStatusUpdateEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => AntiFraudTransactionStatusUpdateEventContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: AntiFraudTransactionStatusUpdateEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudTransactionStatusUpdateEvent
    > = z
        .object({
            type: AntiFraudTransactionStatusUpdateEventType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudTransactionStatusUpdateEventName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => AntiFraudTransactionStatusUpdateEventContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
