/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudTransactionStatusUpdateEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-transaction-status-update`.
 */
export enum AntiFraudTransactionStatusUpdateEventName {
    AntiFraudTransactionStatusUpdate = "anti-fraud-transaction-status-update",
}

/**
 * Additional context for this event.
 */
export type AntiFraudTransactionStatusUpdateEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to an anti-fraud provider to update a decision.
 */
export type AntiFraudTransactionStatusUpdateEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudTransactionStatusUpdateEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-transaction-status-update`.
     */
    name?: AntiFraudTransactionStatusUpdateEventName | undefined;
    /**
     * The date and time when this transaction event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudTransactionStatusUpdateEventContext | undefined;
};

/** @internal */
export const AntiFraudTransactionStatusUpdateEventType$: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateEventType
> = z.nativeEnum(AntiFraudTransactionStatusUpdateEventType);

/** @internal */
export const AntiFraudTransactionStatusUpdateEventName$: z.ZodNativeEnum<
    typeof AntiFraudTransactionStatusUpdateEventName
> = z.nativeEnum(AntiFraudTransactionStatusUpdateEventName);

/** @internal */
export namespace AntiFraudTransactionStatusUpdateEventContext$ {
    export type Inbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        AntiFraudTransactionStatusUpdateEventContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            response_status_code: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.anti_fraud_service_id === undefined
                    ? null
                    : { antiFraudServiceId: v.anti_fraud_service_id }),
                ...(v.anti_fraud_service_name === undefined
                    ? null
                    : { antiFraudServiceName: v.anti_fraud_service_name }),
                ...(v.anti_fraud_service_definition_id === undefined
                    ? null
                    : { antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.response_status_code === undefined
                    ? null
                    : { responseStatusCode: v.response_status_code }),
            };
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudTransactionStatusUpdateEventContext
    > = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            responseStatusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.antiFraudServiceId === undefined
                    ? null
                    : { anti_fraud_service_id: v.antiFraudServiceId }),
                ...(v.antiFraudServiceName === undefined
                    ? null
                    : { anti_fraud_service_name: v.antiFraudServiceName }),
                ...(v.antiFraudServiceDefinitionId === undefined
                    ? null
                    : { anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.responseStatusCode === undefined
                    ? null
                    : { response_status_code: v.responseStatusCode }),
            };
        });
}

/** @internal */
export namespace AntiFraudTransactionStatusUpdateEvent$ {
    export type Inbound = {
        type?: AntiFraudTransactionStatusUpdateEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudTransactionStatusUpdateEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudTransactionStatusUpdateEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        AntiFraudTransactionStatusUpdateEvent,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: AntiFraudTransactionStatusUpdateEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudTransactionStatusUpdateEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => AntiFraudTransactionStatusUpdateEventContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: AntiFraudTransactionStatusUpdateEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudTransactionStatusUpdateEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudTransactionStatusUpdateEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AntiFraudTransactionStatusUpdateEvent
    > = z
        .object({
            type: AntiFraudTransactionStatusUpdateEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudTransactionStatusUpdateEventName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => AntiFraudTransactionStatusUpdateEventContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
