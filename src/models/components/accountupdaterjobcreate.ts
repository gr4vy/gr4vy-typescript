/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountUpdaterJobCreate = {
  /**
   * A list of payment method IDs to request an update for.
   */
  paymentMethodIds: Array<string>;
};

/** @internal */
export const AccountUpdaterJobCreate$inboundSchema: z.ZodType<
  AccountUpdaterJobCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "payment_method_ids": "paymentMethodIds",
  });
});

/** @internal */
export type AccountUpdaterJobCreate$Outbound = {
  payment_method_ids: Array<string>;
};

/** @internal */
export const AccountUpdaterJobCreate$outboundSchema: z.ZodType<
  AccountUpdaterJobCreate$Outbound,
  z.ZodTypeDef,
  AccountUpdaterJobCreate
> = z.object({
  paymentMethodIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    paymentMethodIds: "payment_method_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountUpdaterJobCreate$ {
  /** @deprecated use `AccountUpdaterJobCreate$inboundSchema` instead. */
  export const inboundSchema = AccountUpdaterJobCreate$inboundSchema;
  /** @deprecated use `AccountUpdaterJobCreate$outboundSchema` instead. */
  export const outboundSchema = AccountUpdaterJobCreate$outboundSchema;
  /** @deprecated use `AccountUpdaterJobCreate$Outbound` instead. */
  export type Outbound = AccountUpdaterJobCreate$Outbound;
}

export function accountUpdaterJobCreateToJSON(
  accountUpdaterJobCreate: AccountUpdaterJobCreate,
): string {
  return JSON.stringify(
    AccountUpdaterJobCreate$outboundSchema.parse(accountUpdaterJobCreate),
  );
}

export function accountUpdaterJobCreateFromJSON(
  jsonString: string,
): SafeParseResult<AccountUpdaterJobCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountUpdaterJobCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountUpdaterJobCreate' from JSON`,
  );
}
