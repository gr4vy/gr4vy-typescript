/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of action outcome for the given rule.
 */
export const FlowRuleServiceOutcomeType = {
    CardRouting: "card-routing",
} as const;
/**
 * The type of action outcome for the given rule.
 */
export type FlowRuleServiceOutcomeType = ClosedEnum<typeof FlowRuleServiceOutcomeType>;

/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export const Instrument = {
    NetworkToken: "network_token",
    Pan: "pan",
} as const;
/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export type Instrument = ClosedEnum<typeof Instrument>;

/**
 * Name of the transformation.
 */
export const FlowRuleServiceOutcomeName = {
    ForceMit: "force_mit",
    UseAdditionalScheme: "use_additional_scheme",
} as const;
/**
 * Name of the transformation.
 */
export type FlowRuleServiceOutcomeName = ClosedEnum<typeof FlowRuleServiceOutcomeName>;

export type FlowRuleServiceOutcomeTransformations = {
    /**
     * Name of the transformation.
     */
    name?: FlowRuleServiceOutcomeName | undefined;
};

export type Result = {
    /**
     * ID of the payment service to be used when processing the transaction.
     */
    paymentServiceId?: string | undefined;
    /**
     * The name of the instrument to be used to process the transaction.
     *
     * @remarks
     * For `pan`, if a Payment Service token is available, the API will use that
     * for stored payment methods.
     *
     */
    instrument?: Instrument | undefined;
    /**
     * List of transformations to apply when processing the transaction.
     */
    transformations?: Array<FlowRuleServiceOutcomeTransformations> | undefined;
};

/**
 * Version of the rule outcome. Current version is `2`.
 */
export const Version = {
    Two: 2,
} as const;
/**
 * Version of the rule outcome. Current version is `2`.
 */
export type Version = ClosedEnum<typeof Version>;

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a list of dictionaries that define the payment service,
 * instrument and transformation to be used to process a
 * transaction.
 */
export type FlowRuleServiceOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleServiceOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: Array<Result>;
    /**
     * Version of the rule outcome. Current version is `2`.
     */
    version: Version;
};

/** @internal */
export const FlowRuleServiceOutcomeType$inboundSchema: z.ZodNativeEnum<
    typeof FlowRuleServiceOutcomeType
> = z.nativeEnum(FlowRuleServiceOutcomeType);

/** @internal */
export const FlowRuleServiceOutcomeType$outboundSchema: z.ZodNativeEnum<
    typeof FlowRuleServiceOutcomeType
> = FlowRuleServiceOutcomeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleServiceOutcomeType$ {
    /** @deprecated use `FlowRuleServiceOutcomeType$inboundSchema` instead. */
    export const inboundSchema = FlowRuleServiceOutcomeType$inboundSchema;
    /** @deprecated use `FlowRuleServiceOutcomeType$outboundSchema` instead. */
    export const outboundSchema = FlowRuleServiceOutcomeType$outboundSchema;
}

/** @internal */
export const Instrument$inboundSchema: z.ZodNativeEnum<typeof Instrument> =
    z.nativeEnum(Instrument);

/** @internal */
export const Instrument$outboundSchema: z.ZodNativeEnum<typeof Instrument> =
    Instrument$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Instrument$ {
    /** @deprecated use `Instrument$inboundSchema` instead. */
    export const inboundSchema = Instrument$inboundSchema;
    /** @deprecated use `Instrument$outboundSchema` instead. */
    export const outboundSchema = Instrument$outboundSchema;
}

/** @internal */
export const FlowRuleServiceOutcomeName$inboundSchema: z.ZodNativeEnum<
    typeof FlowRuleServiceOutcomeName
> = z.nativeEnum(FlowRuleServiceOutcomeName);

/** @internal */
export const FlowRuleServiceOutcomeName$outboundSchema: z.ZodNativeEnum<
    typeof FlowRuleServiceOutcomeName
> = FlowRuleServiceOutcomeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleServiceOutcomeName$ {
    /** @deprecated use `FlowRuleServiceOutcomeName$inboundSchema` instead. */
    export const inboundSchema = FlowRuleServiceOutcomeName$inboundSchema;
    /** @deprecated use `FlowRuleServiceOutcomeName$outboundSchema` instead. */
    export const outboundSchema = FlowRuleServiceOutcomeName$outboundSchema;
}

/** @internal */
export const FlowRuleServiceOutcomeTransformations$inboundSchema: z.ZodType<
    FlowRuleServiceOutcomeTransformations,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowRuleServiceOutcomeName$inboundSchema.optional(),
});

/** @internal */
export type FlowRuleServiceOutcomeTransformations$Outbound = {
    name?: string | undefined;
};

/** @internal */
export const FlowRuleServiceOutcomeTransformations$outboundSchema: z.ZodType<
    FlowRuleServiceOutcomeTransformations$Outbound,
    z.ZodTypeDef,
    FlowRuleServiceOutcomeTransformations
> = z.object({
    name: FlowRuleServiceOutcomeName$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleServiceOutcomeTransformations$ {
    /** @deprecated use `FlowRuleServiceOutcomeTransformations$inboundSchema` instead. */
    export const inboundSchema = FlowRuleServiceOutcomeTransformations$inboundSchema;
    /** @deprecated use `FlowRuleServiceOutcomeTransformations$outboundSchema` instead. */
    export const outboundSchema = FlowRuleServiceOutcomeTransformations$outboundSchema;
    /** @deprecated use `FlowRuleServiceOutcomeTransformations$Outbound` instead. */
    export type Outbound = FlowRuleServiceOutcomeTransformations$Outbound;
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
    .object({
        payment_service_id: z.string().optional(),
        instrument: Instrument$inboundSchema.optional(),
        transformations: z
            .array(z.lazy(() => FlowRuleServiceOutcomeTransformations$inboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
        });
    });

/** @internal */
export type Result$Outbound = {
    payment_service_id?: string | undefined;
    instrument?: string | undefined;
    transformations?: Array<FlowRuleServiceOutcomeTransformations$Outbound> | undefined;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<Result$Outbound, z.ZodTypeDef, Result> = z
    .object({
        paymentServiceId: z.string().optional(),
        instrument: Instrument$outboundSchema.optional(),
        transformations: z
            .array(z.lazy(() => FlowRuleServiceOutcomeTransformations$outboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
    /** @deprecated use `Result$inboundSchema` instead. */
    export const inboundSchema = Result$inboundSchema;
    /** @deprecated use `Result$outboundSchema` instead. */
    export const outboundSchema = Result$outboundSchema;
    /** @deprecated use `Result$Outbound` instead. */
    export type Outbound = Result$Outbound;
}

/** @internal */
export const Version$inboundSchema: z.ZodNativeEnum<typeof Version> = z.nativeEnum(Version);

/** @internal */
export const Version$outboundSchema: z.ZodNativeEnum<typeof Version> = Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Version$ {
    /** @deprecated use `Version$inboundSchema` instead. */
    export const inboundSchema = Version$inboundSchema;
    /** @deprecated use `Version$outboundSchema` instead. */
    export const outboundSchema = Version$outboundSchema;
}

/** @internal */
export const FlowRuleServiceOutcome$inboundSchema: z.ZodType<
    FlowRuleServiceOutcome,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FlowRuleServiceOutcomeType$inboundSchema,
    result: z.array(z.lazy(() => Result$inboundSchema)),
    version: Version$inboundSchema,
});

/** @internal */
export type FlowRuleServiceOutcome$Outbound = {
    type: string;
    result: Array<Result$Outbound>;
    version: number;
};

/** @internal */
export const FlowRuleServiceOutcome$outboundSchema: z.ZodType<
    FlowRuleServiceOutcome$Outbound,
    z.ZodTypeDef,
    FlowRuleServiceOutcome
> = z.object({
    type: FlowRuleServiceOutcomeType$outboundSchema,
    result: z.array(z.lazy(() => Result$outboundSchema)),
    version: Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleServiceOutcome$ {
    /** @deprecated use `FlowRuleServiceOutcome$inboundSchema` instead. */
    export const inboundSchema = FlowRuleServiceOutcome$inboundSchema;
    /** @deprecated use `FlowRuleServiceOutcome$outboundSchema` instead. */
    export const outboundSchema = FlowRuleServiceOutcome$outboundSchema;
    /** @deprecated use `FlowRuleServiceOutcome$Outbound` instead. */
    export type Outbound = FlowRuleServiceOutcome$Outbound;
}
