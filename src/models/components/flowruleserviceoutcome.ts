/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of action outcome for the given rule.
 */
export enum FlowRuleServiceOutcomeType {
    CardRouting = "card-routing",
}

/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export enum Instrument {
    NetworkToken = "network_token",
    Pan = "pan",
}

/**
 * Name of the transformation.
 */
export enum FlowRuleServiceOutcomeName {
    ForceMit = "force_mit",
    UseAdditionalScheme = "use_additional_scheme",
}

export type FlowRuleServiceOutcomeTransformations = {
    /**
     * Name of the transformation.
     */
    name?: FlowRuleServiceOutcomeName | undefined;
};

export type Result = {
    /**
     * ID of the payment service to be used when processing the transaction.
     */
    paymentServiceId?: string | undefined;
    /**
     * The name of the instrument to be used to process the transaction.
     *
     * @remarks
     * For `pan`, if a Payment Service token is available, the API will use that
     * for stored payment methods.
     *
     */
    instrument?: Instrument | undefined;
    /**
     * List of transformations to apply when processing the transaction.
     */
    transformations?: Array<FlowRuleServiceOutcomeTransformations> | undefined;
};

/**
 * Version of the rule outcome. Current version is `2`.
 */
export enum Version {
    Two = 2,
}

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a list of dictionaries that define the payment service,
 * instrument and transformation to be used to process a
 * transaction.
 */
export type FlowRuleServiceOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleServiceOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: Array<Result>;
    /**
     * Version of the rule outcome. Current version is `2`.
     */
    version: Version;
};

/** @internal */
export const FlowRuleServiceOutcomeType$: z.ZodNativeEnum<typeof FlowRuleServiceOutcomeType> =
    z.nativeEnum(FlowRuleServiceOutcomeType);

/** @internal */
export const Instrument$: z.ZodNativeEnum<typeof Instrument> = z.nativeEnum(Instrument);

/** @internal */
export const FlowRuleServiceOutcomeName$: z.ZodNativeEnum<typeof FlowRuleServiceOutcomeName> =
    z.nativeEnum(FlowRuleServiceOutcomeName);

/** @internal */
export namespace FlowRuleServiceOutcomeTransformations$ {
    export type Inbound = {
        name?: FlowRuleServiceOutcomeName | undefined;
    };

    export const inboundSchema: z.ZodType<
        FlowRuleServiceOutcomeTransformations,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            name: FlowRuleServiceOutcomeName$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        name?: FlowRuleServiceOutcomeName | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowRuleServiceOutcomeTransformations
    > = z
        .object({
            name: FlowRuleServiceOutcomeName$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace Result$ {
    export type Inbound = {
        payment_service_id?: string | undefined;
        instrument?: Instrument | undefined;
        transformations?: Array<FlowRuleServiceOutcomeTransformations$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Result, z.ZodTypeDef, Inbound> = z
        .object({
            payment_service_id: z.string().optional(),
            instrument: Instrument$.optional(),
            transformations: z
                .array(z.lazy(() => FlowRuleServiceOutcomeTransformations$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.payment_service_id === undefined
                    ? null
                    : { paymentServiceId: v.payment_service_id }),
                ...(v.instrument === undefined ? null : { instrument: v.instrument }),
                ...(v.transformations === undefined
                    ? null
                    : { transformations: v.transformations }),
            };
        });

    export type Outbound = {
        payment_service_id?: string | undefined;
        instrument?: Instrument | undefined;
        transformations?: Array<FlowRuleServiceOutcomeTransformations$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Result> = z
        .object({
            paymentServiceId: z.string().optional(),
            instrument: Instrument$.optional(),
            transformations: z
                .array(z.lazy(() => FlowRuleServiceOutcomeTransformations$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.paymentServiceId === undefined
                    ? null
                    : { payment_service_id: v.paymentServiceId }),
                ...(v.instrument === undefined ? null : { instrument: v.instrument }),
                ...(v.transformations === undefined
                    ? null
                    : { transformations: v.transformations }),
            };
        });
}

/** @internal */
export const Version$: z.ZodNativeEnum<typeof Version> = z.nativeEnum(Version);

/** @internal */
export namespace FlowRuleServiceOutcome$ {
    export type Inbound = {
        type: FlowRuleServiceOutcomeType;
        result: Array<Result$.Inbound>;
        version: Version;
    };

    export const inboundSchema: z.ZodType<FlowRuleServiceOutcome, z.ZodTypeDef, Inbound> = z
        .object({
            type: FlowRuleServiceOutcomeType$,
            result: z.array(z.lazy(() => Result$.inboundSchema)),
            version: Version$,
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
                version: v.version,
            };
        });

    export type Outbound = {
        type: FlowRuleServiceOutcomeType;
        result: Array<Result$.Outbound>;
        version: Version;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleServiceOutcome> = z
        .object({
            type: FlowRuleServiceOutcomeType$,
            result: z.array(z.lazy(() => Result$.outboundSchema)),
            version: Version$,
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
                version: v.version,
            };
        });
}
