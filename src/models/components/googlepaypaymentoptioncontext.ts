/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GooglePayPaymentOptionContext = {
  merchantName: string;
  supportedSchemes: Array<string>;
  gateway: string;
  gatewayMerchantId: string;
};

/** @internal */
export const GooglePayPaymentOptionContext$inboundSchema: z.ZodType<
  GooglePayPaymentOptionContext,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchant_name: z.string(),
  supported_schemes: z.array(z.string()),
  gateway: z.string(),
  gateway_merchant_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "merchant_name": "merchantName",
    "supported_schemes": "supportedSchemes",
    "gateway_merchant_id": "gatewayMerchantId",
  });
});

/** @internal */
export type GooglePayPaymentOptionContext$Outbound = {
  merchant_name: string;
  supported_schemes: Array<string>;
  gateway: string;
  gateway_merchant_id: string;
};

/** @internal */
export const GooglePayPaymentOptionContext$outboundSchema: z.ZodType<
  GooglePayPaymentOptionContext$Outbound,
  z.ZodTypeDef,
  GooglePayPaymentOptionContext
> = z.object({
  merchantName: z.string(),
  supportedSchemes: z.array(z.string()),
  gateway: z.string(),
  gatewayMerchantId: z.string(),
}).transform((v) => {
  return remap$(v, {
    merchantName: "merchant_name",
    supportedSchemes: "supported_schemes",
    gatewayMerchantId: "gateway_merchant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GooglePayPaymentOptionContext$ {
  /** @deprecated use `GooglePayPaymentOptionContext$inboundSchema` instead. */
  export const inboundSchema = GooglePayPaymentOptionContext$inboundSchema;
  /** @deprecated use `GooglePayPaymentOptionContext$outboundSchema` instead. */
  export const outboundSchema = GooglePayPaymentOptionContext$outboundSchema;
  /** @deprecated use `GooglePayPaymentOptionContext$Outbound` instead. */
  export type Outbound = GooglePayPaymentOptionContext$Outbound;
}

export function googlePayPaymentOptionContextToJSON(
  googlePayPaymentOptionContext: GooglePayPaymentOptionContext,
): string {
  return JSON.stringify(
    GooglePayPaymentOptionContext$outboundSchema.parse(
      googlePayPaymentOptionContext,
    ),
  );
}

export function googlePayPaymentOptionContextFromJSON(
  jsonString: string,
): SafeParseResult<GooglePayPaymentOptionContext, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GooglePayPaymentOptionContext$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GooglePayPaymentOptionContext' from JSON`,
  );
}
