/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { PaymentMethod, PaymentMethod$ } from "./paymentmethod";
import * as z from "zod";

/**
 * A list of stored payment methods.
 */
export type PaymentMethods = {
    /**
     * A list of stored payment methods.
     */
    items?: Array<PaymentMethod> | undefined;
    /**
     * The limit applied to request. This represents the number of items that are at
     *
     * @remarks
     * maximum returned by this request.
     */
    limit?: number | undefined;
    /**
     * The cursor that represents the next page of results. Use the `cursor` query
     *
     * @remarks
     * parameter to fetch this page of items.
     */
    nextCursor?: string | null | undefined;
    /**
     * The cursor that represents the next page of results. Use the `cursor` query
     *
     * @remarks
     * parameter to fetch this page of items.
     */
    previousCursor?: string | null | undefined;
};

/** @internal */
export namespace PaymentMethods$ {
    export const inboundSchema: z.ZodType<PaymentMethods, z.ZodTypeDef, unknown> = z
        .object({
            items: z.array(PaymentMethod$.inboundSchema).optional(),
            limit: z.number().int().default(20),
            next_cursor: z.nullable(z.string()).optional(),
            previous_cursor: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                next_cursor: "nextCursor",
                previous_cursor: "previousCursor",
            });
        });

    export type Outbound = {
        items?: Array<PaymentMethod$.Outbound> | undefined;
        limit: number;
        next_cursor?: string | null | undefined;
        previous_cursor?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethods> = z
        .object({
            items: z.array(PaymentMethod$.outboundSchema).optional(),
            limit: z.number().int().default(20),
            nextCursor: z.nullable(z.string()).optional(),
            previousCursor: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                nextCursor: "next_cursor",
                previousCursor: "previous_cursor",
            });
        });
}
