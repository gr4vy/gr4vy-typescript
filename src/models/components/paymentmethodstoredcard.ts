/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Set to `id` to use a stored card.
 */
export const PaymentMethodStoredCardMethod = {
  Id: "id",
} as const;
/**
 * Set to `id` to use a stored card.
 */
export type PaymentMethodStoredCardMethod = ClosedEnum<
  typeof PaymentMethodStoredCardMethod
>;

/**
 * Base model with JSON encoders.
 */
export type PaymentMethodStoredCard = {
  /**
   * Set to `id` to use a stored card.
   */
  method?: PaymentMethodStoredCardMethod | undefined;
  /**
   * The ID of the stored card to use.
   */
  id: string;
};

/** @internal */
export const PaymentMethodStoredCardMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodStoredCardMethod
> = z.nativeEnum(PaymentMethodStoredCardMethod);

/** @internal */
export const PaymentMethodStoredCardMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodStoredCardMethod
> = PaymentMethodStoredCardMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodStoredCardMethod$ {
  /** @deprecated use `PaymentMethodStoredCardMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodStoredCardMethod$inboundSchema;
  /** @deprecated use `PaymentMethodStoredCardMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodStoredCardMethod$outboundSchema;
}

/** @internal */
export const PaymentMethodStoredCard$inboundSchema: z.ZodType<
  PaymentMethodStoredCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: PaymentMethodStoredCardMethod$inboundSchema.default("id"),
  id: z.string(),
});

/** @internal */
export type PaymentMethodStoredCard$Outbound = {
  method: string;
  id: string;
};

/** @internal */
export const PaymentMethodStoredCard$outboundSchema: z.ZodType<
  PaymentMethodStoredCard$Outbound,
  z.ZodTypeDef,
  PaymentMethodStoredCard
> = z.object({
  method: PaymentMethodStoredCardMethod$outboundSchema.default("id"),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodStoredCard$ {
  /** @deprecated use `PaymentMethodStoredCard$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodStoredCard$inboundSchema;
  /** @deprecated use `PaymentMethodStoredCard$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodStoredCard$outboundSchema;
  /** @deprecated use `PaymentMethodStoredCard$Outbound` instead. */
  export type Outbound = PaymentMethodStoredCard$Outbound;
}

export function paymentMethodStoredCardToJSON(
  paymentMethodStoredCard: PaymentMethodStoredCard,
): string {
  return JSON.stringify(
    PaymentMethodStoredCard$outboundSchema.parse(paymentMethodStoredCard),
  );
}

export function paymentMethodStoredCardFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodStoredCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodStoredCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodStoredCard' from JSON`,
  );
}
