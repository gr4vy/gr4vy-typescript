/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * `card`.
 */
export const CardRequestMethod = {
    Card: "card",
} as const;
/**
 * `card`.
 */
export type CardRequestMethod = ClosedEnum<typeof CardRequestMethod>;

/**
 * Details to register a new card payment method.
 */
export type CardRequest = {
    /**
     * `card`.
     */
    method: CardRequestMethod;
    /**
     * The 13-19 digit number for this card as it can be found on the
     *
     * @remarks
     * front of the card.
     */
    number: string;
    /**
     * The expiration date of the card, formatted `MM/YY`.
     */
    expirationDate: string;
    /**
     * The 3 or 4 digit security code often found on the card. This often
     *
     * @remarks
     * referred to as the CVV or CVD.
     *
     * The security code can only be set if the stored payment method
     * represents a card.
     */
    securityCode?: string | null | undefined;
    /**
     * An external identifier that can be used to match the card against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The ID of the buyer to associate this payment method to. If this field is
     *
     * @remarks
     * provided then the `buyer_external_identifier` field needs to be unset.
     */
    buyerId?: string | undefined;
    /**
     * The `external_identifier` of the buyer to associate this payment method
     *
     * @remarks
     * to. If this field is provided then the `buyer_id` field
     * needs to be unset.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * The redirect URL to redirect a buyer to after they have authorized their
     *
     * @remarks
     * transaction or payment method. This only applies to payment methods that
     * require buyer approval.
     */
    redirectUrl?: string | null | undefined;
};

/** @internal */
export const CardRequestMethod$inboundSchema: z.ZodNativeEnum<typeof CardRequestMethod> =
    z.nativeEnum(CardRequestMethod);

/** @internal */
export const CardRequestMethod$outboundSchema: z.ZodNativeEnum<typeof CardRequestMethod> =
    CardRequestMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardRequestMethod$ {
    /** @deprecated use `CardRequestMethod$inboundSchema` instead. */
    export const inboundSchema = CardRequestMethod$inboundSchema;
    /** @deprecated use `CardRequestMethod$outboundSchema` instead. */
    export const outboundSchema = CardRequestMethod$outboundSchema;
}

/** @internal */
export const CardRequest$inboundSchema: z.ZodType<CardRequest, z.ZodTypeDef, unknown> = z
    .object({
        method: CardRequestMethod$inboundSchema,
        number: z.string(),
        expiration_date: z.string(),
        security_code: z.nullable(z.string()).optional(),
        external_identifier: z.nullable(z.string()).optional(),
        buyer_id: z.string().optional(),
        buyer_external_identifier: z.string().optional(),
        redirect_url: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expiration_date: "expirationDate",
            security_code: "securityCode",
            external_identifier: "externalIdentifier",
            buyer_id: "buyerId",
            buyer_external_identifier: "buyerExternalIdentifier",
            redirect_url: "redirectUrl",
        });
    });

/** @internal */
export type CardRequest$Outbound = {
    method: string;
    number: string;
    expiration_date: string;
    security_code?: string | null | undefined;
    external_identifier?: string | null | undefined;
    buyer_id?: string | undefined;
    buyer_external_identifier?: string | undefined;
    redirect_url?: string | null | undefined;
};

/** @internal */
export const CardRequest$outboundSchema: z.ZodType<
    CardRequest$Outbound,
    z.ZodTypeDef,
    CardRequest
> = z
    .object({
        method: CardRequestMethod$outboundSchema,
        number: z.string(),
        expirationDate: z.string(),
        securityCode: z.nullable(z.string()).optional(),
        externalIdentifier: z.nullable(z.string()).optional(),
        buyerId: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
        redirectUrl: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expirationDate: "expiration_date",
            securityCode: "security_code",
            externalIdentifier: "external_identifier",
            buyerId: "buyer_id",
            buyerExternalIdentifier: "buyer_external_identifier",
            redirectUrl: "redirect_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardRequest$ {
    /** @deprecated use `CardRequest$inboundSchema` instead. */
    export const inboundSchema = CardRequest$inboundSchema;
    /** @deprecated use `CardRequest$outboundSchema` instead. */
    export const outboundSchema = CardRequest$outboundSchema;
    /** @deprecated use `CardRequest$Outbound` instead. */
    export type Outbound = CardRequest$Outbound;
}
