/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The kind of authentication to be used in a Vault Forward request.
 *
 * @remarks
 *
 */
export const PCIForwardConfigAuthenticationKind = {
    Mle: "mle",
    Mtls: "mtls",
    Signature: "signature",
} as const;
/**
 * The kind of authentication to be used in a Vault Forward request.
 *
 * @remarks
 *
 */
export type PCIForwardConfigAuthenticationKind = ClosedEnum<
    typeof PCIForwardConfigAuthenticationKind
>;

export type PCIForwardConfigAuthenticationFields = {
    /**
     * The key of the field.
     */
    key?: string | undefined;
    /**
     * The value of the field.
     */
    value?: string | undefined;
};

/**
 * The user who created the Vault Forward authentication method.
 */
export type Creator = {
    /**
     * The ID of the user.
     */
    id?: string | undefined;
    /**
     * The name of the user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | undefined;
};

/**
 * A configured Vault Forward authentication method.
 */
export type PCIForwardConfigAuthentication = {
    /**
     * The type of this resource. It is always `vault-forward-config-authentication`.
     */
    type?: string | undefined;
    /**
     * The ID of this Vault Forward authentication method.
     */
    id?: string | undefined;
    /**
     * The date and time when this configuration was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this configuration was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The kind of authentication to be used in a Vault Forward request.
     *
     * @remarks
     *
     */
    kind?: PCIForwardConfigAuthenticationKind | undefined;
    /**
     * A label that describes this authentication method.
     */
    label?: string | undefined;
    /**
     * The display name for this authentication method given when created.
     */
    displayName?: string | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field
     *
     * @remarks
     * configured for this authentication method. Fields marked as `secret`
     * are not returned.
     */
    fields?: Array<PCIForwardConfigAuthenticationFields> | undefined;
    /**
     * The user who created the Vault Forward authentication method.
     */
    creator?: Creator | null | undefined;
};

/** @internal */
export const PCIForwardConfigAuthenticationKind$inboundSchema: z.ZodNativeEnum<
    typeof PCIForwardConfigAuthenticationKind
> = z.nativeEnum(PCIForwardConfigAuthenticationKind);

/** @internal */
export const PCIForwardConfigAuthenticationKind$outboundSchema: z.ZodNativeEnum<
    typeof PCIForwardConfigAuthenticationKind
> = PCIForwardConfigAuthenticationKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardConfigAuthenticationKind$ {
    /** @deprecated use `PCIForwardConfigAuthenticationKind$inboundSchema` instead. */
    export const inboundSchema = PCIForwardConfigAuthenticationKind$inboundSchema;
    /** @deprecated use `PCIForwardConfigAuthenticationKind$outboundSchema` instead. */
    export const outboundSchema = PCIForwardConfigAuthenticationKind$outboundSchema;
}

/** @internal */
export const PCIForwardConfigAuthenticationFields$inboundSchema: z.ZodType<
    PCIForwardConfigAuthenticationFields,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
});

/** @internal */
export type PCIForwardConfigAuthenticationFields$Outbound = {
    key?: string | undefined;
    value?: string | undefined;
};

/** @internal */
export const PCIForwardConfigAuthenticationFields$outboundSchema: z.ZodType<
    PCIForwardConfigAuthenticationFields$Outbound,
    z.ZodTypeDef,
    PCIForwardConfigAuthenticationFields
> = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardConfigAuthenticationFields$ {
    /** @deprecated use `PCIForwardConfigAuthenticationFields$inboundSchema` instead. */
    export const inboundSchema = PCIForwardConfigAuthenticationFields$inboundSchema;
    /** @deprecated use `PCIForwardConfigAuthenticationFields$outboundSchema` instead. */
    export const outboundSchema = PCIForwardConfigAuthenticationFields$outboundSchema;
    /** @deprecated use `PCIForwardConfigAuthenticationFields$Outbound` instead. */
    export type Outbound = PCIForwardConfigAuthenticationFields$Outbound;
}

/** @internal */
export const Creator$inboundSchema: z.ZodType<Creator, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        email_address: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            email_address: "emailAddress",
        });
    });

/** @internal */
export type Creator$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    email_address?: string | undefined;
};

/** @internal */
export const Creator$outboundSchema: z.ZodType<Creator$Outbound, z.ZodTypeDef, Creator> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        emailAddress: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            emailAddress: "email_address",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Creator$ {
    /** @deprecated use `Creator$inboundSchema` instead. */
    export const inboundSchema = Creator$inboundSchema;
    /** @deprecated use `Creator$outboundSchema` instead. */
    export const outboundSchema = Creator$outboundSchema;
    /** @deprecated use `Creator$Outbound` instead. */
    export type Outbound = Creator$Outbound;
}

/** @internal */
export const PCIForwardConfigAuthentication$inboundSchema: z.ZodType<
    PCIForwardConfigAuthentication,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: z.string().default("vault-forward-config-authentication"),
        id: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        kind: PCIForwardConfigAuthenticationKind$inboundSchema.optional(),
        label: z.string().optional(),
        display_name: z.string().optional(),
        fields: z
            .array(z.lazy(() => PCIForwardConfigAuthenticationFields$inboundSchema))
            .optional(),
        creator: z.nullable(z.lazy(() => Creator$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
            display_name: "displayName",
        });
    });

/** @internal */
export type PCIForwardConfigAuthentication$Outbound = {
    type: string;
    id?: string | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    kind?: string | undefined;
    label?: string | undefined;
    display_name?: string | undefined;
    fields?: Array<PCIForwardConfigAuthenticationFields$Outbound> | undefined;
    creator?: Creator$Outbound | null | undefined;
};

/** @internal */
export const PCIForwardConfigAuthentication$outboundSchema: z.ZodType<
    PCIForwardConfigAuthentication$Outbound,
    z.ZodTypeDef,
    PCIForwardConfigAuthentication
> = z
    .object({
        type: z.string().default("vault-forward-config-authentication"),
        id: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        kind: PCIForwardConfigAuthenticationKind$outboundSchema.optional(),
        label: z.string().optional(),
        displayName: z.string().optional(),
        fields: z
            .array(z.lazy(() => PCIForwardConfigAuthenticationFields$outboundSchema))
            .optional(),
        creator: z.nullable(z.lazy(() => Creator$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
            displayName: "display_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardConfigAuthentication$ {
    /** @deprecated use `PCIForwardConfigAuthentication$inboundSchema` instead. */
    export const inboundSchema = PCIForwardConfigAuthentication$inboundSchema;
    /** @deprecated use `PCIForwardConfigAuthentication$outboundSchema` instead. */
    export const outboundSchema = PCIForwardConfigAuthentication$outboundSchema;
    /** @deprecated use `PCIForwardConfigAuthentication$Outbound` instead. */
    export type Outbound = PCIForwardConfigAuthentication$Outbound;
}
