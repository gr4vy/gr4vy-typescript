/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransactionConnectionOptions,
  TransactionConnectionOptions$inboundSchema,
  TransactionConnectionOptions$Outbound,
  TransactionConnectionOptions$outboundSchema,
} from "./transactionconnectionoptions.js";

export type TransactionUpdate = {
  /**
   * An external identifier that can be used to match the transaction against your own records.
   */
  externalIdentifier?: string | null | undefined;
  /**
   * Additional information about the transaction stored as key-value pairs. If provided, the whole value will be overridden.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * Allows for passing optional configuration per connection to take advantage of connection specific features. When provided, the data is only passed to the target connection type to prevent sharing configuration across connections. Please note that each of the keys this object are in kebab-case, for example `cybersource-anti-fraud` as they represent the ID of the connector. All the other keys will be snake case, for example `merchant_defined_data` or camel case to match an external API that the connector uses. If provided, the whole value will be overridden.
   */
  connectionOptions?: TransactionConnectionOptions | null | undefined;
};

/** @internal */
export const TransactionUpdate$inboundSchema: z.ZodType<
  TransactionUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_identifier: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  connection_options: z.nullable(TransactionConnectionOptions$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "external_identifier": "externalIdentifier",
    "connection_options": "connectionOptions",
  });
});

/** @internal */
export type TransactionUpdate$Outbound = {
  external_identifier?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  connection_options?: TransactionConnectionOptions$Outbound | null | undefined;
};

/** @internal */
export const TransactionUpdate$outboundSchema: z.ZodType<
  TransactionUpdate$Outbound,
  z.ZodTypeDef,
  TransactionUpdate
> = z.object({
  externalIdentifier: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  connectionOptions: z.nullable(TransactionConnectionOptions$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    externalIdentifier: "external_identifier",
    connectionOptions: "connection_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdate$ {
  /** @deprecated use `TransactionUpdate$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdate$inboundSchema;
  /** @deprecated use `TransactionUpdate$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdate$outboundSchema;
  /** @deprecated use `TransactionUpdate$Outbound` instead. */
  export type Outbound = TransactionUpdate$Outbound;
}

export function transactionUpdateToJSON(
  transactionUpdate: TransactionUpdate,
): string {
  return JSON.stringify(
    TransactionUpdate$outboundSchema.parse(transactionUpdate),
  );
}

export function transactionUpdateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdate' from JSON`,
  );
}
