/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Field,
  Field$inboundSchema,
  Field$Outbound,
  Field$outboundSchema,
} from "./field.js";

export type VerifyCredentials = {
  /**
   * The ID of the payment service definition to verify the fields against
   */
  paymentServiceDefinitionId: string;
  /**
   * The optional ID of the configured payment service. New fields will be merged with any existing fields already stored before they are verified.
   */
  paymentServiceId?: string | null | undefined;
  /**
   * The fields and their values, or a set of updated fields to merge with existing values.
   */
  fields: Array<Field>;
};

/** @internal */
export const VerifyCredentials$inboundSchema: z.ZodType<
  VerifyCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_service_definition_id: z.string(),
  payment_service_id: z.nullable(z.string()).optional(),
  fields: z.array(Field$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_service_definition_id": "paymentServiceDefinitionId",
    "payment_service_id": "paymentServiceId",
  });
});

/** @internal */
export type VerifyCredentials$Outbound = {
  payment_service_definition_id: string;
  payment_service_id?: string | null | undefined;
  fields: Array<Field$Outbound>;
};

/** @internal */
export const VerifyCredentials$outboundSchema: z.ZodType<
  VerifyCredentials$Outbound,
  z.ZodTypeDef,
  VerifyCredentials
> = z.object({
  paymentServiceDefinitionId: z.string(),
  paymentServiceId: z.nullable(z.string()).optional(),
  fields: z.array(Field$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentServiceDefinitionId: "payment_service_definition_id",
    paymentServiceId: "payment_service_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyCredentials$ {
  /** @deprecated use `VerifyCredentials$inboundSchema` instead. */
  export const inboundSchema = VerifyCredentials$inboundSchema;
  /** @deprecated use `VerifyCredentials$outboundSchema` instead. */
  export const outboundSchema = VerifyCredentials$outboundSchema;
  /** @deprecated use `VerifyCredentials$Outbound` instead. */
  export type Outbound = VerifyCredentials$Outbound;
}

export function verifyCredentialsToJSON(
  verifyCredentials: VerifyCredentials,
): string {
  return JSON.stringify(
    VerifyCredentials$outboundSchema.parse(verifyCredentials),
  );
}

export function verifyCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<VerifyCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyCredentials' from JSON`,
  );
}
