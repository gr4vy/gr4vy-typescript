/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCardSourceConditionName {
    CardSource = "card_source",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowCardSourceConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Card sources to compare the transaction to.
 */
export enum FlowCardSourceConditionValue {
    Raw = "raw",
    Applepay = "applepay",
    Googlepay = "googlepay",
}

/**
 * Card source conditions with a name, operator, and value.
 */
export type FlowCardSourceCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCardSourceConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowCardSourceConditionOperator;
    value: Array<FlowCardSourceConditionValue>;
};

/** @internal */
export const FlowCardSourceConditionName$: z.ZodNativeEnum<typeof FlowCardSourceConditionName> =
    z.nativeEnum(FlowCardSourceConditionName);

/** @internal */
export const FlowCardSourceConditionOperator$: z.ZodNativeEnum<
    typeof FlowCardSourceConditionOperator
> = z.nativeEnum(FlowCardSourceConditionOperator);

/** @internal */
export const FlowCardSourceConditionValue$: z.ZodNativeEnum<typeof FlowCardSourceConditionValue> =
    z.nativeEnum(FlowCardSourceConditionValue);

/** @internal */
export namespace FlowCardSourceCondition$ {
    export type Inbound = {
        name: FlowCardSourceConditionName;
        operator: FlowCardSourceConditionOperator;
        value: Array<FlowCardSourceConditionValue>;
    };

    export const inboundSchema: z.ZodType<FlowCardSourceCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowCardSourceConditionName$,
            operator: FlowCardSourceConditionOperator$,
            value: z.array(FlowCardSourceConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowCardSourceConditionName;
        operator: FlowCardSourceConditionOperator;
        value: Array<FlowCardSourceConditionValue>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCardSourceCondition> = z
        .object({
            name: FlowCardSourceConditionName$,
            operator: FlowCardSourceConditionOperator$,
            value: z.array(FlowCardSourceConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
