/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowBINRangeConditionName {
    CardBin = "card_bin",
}

/**
 * The comparison to make on the `card_bin` `value`.
 */
export enum FlowBINRangeConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * BIN range conditions with a name, operator, and value.
 */
export type FlowBINRangeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowBINRangeConditionName;
    /**
     * The comparison to make on the `card_bin` `value`.
     */
    operator: FlowBINRangeConditionOperator;
    /**
     * BIN range to compare with the transaction. A card BIN is
     *
     * @remarks
     * 8 characters long at maximum.
     */
    value: Array<string>;
};

/** @internal */
export const FlowBINRangeConditionName$ = z.nativeEnum(FlowBINRangeConditionName);

/** @internal */
export const FlowBINRangeConditionOperator$ = z.nativeEnum(FlowBINRangeConditionOperator);

/** @internal */
export namespace FlowBINRangeCondition$ {
    export type Inbound = {
        name: FlowBINRangeConditionName;
        operator: FlowBINRangeConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowBINRangeCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowBINRangeConditionName$,
            operator: FlowBINRangeConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowBINRangeConditionName;
        operator: FlowBINRangeConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowBINRangeCondition> = z
        .object({
            name: FlowBINRangeConditionName$,
            operator: FlowBINRangeConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
