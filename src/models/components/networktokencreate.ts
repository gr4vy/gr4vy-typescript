/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NetworkTokenCreate = {
  /**
   * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
   */
  securityCode?: string | null | undefined;
  /**
   * Defines if the request is merchant initiated or not.
   */
  merchantInitiated: boolean;
  /**
   * Defines if the request is a subsequent of another request or not.
   */
  isSubsequentPayment: boolean;
};

/** @internal */
export const NetworkTokenCreate$inboundSchema: z.ZodType<
  NetworkTokenCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  security_code: z.nullable(z.string()).optional(),
  merchant_initiated: z.boolean(),
  is_subsequent_payment: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "security_code": "securityCode",
    "merchant_initiated": "merchantInitiated",
    "is_subsequent_payment": "isSubsequentPayment",
  });
});

/** @internal */
export type NetworkTokenCreate$Outbound = {
  security_code?: string | null | undefined;
  merchant_initiated: boolean;
  is_subsequent_payment: boolean;
};

/** @internal */
export const NetworkTokenCreate$outboundSchema: z.ZodType<
  NetworkTokenCreate$Outbound,
  z.ZodTypeDef,
  NetworkTokenCreate
> = z.object({
  securityCode: z.nullable(z.string()).optional(),
  merchantInitiated: z.boolean(),
  isSubsequentPayment: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    securityCode: "security_code",
    merchantInitiated: "merchant_initiated",
    isSubsequentPayment: "is_subsequent_payment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenCreate$ {
  /** @deprecated use `NetworkTokenCreate$inboundSchema` instead. */
  export const inboundSchema = NetworkTokenCreate$inboundSchema;
  /** @deprecated use `NetworkTokenCreate$outboundSchema` instead. */
  export const outboundSchema = NetworkTokenCreate$outboundSchema;
  /** @deprecated use `NetworkTokenCreate$Outbound` instead. */
  export type Outbound = NetworkTokenCreate$Outbound;
}

export function networkTokenCreateToJSON(
  networkTokenCreate: NetworkTokenCreate,
): string {
  return JSON.stringify(
    NetworkTokenCreate$outboundSchema.parse(networkTokenCreate),
  );
}

export function networkTokenCreateFromJSON(
  jsonString: string,
): SafeParseResult<NetworkTokenCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkTokenCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkTokenCreate' from JSON`,
  );
}
