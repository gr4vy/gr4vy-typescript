/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorDetail, ErrorDetail$ } from "./errordetail";
import * as z from "zod";

/**
 * The type of this object. This is always `error`.
 */
export enum ErrorGenericType {
    Error = "error",
}

/**
 * A generic client error.
 */
export type ErrorGeneric = {
    /**
     * The type of this object. This is always `error`.
     */
    type?: ErrorGenericType | undefined;
    /**
     * A custom code to further describe the type of error being returned. This code provides further specification within the HTTP `status` code and can be used by a program to define logic based on the error.
     */
    code?: string | undefined;
    /**
     * The HTTP status code of this error.
     */
    status?: number | undefined;
    /**
     * A human readable message that describes the error. The content of this field should not be used to determine any business logic.
     */
    message?: string | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<ErrorDetail> | undefined;
};

/** @internal */
export const ErrorGenericType$ = z.nativeEnum(ErrorGenericType);

/** @internal */
export namespace ErrorGeneric$ {
    export type Inbound = {
        type?: ErrorGenericType | undefined;
        code?: string | undefined;
        status?: number | undefined;
        message?: string | undefined;
        details?: Array<ErrorDetail$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ErrorGeneric, z.ZodTypeDef, Inbound> = z
        .object({
            type: ErrorGenericType$.default(ErrorGenericType.Error),
            code: z.string().optional(),
            status: z.number().int().optional(),
            message: z.string().optional(),
            details: z.array(ErrorDetail$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        type: ErrorGenericType;
        code?: string | undefined;
        status?: number | undefined;
        message?: string | undefined;
        details?: Array<ErrorDetail$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorGeneric> = z
        .object({
            type: ErrorGenericType$.default(ErrorGenericType.Error),
            code: z.string().optional(),
            status: z.number().int().optional(),
            message: z.string().optional(),
            details: z.array(ErrorDetail$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}
