/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ForterAntiFraudOptionsCartItemBeneficiaryComments = {
  /**
   * Comments from the user to the merchant.
   */
  userCommentsToMerchant?: string | null | undefined;
  /**
   * Message intended for the beneficiary of the item.
   */
  messageToBeneficiary?: string | null | undefined;
  /**
   * Comments from the merchant about this transaction.
   */
  merchantComments?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsCartItemBeneficiaryComments$inboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemBeneficiaryComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    user_comments_to_merchant: z.nullable(z.string()).optional(),
    message_to_beneficiary: z.nullable(z.string()).optional(),
    merchant_comments: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_comments_to_merchant": "userCommentsToMerchant",
      "message_to_beneficiary": "messageToBeneficiary",
      "merchant_comments": "merchantComments",
    });
  });

/** @internal */
export type ForterAntiFraudOptionsCartItemBeneficiaryComments$Outbound = {
  user_comments_to_merchant?: string | null | undefined;
  message_to_beneficiary?: string | null | undefined;
  merchant_comments?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsCartItemBeneficiaryComments$outboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemBeneficiaryComments$Outbound,
    z.ZodTypeDef,
    ForterAntiFraudOptionsCartItemBeneficiaryComments
  > = z.object({
    userCommentsToMerchant: z.nullable(z.string()).optional(),
    messageToBeneficiary: z.nullable(z.string()).optional(),
    merchantComments: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      userCommentsToMerchant: "user_comments_to_merchant",
      messageToBeneficiary: "message_to_beneficiary",
      merchantComments: "merchant_comments",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterAntiFraudOptionsCartItemBeneficiaryComments$ {
  /** @deprecated use `ForterAntiFraudOptionsCartItemBeneficiaryComments$inboundSchema` instead. */
  export const inboundSchema =
    ForterAntiFraudOptionsCartItemBeneficiaryComments$inboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemBeneficiaryComments$outboundSchema` instead. */
  export const outboundSchema =
    ForterAntiFraudOptionsCartItemBeneficiaryComments$outboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemBeneficiaryComments$Outbound` instead. */
  export type Outbound =
    ForterAntiFraudOptionsCartItemBeneficiaryComments$Outbound;
}

export function forterAntiFraudOptionsCartItemBeneficiaryCommentsToJSON(
  forterAntiFraudOptionsCartItemBeneficiaryComments:
    ForterAntiFraudOptionsCartItemBeneficiaryComments,
): string {
  return JSON.stringify(
    ForterAntiFraudOptionsCartItemBeneficiaryComments$outboundSchema.parse(
      forterAntiFraudOptionsCartItemBeneficiaryComments,
    ),
  );
}

export function forterAntiFraudOptionsCartItemBeneficiaryCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  ForterAntiFraudOptionsCartItemBeneficiaryComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ForterAntiFraudOptionsCartItemBeneficiaryComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ForterAntiFraudOptionsCartItemBeneficiaryComments' from JSON`,
  );
}
