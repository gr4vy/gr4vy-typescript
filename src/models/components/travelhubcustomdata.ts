/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TravelHubCustomData = {
  /**
   * The key of the custom data field.
   */
  name: string;
  /**
   * The value of the custom data field.
   */
  value: string;
  /**
   * The type of the custom data field.
   */
  type?: string | null | undefined;
};

/** @internal */
export const TravelHubCustomData$inboundSchema: z.ZodType<
  TravelHubCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type TravelHubCustomData$Outbound = {
  name: string;
  value: string;
  type?: string | null | undefined;
};

/** @internal */
export const TravelHubCustomData$outboundSchema: z.ZodType<
  TravelHubCustomData$Outbound,
  z.ZodTypeDef,
  TravelHubCustomData
> = z.object({
  name: z.string(),
  value: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TravelHubCustomData$ {
  /** @deprecated use `TravelHubCustomData$inboundSchema` instead. */
  export const inboundSchema = TravelHubCustomData$inboundSchema;
  /** @deprecated use `TravelHubCustomData$outboundSchema` instead. */
  export const outboundSchema = TravelHubCustomData$outboundSchema;
  /** @deprecated use `TravelHubCustomData$Outbound` instead. */
  export type Outbound = TravelHubCustomData$Outbound;
}

export function travelHubCustomDataToJSON(
  travelHubCustomData: TravelHubCustomData,
): string {
  return JSON.stringify(
    TravelHubCustomData$outboundSchema.parse(travelHubCustomData),
  );
}

export function travelHubCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TravelHubCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TravelHubCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TravelHubCustomData' from JSON`,
  );
}
