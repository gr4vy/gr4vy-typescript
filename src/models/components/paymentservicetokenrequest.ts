/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * Request body for provision a payment service token.
 */
export type PaymentServiceTokenRequest = {
    /**
     * The 3 or 4 digit security code often found on the card. This often
     *
     * @remarks
     * referred to as the CVV or CVD.
     *
     * The security code can only be set if the stored payment method
     * represents a card.
     */
    securityCode: string;
    /**
     * The ID of the payment service.
     */
    paymentServiceId: string;
    /**
     * The redirect URL to redirect a buyer to after they have authorized their
     *
     * @remarks
     * payment method. This only applies to payment methods that require buyer approval.
     */
    redirectUrl: string;
};

/** @internal */
export namespace PaymentServiceTokenRequest$ {
    export const inboundSchema: z.ZodType<PaymentServiceTokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            security_code: z.string(),
            payment_service_id: z.string(),
            redirect_url: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                security_code: "securityCode",
                payment_service_id: "paymentServiceId",
                redirect_url: "redirectUrl",
            });
        });

    export type Outbound = {
        security_code: string;
        payment_service_id: string;
        redirect_url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceTokenRequest> = z
        .object({
            securityCode: z.string(),
            paymentServiceId: z.string(),
            redirectUrl: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                securityCode: "security_code",
                paymentServiceId: "payment_service_id",
                redirectUrl: "redirect_url",
            });
        });
}
