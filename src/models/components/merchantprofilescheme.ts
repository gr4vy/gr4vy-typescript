/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MerchantProfileScheme = {
  /**
   * Acquirer BIN to use when calling 3DS through this scheme.
   */
  merchantAcquirerBin: string;
  /**
   * Merchant ID to use when calling 3DS through this scheme.
   */
  merchantAcquirerId: string;
  merchantName: string;
  /**
   * The merchant's ISO 3166-1 numeric country code.
   */
  merchantCountryCode: string;
  /**
   * Merchant category code to use when calling 3DS through this scheme.
   */
  merchantCategoryCode: string;
  /**
   * URL to send when calling 3DS through this scheme.
   */
  merchantUrl: string;
};

/** @internal */
export const MerchantProfileScheme$inboundSchema: z.ZodType<
  MerchantProfileScheme,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchant_acquirer_bin: z.string(),
  merchant_acquirer_id: z.string(),
  merchant_name: z.string(),
  merchant_country_code: z.string(),
  merchant_category_code: z.string(),
  merchant_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "merchant_acquirer_bin": "merchantAcquirerBin",
    "merchant_acquirer_id": "merchantAcquirerId",
    "merchant_name": "merchantName",
    "merchant_country_code": "merchantCountryCode",
    "merchant_category_code": "merchantCategoryCode",
    "merchant_url": "merchantUrl",
  });
});

/** @internal */
export type MerchantProfileScheme$Outbound = {
  merchant_acquirer_bin: string;
  merchant_acquirer_id: string;
  merchant_name: string;
  merchant_country_code: string;
  merchant_category_code: string;
  merchant_url: string;
};

/** @internal */
export const MerchantProfileScheme$outboundSchema: z.ZodType<
  MerchantProfileScheme$Outbound,
  z.ZodTypeDef,
  MerchantProfileScheme
> = z.object({
  merchantAcquirerBin: z.string(),
  merchantAcquirerId: z.string(),
  merchantName: z.string(),
  merchantCountryCode: z.string(),
  merchantCategoryCode: z.string(),
  merchantUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    merchantAcquirerBin: "merchant_acquirer_bin",
    merchantAcquirerId: "merchant_acquirer_id",
    merchantName: "merchant_name",
    merchantCountryCode: "merchant_country_code",
    merchantCategoryCode: "merchant_category_code",
    merchantUrl: "merchant_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantProfileScheme$ {
  /** @deprecated use `MerchantProfileScheme$inboundSchema` instead. */
  export const inboundSchema = MerchantProfileScheme$inboundSchema;
  /** @deprecated use `MerchantProfileScheme$outboundSchema` instead. */
  export const outboundSchema = MerchantProfileScheme$outboundSchema;
  /** @deprecated use `MerchantProfileScheme$Outbound` instead. */
  export type Outbound = MerchantProfileScheme$Outbound;
}

export function merchantProfileSchemeToJSON(
  merchantProfileScheme: MerchantProfileScheme,
): string {
  return JSON.stringify(
    MerchantProfileScheme$outboundSchema.parse(merchantProfileScheme),
  );
}

export function merchantProfileSchemeFromJSON(
  jsonString: string,
): SafeParseResult<MerchantProfileScheme, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MerchantProfileScheme$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MerchantProfileScheme' from JSON`,
  );
}
