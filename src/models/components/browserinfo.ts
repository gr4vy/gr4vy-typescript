/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The platform that is being used to access the website.
 */
export const UserDevice = {
  Desktop: "desktop",
  Mobile: "mobile",
} as const;
/**
 * The platform that is being used to access the website.
 */
export type UserDevice = OpenEnum<typeof UserDevice>;

/**
 * Merchant provided browser info
 */
export type BrowserInfo = {
  javascriptEnabled: boolean;
  javaEnabled: boolean;
  language: string;
  colorDepth: number;
  screenHeight: number;
  screenWidth: number;
  timeZoneOffset: number;
  /**
   * Exact content of the HTTP user-agent header.
   */
  userAgent: string;
  /**
   * The platform that is being used to access the website.
   */
  userDevice: UserDevice;
  /**
   * The Accept header of the request from the buyer's browser.
   */
  acceptHeader?: string | null | undefined;
};

/** @internal */
export const UserDevice$inboundSchema: z.ZodType<
  UserDevice,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UserDevice),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UserDevice$outboundSchema: z.ZodType<
  UserDevice,
  z.ZodTypeDef,
  UserDevice
> = z.union([
  z.nativeEnum(UserDevice),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDevice$ {
  /** @deprecated use `UserDevice$inboundSchema` instead. */
  export const inboundSchema = UserDevice$inboundSchema;
  /** @deprecated use `UserDevice$outboundSchema` instead. */
  export const outboundSchema = UserDevice$outboundSchema;
}

/** @internal */
export const BrowserInfo$inboundSchema: z.ZodType<
  BrowserInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  javascript_enabled: z.boolean(),
  java_enabled: z.boolean(),
  language: z.string(),
  color_depth: z.number().int(),
  screen_height: z.number().int(),
  screen_width: z.number().int(),
  time_zone_offset: z.number().int(),
  user_agent: z.string(),
  user_device: UserDevice$inboundSchema,
  accept_header: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "javascript_enabled": "javascriptEnabled",
    "java_enabled": "javaEnabled",
    "color_depth": "colorDepth",
    "screen_height": "screenHeight",
    "screen_width": "screenWidth",
    "time_zone_offset": "timeZoneOffset",
    "user_agent": "userAgent",
    "user_device": "userDevice",
    "accept_header": "acceptHeader",
  });
});

/** @internal */
export type BrowserInfo$Outbound = {
  javascript_enabled: boolean;
  java_enabled: boolean;
  language: string;
  color_depth: number;
  screen_height: number;
  screen_width: number;
  time_zone_offset: number;
  user_agent: string;
  user_device: string;
  accept_header?: string | null | undefined;
};

/** @internal */
export const BrowserInfo$outboundSchema: z.ZodType<
  BrowserInfo$Outbound,
  z.ZodTypeDef,
  BrowserInfo
> = z.object({
  javascriptEnabled: z.boolean(),
  javaEnabled: z.boolean(),
  language: z.string(),
  colorDepth: z.number().int(),
  screenHeight: z.number().int(),
  screenWidth: z.number().int(),
  timeZoneOffset: z.number().int(),
  userAgent: z.string(),
  userDevice: UserDevice$outboundSchema,
  acceptHeader: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    javascriptEnabled: "javascript_enabled",
    javaEnabled: "java_enabled",
    colorDepth: "color_depth",
    screenHeight: "screen_height",
    screenWidth: "screen_width",
    timeZoneOffset: "time_zone_offset",
    userAgent: "user_agent",
    userDevice: "user_device",
    acceptHeader: "accept_header",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BrowserInfo$ {
  /** @deprecated use `BrowserInfo$inboundSchema` instead. */
  export const inboundSchema = BrowserInfo$inboundSchema;
  /** @deprecated use `BrowserInfo$outboundSchema` instead. */
  export const outboundSchema = BrowserInfo$outboundSchema;
  /** @deprecated use `BrowserInfo$Outbound` instead. */
  export type Outbound = BrowserInfo$Outbound;
}

export function browserInfoToJSON(browserInfo: BrowserInfo): string {
  return JSON.stringify(BrowserInfo$outboundSchema.parse(browserInfo));
}

export function browserInfoFromJSON(
  jsonString: string,
): SafeParseResult<BrowserInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BrowserInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BrowserInfo' from JSON`,
  );
}
