/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudWebhookEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-webhook`.
 */
export enum AntiFraudWebhookEventName {
    AntiFraudWebhook = "anti-fraud-webhook",
}

/**
 * Additional context for this event.
 */
export type AntiFraudWebhookEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision that's being updated.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The raw payload sent as a webhook.
     */
    content?: string | undefined;
    /**
     * The content type of the payload sent as a webhook.
     */
    contentType?: string | undefined;
    /**
     * The parsed decision response from the anti-fraud provider webhook.
     */
    decision?: string | undefined;
    /**
     * Any comment that may have come with the webhook event.
     */
    comment?: string | undefined;
};

/**
 * This event logs the webhook received when an anti-fraud decision is updated.
 */
export type AntiFraudWebhookEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudWebhookEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-webhook`.
     */
    name?: AntiFraudWebhookEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudWebhookEventContext | undefined;
};

/** @internal */
export const AntiFraudWebhookEventType$: z.ZodNativeEnum<typeof AntiFraudWebhookEventType> =
    z.nativeEnum(AntiFraudWebhookEventType);

/** @internal */
export const AntiFraudWebhookEventName$: z.ZodNativeEnum<typeof AntiFraudWebhookEventName> =
    z.nativeEnum(AntiFraudWebhookEventName);

/** @internal */
export namespace AntiFraudWebhookEventContext$ {
    export type Inbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        anti_fraud_service_check_id?: string | undefined;
        content?: string | undefined;
        content_type?: string | undefined;
        decision?: string | undefined;
        comment?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AntiFraudWebhookEventContext, z.ZodTypeDef, Inbound> = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            anti_fraud_service_check_id: z.string().optional(),
            content: z.string().optional(),
            content_type: z.string().optional(),
            decision: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.anti_fraud_service_id === undefined
                    ? null
                    : { antiFraudServiceId: v.anti_fraud_service_id }),
                ...(v.anti_fraud_service_name === undefined
                    ? null
                    : { antiFraudServiceName: v.anti_fraud_service_name }),
                ...(v.anti_fraud_service_definition_id === undefined
                    ? null
                    : { antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id }),
                ...(v.anti_fraud_service_check_id === undefined
                    ? null
                    : { antiFraudServiceCheckId: v.anti_fraud_service_check_id }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.content_type === undefined ? null : { contentType: v.content_type }),
                ...(v.decision === undefined ? null : { decision: v.decision }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        anti_fraud_service_check_id?: string | undefined;
        content?: string | undefined;
        content_type?: string | undefined;
        decision?: string | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudWebhookEventContext> = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            antiFraudServiceCheckId: z.string().optional(),
            content: z.string().optional(),
            contentType: z.string().optional(),
            decision: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.antiFraudServiceId === undefined
                    ? null
                    : { anti_fraud_service_id: v.antiFraudServiceId }),
                ...(v.antiFraudServiceName === undefined
                    ? null
                    : { anti_fraud_service_name: v.antiFraudServiceName }),
                ...(v.antiFraudServiceDefinitionId === undefined
                    ? null
                    : { anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId }),
                ...(v.antiFraudServiceCheckId === undefined
                    ? null
                    : { anti_fraud_service_check_id: v.antiFraudServiceCheckId }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.contentType === undefined ? null : { content_type: v.contentType }),
                ...(v.decision === undefined ? null : { decision: v.decision }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace AntiFraudWebhookEvent$ {
    export type Inbound = {
        type?: AntiFraudWebhookEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudWebhookEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudWebhookEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AntiFraudWebhookEvent, z.ZodTypeDef, Inbound> = z
        .object({
            type: AntiFraudWebhookEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudWebhookEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => AntiFraudWebhookEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: AntiFraudWebhookEventType | undefined;
        id?: string | undefined;
        name?: AntiFraudWebhookEventName | undefined;
        created_at?: string | undefined;
        context?: AntiFraudWebhookEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudWebhookEvent> = z
        .object({
            type: AntiFraudWebhookEventType$.optional(),
            id: z.string().optional(),
            name: AntiFraudWebhookEventName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => AntiFraudWebhookEventContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
