/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudWebhookEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudWebhookEventType = ClosedEnum<typeof AntiFraudWebhookEventType>;

/**
 * The name of this resource. Is always `anti-fraud-webhook`.
 */
export const AntiFraudWebhookEventName = {
    AntiFraudWebhook: "anti-fraud-webhook",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-webhook`.
 */
export type AntiFraudWebhookEventName = ClosedEnum<typeof AntiFraudWebhookEventName>;

/**
 * Additional context for this event.
 */
export type AntiFraudWebhookEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision that's being updated.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The raw payload sent as a webhook.
     */
    content?: string | undefined;
    /**
     * The content type of the payload sent as a webhook.
     */
    contentType?: string | undefined;
    /**
     * The parsed decision response from the anti-fraud provider webhook.
     */
    decision?: string | undefined;
    /**
     * Any comment that may have come with the webhook event.
     */
    comment?: string | undefined;
};

/**
 * This event logs the webhook received when an anti-fraud decision is updated.
 */
export type AntiFraudWebhookEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudWebhookEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-webhook`.
     */
    name?: AntiFraudWebhookEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudWebhookEventContext | undefined;
};

/** @internal */
export const AntiFraudWebhookEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudWebhookEventType
> = z.nativeEnum(AntiFraudWebhookEventType);

/** @internal */
export const AntiFraudWebhookEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudWebhookEventType
> = AntiFraudWebhookEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudWebhookEventType$ {
    /** @deprecated use `AntiFraudWebhookEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudWebhookEventType$inboundSchema;
    /** @deprecated use `AntiFraudWebhookEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudWebhookEventType$outboundSchema;
}

/** @internal */
export const AntiFraudWebhookEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudWebhookEventName
> = z.nativeEnum(AntiFraudWebhookEventName);

/** @internal */
export const AntiFraudWebhookEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudWebhookEventName
> = AntiFraudWebhookEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudWebhookEventName$ {
    /** @deprecated use `AntiFraudWebhookEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudWebhookEventName$inboundSchema;
    /** @deprecated use `AntiFraudWebhookEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudWebhookEventName$outboundSchema;
}

/** @internal */
export const AntiFraudWebhookEventContext$inboundSchema: z.ZodType<
    AntiFraudWebhookEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        anti_fraud_service_check_id: z.string().optional(),
        content: z.string().optional(),
        content_type: z.string().optional(),
        decision: z.string().optional(),
        comment: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            anti_fraud_service_check_id: "antiFraudServiceCheckId",
            content_type: "contentType",
        });
    });

/** @internal */
export type AntiFraudWebhookEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    anti_fraud_service_check_id?: string | undefined;
    content?: string | undefined;
    content_type?: string | undefined;
    decision?: string | undefined;
    comment?: string | undefined;
};

/** @internal */
export const AntiFraudWebhookEventContext$outboundSchema: z.ZodType<
    AntiFraudWebhookEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudWebhookEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        antiFraudServiceCheckId: z.string().optional(),
        content: z.string().optional(),
        contentType: z.string().optional(),
        decision: z.string().optional(),
        comment: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            antiFraudServiceCheckId: "anti_fraud_service_check_id",
            contentType: "content_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudWebhookEventContext$ {
    /** @deprecated use `AntiFraudWebhookEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudWebhookEventContext$inboundSchema;
    /** @deprecated use `AntiFraudWebhookEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudWebhookEventContext$outboundSchema;
    /** @deprecated use `AntiFraudWebhookEventContext$Outbound` instead. */
    export type Outbound = AntiFraudWebhookEventContext$Outbound;
}

/** @internal */
export const AntiFraudWebhookEvent$inboundSchema: z.ZodType<
    AntiFraudWebhookEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudWebhookEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudWebhookEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => AntiFraudWebhookEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudWebhookEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudWebhookEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudWebhookEvent$outboundSchema: z.ZodType<
    AntiFraudWebhookEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudWebhookEvent
> = z
    .object({
        type: AntiFraudWebhookEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudWebhookEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => AntiFraudWebhookEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudWebhookEvent$ {
    /** @deprecated use `AntiFraudWebhookEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudWebhookEvent$inboundSchema;
    /** @deprecated use `AntiFraudWebhookEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudWebhookEvent$outboundSchema;
    /** @deprecated use `AntiFraudWebhookEvent$Outbound` instead. */
    export type Outbound = AntiFraudWebhookEvent$Outbound;
}
