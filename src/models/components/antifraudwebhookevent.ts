/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudWebhookEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-webhook`.
 */
export enum AntiFraudWebhookEventName {
    AntiFraudWebhook = "anti-fraud-webhook",
}

/**
 * Additional context for this event.
 */
export type AntiFraudWebhookEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision that's being updated.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The raw payload sent as a webhook.
     */
    content?: string | undefined;
    /**
     * The content type of the payload sent as a webhook.
     */
    contentType?: string | undefined;
    /**
     * The parsed decision response from the anti-fraud provider webhook.
     */
    decision?: string | undefined;
    /**
     * Any comment that may have come with the webhook event.
     */
    comment?: string | undefined;
};

/**
 * This event logs the webhook received when an anti-fraud decision is updated.
 */
export type AntiFraudWebhookEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudWebhookEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-webhook`.
     */
    name?: AntiFraudWebhookEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudWebhookEventContext | undefined;
};

/** @internal */
export namespace AntiFraudWebhookEventType$ {
    export const inboundSchema = z.nativeEnum(AntiFraudWebhookEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudWebhookEventName$ {
    export const inboundSchema = z.nativeEnum(AntiFraudWebhookEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudWebhookEventContext$ {
    export const inboundSchema: z.ZodType<AntiFraudWebhookEventContext, z.ZodTypeDef, unknown> = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            anti_fraud_service_check_id: z.string().optional(),
            content: z.string().optional(),
            content_type: z.string().optional(),
            decision: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                anti_fraud_service_id: "antiFraudServiceId",
                anti_fraud_service_name: "antiFraudServiceName",
                anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
                anti_fraud_service_check_id: "antiFraudServiceCheckId",
                content_type: "contentType",
            });
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        anti_fraud_service_check_id?: string | undefined;
        content?: string | undefined;
        content_type?: string | undefined;
        decision?: string | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudWebhookEventContext> = z
        .object({
            antiFraudServiceId: z.string().optional(),
            antiFraudServiceName: z.string().optional(),
            antiFraudServiceDefinitionId: z.string().optional(),
            antiFraudServiceCheckId: z.string().optional(),
            content: z.string().optional(),
            contentType: z.string().optional(),
            decision: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                antiFraudServiceId: "anti_fraud_service_id",
                antiFraudServiceName: "anti_fraud_service_name",
                antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
                antiFraudServiceCheckId: "anti_fraud_service_check_id",
                contentType: "content_type",
            });
        });
}

/** @internal */
export namespace AntiFraudWebhookEvent$ {
    export const inboundSchema: z.ZodType<AntiFraudWebhookEvent, z.ZodTypeDef, unknown> = z
        .object({
            type: AntiFraudWebhookEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudWebhookEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => AntiFraudWebhookEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: AntiFraudWebhookEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudWebhookEvent> = z
        .object({
            type: AntiFraudWebhookEventType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudWebhookEventName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => AntiFraudWebhookEventContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
