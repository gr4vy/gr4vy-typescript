/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum BINLookupRequestType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `bin-lookup-request`.
 */
export enum Name {
    BinLookupRequest = "bin-lookup-request",
}

/**
 * The card scheme result from the lookup response.
 */
export enum BINLookupRequestScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

export enum BINLookupRequestAdditionalSchemes {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * BIN lookup request context.
 */
export type BINLookupRequestContext = {
    /**
     * The response body received from the `url`.
     */
    response?: string | null | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * Whether the BIN lookup was successful or not.
     */
    success?: boolean | undefined;
    /**
     * The value used to lookup BIN details.
     */
    bin?: string | null | undefined;
    /**
     * The instrument type used to lookup BIN details.
     */
    instrument?: string | null | undefined;
    /**
     * The type of card, i.e. credit or debit, from the lookup response.
     */
    type?: string | null | undefined;
    /**
     * The card scheme result from the lookup response.
     */
    scheme?: BINLookupRequestScheme | null | undefined;
    /**
     * The card additional schemes from the lookup response.
     */
    additionalSchemes?: Array<BINLookupRequestAdditionalSchemes> | null | undefined;
    /**
     * The card country code result from the lookup response.
     */
    countryCode?: string | null | undefined;
    /**
     * Whether the issuing bank supports network tokenization for this card.
     */
    supportsNetworkTokens?: boolean | null | undefined;
};

/**
 * The result and raw data for a card BIN lookup.
 */
export type BINLookupRequest = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: BINLookupRequestType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `bin-lookup-request`.
     */
    name?: Name | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * BIN lookup request context.
     */
    context?: BINLookupRequestContext | undefined;
};

/** @internal */
export namespace BINLookupRequestType$ {
    export const inboundSchema = z.nativeEnum(BINLookupRequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Name$ {
    export const inboundSchema = z.nativeEnum(Name);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace BINLookupRequestScheme$ {
    export const inboundSchema = z.nativeEnum(BINLookupRequestScheme);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace BINLookupRequestAdditionalSchemes$ {
    export const inboundSchema = z.nativeEnum(BINLookupRequestAdditionalSchemes);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace BINLookupRequestContext$ {
    export const inboundSchema: z.ZodType<BINLookupRequestContext, z.ZodTypeDef, unknown> = z
        .object({
            response: z.nullable(z.string()).optional(),
            response_status_code: z.number().int().optional(),
            success: z.boolean().optional(),
            bin: z.nullable(z.string()).optional(),
            instrument: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
            scheme: z.nullable(BINLookupRequestScheme$.inboundSchema).optional(),
            additional_schemes: z
                .nullable(z.array(BINLookupRequestAdditionalSchemes$.inboundSchema))
                .optional(),
            country_code: z.nullable(z.string()).optional(),
            supports_network_tokens: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                response_status_code: "responseStatusCode",
                additional_schemes: "additionalSchemes",
                country_code: "countryCode",
                supports_network_tokens: "supportsNetworkTokens",
            });
        });

    export type Outbound = {
        response?: string | null | undefined;
        response_status_code?: number | undefined;
        success?: boolean | undefined;
        bin?: string | null | undefined;
        instrument?: string | null | undefined;
        type?: string | null | undefined;
        scheme?: string | null | undefined;
        additional_schemes?: Array<string> | null | undefined;
        country_code?: string | null | undefined;
        supports_network_tokens?: boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BINLookupRequestContext> = z
        .object({
            response: z.nullable(z.string()).optional(),
            responseStatusCode: z.number().int().optional(),
            success: z.boolean().optional(),
            bin: z.nullable(z.string()).optional(),
            instrument: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
            scheme: z.nullable(BINLookupRequestScheme$.outboundSchema).optional(),
            additionalSchemes: z
                .nullable(z.array(BINLookupRequestAdditionalSchemes$.outboundSchema))
                .optional(),
            countryCode: z.nullable(z.string()).optional(),
            supportsNetworkTokens: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                responseStatusCode: "response_status_code",
                additionalSchemes: "additional_schemes",
                countryCode: "country_code",
                supportsNetworkTokens: "supports_network_tokens",
            });
        });
}

/** @internal */
export namespace BINLookupRequest$ {
    export const inboundSchema: z.ZodType<BINLookupRequest, z.ZodTypeDef, unknown> = z
        .object({
            type: BINLookupRequestType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: Name$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => BINLookupRequestContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: BINLookupRequestContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BINLookupRequest> = z
        .object({
            type: BINLookupRequestType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: Name$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => BINLookupRequestContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
