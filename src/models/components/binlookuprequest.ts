/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const BINLookupRequestType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type BINLookupRequestType = ClosedEnum<typeof BINLookupRequestType>;

/**
 * The name of this resource. Is always `bin-lookup-request`.
 */
export const Name = {
    BinLookupRequest: "bin-lookup-request",
} as const;
/**
 * The name of this resource. Is always `bin-lookup-request`.
 */
export type Name = ClosedEnum<typeof Name>;

/**
 * The card scheme result from the lookup response.
 */
export const BINLookupRequestScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The card scheme result from the lookup response.
 */
export type BINLookupRequestScheme = ClosedEnum<typeof BINLookupRequestScheme>;

export const BINLookupRequestAdditionalSchemes = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
export type BINLookupRequestAdditionalSchemes = ClosedEnum<
    typeof BINLookupRequestAdditionalSchemes
>;

/**
 * BIN lookup request context.
 */
export type BINLookupRequestContext = {
    /**
     * The response body received from the `url`.
     */
    response?: string | null | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * Whether the BIN lookup was successful or not.
     */
    success?: boolean | undefined;
    /**
     * The value used to lookup BIN details.
     */
    bin?: string | null | undefined;
    /**
     * The instrument type used to lookup BIN details.
     */
    instrument?: string | null | undefined;
    /**
     * The type of card, i.e. credit or debit, from the lookup response.
     */
    type?: string | null | undefined;
    /**
     * The card scheme result from the lookup response.
     */
    scheme?: BINLookupRequestScheme | null | undefined;
    /**
     * The card additional schemes from the lookup response.
     */
    additionalSchemes?: Array<BINLookupRequestAdditionalSchemes> | null | undefined;
    /**
     * The card country code result from the lookup response.
     */
    countryCode?: string | null | undefined;
    /**
     * Whether the issuing bank supports network tokenization for this card.
     */
    supportsNetworkTokens?: boolean | null | undefined;
};

/**
 * The result and raw data for a card BIN lookup.
 */
export type BINLookupRequest = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: BINLookupRequestType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `bin-lookup-request`.
     */
    name?: Name | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * BIN lookup request context.
     */
    context?: BINLookupRequestContext | undefined;
};

/** @internal */
export const BINLookupRequestType$inboundSchema: z.ZodNativeEnum<typeof BINLookupRequestType> =
    z.nativeEnum(BINLookupRequestType);

/** @internal */
export const BINLookupRequestType$outboundSchema: z.ZodNativeEnum<typeof BINLookupRequestType> =
    BINLookupRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BINLookupRequestType$ {
    /** @deprecated use `BINLookupRequestType$inboundSchema` instead. */
    export const inboundSchema = BINLookupRequestType$inboundSchema;
    /** @deprecated use `BINLookupRequestType$outboundSchema` instead. */
    export const outboundSchema = BINLookupRequestType$outboundSchema;
}

/** @internal */
export const Name$inboundSchema: z.ZodNativeEnum<typeof Name> = z.nativeEnum(Name);

/** @internal */
export const Name$outboundSchema: z.ZodNativeEnum<typeof Name> = Name$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
    /** @deprecated use `Name$inboundSchema` instead. */
    export const inboundSchema = Name$inboundSchema;
    /** @deprecated use `Name$outboundSchema` instead. */
    export const outboundSchema = Name$outboundSchema;
}

/** @internal */
export const BINLookupRequestScheme$inboundSchema: z.ZodNativeEnum<typeof BINLookupRequestScheme> =
    z.nativeEnum(BINLookupRequestScheme);

/** @internal */
export const BINLookupRequestScheme$outboundSchema: z.ZodNativeEnum<typeof BINLookupRequestScheme> =
    BINLookupRequestScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BINLookupRequestScheme$ {
    /** @deprecated use `BINLookupRequestScheme$inboundSchema` instead. */
    export const inboundSchema = BINLookupRequestScheme$inboundSchema;
    /** @deprecated use `BINLookupRequestScheme$outboundSchema` instead. */
    export const outboundSchema = BINLookupRequestScheme$outboundSchema;
}

/** @internal */
export const BINLookupRequestAdditionalSchemes$inboundSchema: z.ZodNativeEnum<
    typeof BINLookupRequestAdditionalSchemes
> = z.nativeEnum(BINLookupRequestAdditionalSchemes);

/** @internal */
export const BINLookupRequestAdditionalSchemes$outboundSchema: z.ZodNativeEnum<
    typeof BINLookupRequestAdditionalSchemes
> = BINLookupRequestAdditionalSchemes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BINLookupRequestAdditionalSchemes$ {
    /** @deprecated use `BINLookupRequestAdditionalSchemes$inboundSchema` instead. */
    export const inboundSchema = BINLookupRequestAdditionalSchemes$inboundSchema;
    /** @deprecated use `BINLookupRequestAdditionalSchemes$outboundSchema` instead. */
    export const outboundSchema = BINLookupRequestAdditionalSchemes$outboundSchema;
}

/** @internal */
export const BINLookupRequestContext$inboundSchema: z.ZodType<
    BINLookupRequestContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        response: z.nullable(z.string()).optional(),
        response_status_code: z.number().int().optional(),
        success: z.boolean().optional(),
        bin: z.nullable(z.string()).optional(),
        instrument: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
        scheme: z.nullable(BINLookupRequestScheme$inboundSchema).optional(),
        additional_schemes: z
            .nullable(z.array(BINLookupRequestAdditionalSchemes$inboundSchema))
            .optional(),
        country_code: z.nullable(z.string()).optional(),
        supports_network_tokens: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            response_status_code: "responseStatusCode",
            additional_schemes: "additionalSchemes",
            country_code: "countryCode",
            supports_network_tokens: "supportsNetworkTokens",
        });
    });

/** @internal */
export type BINLookupRequestContext$Outbound = {
    response?: string | null | undefined;
    response_status_code?: number | undefined;
    success?: boolean | undefined;
    bin?: string | null | undefined;
    instrument?: string | null | undefined;
    type?: string | null | undefined;
    scheme?: string | null | undefined;
    additional_schemes?: Array<string> | null | undefined;
    country_code?: string | null | undefined;
    supports_network_tokens?: boolean | null | undefined;
};

/** @internal */
export const BINLookupRequestContext$outboundSchema: z.ZodType<
    BINLookupRequestContext$Outbound,
    z.ZodTypeDef,
    BINLookupRequestContext
> = z
    .object({
        response: z.nullable(z.string()).optional(),
        responseStatusCode: z.number().int().optional(),
        success: z.boolean().optional(),
        bin: z.nullable(z.string()).optional(),
        instrument: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
        scheme: z.nullable(BINLookupRequestScheme$outboundSchema).optional(),
        additionalSchemes: z
            .nullable(z.array(BINLookupRequestAdditionalSchemes$outboundSchema))
            .optional(),
        countryCode: z.nullable(z.string()).optional(),
        supportsNetworkTokens: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            responseStatusCode: "response_status_code",
            additionalSchemes: "additional_schemes",
            countryCode: "country_code",
            supportsNetworkTokens: "supports_network_tokens",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BINLookupRequestContext$ {
    /** @deprecated use `BINLookupRequestContext$inboundSchema` instead. */
    export const inboundSchema = BINLookupRequestContext$inboundSchema;
    /** @deprecated use `BINLookupRequestContext$outboundSchema` instead. */
    export const outboundSchema = BINLookupRequestContext$outboundSchema;
    /** @deprecated use `BINLookupRequestContext$Outbound` instead. */
    export type Outbound = BINLookupRequestContext$Outbound;
}

/** @internal */
export const BINLookupRequest$inboundSchema: z.ZodType<BINLookupRequest, z.ZodTypeDef, unknown> = z
    .object({
        type: BINLookupRequestType$inboundSchema.optional(),
        id: z.string().optional(),
        name: Name$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => BINLookupRequestContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type BINLookupRequest$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: BINLookupRequestContext$Outbound | undefined;
};

/** @internal */
export const BINLookupRequest$outboundSchema: z.ZodType<
    BINLookupRequest$Outbound,
    z.ZodTypeDef,
    BINLookupRequest
> = z
    .object({
        type: BINLookupRequestType$outboundSchema.optional(),
        id: z.string().optional(),
        name: Name$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => BINLookupRequestContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BINLookupRequest$ {
    /** @deprecated use `BINLookupRequest$inboundSchema` instead. */
    export const inboundSchema = BINLookupRequest$inboundSchema;
    /** @deprecated use `BINLookupRequest$outboundSchema` instead. */
    export const outboundSchema = BINLookupRequest$outboundSchema;
    /** @deprecated use `BINLookupRequest$Outbound` instead. */
    export type Outbound = BINLookupRequest$Outbound;
}
