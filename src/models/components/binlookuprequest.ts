/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum BINLookupRequestType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `bin-lookup-request`.
 */
export enum Name {
    BinLookupRequest = "bin-lookup-request",
}

/**
 * The card scheme result from the lookup response.
 */
export enum BINLookupRequestScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

export enum BINLookupRequestAdditionalSchemes {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * BIN lookup request context.
 */
export type BINLookupRequestContext = {
    /**
     * The response body received from the `url`.
     */
    response?: string | null | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * Whether the BIN lookup was successful or not.
     */
    success?: boolean | undefined;
    /**
     * The value used to lookup BIN details.
     */
    bin?: string | null | undefined;
    /**
     * The instrument type used to lookup BIN details.
     */
    instrument?: string | null | undefined;
    /**
     * The type of card, i.e. credit or debit, from the lookup response.
     */
    type?: string | null | undefined;
    /**
     * The card scheme result from the lookup response.
     */
    scheme?: BINLookupRequestScheme | null | undefined;
    /**
     * The card additional schemes from the lookup response.
     */
    additionalSchemes?: Array<BINLookupRequestAdditionalSchemes> | null | undefined;
    /**
     * The card country code result from the lookup response.
     */
    countryCode?: string | null | undefined;
    /**
     * Whether the issuing bank supports network tokenization for this card.
     */
    supportsNetworkTokens?: boolean | null | undefined;
};

/**
 * The result and raw data for a card BIN lookup.
 */
export type BINLookupRequest = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: BINLookupRequestType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `bin-lookup-request`.
     */
    name?: Name | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * BIN lookup request context.
     */
    context?: BINLookupRequestContext | undefined;
};

/** @internal */
export const BINLookupRequestType$: z.ZodNativeEnum<typeof BINLookupRequestType> =
    z.nativeEnum(BINLookupRequestType);

/** @internal */
export const Name$: z.ZodNativeEnum<typeof Name> = z.nativeEnum(Name);

/** @internal */
export const BINLookupRequestScheme$: z.ZodNativeEnum<typeof BINLookupRequestScheme> =
    z.nativeEnum(BINLookupRequestScheme);

/** @internal */
export const BINLookupRequestAdditionalSchemes$: z.ZodNativeEnum<
    typeof BINLookupRequestAdditionalSchemes
> = z.nativeEnum(BINLookupRequestAdditionalSchemes);

/** @internal */
export namespace BINLookupRequestContext$ {
    export type Inbound = {
        response?: string | null | undefined;
        response_status_code?: number | undefined;
        success?: boolean | undefined;
        bin?: string | null | undefined;
        instrument?: string | null | undefined;
        type?: string | null | undefined;
        scheme?: BINLookupRequestScheme | null | undefined;
        additional_schemes?: Array<BINLookupRequestAdditionalSchemes> | null | undefined;
        country_code?: string | null | undefined;
        supports_network_tokens?: boolean | null | undefined;
    };

    export const inboundSchema: z.ZodType<BINLookupRequestContext, z.ZodTypeDef, Inbound> = z
        .object({
            response: z.nullable(z.string()).optional(),
            response_status_code: z.number().int().optional(),
            success: z.boolean().optional(),
            bin: z.nullable(z.string()).optional(),
            instrument: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
            scheme: z.nullable(BINLookupRequestScheme$).optional(),
            additional_schemes: z.nullable(z.array(BINLookupRequestAdditionalSchemes$)).optional(),
            country_code: z.nullable(z.string()).optional(),
            supports_network_tokens: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.response_status_code === undefined
                    ? null
                    : { responseStatusCode: v.response_status_code }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.instrument === undefined ? null : { instrument: v.instrument }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.additional_schemes === undefined
                    ? null
                    : { additionalSchemes: v.additional_schemes }),
                ...(v.country_code === undefined ? null : { countryCode: v.country_code }),
                ...(v.supports_network_tokens === undefined
                    ? null
                    : { supportsNetworkTokens: v.supports_network_tokens }),
            };
        });

    export type Outbound = {
        response?: string | null | undefined;
        response_status_code?: number | undefined;
        success?: boolean | undefined;
        bin?: string | null | undefined;
        instrument?: string | null | undefined;
        type?: string | null | undefined;
        scheme?: BINLookupRequestScheme | null | undefined;
        additional_schemes?: Array<BINLookupRequestAdditionalSchemes> | null | undefined;
        country_code?: string | null | undefined;
        supports_network_tokens?: boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BINLookupRequestContext> = z
        .object({
            response: z.nullable(z.string()).optional(),
            responseStatusCode: z.number().int().optional(),
            success: z.boolean().optional(),
            bin: z.nullable(z.string()).optional(),
            instrument: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
            scheme: z.nullable(BINLookupRequestScheme$).optional(),
            additionalSchemes: z.nullable(z.array(BINLookupRequestAdditionalSchemes$)).optional(),
            countryCode: z.nullable(z.string()).optional(),
            supportsNetworkTokens: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.responseStatusCode === undefined
                    ? null
                    : { response_status_code: v.responseStatusCode }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.instrument === undefined ? null : { instrument: v.instrument }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.additionalSchemes === undefined
                    ? null
                    : { additional_schemes: v.additionalSchemes }),
                ...(v.countryCode === undefined ? null : { country_code: v.countryCode }),
                ...(v.supportsNetworkTokens === undefined
                    ? null
                    : { supports_network_tokens: v.supportsNetworkTokens }),
            };
        });
}

/** @internal */
export namespace BINLookupRequest$ {
    export type Inbound = {
        type?: BINLookupRequestType | undefined;
        id?: string | undefined;
        name?: Name | undefined;
        created_at?: string | undefined;
        context?: BINLookupRequestContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<BINLookupRequest, z.ZodTypeDef, Inbound> = z
        .object({
            type: BINLookupRequestType$.optional(),
            id: z.string().optional(),
            name: Name$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => BINLookupRequestContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: BINLookupRequestType | undefined;
        id?: string | undefined;
        name?: Name | undefined;
        created_at?: string | undefined;
        context?: BINLookupRequestContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BINLookupRequest> = z
        .object({
            type: BINLookupRequestType$.optional(),
            id: z.string().optional(),
            name: Name$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => BINLookupRequestContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
