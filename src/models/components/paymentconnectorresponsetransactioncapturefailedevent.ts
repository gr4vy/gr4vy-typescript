/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionCaptureFailedEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-capture-failed`.
 */
export const PaymentConnectorResponseTransactionCaptureFailedEventName = {
    PaymentConnectorResponseTransactionCaptureFailed:
        "payment-connector-response-transaction-capture-failed",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-capture-failed`.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventName
>;

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    PartialMatchAddress: "partial_match_address",
    PartialMatchPostcode: "partial_match_postcode",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode
>;

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode
>;

/**
 * The card scheme sent to the connector.
 */
export const PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The card scheme sent to the connector.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme = ClosedEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme
>;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * A raw response code returned for the failure.
     */
    code?: string | null | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a failed capture
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionCaptureFailedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionCaptureFailedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-capture-failed`.
     */
    name?: PaymentConnectorResponseTransactionCaptureFailedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionCaptureFailedEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureFailedEventType);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventType
> = PaymentConnectorResponseTransactionCaptureFailedEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureFailedEventName);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventName
> = PaymentConnectorResponseTransactionCaptureFailedEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventName$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode
> = PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode
> = PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme
> = z.nativeEnum(PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme);

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme
> = PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureFailedEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
        payment_service_transaction_id: z.nullable(z.string()).optional(),
        code: z.nullable(z.string()).optional(),
        raw_response_code: z.nullable(z.string()).optional(),
        raw_response_description: z.nullable(z.string()).optional(),
        avs_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$inboundSchema
            )
            .optional(),
        cvv_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$inboundSchema
            )
            .optional(),
        payment_method_scheme: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            raw_response_code: "rawResponseCode",
            raw_response_description: "rawResponseDescription",
            avs_response_code: "avsResponseCode",
            cvv_response_code: "cvvResponseCode",
            payment_method_scheme: "paymentMethodScheme",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionCaptureFailedEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
    payment_service_transaction_id?: string | null | undefined;
    code?: string | null | undefined;
    raw_response_code?: string | null | undefined;
    raw_response_description?: string | null | undefined;
    avs_response_code?: string | null | undefined;
    cvv_response_code?: string | null | undefined;
    payment_method_scheme?: string | null | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureFailedEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionCaptureFailedEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
        paymentServiceTransactionId: z.nullable(z.string()).optional(),
        code: z.nullable(z.string()).optional(),
        rawResponseCode: z.nullable(z.string()).optional(),
        rawResponseDescription: z.nullable(z.string()).optional(),
        avsResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureFailedEventAvsResponseCode$outboundSchema
            )
            .optional(),
        cvvResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureFailedEventCvvResponseCode$outboundSchema
            )
            .optional(),
        paymentMethodScheme: z
            .nullable(
                PaymentConnectorResponseTransactionCaptureFailedEventPaymentMethodScheme$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            rawResponseCode: "raw_response_code",
            rawResponseDescription: "raw_response_description",
            avsResponseCode: "avs_response_code",
            cvvResponseCode: "cvv_response_code",
            paymentMethodScheme: "payment_method_scheme",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEventContext$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionCaptureFailedEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureFailedEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionCaptureFailedEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionCaptureFailedEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionCaptureFailedEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionCaptureFailedEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: PaymentConnectorResponseTransactionCaptureFailedEventContext$Outbound | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionCaptureFailedEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionCaptureFailedEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionCaptureFailedEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionCaptureFailedEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionCaptureFailedEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionCaptureFailedEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionCaptureFailedEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEvent$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEvent$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionCaptureFailedEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionCaptureFailedEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionCaptureFailedEvent$Outbound;
}
