/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ForterAntiFraudOptionsCartItem,
  ForterAntiFraudOptionsCartItem$inboundSchema,
  ForterAntiFraudOptionsCartItem$Outbound,
  ForterAntiFraudOptionsCartItem$outboundSchema,
} from "./forterantifraudoptionscartitem.js";
import {
  ForterAntiFraudOptionsDiscount,
  ForterAntiFraudOptionsDiscount$inboundSchema,
  ForterAntiFraudOptionsDiscount$Outbound,
  ForterAntiFraudOptionsDiscount$outboundSchema,
} from "./forterantifraudoptionsdiscount.js";

export const DeliveryType = {
  Digital: "DIGITAL",
  Physical: "PHYSICAL",
  Hybrid: "HYBRID",
} as const;
export type DeliveryType = OpenEnum<typeof DeliveryType>;

export type ForterAntiFraudOptions = {
  /**
   * The delivery type
   */
  deliveryType?: DeliveryType | null | undefined;
  /**
   * The delivery method
   */
  deliveryMethod?: string | null | undefined;
  /**
   * Defines if this payment is made using guest checkout.
   */
  isGuestBuyer?: boolean | null | undefined;
  /**
   * A list of cart items details to pass to the Forter API.
   */
  cartItems?: Array<ForterAntiFraudOptionsCartItem> | null | undefined;
  /**
   * Information about the discount applied to this order.
   */
  totalDiscount?: ForterAntiFraudOptionsDiscount | null | undefined;
};

/** @internal */
export const DeliveryType$inboundSchema: z.ZodType<
  DeliveryType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(DeliveryType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const DeliveryType$outboundSchema: z.ZodType<
  DeliveryType,
  z.ZodTypeDef,
  DeliveryType
> = z.union([
  z.nativeEnum(DeliveryType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryType$ {
  /** @deprecated use `DeliveryType$inboundSchema` instead. */
  export const inboundSchema = DeliveryType$inboundSchema;
  /** @deprecated use `DeliveryType$outboundSchema` instead. */
  export const outboundSchema = DeliveryType$outboundSchema;
}

/** @internal */
export const ForterAntiFraudOptions$inboundSchema: z.ZodType<
  ForterAntiFraudOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  delivery_type: z.nullable(DeliveryType$inboundSchema).optional(),
  delivery_method: z.nullable(z.string()).optional(),
  is_guest_buyer: z.nullable(z.boolean()).optional(),
  cart_items: z.nullable(z.array(ForterAntiFraudOptionsCartItem$inboundSchema))
    .optional(),
  total_discount: z.nullable(ForterAntiFraudOptionsDiscount$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "delivery_type": "deliveryType",
    "delivery_method": "deliveryMethod",
    "is_guest_buyer": "isGuestBuyer",
    "cart_items": "cartItems",
    "total_discount": "totalDiscount",
  });
});

/** @internal */
export type ForterAntiFraudOptions$Outbound = {
  delivery_type?: string | null | undefined;
  delivery_method?: string | null | undefined;
  is_guest_buyer?: boolean | null | undefined;
  cart_items?:
    | Array<ForterAntiFraudOptionsCartItem$Outbound>
    | null
    | undefined;
  total_discount?: ForterAntiFraudOptionsDiscount$Outbound | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptions$outboundSchema: z.ZodType<
  ForterAntiFraudOptions$Outbound,
  z.ZodTypeDef,
  ForterAntiFraudOptions
> = z.object({
  deliveryType: z.nullable(DeliveryType$outboundSchema).optional(),
  deliveryMethod: z.nullable(z.string()).optional(),
  isGuestBuyer: z.nullable(z.boolean()).optional(),
  cartItems: z.nullable(z.array(ForterAntiFraudOptionsCartItem$outboundSchema))
    .optional(),
  totalDiscount: z.nullable(ForterAntiFraudOptionsDiscount$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    deliveryType: "delivery_type",
    deliveryMethod: "delivery_method",
    isGuestBuyer: "is_guest_buyer",
    cartItems: "cart_items",
    totalDiscount: "total_discount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterAntiFraudOptions$ {
  /** @deprecated use `ForterAntiFraudOptions$inboundSchema` instead. */
  export const inboundSchema = ForterAntiFraudOptions$inboundSchema;
  /** @deprecated use `ForterAntiFraudOptions$outboundSchema` instead. */
  export const outboundSchema = ForterAntiFraudOptions$outboundSchema;
  /** @deprecated use `ForterAntiFraudOptions$Outbound` instead. */
  export type Outbound = ForterAntiFraudOptions$Outbound;
}

export function forterAntiFraudOptionsToJSON(
  forterAntiFraudOptions: ForterAntiFraudOptions,
): string {
  return JSON.stringify(
    ForterAntiFraudOptions$outboundSchema.parse(forterAntiFraudOptions),
  );
}

export function forterAntiFraudOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ForterAntiFraudOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForterAntiFraudOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForterAntiFraudOptions' from JSON`,
  );
}
