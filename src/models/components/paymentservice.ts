/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const PaymentServiceType = {
    PaymentService: "payment-service",
} as const;
/**
 * The type of this resource.
 */
export type PaymentServiceType = ClosedEnum<typeof PaymentServiceType>;

export type Fields = {
    /**
     * The key of the field.
     */
    key?: string | undefined;
    /**
     * The value of the field.
     */
    value?: string | undefined;
};

/**
 * Merchant profile for Amex.
 */
export type MerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * Merchant profile for Dankort.
 */
export type PaymentServiceMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * Merchant profile for Discover.
 */
export type PaymentServiceMerchantProfileMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * Merchant profile for JCB.
 */
export type PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * Merchant profile for Mastercard.
 */
export type PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * Merchant profile for UnionPay.
 */
export type PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * Merchant profile for Visa.
 */
export type PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
    /**
     * The date and time when this profile was created.
     */
    createdAt?: Date | undefined;
};

/**
 * An object containing a key for each supported card scheme (Amex,
 *
 * @remarks
 * Discover, Mastercard and Visa), and for each key an object with
 * the merchant profile for this service and the corresponding scheme.
 */
export type MerchantProfile = {
    /**
     * Merchant profile for Amex.
     */
    amex?: MerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Dankort.
     */
    dankort?: PaymentServiceMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Discover.
     */
    discover?: PaymentServiceMerchantProfileMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for JCB.
     */
    jcb?: PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Mastercard.
     */
    mastercard?:
        | PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for UnionPay.
     */
    unionpay?: PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Visa.
     */
    visa?: PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme | null | undefined;
};

/**
 * The payment method that this service handles.
 */
export const PaymentServiceMethod = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Kcp: "kcp",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Spei: "spei",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
/**
 * The payment method that this service handles.
 */
export type PaymentServiceMethod = ClosedEnum<typeof PaymentServiceMethod>;

/**
 * The current status of this service. This will start off as pending, move
 *
 * @remarks
 * to created, and might eventually move to an error status if and when the
 * credentials are no longer valid.
 *
 */
export const PaymentServiceStatus = {
    Pending: "pending",
    Created: "created",
    Failed: "failed",
} as const;
/**
 * The current status of this service. This will start off as pending, move
 *
 * @remarks
 * to created, and might eventually move to an error status if and when the
 * credentials are no longer valid.
 *
 */
export type PaymentServiceStatus = ClosedEnum<typeof PaymentServiceStatus>;

/**
 * An active, configured payment service.
 */
export type PaymentService = {
    /**
     * The type of this resource.
     */
    type?: PaymentServiceType | undefined;
    /**
     * The ID of this payment service.
     */
    id?: string | undefined;
    /**
     * A list of countries for which this service is enabled, in ISO two-letter
     *
     * @remarks
     * code format.
     */
    acceptedCountries?: Array<string> | undefined;
    /**
     * A list of currencies for which this service is enabled, in ISO 4217
     *
     * @remarks
     * three-letter code format.
     */
    acceptedCurrencies?: Array<string> | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * The date and time when this service was created.
     */
    createdAt?: Date | undefined;
    /**
     * The custom name set for this service.
     */
    displayName?: string | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field
     *
     * @remarks
     * configured for this payment service. Fields marked as `secret`
     * (see Payment Service Definition) are not returned.
     */
    fields?: Array<Fields> | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * An object containing a key for each supported card scheme (Amex,
     *
     * @remarks
     * Discover, Mastercard and Visa), and for each key an object with
     * the merchant profile for this service and the corresponding scheme.
     */
    merchantProfile?: MerchantProfile | null | undefined;
    /**
     * The payment method that this service handles.
     */
    method?: PaymentServiceMethod | undefined;
    /**
     * Defines if network tokens are enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is set as `open_loop` and
     * the PSP is set up to accept network tokens.
     */
    networkTokensEnabled?: boolean | undefined;
    /**
     * Defines if the service works as an open-loop service. This feature
     *
     * @remarks
     * can only be enabled if the PSP is set up to accept previous scheme
     * transaction IDs.
     */
    openLoop?: boolean | undefined;
    /**
     * Defines if tokenization is enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is NOT set as `open_loop`
     * and the PSP is set up to tokenize.
     */
    paymentMethodTokenizationEnabled?: boolean | undefined;
    /**
     * The ID of the payment service definition used to create this service.
     *
     * @remarks
     *
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The current status of this service. This will start off as pending, move
     *
     * @remarks
     * to created, and might eventually move to an error status if and when the
     * credentials are no longer valid.
     *
     */
    status?: PaymentServiceStatus | undefined;
    /**
     * Defines if 3-D Secure is enabled for the service (can only be
     *
     * @remarks
     * enabled if the payment service definition supports
     * the `three_d_secure_hosted` feature).
     * This does not affect pass through 3-D Secure data.
     */
    threeDSecureEnabled?: boolean | undefined;
    /**
     * The date and time when this service was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The URL that needs to be configured with this payment service as the
     *
     * @remarks
     * receiving endpoint for webhooks from the service to Gr4vy. Currently,
     * Gr4vy does not yet automatically register webhooks on setup, and
     * therefore webhooks need to be registered manually by the merchant.
     */
    webhookUrl?: string | null | undefined;
};

/** @internal */
export const PaymentServiceType$inboundSchema: z.ZodNativeEnum<typeof PaymentServiceType> =
    z.nativeEnum(PaymentServiceType);

/** @internal */
export const PaymentServiceType$outboundSchema: z.ZodNativeEnum<typeof PaymentServiceType> =
    PaymentServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceType$ {
    /** @deprecated use `PaymentServiceType$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceType$inboundSchema;
    /** @deprecated use `PaymentServiceType$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceType$outboundSchema;
}

/** @internal */
export const Fields$inboundSchema: z.ZodType<Fields, z.ZodTypeDef, unknown> = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
});

/** @internal */
export type Fields$Outbound = {
    key?: string | undefined;
    value?: string | undefined;
};

/** @internal */
export const Fields$outboundSchema: z.ZodType<Fields$Outbound, z.ZodTypeDef, Fields> = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields$ {
    /** @deprecated use `Fields$inboundSchema` instead. */
    export const inboundSchema = Fields$inboundSchema;
    /** @deprecated use `Fields$outboundSchema` instead. */
    export const outboundSchema = Fields$outboundSchema;
    /** @deprecated use `Fields$Outbound` instead. */
    export type Outbound = Fields$Outbound;
}

/** @internal */
export const MerchantProfileSingleScheme$inboundSchema: z.ZodType<
    MerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type MerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const MerchantProfileSingleScheme$outboundSchema: z.ZodType<
    MerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    MerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantProfileSingleScheme$ {
    /** @deprecated use `MerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema = MerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `MerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema = MerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `MerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = MerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentServiceMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const PaymentServiceMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceMerchantProfileMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceMerchantProfileMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentServiceMerchantProfileMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const PaymentServiceMerchantProfileMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceMerchantProfileMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceMerchantProfileMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMerchantProfileMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceMerchantProfileMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceMerchantProfileMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceMerchantProfileMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceMerchantProfileMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
    created_at?: string | undefined;
};

/** @internal */
export const PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const MerchantProfile$inboundSchema: z.ZodType<MerchantProfile, z.ZodTypeDef, unknown> =
    z.object({
        amex: z.nullable(z.lazy(() => MerchantProfileSingleScheme$inboundSchema)).optional(),
        dankort: z
            .nullable(z.lazy(() => PaymentServiceMerchantProfileSingleScheme$inboundSchema))
            .optional(),
        discover: z
            .nullable(
                z.lazy(() => PaymentServiceMerchantProfileMerchantProfileSingleScheme$inboundSchema)
            )
            .optional(),
        jcb: z
            .nullable(
                z.lazy(
                    () => PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema
                )
            )
            .optional(),
        mastercard: z
            .nullable(
                z.lazy(
                    () =>
                        PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema
                )
            )
            .optional(),
        unionpay: z
            .nullable(
                z.lazy(
                    () =>
                        PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema
                )
            )
            .optional(),
        visa: z
            .nullable(
                z.lazy(
                    () => PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema
                )
            )
            .optional(),
    });

/** @internal */
export type MerchantProfile$Outbound = {
    amex?: MerchantProfileSingleScheme$Outbound | null | undefined;
    dankort?: PaymentServiceMerchantProfileSingleScheme$Outbound | null | undefined;
    discover?: PaymentServiceMerchantProfileMerchantProfileSingleScheme$Outbound | null | undefined;
    jcb?: PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$Outbound | null | undefined;
    mastercard?:
        | PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    unionpay?:
        | PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    visa?: PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$Outbound | null | undefined;
};

/** @internal */
export const MerchantProfile$outboundSchema: z.ZodType<
    MerchantProfile$Outbound,
    z.ZodTypeDef,
    MerchantProfile
> = z.object({
    amex: z.nullable(z.lazy(() => MerchantProfileSingleScheme$outboundSchema)).optional(),
    dankort: z
        .nullable(z.lazy(() => PaymentServiceMerchantProfileSingleScheme$outboundSchema))
        .optional(),
    discover: z
        .nullable(
            z.lazy(() => PaymentServiceMerchantProfileMerchantProfileSingleScheme$outboundSchema)
        )
        .optional(),
    jcb: z
        .nullable(
            z.lazy(() => PaymentServiceMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema)
        )
        .optional(),
    mastercard: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    unionpay: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    visa: z
        .nullable(
            z.lazy(
                () => PaymentServiceMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantProfile$ {
    /** @deprecated use `MerchantProfile$inboundSchema` instead. */
    export const inboundSchema = MerchantProfile$inboundSchema;
    /** @deprecated use `MerchantProfile$outboundSchema` instead. */
    export const outboundSchema = MerchantProfile$outboundSchema;
    /** @deprecated use `MerchantProfile$Outbound` instead. */
    export type Outbound = MerchantProfile$Outbound;
}

/** @internal */
export const PaymentServiceMethod$inboundSchema: z.ZodNativeEnum<typeof PaymentServiceMethod> =
    z.nativeEnum(PaymentServiceMethod);

/** @internal */
export const PaymentServiceMethod$outboundSchema: z.ZodNativeEnum<typeof PaymentServiceMethod> =
    PaymentServiceMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceMethod$ {
    /** @deprecated use `PaymentServiceMethod$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceMethod$inboundSchema;
    /** @deprecated use `PaymentServiceMethod$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceMethod$outboundSchema;
}

/** @internal */
export const PaymentServiceStatus$inboundSchema: z.ZodNativeEnum<typeof PaymentServiceStatus> =
    z.nativeEnum(PaymentServiceStatus);

/** @internal */
export const PaymentServiceStatus$outboundSchema: z.ZodNativeEnum<typeof PaymentServiceStatus> =
    PaymentServiceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceStatus$ {
    /** @deprecated use `PaymentServiceStatus$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceStatus$inboundSchema;
    /** @deprecated use `PaymentServiceStatus$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceStatus$outboundSchema;
}

/** @internal */
export const PaymentService$inboundSchema: z.ZodType<PaymentService, z.ZodTypeDef, unknown> = z
    .object({
        type: PaymentServiceType$inboundSchema.optional(),
        id: z.string().optional(),
        accepted_countries: z.array(z.string()).optional(),
        accepted_currencies: z.array(z.string()).optional(),
        active: z.boolean().default(true),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        display_name: z.string().optional(),
        fields: z.array(z.lazy(() => Fields$inboundSchema)).optional(),
        merchant_account_id: z.string().optional(),
        merchant_profile: z.nullable(z.lazy(() => MerchantProfile$inboundSchema)).optional(),
        method: PaymentServiceMethod$inboundSchema.optional(),
        network_tokens_enabled: z.boolean().optional(),
        open_loop: z.boolean().optional(),
        payment_method_tokenization_enabled: z.boolean().default(false),
        payment_service_definition_id: z.string().optional(),
        status: PaymentServiceStatus$inboundSchema.optional(),
        three_d_secure_enabled: z.boolean().default(false),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        webhook_url: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            accepted_countries: "acceptedCountries",
            accepted_currencies: "acceptedCurrencies",
            created_at: "createdAt",
            display_name: "displayName",
            merchant_account_id: "merchantAccountId",
            merchant_profile: "merchantProfile",
            network_tokens_enabled: "networkTokensEnabled",
            open_loop: "openLoop",
            payment_method_tokenization_enabled: "paymentMethodTokenizationEnabled",
            payment_service_definition_id: "paymentServiceDefinitionId",
            three_d_secure_enabled: "threeDSecureEnabled",
            updated_at: "updatedAt",
            webhook_url: "webhookUrl",
        });
    });

/** @internal */
export type PaymentService$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    accepted_countries?: Array<string> | undefined;
    accepted_currencies?: Array<string> | undefined;
    active: boolean;
    created_at?: string | undefined;
    display_name?: string | undefined;
    fields?: Array<Fields$Outbound> | undefined;
    merchant_account_id?: string | undefined;
    merchant_profile?: MerchantProfile$Outbound | null | undefined;
    method?: string | undefined;
    network_tokens_enabled?: boolean | undefined;
    open_loop?: boolean | undefined;
    payment_method_tokenization_enabled: boolean;
    payment_service_definition_id?: string | undefined;
    status?: string | undefined;
    three_d_secure_enabled: boolean;
    updated_at?: string | undefined;
    webhook_url?: string | null | undefined;
};

/** @internal */
export const PaymentService$outboundSchema: z.ZodType<
    PaymentService$Outbound,
    z.ZodTypeDef,
    PaymentService
> = z
    .object({
        type: PaymentServiceType$outboundSchema.optional(),
        id: z.string().optional(),
        acceptedCountries: z.array(z.string()).optional(),
        acceptedCurrencies: z.array(z.string()).optional(),
        active: z.boolean().default(true),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        displayName: z.string().optional(),
        fields: z.array(z.lazy(() => Fields$outboundSchema)).optional(),
        merchantAccountId: z.string().optional(),
        merchantProfile: z.nullable(z.lazy(() => MerchantProfile$outboundSchema)).optional(),
        method: PaymentServiceMethod$outboundSchema.optional(),
        networkTokensEnabled: z.boolean().optional(),
        openLoop: z.boolean().optional(),
        paymentMethodTokenizationEnabled: z.boolean().default(false),
        paymentServiceDefinitionId: z.string().optional(),
        status: PaymentServiceStatus$outboundSchema.optional(),
        threeDSecureEnabled: z.boolean().default(false),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        webhookUrl: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            acceptedCountries: "accepted_countries",
            acceptedCurrencies: "accepted_currencies",
            createdAt: "created_at",
            displayName: "display_name",
            merchantAccountId: "merchant_account_id",
            merchantProfile: "merchant_profile",
            networkTokensEnabled: "network_tokens_enabled",
            openLoop: "open_loop",
            paymentMethodTokenizationEnabled: "payment_method_tokenization_enabled",
            paymentServiceDefinitionId: "payment_service_definition_id",
            threeDSecureEnabled: "three_d_secure_enabled",
            updatedAt: "updated_at",
            webhookUrl: "webhook_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentService$ {
    /** @deprecated use `PaymentService$inboundSchema` instead. */
    export const inboundSchema = PaymentService$inboundSchema;
    /** @deprecated use `PaymentService$outboundSchema` instead. */
    export const outboundSchema = PaymentService$outboundSchema;
    /** @deprecated use `PaymentService$Outbound` instead. */
    export type Outbound = PaymentService$Outbound;
}
