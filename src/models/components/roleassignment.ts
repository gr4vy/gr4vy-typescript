/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import { Role, Role$inboundSchema, Role$Outbound, Role$outboundSchema } from "./role.js";
import * as z from "zod";

/**
 * The type of this resource. Always `role-assignment`.
 */
export const RoleAssignmentType = {
    RoleAssignment: "role-assignment",
} as const;
/**
 * The type of this resource. Always `role-assignment`.
 */
export type RoleAssignmentType = ClosedEnum<typeof RoleAssignmentType>;

/**
 * The type of the assignee.
 */
export const RoleAssignmentAssigneeType = {
    User: "user",
} as const;
/**
 * The type of the assignee.
 */
export type RoleAssignmentAssigneeType = ClosedEnum<typeof RoleAssignmentAssigneeType>;

/**
 * The assignee for this role assignment.
 */
export type Assignee = {
    /**
     * The type of the assignee.
     */
    type?: RoleAssignmentAssigneeType | undefined;
    /**
     * The unique ID of the assignee.
     */
    id?: string | undefined;
};

export type RoleAssignment = {
    /**
     * The type of this resource. Always `role-assignment`.
     */
    type?: RoleAssignmentType | undefined;
    /**
     * The unique ID for this role assignment.
     */
    id?: string | undefined;
    role?: Role | undefined;
    /**
     * The assignee for this role assignment.
     */
    assignee?: Assignee | undefined;
};

/** @internal */
export const RoleAssignmentType$inboundSchema: z.ZodNativeEnum<typeof RoleAssignmentType> =
    z.nativeEnum(RoleAssignmentType);

/** @internal */
export const RoleAssignmentType$outboundSchema: z.ZodNativeEnum<typeof RoleAssignmentType> =
    RoleAssignmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssignmentType$ {
    /** @deprecated use `RoleAssignmentType$inboundSchema` instead. */
    export const inboundSchema = RoleAssignmentType$inboundSchema;
    /** @deprecated use `RoleAssignmentType$outboundSchema` instead. */
    export const outboundSchema = RoleAssignmentType$outboundSchema;
}

/** @internal */
export const RoleAssignmentAssigneeType$inboundSchema: z.ZodNativeEnum<
    typeof RoleAssignmentAssigneeType
> = z.nativeEnum(RoleAssignmentAssigneeType);

/** @internal */
export const RoleAssignmentAssigneeType$outboundSchema: z.ZodNativeEnum<
    typeof RoleAssignmentAssigneeType
> = RoleAssignmentAssigneeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssignmentAssigneeType$ {
    /** @deprecated use `RoleAssignmentAssigneeType$inboundSchema` instead. */
    export const inboundSchema = RoleAssignmentAssigneeType$inboundSchema;
    /** @deprecated use `RoleAssignmentAssigneeType$outboundSchema` instead. */
    export const outboundSchema = RoleAssignmentAssigneeType$outboundSchema;
}

/** @internal */
export const Assignee$inboundSchema: z.ZodType<Assignee, z.ZodTypeDef, unknown> = z.object({
    type: RoleAssignmentAssigneeType$inboundSchema.optional(),
    id: z.string().optional(),
});

/** @internal */
export type Assignee$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
};

/** @internal */
export const Assignee$outboundSchema: z.ZodType<Assignee$Outbound, z.ZodTypeDef, Assignee> =
    z.object({
        type: RoleAssignmentAssigneeType$outboundSchema.optional(),
        id: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Assignee$ {
    /** @deprecated use `Assignee$inboundSchema` instead. */
    export const inboundSchema = Assignee$inboundSchema;
    /** @deprecated use `Assignee$outboundSchema` instead. */
    export const outboundSchema = Assignee$outboundSchema;
    /** @deprecated use `Assignee$Outbound` instead. */
    export type Outbound = Assignee$Outbound;
}

/** @internal */
export const RoleAssignment$inboundSchema: z.ZodType<RoleAssignment, z.ZodTypeDef, unknown> =
    z.object({
        type: RoleAssignmentType$inboundSchema.optional(),
        id: z.string().optional(),
        role: Role$inboundSchema.optional(),
        assignee: z.lazy(() => Assignee$inboundSchema).optional(),
    });

/** @internal */
export type RoleAssignment$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    role?: Role$Outbound | undefined;
    assignee?: Assignee$Outbound | undefined;
};

/** @internal */
export const RoleAssignment$outboundSchema: z.ZodType<
    RoleAssignment$Outbound,
    z.ZodTypeDef,
    RoleAssignment
> = z.object({
    type: RoleAssignmentType$outboundSchema.optional(),
    id: z.string().optional(),
    role: Role$outboundSchema.optional(),
    assignee: z.lazy(() => Assignee$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssignment$ {
    /** @deprecated use `RoleAssignment$inboundSchema` instead. */
    export const inboundSchema = RoleAssignment$inboundSchema;
    /** @deprecated use `RoleAssignment$outboundSchema` instead. */
    export const outboundSchema = RoleAssignment$outboundSchema;
    /** @deprecated use `RoleAssignment$Outbound` instead. */
    export type Outbound = RoleAssignment$Outbound;
}
