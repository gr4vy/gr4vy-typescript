/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Role, Role$ } from "./role";
import * as z from "zod";

/**
 * The type of this resource. Always `role-assignment`.
 */
export enum RoleAssignmentType {
    RoleAssignment = "role-assignment",
}

/**
 * The type of the assignee.
 */
export enum RoleAssignmentAssigneeType {
    User = "user",
}

/**
 * The assignee for this role assignment.
 */
export type Assignee = {
    /**
     * The type of the assignee.
     */
    type?: RoleAssignmentAssigneeType | undefined;
    /**
     * The unique ID of the assignee.
     */
    id?: string | undefined;
};

export type RoleAssignment = {
    /**
     * The type of this resource. Always `role-assignment`.
     */
    type?: RoleAssignmentType | undefined;
    /**
     * The unique ID for this role assignment.
     */
    id?: string | undefined;
    role?: Role | undefined;
    /**
     * The assignee for this role assignment.
     */
    assignee?: Assignee | undefined;
};

/** @internal */
export namespace RoleAssignmentType$ {
    export const inboundSchema = z.nativeEnum(RoleAssignmentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RoleAssignmentAssigneeType$ {
    export const inboundSchema = z.nativeEnum(RoleAssignmentAssigneeType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Assignee$ {
    export const inboundSchema: z.ZodType<Assignee, z.ZodTypeDef, unknown> = z.object({
        type: RoleAssignmentAssigneeType$.inboundSchema.optional(),
        id: z.string().optional(),
    });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Assignee> = z.object({
        type: RoleAssignmentAssigneeType$.outboundSchema.optional(),
        id: z.string().optional(),
    });
}

/** @internal */
export namespace RoleAssignment$ {
    export const inboundSchema: z.ZodType<RoleAssignment, z.ZodTypeDef, unknown> = z.object({
        type: RoleAssignmentType$.inboundSchema.optional(),
        id: z.string().optional(),
        role: Role$.inboundSchema.optional(),
        assignee: z.lazy(() => Assignee$.inboundSchema).optional(),
    });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        role?: Role$.Outbound | undefined;
        assignee?: Assignee$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoleAssignment> = z.object({
        type: RoleAssignmentType$.outboundSchema.optional(),
        id: z.string().optional(),
        role: Role$.outboundSchema.optional(),
        assignee: z.lazy(() => Assignee$.outboundSchema).optional(),
    });
}
