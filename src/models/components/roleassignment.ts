/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Role, Role$ } from "./role";
import * as z from "zod";

/**
 * The type of this resource. Always `role-assignment`.
 */
export enum RoleAssignmentType {
    RoleAssignment = "role-assignment",
}

/**
 * The type of the assignee.
 */
export enum RoleAssignmentAssigneeType {
    User = "user",
}

/**
 * The assignee for this role assignment.
 */
export type Assignee = {
    /**
     * The type of the assignee.
     */
    type?: RoleAssignmentAssigneeType | undefined;
    /**
     * The unique ID of the assignee.
     */
    id?: string | undefined;
};

export type RoleAssignment = {
    /**
     * The type of this resource. Always `role-assignment`.
     */
    type?: RoleAssignmentType | undefined;
    /**
     * The unique ID for this role assignment.
     */
    id?: string | undefined;
    role?: Role | undefined;
    /**
     * The assignee for this role assignment.
     */
    assignee?: Assignee | undefined;
};

/** @internal */
export const RoleAssignmentType$ = z.nativeEnum(RoleAssignmentType);

/** @internal */
export const RoleAssignmentAssigneeType$ = z.nativeEnum(RoleAssignmentAssigneeType);

/** @internal */
export namespace Assignee$ {
    export type Inbound = {
        type?: RoleAssignmentAssigneeType | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Assignee, z.ZodTypeDef, Inbound> = z
        .object({
            type: RoleAssignmentAssigneeType$.optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        type?: RoleAssignmentAssigneeType | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Assignee> = z
        .object({
            type: RoleAssignmentAssigneeType$.optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace RoleAssignment$ {
    export type Inbound = {
        type?: RoleAssignmentType | undefined;
        id?: string | undefined;
        role?: Role$.Inbound | undefined;
        assignee?: Assignee$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RoleAssignment, z.ZodTypeDef, Inbound> = z
        .object({
            type: RoleAssignmentType$.optional(),
            id: z.string().optional(),
            role: Role$.inboundSchema.optional(),
            assignee: z.lazy(() => Assignee$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
            };
        });

    export type Outbound = {
        type?: RoleAssignmentType | undefined;
        id?: string | undefined;
        role?: Role$.Outbound | undefined;
        assignee?: Assignee$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoleAssignment> = z
        .object({
            type: RoleAssignmentType$.optional(),
            id: z.string().optional(),
            role: Role$.outboundSchema.optional(),
            assignee: z.lazy(() => Assignee$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
            };
        });
}
