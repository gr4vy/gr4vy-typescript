/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    CyberSourceVerify,
    CyberSourceVerify$inboundSchema,
    CyberSourceVerify$Outbound,
    CyberSourceVerify$outboundSchema,
} from "./cybersourceverify.js";
import {
    ForterVerify,
    ForterVerify$inboundSchema,
    ForterVerify$Outbound,
    ForterVerify$outboundSchema,
} from "./forterverify.js";
import {
    KountVerify,
    KountVerify$inboundSchema,
    KountVerify$Outbound,
    KountVerify$outboundSchema,
} from "./kountverify.js";
import {
    SiftVerify,
    SiftVerify$inboundSchema,
    SiftVerify$Outbound,
    SiftVerify$outboundSchema,
} from "./siftverify.js";
import {
    SimualtorVerify,
    SimualtorVerify$inboundSchema,
    SimualtorVerify$Outbound,
    SimualtorVerify$outboundSchema,
} from "./simualtorverify.js";
import * as z from "zod";

export type AntiFraudServiceCredentialsVerify =
    | (SiftVerify & { antiFraudServiceDefinitionId: "sift-anti-fraud" })
    | (CyberSourceVerify & { antiFraudServiceDefinitionId: "cybersource-anti-fraud" })
    | (ForterVerify & { antiFraudServiceDefinitionId: "forter-anti-fraud" })
    | (KountVerify & { antiFraudServiceDefinitionId: "kount-anti-fraud" })
    | (SimualtorVerify & { antiFraudServiceDefinitionId: "mock-anti-fraud" });

/** @internal */
export const AntiFraudServiceCredentialsVerify$inboundSchema: z.ZodType<
    AntiFraudServiceCredentialsVerify,
    z.ZodTypeDef,
    unknown
> = z.union([
    SiftVerify$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("sift-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    CyberSourceVerify$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("cybersource-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    ForterVerify$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("forter-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    KountVerify$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("kount-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    SimualtorVerify$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("mock-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
]);

/** @internal */
export type AntiFraudServiceCredentialsVerify$Outbound =
    | (SiftVerify$Outbound & { anti_fraud_service_definition_id: "sift-anti-fraud" })
    | (CyberSourceVerify$Outbound & { anti_fraud_service_definition_id: "cybersource-anti-fraud" })
    | (ForterVerify$Outbound & { anti_fraud_service_definition_id: "forter-anti-fraud" })
    | (KountVerify$Outbound & { anti_fraud_service_definition_id: "kount-anti-fraud" })
    | (SimualtorVerify$Outbound & { anti_fraud_service_definition_id: "mock-anti-fraud" });

/** @internal */
export const AntiFraudServiceCredentialsVerify$outboundSchema: z.ZodType<
    AntiFraudServiceCredentialsVerify$Outbound,
    z.ZodTypeDef,
    AntiFraudServiceCredentialsVerify
> = z.union([
    SiftVerify$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("sift-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    CyberSourceVerify$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("cybersource-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    ForterVerify$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("forter-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    KountVerify$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("kount-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    SimualtorVerify$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("mock-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudServiceCredentialsVerify$ {
    /** @deprecated use `AntiFraudServiceCredentialsVerify$inboundSchema` instead. */
    export const inboundSchema = AntiFraudServiceCredentialsVerify$inboundSchema;
    /** @deprecated use `AntiFraudServiceCredentialsVerify$outboundSchema` instead. */
    export const outboundSchema = AntiFraudServiceCredentialsVerify$outboundSchema;
    /** @deprecated use `AntiFraudServiceCredentialsVerify$Outbound` instead. */
    export type Outbound = AntiFraudServiceCredentialsVerify$Outbound;
}
