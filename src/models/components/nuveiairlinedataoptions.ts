/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NuveiAirlineDataOptions = {
  /**
   * The seat class of the booking
   */
  seatClass?: string | null | undefined;
  /**
   * Indicates whether the cardholder is also a passenger.
   */
  isCardholderTraveling?: boolean | null | undefined;
};

/** @internal */
export const NuveiAirlineDataOptions$inboundSchema: z.ZodType<
  NuveiAirlineDataOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  seatClass: z.nullable(z.string()).optional(),
  isCardholderTraveling: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type NuveiAirlineDataOptions$Outbound = {
  seatClass?: string | null | undefined;
  isCardholderTraveling?: boolean | null | undefined;
};

/** @internal */
export const NuveiAirlineDataOptions$outboundSchema: z.ZodType<
  NuveiAirlineDataOptions$Outbound,
  z.ZodTypeDef,
  NuveiAirlineDataOptions
> = z.object({
  seatClass: z.nullable(z.string()).optional(),
  isCardholderTraveling: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NuveiAirlineDataOptions$ {
  /** @deprecated use `NuveiAirlineDataOptions$inboundSchema` instead. */
  export const inboundSchema = NuveiAirlineDataOptions$inboundSchema;
  /** @deprecated use `NuveiAirlineDataOptions$outboundSchema` instead. */
  export const outboundSchema = NuveiAirlineDataOptions$outboundSchema;
  /** @deprecated use `NuveiAirlineDataOptions$Outbound` instead. */
  export type Outbound = NuveiAirlineDataOptions$Outbound;
}

export function nuveiAirlineDataOptionsToJSON(
  nuveiAirlineDataOptions: NuveiAirlineDataOptions,
): string {
  return JSON.stringify(
    NuveiAirlineDataOptions$outboundSchema.parse(nuveiAirlineDataOptions),
  );
}

export function nuveiAirlineDataOptionsFromJSON(
  jsonString: string,
): SafeParseResult<NuveiAirlineDataOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NuveiAirlineDataOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NuveiAirlineDataOptions' from JSON`,
  );
}
