/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Airline,
  Airline$inboundSchema,
  Airline$Outbound,
  Airline$outboundSchema,
} from "./airline.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";
import {
  GuestBuyerInput,
  GuestBuyerInput$inboundSchema,
  GuestBuyerInput$Outbound,
  GuestBuyerInput$outboundSchema,
} from "./guestbuyerinput.js";

export type CheckoutSessionUpdate = {
  /**
   * An array of cart items that represents the line items of a transaction.
   */
  cartItems?: Array<CartItem> | null | undefined;
  /**
   * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
   */
  buyer?: GuestBuyerInput | null | undefined;
  /**
   * The airline addendum data which describes the airline booking associated with this transaction.
   */
  airline?: Airline | null | undefined;
  expiresIn?: number | undefined;
};

/** @internal */
export const CheckoutSessionUpdate$inboundSchema: z.ZodType<
  CheckoutSessionUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  cart_items: z.nullable(z.array(CartItem$inboundSchema)).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  buyer: z.nullable(GuestBuyerInput$inboundSchema).optional(),
  airline: z.nullable(Airline$inboundSchema).optional(),
  expires_in: z.number().default(3600),
}).transform((v) => {
  return remap$(v, {
    "cart_items": "cartItems",
    "expires_in": "expiresIn",
  });
});

/** @internal */
export type CheckoutSessionUpdate$Outbound = {
  cart_items?: Array<CartItem$Outbound> | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  buyer?: GuestBuyerInput$Outbound | null | undefined;
  airline?: Airline$Outbound | null | undefined;
  expires_in: number;
};

/** @internal */
export const CheckoutSessionUpdate$outboundSchema: z.ZodType<
  CheckoutSessionUpdate$Outbound,
  z.ZodTypeDef,
  CheckoutSessionUpdate
> = z.object({
  cartItems: z.nullable(z.array(CartItem$outboundSchema)).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  buyer: z.nullable(GuestBuyerInput$outboundSchema).optional(),
  airline: z.nullable(Airline$outboundSchema).optional(),
  expiresIn: z.number().default(3600),
}).transform((v) => {
  return remap$(v, {
    cartItems: "cart_items",
    expiresIn: "expires_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionUpdate$ {
  /** @deprecated use `CheckoutSessionUpdate$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionUpdate$inboundSchema;
  /** @deprecated use `CheckoutSessionUpdate$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionUpdate$outboundSchema;
  /** @deprecated use `CheckoutSessionUpdate$Outbound` instead. */
  export type Outbound = CheckoutSessionUpdate$Outbound;
}

export function checkoutSessionUpdateToJSON(
  checkoutSessionUpdate: CheckoutSessionUpdate,
): string {
  return JSON.stringify(
    CheckoutSessionUpdate$outboundSchema.parse(checkoutSessionUpdate),
  );
}

export function checkoutSessionUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionUpdate' from JSON`,
  );
}
