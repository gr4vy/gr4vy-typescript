/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const HealthDashboardTotalType = {
    HealthDashboardTotal: "health-dashboard.total",
} as const;
/**
 * The type of this resource.
 */
export type HealthDashboardTotalType = ClosedEnum<typeof HealthDashboardTotalType>;

/**
 * Summary of the aggregated data.
 */
export type Summary = {
    /**
     * The total number of transactions created during the current period.
     */
    transactionsAccepted?: number | undefined;
    /**
     * The percentage difference between the total number of transactions created during the current period and the previous period.
     */
    transactionsAcceptedDeltaPct?: number | null | undefined;
    /**
     * The rate of authorized transactions created during the current period.
     */
    transactionsAuthorizedRate?: number | null | undefined;
    /**
     * The absolute difference between the rate of authorized transactions created during the current period and the previous period.
     */
    transactionsAuthorizedRateDelta?: number | null | undefined;
    /**
     * The total number of successful refunds from all sources created during the current period.
     */
    refunds?: number | undefined;
    /**
     * The percentage difference between the total number of successful refunds from all sources created during the current period and the previous period.
     */
    refundsDeltaPct?: number | null | undefined;
};

/**
 * Metrics for the transactions and refunds created during the current period aggregated by hour or day.
 */
export type Current = {
    /**
     * The date and time of the first data point, represented with an ISO 8601 interval value indicating whether it is aggregated by one hour (PT1H) or one day (P1D) periods.
     */
    firstInterval?: string | undefined;
    /**
     * The total number of transactions created within the period that the data point corresponds to.
     */
    transactionsAccepted?: Array<number> | undefined;
    /**
     * The rate of authorized transactions created within the period that the data point corresponds to.
     */
    transactionsAuthorizedRate?: Array<number> | undefined;
    /**
     * The total number of successful refunds created within the period that the data point corresponds to.
     */
    refunds?: Array<number> | undefined;
};

/**
 * Metrics for the transactions and refunds created during the previous period aggregated by hour or day.
 */
export type Previous = {
    /**
     * The date and time of the first data point, represented with an ISO 8601 interval value indicating whether it is aggregated by one hour (PT1H) or one day (P1D) periods.
     */
    firstInterval?: string | undefined;
    /**
     * The total number of transactions created within the period that the data point corresponds to.
     */
    transactionsAccepted?: Array<number> | undefined;
    /**
     * The rate of authorized transactions created within the period that the data point corresponds to.
     */
    transactionsAuthorizedRate?: Array<number> | undefined;
    /**
     * The total number of successful refunds created within the period that the data point corresponds to.
     */
    refunds?: Array<number> | undefined;
};

/**
 * Contains two series of data points used to build the line chart. Each series contains aggregations of data created over the duration of the specified period (e.g. `7-days`). The `previous` series contains aggregations from the period immediately preceding the `current` series.
 */
export type Series = {
    /**
     * Metrics for the transactions and refunds created during the current period aggregated by hour or day.
     */
    current?: Current | undefined;
    /**
     * Metrics for the transactions and refunds created during the previous period aggregated by hour or day.
     */
    previous?: Previous | undefined;
};

/**
 * Health Dashboard transactions and refunds line chart data.
 */
export type HealthDashboardTotal = {
    /**
     * The type of this resource.
     */
    type?: HealthDashboardTotalType | undefined;
    /**
     * Summary of the aggregated data.
     */
    summary?: Summary | undefined;
    /**
     * Contains two series of data points used to build the line chart. Each series contains aggregations of data created over the duration of the specified period (e.g. `7-days`). The `previous` series contains aggregations from the period immediately preceding the `current` series.
     */
    series?: Series | undefined;
};

/** @internal */
export const HealthDashboardTotalType$inboundSchema: z.ZodNativeEnum<
    typeof HealthDashboardTotalType
> = z.nativeEnum(HealthDashboardTotalType);

/** @internal */
export const HealthDashboardTotalType$outboundSchema: z.ZodNativeEnum<
    typeof HealthDashboardTotalType
> = HealthDashboardTotalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalType$ {
    /** @deprecated use `HealthDashboardTotalType$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalType$inboundSchema;
    /** @deprecated use `HealthDashboardTotalType$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalType$outboundSchema;
}

/** @internal */
export const Summary$inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown> = z
    .object({
        transactions_accepted: z.number().int().optional(),
        transactions_accepted_delta_pct: z.nullable(z.number().int()).optional(),
        transactions_authorized_rate: z.nullable(z.number().int()).optional(),
        transactions_authorized_rate_delta: z.nullable(z.number().int()).optional(),
        refunds: z.number().int().optional(),
        refunds_delta_pct: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            transactions_accepted: "transactionsAccepted",
            transactions_accepted_delta_pct: "transactionsAcceptedDeltaPct",
            transactions_authorized_rate: "transactionsAuthorizedRate",
            transactions_authorized_rate_delta: "transactionsAuthorizedRateDelta",
            refunds_delta_pct: "refundsDeltaPct",
        });
    });

/** @internal */
export type Summary$Outbound = {
    transactions_accepted?: number | undefined;
    transactions_accepted_delta_pct?: number | null | undefined;
    transactions_authorized_rate?: number | null | undefined;
    transactions_authorized_rate_delta?: number | null | undefined;
    refunds?: number | undefined;
    refunds_delta_pct?: number | null | undefined;
};

/** @internal */
export const Summary$outboundSchema: z.ZodType<Summary$Outbound, z.ZodTypeDef, Summary> = z
    .object({
        transactionsAccepted: z.number().int().optional(),
        transactionsAcceptedDeltaPct: z.nullable(z.number().int()).optional(),
        transactionsAuthorizedRate: z.nullable(z.number().int()).optional(),
        transactionsAuthorizedRateDelta: z.nullable(z.number().int()).optional(),
        refunds: z.number().int().optional(),
        refundsDeltaPct: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            transactionsAccepted: "transactions_accepted",
            transactionsAcceptedDeltaPct: "transactions_accepted_delta_pct",
            transactionsAuthorizedRate: "transactions_authorized_rate",
            transactionsAuthorizedRateDelta: "transactions_authorized_rate_delta",
            refundsDeltaPct: "refunds_delta_pct",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Summary$ {
    /** @deprecated use `Summary$inboundSchema` instead. */
    export const inboundSchema = Summary$inboundSchema;
    /** @deprecated use `Summary$outboundSchema` instead. */
    export const outboundSchema = Summary$outboundSchema;
    /** @deprecated use `Summary$Outbound` instead. */
    export type Outbound = Summary$Outbound;
}

/** @internal */
export const Current$inboundSchema: z.ZodType<Current, z.ZodTypeDef, unknown> = z
    .object({
        first_interval: z.string().optional(),
        transactions_accepted: z.array(z.number().int()).optional(),
        transactions_authorized_rate: z.array(z.number().int()).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_interval: "firstInterval",
            transactions_accepted: "transactionsAccepted",
            transactions_authorized_rate: "transactionsAuthorizedRate",
        });
    });

/** @internal */
export type Current$Outbound = {
    first_interval?: string | undefined;
    transactions_accepted?: Array<number> | undefined;
    transactions_authorized_rate?: Array<number> | undefined;
    refunds?: Array<number> | undefined;
};

/** @internal */
export const Current$outboundSchema: z.ZodType<Current$Outbound, z.ZodTypeDef, Current> = z
    .object({
        firstInterval: z.string().optional(),
        transactionsAccepted: z.array(z.number().int()).optional(),
        transactionsAuthorizedRate: z.array(z.number().int()).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstInterval: "first_interval",
            transactionsAccepted: "transactions_accepted",
            transactionsAuthorizedRate: "transactions_authorized_rate",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Current$ {
    /** @deprecated use `Current$inboundSchema` instead. */
    export const inboundSchema = Current$inboundSchema;
    /** @deprecated use `Current$outboundSchema` instead. */
    export const outboundSchema = Current$outboundSchema;
    /** @deprecated use `Current$Outbound` instead. */
    export type Outbound = Current$Outbound;
}

/** @internal */
export const Previous$inboundSchema: z.ZodType<Previous, z.ZodTypeDef, unknown> = z
    .object({
        first_interval: z.string().optional(),
        transactions_accepted: z.array(z.number().int()).optional(),
        transactions_authorized_rate: z.array(z.number().int()).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_interval: "firstInterval",
            transactions_accepted: "transactionsAccepted",
            transactions_authorized_rate: "transactionsAuthorizedRate",
        });
    });

/** @internal */
export type Previous$Outbound = {
    first_interval?: string | undefined;
    transactions_accepted?: Array<number> | undefined;
    transactions_authorized_rate?: Array<number> | undefined;
    refunds?: Array<number> | undefined;
};

/** @internal */
export const Previous$outboundSchema: z.ZodType<Previous$Outbound, z.ZodTypeDef, Previous> = z
    .object({
        firstInterval: z.string().optional(),
        transactionsAccepted: z.array(z.number().int()).optional(),
        transactionsAuthorizedRate: z.array(z.number().int()).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstInterval: "first_interval",
            transactionsAccepted: "transactions_accepted",
            transactionsAuthorizedRate: "transactions_authorized_rate",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Previous$ {
    /** @deprecated use `Previous$inboundSchema` instead. */
    export const inboundSchema = Previous$inboundSchema;
    /** @deprecated use `Previous$outboundSchema` instead. */
    export const outboundSchema = Previous$outboundSchema;
    /** @deprecated use `Previous$Outbound` instead. */
    export type Outbound = Previous$Outbound;
}

/** @internal */
export const Series$inboundSchema: z.ZodType<Series, z.ZodTypeDef, unknown> = z.object({
    current: z.lazy(() => Current$inboundSchema).optional(),
    previous: z.lazy(() => Previous$inboundSchema).optional(),
});

/** @internal */
export type Series$Outbound = {
    current?: Current$Outbound | undefined;
    previous?: Previous$Outbound | undefined;
};

/** @internal */
export const Series$outboundSchema: z.ZodType<Series$Outbound, z.ZodTypeDef, Series> = z.object({
    current: z.lazy(() => Current$outboundSchema).optional(),
    previous: z.lazy(() => Previous$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Series$ {
    /** @deprecated use `Series$inboundSchema` instead. */
    export const inboundSchema = Series$inboundSchema;
    /** @deprecated use `Series$outboundSchema` instead. */
    export const outboundSchema = Series$outboundSchema;
    /** @deprecated use `Series$Outbound` instead. */
    export type Outbound = Series$Outbound;
}

/** @internal */
export const HealthDashboardTotal$inboundSchema: z.ZodType<
    HealthDashboardTotal,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: HealthDashboardTotalType$inboundSchema.optional(),
    summary: z.lazy(() => Summary$inboundSchema).optional(),
    series: z.lazy(() => Series$inboundSchema).optional(),
});

/** @internal */
export type HealthDashboardTotal$Outbound = {
    type?: string | undefined;
    summary?: Summary$Outbound | undefined;
    series?: Series$Outbound | undefined;
};

/** @internal */
export const HealthDashboardTotal$outboundSchema: z.ZodType<
    HealthDashboardTotal$Outbound,
    z.ZodTypeDef,
    HealthDashboardTotal
> = z.object({
    type: HealthDashboardTotalType$outboundSchema.optional(),
    summary: z.lazy(() => Summary$outboundSchema).optional(),
    series: z.lazy(() => Series$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotal$ {
    /** @deprecated use `HealthDashboardTotal$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotal$inboundSchema;
    /** @deprecated use `HealthDashboardTotal$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotal$outboundSchema;
    /** @deprecated use `HealthDashboardTotal$Outbound` instead. */
    export type Outbound = HealthDashboardTotal$Outbound;
}
