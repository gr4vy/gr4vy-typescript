/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    DigitalWalletProvider,
    DigitalWalletProvider$inboundSchema,
    DigitalWalletProvider$outboundSchema,
} from "./digitalwalletprovider.js";
import * as z from "zod";

/**
 * Request body for registering a new digital wallet
 */
export type DigitalWalletCreate = {
    /**
     * An enumeration.
     */
    provider: DigitalWalletProvider;
    merchantName: string;
    merchantDisplayName?: string | undefined;
    merchantUrl?: string | undefined;
    merchantCountryCode?: string | undefined;
    domainNames?: Array<string> | undefined;
    acceptTermsAndConditions: boolean;
};

/** @internal */
export const DigitalWalletCreate$inboundSchema: z.ZodType<
    DigitalWalletCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        provider: DigitalWalletProvider$inboundSchema,
        merchant_name: z.string(),
        merchant_display_name: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_country_code: z.string().optional(),
        domain_names: z.array(z.string()).optional(),
        accept_terms_and_conditions: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_name: "merchantName",
            merchant_display_name: "merchantDisplayName",
            merchant_url: "merchantUrl",
            merchant_country_code: "merchantCountryCode",
            domain_names: "domainNames",
            accept_terms_and_conditions: "acceptTermsAndConditions",
        });
    });

/** @internal */
export type DigitalWalletCreate$Outbound = {
    provider: string;
    merchant_name: string;
    merchant_display_name?: string | undefined;
    merchant_url?: string | undefined;
    merchant_country_code?: string | undefined;
    domain_names?: Array<string> | undefined;
    accept_terms_and_conditions: boolean;
};

/** @internal */
export const DigitalWalletCreate$outboundSchema: z.ZodType<
    DigitalWalletCreate$Outbound,
    z.ZodTypeDef,
    DigitalWalletCreate
> = z
    .object({
        provider: DigitalWalletProvider$outboundSchema,
        merchantName: z.string(),
        merchantDisplayName: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        domainNames: z.array(z.string()).optional(),
        acceptTermsAndConditions: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantName: "merchant_name",
            merchantDisplayName: "merchant_display_name",
            merchantUrl: "merchant_url",
            merchantCountryCode: "merchant_country_code",
            domainNames: "domain_names",
            acceptTermsAndConditions: "accept_terms_and_conditions",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletCreate$ {
    /** @deprecated use `DigitalWalletCreate$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletCreate$inboundSchema;
    /** @deprecated use `DigitalWalletCreate$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletCreate$outboundSchema;
    /** @deprecated use `DigitalWalletCreate$Outbound` instead. */
    export type Outbound = DigitalWalletCreate$Outbound;
}
