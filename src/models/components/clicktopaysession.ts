/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Base model with JSON encoders.
 */
export type ClickToPaySession = {
  /**
   * The ID of the Click to Pay application.
   */
  digitalPaymentApplicationId: string;
  /**
   * The merchant name as configured ont he the Click to Pay wallet.
   */
  digitalPaymentApplicationName: string;
};

/** @internal */
export const ClickToPaySession$inboundSchema: z.ZodType<
  ClickToPaySession,
  z.ZodTypeDef,
  unknown
> = z.object({
  digital_payment_application_id: z.string(),
  digital_payment_application_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "digital_payment_application_id": "digitalPaymentApplicationId",
    "digital_payment_application_name": "digitalPaymentApplicationName",
  });
});

/** @internal */
export type ClickToPaySession$Outbound = {
  digital_payment_application_id: string;
  digital_payment_application_name: string;
};

/** @internal */
export const ClickToPaySession$outboundSchema: z.ZodType<
  ClickToPaySession$Outbound,
  z.ZodTypeDef,
  ClickToPaySession
> = z.object({
  digitalPaymentApplicationId: z.string(),
  digitalPaymentApplicationName: z.string(),
}).transform((v) => {
  return remap$(v, {
    digitalPaymentApplicationId: "digital_payment_application_id",
    digitalPaymentApplicationName: "digital_payment_application_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClickToPaySession$ {
  /** @deprecated use `ClickToPaySession$inboundSchema` instead. */
  export const inboundSchema = ClickToPaySession$inboundSchema;
  /** @deprecated use `ClickToPaySession$outboundSchema` instead. */
  export const outboundSchema = ClickToPaySession$outboundSchema;
  /** @deprecated use `ClickToPaySession$Outbound` instead. */
  export type Outbound = ClickToPaySession$Outbound;
}

export function clickToPaySessionToJSON(
  clickToPaySession: ClickToPaySession,
): string {
  return JSON.stringify(
    ClickToPaySession$outboundSchema.parse(clickToPaySession),
  );
}

export function clickToPaySessionFromJSON(
  jsonString: string,
): SafeParseResult<ClickToPaySession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClickToPaySession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClickToPaySession' from JSON`,
  );
}
