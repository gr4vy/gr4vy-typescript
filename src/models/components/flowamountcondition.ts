/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowAmountConditionName = {
    Amount: "amount",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowAmountConditionName = ClosedEnum<typeof FlowAmountConditionName>;

/**
 * The comparison to make on the currency code `value`.
 */
export const Operator = {
    LessThan: "less_than",
    GreaterThan: "greater_than",
} as const;
/**
 * The comparison to make on the currency code `value`.
 */
export type Operator = ClosedEnum<typeof Operator>;

/**
 * Amount value compare the transaction to.
 */
export type Value = {
    /**
     * Currency ISO codes to compare the transaction to.
     */
    currency?: string | undefined;
    /**
     * Amount value to compare transaction value to.
     */
    value?: number | undefined;
};

/**
 * Amount conditions with a name, operator, and value.
 */
export type FlowAmountCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAmountConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: Operator;
    /**
     * Amount value compare the transaction to.
     */
    value: Value;
};

/** @internal */
export const FlowAmountConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowAmountConditionName
> = z.nativeEnum(FlowAmountConditionName);

/** @internal */
export const FlowAmountConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowAmountConditionName
> = FlowAmountConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowAmountConditionName$ {
    /** @deprecated use `FlowAmountConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowAmountConditionName$inboundSchema;
    /** @deprecated use `FlowAmountConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowAmountConditionName$outboundSchema;
}

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z.nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> = Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
    /** @deprecated use `Operator$inboundSchema` instead. */
    export const inboundSchema = Operator$inboundSchema;
    /** @deprecated use `Operator$outboundSchema` instead. */
    export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z.object({
    currency: z.string().optional(),
    value: z.number().optional(),
});

/** @internal */
export type Value$Outbound = {
    currency?: string | undefined;
    value?: number | undefined;
};

/** @internal */
export const Value$outboundSchema: z.ZodType<Value$Outbound, z.ZodTypeDef, Value> = z.object({
    currency: z.string().optional(),
    value: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
    /** @deprecated use `Value$inboundSchema` instead. */
    export const inboundSchema = Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    export const outboundSchema = Value$outboundSchema;
    /** @deprecated use `Value$Outbound` instead. */
    export type Outbound = Value$Outbound;
}

/** @internal */
export const FlowAmountCondition$inboundSchema: z.ZodType<
    FlowAmountCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowAmountConditionName$inboundSchema,
    operator: Operator$inboundSchema,
    value: z.lazy(() => Value$inboundSchema),
});

/** @internal */
export type FlowAmountCondition$Outbound = {
    name: string;
    operator: string;
    value: Value$Outbound;
};

/** @internal */
export const FlowAmountCondition$outboundSchema: z.ZodType<
    FlowAmountCondition$Outbound,
    z.ZodTypeDef,
    FlowAmountCondition
> = z.object({
    name: FlowAmountConditionName$outboundSchema,
    operator: Operator$outboundSchema,
    value: z.lazy(() => Value$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowAmountCondition$ {
    /** @deprecated use `FlowAmountCondition$inboundSchema` instead. */
    export const inboundSchema = FlowAmountCondition$inboundSchema;
    /** @deprecated use `FlowAmountCondition$outboundSchema` instead. */
    export const outboundSchema = FlowAmountCondition$outboundSchema;
    /** @deprecated use `FlowAmountCondition$Outbound` instead. */
    export type Outbound = FlowAmountCondition$Outbound;
}
