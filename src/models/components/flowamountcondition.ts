/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowAmountConditionName {
    Amount = "amount",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum Operator {
    LessThan = "less_than",
    GreaterThan = "greater_than",
}

/**
 * Amount value compare the transaction to.
 */
export type Value = {
    /**
     * Currency ISO codes to compare the transaction to.
     */
    currency?: string | undefined;
    /**
     * Amount value to compare transaction value to.
     */
    value?: number | undefined;
};

/**
 * Amount conditions with a name, operator, and value.
 */
export type FlowAmountCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAmountConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: Operator;
    /**
     * Amount value compare the transaction to.
     */
    value: Value;
};

/** @internal */
export namespace FlowAmountConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowAmountConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Operator$ {
    export const inboundSchema = z.nativeEnum(Operator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Value$ {
    export const inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z.object({
        currency: z.string().optional(),
        value: z.number().optional(),
    });

    export type Outbound = {
        currency?: string | undefined;
        value?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Value> = z.object({
        currency: z.string().optional(),
        value: z.number().optional(),
    });
}

/** @internal */
export namespace FlowAmountCondition$ {
    export const inboundSchema: z.ZodType<FlowAmountCondition, z.ZodTypeDef, unknown> = z.object({
        name: FlowAmountConditionName$.inboundSchema,
        operator: Operator$.inboundSchema,
        value: z.lazy(() => Value$.inboundSchema),
    });

    export type Outbound = {
        name: string;
        operator: string;
        value: Value$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAmountCondition> = z.object({
        name: FlowAmountConditionName$.outboundSchema,
        operator: Operator$.outboundSchema,
        value: z.lazy(() => Value$.outboundSchema),
    });
}
