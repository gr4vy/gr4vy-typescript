/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCardTypeConditionName {
    CardType = "card_type",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowCardTypeConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowCardTypeConditionValue {
    Credit = "credit",
    Debit = "debit",
    Prepaid = "prepaid",
}

/**
 * Card type condition with a name, operator, and value.
 */
export type FlowCardTypeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCardTypeConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowCardTypeConditionOperator;
    /**
     * Card type to compare the transaction to.
     */
    value: Array<FlowCardTypeConditionValue>;
};

/** @internal */
export namespace FlowCardTypeConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowCardTypeConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCardTypeConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowCardTypeConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCardTypeConditionValue$ {
    export const inboundSchema = z.nativeEnum(FlowCardTypeConditionValue);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCardTypeCondition$ {
    export const inboundSchema: z.ZodType<FlowCardTypeCondition, z.ZodTypeDef, unknown> = z.object({
        name: FlowCardTypeConditionName$.inboundSchema,
        operator: FlowCardTypeConditionOperator$.inboundSchema,
        value: z.array(FlowCardTypeConditionValue$.inboundSchema),
    });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCardTypeCondition> =
        z.object({
            name: FlowCardTypeConditionName$.outboundSchema,
            operator: FlowCardTypeConditionOperator$.outboundSchema,
            value: z.array(FlowCardTypeConditionValue$.outboundSchema),
        });
}
