/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCardTypeConditionName {
    CardType = "card_type",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowCardTypeConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowCardTypeConditionValue {
    Credit = "credit",
    Debit = "debit",
    Prepaid = "prepaid",
}

/**
 * Card type condition with a name, operator, and value.
 */
export type FlowCardTypeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCardTypeConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowCardTypeConditionOperator;
    /**
     * Card type to compare the transaction to.
     */
    value: Array<FlowCardTypeConditionValue>;
};

/** @internal */
export const FlowCardTypeConditionName$ = z.nativeEnum(FlowCardTypeConditionName);

/** @internal */
export const FlowCardTypeConditionOperator$ = z.nativeEnum(FlowCardTypeConditionOperator);

/** @internal */
export const FlowCardTypeConditionValue$ = z.nativeEnum(FlowCardTypeConditionValue);

/** @internal */
export namespace FlowCardTypeCondition$ {
    export type Inbound = {
        name: FlowCardTypeConditionName;
        operator: FlowCardTypeConditionOperator;
        value: Array<FlowCardTypeConditionValue>;
    };

    export const inboundSchema: z.ZodType<FlowCardTypeCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowCardTypeConditionName$,
            operator: FlowCardTypeConditionOperator$,
            value: z.array(FlowCardTypeConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowCardTypeConditionName;
        operator: FlowCardTypeConditionOperator;
        value: Array<FlowCardTypeConditionValue>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCardTypeCondition> = z
        .object({
            name: FlowCardTypeConditionName$,
            operator: FlowCardTypeConditionOperator$,
            value: z.array(FlowCardTypeConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
