/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VoidableField = {
  key: string;
  value: string;
};

/** @internal */
export const VoidableField$inboundSchema: z.ZodType<
  VoidableField,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
});

/** @internal */
export type VoidableField$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const VoidableField$outboundSchema: z.ZodType<
  VoidableField$Outbound,
  z.ZodTypeDef,
  VoidableField
> = z.object({
  key: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoidableField$ {
  /** @deprecated use `VoidableField$inboundSchema` instead. */
  export const inboundSchema = VoidableField$inboundSchema;
  /** @deprecated use `VoidableField$outboundSchema` instead. */
  export const outboundSchema = VoidableField$outboundSchema;
  /** @deprecated use `VoidableField$Outbound` instead. */
  export type Outbound = VoidableField$Outbound;
}

export function voidableFieldToJSON(voidableField: VoidableField): string {
  return JSON.stringify(VoidableField$outboundSchema.parse(voidableField));
}

export function voidableFieldFromJSON(
  jsonString: string,
): SafeParseResult<VoidableField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoidableField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoidableField' from JSON`,
  );
}
