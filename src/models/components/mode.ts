/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export const Mode = {
  Card: "card",
  Redirect: "redirect",
  Applepay: "applepay",
  Googlepay: "googlepay",
  CheckoutSession: "checkout-session",
  ClickToPay: "click-to-pay",
  GiftCard: "gift-card",
  Bank: "bank",
} as const;
export type Mode = OpenEnum<typeof Mode>;

/** @internal */
export const Mode$inboundSchema: z.ZodType<Mode, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Mode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Mode$outboundSchema: z.ZodType<Mode, z.ZodTypeDef, Mode> = z.union(
  [
    z.nativeEnum(Mode),
    z.string().and(z.custom<Unrecognized<string>>()),
  ],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}
