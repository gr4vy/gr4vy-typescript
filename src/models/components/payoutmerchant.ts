/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

export type PayoutMerchant = {
  /**
   * The name of the merchant.
   */
  name: string;
  /**
   * Unique value which identifies a merchant for processing transactions, also known as a MID.
   */
  identificationNumber: string;
  /**
   * The phone number for the merchant which should be formatted according to the E164 number standard.
   */
  phoneNumber: string;
  /**
   * Merchant website URL.
   */
  url: string;
  /**
   * Value to explain charges or payments on bank statements.
   */
  statementDescriptor: string;
  /**
   * Merchant classification for the type of goods or services it provides.
   */
  merchantCategoryCode: string;
  /**
   * The address for the merchant.
   */
  address?: Address | null | undefined;
};

/** @internal */
export const PayoutMerchant$inboundSchema: z.ZodType<
  PayoutMerchant,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  identification_number: z.string(),
  phone_number: z.string(),
  url: z.string(),
  statement_descriptor: z.string(),
  merchant_category_code: z.string(),
  address: z.nullable(Address$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "identification_number": "identificationNumber",
    "phone_number": "phoneNumber",
    "statement_descriptor": "statementDescriptor",
    "merchant_category_code": "merchantCategoryCode",
  });
});

/** @internal */
export type PayoutMerchant$Outbound = {
  name: string;
  identification_number: string;
  phone_number: string;
  url: string;
  statement_descriptor: string;
  merchant_category_code: string;
  address?: Address$Outbound | null | undefined;
};

/** @internal */
export const PayoutMerchant$outboundSchema: z.ZodType<
  PayoutMerchant$Outbound,
  z.ZodTypeDef,
  PayoutMerchant
> = z.object({
  name: z.string(),
  identificationNumber: z.string(),
  phoneNumber: z.string(),
  url: z.string(),
  statementDescriptor: z.string(),
  merchantCategoryCode: z.string(),
  address: z.nullable(Address$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    identificationNumber: "identification_number",
    phoneNumber: "phone_number",
    statementDescriptor: "statement_descriptor",
    merchantCategoryCode: "merchant_category_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutMerchant$ {
  /** @deprecated use `PayoutMerchant$inboundSchema` instead. */
  export const inboundSchema = PayoutMerchant$inboundSchema;
  /** @deprecated use `PayoutMerchant$outboundSchema` instead. */
  export const outboundSchema = PayoutMerchant$outboundSchema;
  /** @deprecated use `PayoutMerchant$Outbound` instead. */
  export type Outbound = PayoutMerchant$Outbound;
}

export function payoutMerchantToJSON(payoutMerchant: PayoutMerchant): string {
  return JSON.stringify(PayoutMerchant$outboundSchema.parse(payoutMerchant));
}

export function payoutMerchantFromJSON(
  jsonString: string,
): SafeParseResult<PayoutMerchant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutMerchant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutMerchant' from JSON`,
  );
}
