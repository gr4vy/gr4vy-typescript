/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const GiftCardServiceType = {
    GiftCardService: "gift-card-service",
} as const;
/**
 * The type of this resource.
 */
export type GiftCardServiceType = ClosedEnum<typeof GiftCardServiceType>;

export type GiftCardServiceFields = {
    /**
     * The key of the field.
     */
    key?: string | undefined;
    /**
     * The value of the field.
     */
    value?: string | undefined;
};

/**
 * An configured gift card service.
 */
export type GiftCardService = {
    /**
     * The type of this resource.
     */
    type?: GiftCardServiceType | undefined;
    /**
     * The ID of this gift card service.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The ID of the gift card service definition used to create this service.
     *
     * @remarks
     *
     */
    giftCardServiceDefinitionId?: string | undefined;
    /**
     * The custom name set for this service.
     */
    displayName?: string | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field
     *
     * @remarks
     * configured for this gift card service. Fields marked as `secret`
     * are not returned.
     */
    fields?: Array<GiftCardServiceFields> | undefined;
    /**
     * The date and time when this service was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this service was last updated.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const GiftCardServiceType$inboundSchema: z.ZodNativeEnum<typeof GiftCardServiceType> =
    z.nativeEnum(GiftCardServiceType);

/** @internal */
export const GiftCardServiceType$outboundSchema: z.ZodNativeEnum<typeof GiftCardServiceType> =
    GiftCardServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardServiceType$ {
    /** @deprecated use `GiftCardServiceType$inboundSchema` instead. */
    export const inboundSchema = GiftCardServiceType$inboundSchema;
    /** @deprecated use `GiftCardServiceType$outboundSchema` instead. */
    export const outboundSchema = GiftCardServiceType$outboundSchema;
}

/** @internal */
export const GiftCardServiceFields$inboundSchema: z.ZodType<
    GiftCardServiceFields,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
});

/** @internal */
export type GiftCardServiceFields$Outbound = {
    key?: string | undefined;
    value?: string | undefined;
};

/** @internal */
export const GiftCardServiceFields$outboundSchema: z.ZodType<
    GiftCardServiceFields$Outbound,
    z.ZodTypeDef,
    GiftCardServiceFields
> = z.object({
    key: z.string().optional(),
    value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardServiceFields$ {
    /** @deprecated use `GiftCardServiceFields$inboundSchema` instead. */
    export const inboundSchema = GiftCardServiceFields$inboundSchema;
    /** @deprecated use `GiftCardServiceFields$outboundSchema` instead. */
    export const outboundSchema = GiftCardServiceFields$outboundSchema;
    /** @deprecated use `GiftCardServiceFields$Outbound` instead. */
    export type Outbound = GiftCardServiceFields$Outbound;
}

/** @internal */
export const GiftCardService$inboundSchema: z.ZodType<GiftCardService, z.ZodTypeDef, unknown> = z
    .object({
        type: GiftCardServiceType$inboundSchema.optional(),
        id: z.string().optional(),
        merchant_account_id: z.string().optional(),
        gift_card_service_definition_id: z.string().optional(),
        display_name: z.string().optional(),
        active: z.boolean().optional(),
        fields: z.array(z.lazy(() => GiftCardServiceFields$inboundSchema)).optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            gift_card_service_definition_id: "giftCardServiceDefinitionId",
            display_name: "displayName",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type GiftCardService$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    merchant_account_id?: string | undefined;
    gift_card_service_definition_id?: string | undefined;
    display_name?: string | undefined;
    active?: boolean | undefined;
    fields?: Array<GiftCardServiceFields$Outbound> | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const GiftCardService$outboundSchema: z.ZodType<
    GiftCardService$Outbound,
    z.ZodTypeDef,
    GiftCardService
> = z
    .object({
        type: GiftCardServiceType$outboundSchema.optional(),
        id: z.string().optional(),
        merchantAccountId: z.string().optional(),
        giftCardServiceDefinitionId: z.string().optional(),
        displayName: z.string().optional(),
        active: z.boolean().optional(),
        fields: z.array(z.lazy(() => GiftCardServiceFields$outboundSchema)).optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            giftCardServiceDefinitionId: "gift_card_service_definition_id",
            displayName: "display_name",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardService$ {
    /** @deprecated use `GiftCardService$inboundSchema` instead. */
    export const inboundSchema = GiftCardService$inboundSchema;
    /** @deprecated use `GiftCardService$outboundSchema` instead. */
    export const outboundSchema = GiftCardService$outboundSchema;
    /** @deprecated use `GiftCardService$Outbound` instead. */
    export type Outbound = GiftCardService$Outbound;
}
