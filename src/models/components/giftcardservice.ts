/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource.
 */
export enum GiftCardServiceType {
    GiftCardService = "gift-card-service",
}

export type GiftCardServiceFields = {
    /**
     * The key of the field.
     */
    key?: string | undefined;
    /**
     * The value of the field.
     */
    value?: string | undefined;
};

/**
 * An configured gift card service.
 */
export type GiftCardService = {
    /**
     * The type of this resource.
     */
    type?: GiftCardServiceType | undefined;
    /**
     * The ID of this gift card service.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The ID of the gift card service definition used to create this service.
     *
     * @remarks
     *
     */
    giftCardServiceDefinitionId?: string | undefined;
    /**
     * The custom name set for this service.
     */
    displayName?: string | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field
     *
     * @remarks
     * configured for this gift card service. Fields marked as `secret`
     * are not returned.
     */
    fields?: Array<GiftCardServiceFields> | undefined;
    /**
     * The date and time when this service was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this service was last updated.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const GiftCardServiceType$: z.ZodNativeEnum<typeof GiftCardServiceType> =
    z.nativeEnum(GiftCardServiceType);

/** @internal */
export namespace GiftCardServiceFields$ {
    export type Inbound = {
        key?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardServiceFields, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        key?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardServiceFields> = z
        .object({
            key: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace GiftCardService$ {
    export type Inbound = {
        type?: GiftCardServiceType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        gift_card_service_definition_id?: string | undefined;
        display_name?: string | undefined;
        active?: boolean | undefined;
        fields?: Array<GiftCardServiceFields$.Inbound> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardService, z.ZodTypeDef, Inbound> = z
        .object({
            type: GiftCardServiceType$.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            gift_card_service_definition_id: z.string().optional(),
            display_name: z.string().optional(),
            active: z.boolean().optional(),
            fields: z.array(z.lazy(() => GiftCardServiceFields$.inboundSchema)).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.gift_card_service_definition_id === undefined
                    ? null
                    : { giftCardServiceDefinitionId: v.gift_card_service_definition_id }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: GiftCardServiceType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        gift_card_service_definition_id?: string | undefined;
        display_name?: string | undefined;
        active?: boolean | undefined;
        fields?: Array<GiftCardServiceFields$.Outbound> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardService> = z
        .object({
            type: GiftCardServiceType$.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            giftCardServiceDefinitionId: z.string().optional(),
            displayName: z.string().optional(),
            active: z.boolean().optional(),
            fields: z.array(z.lazy(() => GiftCardServiceFields$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.giftCardServiceDefinitionId === undefined
                    ? null
                    : { gift_card_service_definition_id: v.giftCardServiceDefinitionId }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
