/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of action outcome for the given rule.
 */
export enum FlowRuleThreeDSecureOutcomeType {
    ThreeDSecure = "three-d-secure",
}

/**
 * Result for a given flow action.
 */
export enum FlowRuleThreeDSecureOutcomeResult {
    Attempt = "attempt",
    Force = "force",
    Skip = "skip",
}

/**
 * Defines the outcome of a rule in a flow for 3DS.
 */
export type FlowRuleThreeDSecureOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleThreeDSecureOutcomeType;
    /**
     * Result for a given flow action.
     */
    result: FlowRuleThreeDSecureOutcomeResult;
};

/** @internal */
export const FlowRuleThreeDSecureOutcomeType$ = z.nativeEnum(FlowRuleThreeDSecureOutcomeType);

/** @internal */
export const FlowRuleThreeDSecureOutcomeResult$ = z.nativeEnum(FlowRuleThreeDSecureOutcomeResult);

/** @internal */
export namespace FlowRuleThreeDSecureOutcome$ {
    export type Inbound = {
        type: FlowRuleThreeDSecureOutcomeType;
        result: FlowRuleThreeDSecureOutcomeResult;
    };

    export const inboundSchema: z.ZodType<FlowRuleThreeDSecureOutcome, z.ZodTypeDef, Inbound> = z
        .object({
            type: FlowRuleThreeDSecureOutcomeType$,
            result: FlowRuleThreeDSecureOutcomeResult$,
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
            };
        });

    export type Outbound = {
        type: FlowRuleThreeDSecureOutcomeType;
        result: FlowRuleThreeDSecureOutcomeResult;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleThreeDSecureOutcome> = z
        .object({
            type: FlowRuleThreeDSecureOutcomeType$,
            result: FlowRuleThreeDSecureOutcomeResult$,
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
            };
        });
}
