/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Create a transaction with this gift card.
 */
export type TransactionGiftCardNewRequest = {
    /**
     * The 16-19 digit number for this gift card.
     */
    number: string;
    /**
     * The PIN for this gift card.
     */
    pin: string;
    /**
     * The monetary amount to charge for this gift card, in the smallest
     *
     * @remarks
     * currency unit for the given currency, for example `1299` cents to create
     * an authorization for `$12.99`.
     *
     * All gift card amounts are subtracted from the total transaction amount. The
     * remainder is charged to the provided `payment_method`.
     */
    amount: number;
};

/** @internal */
export namespace TransactionGiftCardNewRequest$ {
    export type Inbound = {
        number: string;
        pin: string;
        amount: number;
    };

    export const inboundSchema: z.ZodType<TransactionGiftCardNewRequest, z.ZodTypeDef, Inbound> = z
        .object({
            number: z.string(),
            pin: z.string(),
            amount: z.number().int(),
        })
        .transform((v) => {
            return {
                number: v.number,
                pin: v.pin,
                amount: v.amount,
            };
        });

    export type Outbound = {
        number: string;
        pin: string;
        amount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionGiftCardNewRequest> =
        z
            .object({
                number: z.string(),
                pin: z.string(),
                amount: z.number().int(),
            })
            .transform((v) => {
                return {
                    number: v.number,
                    pin: v.pin,
                    amount: v.amount,
                };
            });
}
