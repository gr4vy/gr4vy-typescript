/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum NetworkTokenCryptogramProvisionFailedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `network-token-cryptogram-provision-failed`.
 */
export enum NetworkTokenCryptogramProvisionFailedName {
    NetworkTokenCryptogramProvisionFailed = "network-token-cryptogram-provision-failed",
}

/**
 * Additional context for this event.
 */
export type NetworkTokenCryptogramProvisionFailedContext = {
    /**
     * The endpoint for the request, if performed.
     */
    url?: string | null | undefined;
    /**
     * The HTTP body sent to the Network Token provider, if performed.
     */
    request?: string | null | undefined;
    /**
     * The HTTP body received from the Network Token provider, if any.
     */
    response?: string | null | undefined;
    /**
     * The HTTP response status code from the Network Token provider, if any.
     */
    responseStatusCode?: number | null | undefined;
    /**
     * The reason we could not provision the cryptogram.
     */
    reason?: string | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to provision a cryptogram for a network token, in case the call failed.
 */
export type NetworkTokenCryptogramProvisionFailed = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: NetworkTokenCryptogramProvisionFailedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `network-token-cryptogram-provision-failed`.
     */
    name?: NetworkTokenCryptogramProvisionFailedName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: NetworkTokenCryptogramProvisionFailedContext | undefined;
};

/** @internal */
export const NetworkTokenCryptogramProvisionFailedType$: z.ZodNativeEnum<
    typeof NetworkTokenCryptogramProvisionFailedType
> = z.nativeEnum(NetworkTokenCryptogramProvisionFailedType);

/** @internal */
export const NetworkTokenCryptogramProvisionFailedName$: z.ZodNativeEnum<
    typeof NetworkTokenCryptogramProvisionFailedName
> = z.nativeEnum(NetworkTokenCryptogramProvisionFailedName);

/** @internal */
export namespace NetworkTokenCryptogramProvisionFailedContext$ {
    export type Inbound = {
        url?: string | null | undefined;
        request?: string | null | undefined;
        response?: string | null | undefined;
        response_status_code?: number | null | undefined;
        reason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        NetworkTokenCryptogramProvisionFailedContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            url: z.nullable(z.string()).optional(),
            request: z.nullable(z.string()).optional(),
            response: z.nullable(z.string()).optional(),
            response_status_code: z.nullable(z.number()).optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.response_status_code === undefined
                    ? null
                    : { responseStatusCode: v.response_status_code }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        url?: string | null | undefined;
        request?: string | null | undefined;
        response?: string | null | undefined;
        response_status_code?: number | null | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NetworkTokenCryptogramProvisionFailedContext
    > = z
        .object({
            url: z.nullable(z.string()).optional(),
            request: z.nullable(z.string()).optional(),
            response: z.nullable(z.string()).optional(),
            responseStatusCode: z.nullable(z.number()).optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.responseStatusCode === undefined
                    ? null
                    : { response_status_code: v.responseStatusCode }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}

/** @internal */
export namespace NetworkTokenCryptogramProvisionFailed$ {
    export type Inbound = {
        type?: NetworkTokenCryptogramProvisionFailedType | undefined;
        id?: string | undefined;
        name?: NetworkTokenCryptogramProvisionFailedName | undefined;
        created_at?: string | undefined;
        context?: NetworkTokenCryptogramProvisionFailedContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        NetworkTokenCryptogramProvisionFailed,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: NetworkTokenCryptogramProvisionFailedType$.optional(),
            id: z.string().optional(),
            name: NetworkTokenCryptogramProvisionFailedName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => NetworkTokenCryptogramProvisionFailedContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: NetworkTokenCryptogramProvisionFailedType | undefined;
        id?: string | undefined;
        name?: NetworkTokenCryptogramProvisionFailedName | undefined;
        created_at?: string | undefined;
        context?: NetworkTokenCryptogramProvisionFailedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NetworkTokenCryptogramProvisionFailed
    > = z
        .object({
            type: NetworkTokenCryptogramProvisionFailedType$.optional(),
            id: z.string().optional(),
            name: NetworkTokenCryptogramProvisionFailedName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => NetworkTokenCryptogramProvisionFailedContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
