/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The number and pin for a gift card to fetch a balance for.
 */
export type GiftCardRequest = {
  /**
   * The 16-19 digit number for the gift card.
   */
  number: string;
  /**
   * The PIN for this gift card.
   */
  pin: string;
};

/** @internal */
export const GiftCardRequest$inboundSchema: z.ZodType<
  GiftCardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.string(),
  pin: z.string(),
});

/** @internal */
export type GiftCardRequest$Outbound = {
  number: string;
  pin: string;
};

/** @internal */
export const GiftCardRequest$outboundSchema: z.ZodType<
  GiftCardRequest$Outbound,
  z.ZodTypeDef,
  GiftCardRequest
> = z.object({
  number: z.string(),
  pin: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRequest$ {
  /** @deprecated use `GiftCardRequest$inboundSchema` instead. */
  export const inboundSchema = GiftCardRequest$inboundSchema;
  /** @deprecated use `GiftCardRequest$outboundSchema` instead. */
  export const outboundSchema = GiftCardRequest$outboundSchema;
  /** @deprecated use `GiftCardRequest$Outbound` instead. */
  export type Outbound = GiftCardRequest$Outbound;
}

export function giftCardRequestToJSON(
  giftCardRequest: GiftCardRequest,
): string {
  return JSON.stringify(GiftCardRequest$outboundSchema.parse(giftCardRequest));
}

export function giftCardRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardRequest' from JSON`,
  );
}
