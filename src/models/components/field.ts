/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A field used in a payment service
 */
export type Field = {
  /**
   * The ID of the configured field.
   */
  key: string;
  /**
   * The value of the configured field.
   */
  value: string;
};

/** @internal */
export const Field$inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z
  .object({
    key: z.string(),
    value: z.string(),
  });

/** @internal */
export type Field$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const Field$outboundSchema: z.ZodType<
  Field$Outbound,
  z.ZodTypeDef,
  Field
> = z.object({
  key: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
  /** @deprecated use `Field$inboundSchema` instead. */
  export const inboundSchema = Field$inboundSchema;
  /** @deprecated use `Field$outboundSchema` instead. */
  export const outboundSchema = Field$outboundSchema;
  /** @deprecated use `Field$Outbound` instead. */
  export type Outbound = Field$Outbound;
}

export function fieldToJSON(field: Field): string {
  return JSON.stringify(Field$outboundSchema.parse(field));
}

export function fieldFromJSON(
  jsonString: string,
): SafeParseResult<Field, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field' from JSON`,
  );
}
