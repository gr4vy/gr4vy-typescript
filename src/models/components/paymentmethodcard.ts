/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardScheme,
  CardScheme$inboundSchema,
  CardScheme$outboundSchema,
} from "./cardscheme.js";

export type PaymentMethodCard = {
  /**
   * Set to `card` to use a new card.
   */
  method?: "card" | undefined;
  /**
   * The 13-19 digit number for this card as it can be found on the front of the card.
   */
  number: string;
  /**
   * The expiration date of the card, formatted `MM/YY`.
   */
  expirationDate: string;
  /**
   * The optional card's network scheme.
   */
  cardScheme?: CardScheme | null | undefined;
  /**
   * The merchant identifier for this card.
   */
  externalIdentifier?: string | null | undefined;
};

/** @internal */
export const PaymentMethodCard$inboundSchema: z.ZodType<
  PaymentMethodCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: z.literal("card").default("card"),
  number: z.string(),
  expiration_date: z.string(),
  card_scheme: z.nullable(CardScheme$inboundSchema).optional(),
  external_identifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expiration_date": "expirationDate",
    "card_scheme": "cardScheme",
    "external_identifier": "externalIdentifier",
  });
});

/** @internal */
export type PaymentMethodCard$Outbound = {
  method: "card";
  number: string;
  expiration_date: string;
  card_scheme?: string | null | undefined;
  external_identifier?: string | null | undefined;
};

/** @internal */
export const PaymentMethodCard$outboundSchema: z.ZodType<
  PaymentMethodCard$Outbound,
  z.ZodTypeDef,
  PaymentMethodCard
> = z.object({
  method: z.literal("card").default("card" as const),
  number: z.string(),
  expirationDate: z.string(),
  cardScheme: z.nullable(CardScheme$outboundSchema).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expirationDate: "expiration_date",
    cardScheme: "card_scheme",
    externalIdentifier: "external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCard$ {
  /** @deprecated use `PaymentMethodCard$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCard$inboundSchema;
  /** @deprecated use `PaymentMethodCard$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCard$outboundSchema;
  /** @deprecated use `PaymentMethodCard$Outbound` instead. */
  export type Outbound = PaymentMethodCard$Outbound;
}

export function paymentMethodCardToJSON(
  paymentMethodCard: PaymentMethodCard,
): string {
  return JSON.stringify(
    PaymentMethodCard$outboundSchema.parse(paymentMethodCard),
  );
}

export function paymentMethodCardFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodCard' from JSON`,
  );
}
