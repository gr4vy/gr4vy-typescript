/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Set to `card` to use a new card.
 */
export const PaymentMethodCardMethod = {
  Card: "card",
} as const;
/**
 * Set to `card` to use a new card.
 */
export type PaymentMethodCardMethod = ClosedEnum<
  typeof PaymentMethodCardMethod
>;

/**
 * The optional card's network scheme.
 */
export const PaymentMethodCardCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The optional card's network scheme.
 */
export type PaymentMethodCardCardScheme = ClosedEnum<
  typeof PaymentMethodCardCardScheme
>;

/**
 * Base model with JSON encoders.
 */
export type PaymentMethodCard = {
  /**
   * Set to `card` to use a new card.
   */
  method?: PaymentMethodCardMethod | undefined;
  /**
   * The 13-19 digit number for this card as it can be found on the front of the card.
   */
  number: string;
  /**
   * The expiration date of the card, formatted `MM/YY`.
   */
  expirationDate: string;
  /**
   * The optional card's network scheme.
   */
  cardScheme?: PaymentMethodCardCardScheme | undefined;
  /**
   * The merchant identifier for this card.
   */
  externalIdentifier?: string | undefined;
};

/** @internal */
export const PaymentMethodCardMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodCardMethod
> = z.nativeEnum(PaymentMethodCardMethod);

/** @internal */
export const PaymentMethodCardMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodCardMethod
> = PaymentMethodCardMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCardMethod$ {
  /** @deprecated use `PaymentMethodCardMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCardMethod$inboundSchema;
  /** @deprecated use `PaymentMethodCardMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCardMethod$outboundSchema;
}

/** @internal */
export const PaymentMethodCardCardScheme$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodCardCardScheme
> = z.nativeEnum(PaymentMethodCardCardScheme);

/** @internal */
export const PaymentMethodCardCardScheme$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodCardCardScheme
> = PaymentMethodCardCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCardCardScheme$ {
  /** @deprecated use `PaymentMethodCardCardScheme$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCardCardScheme$inboundSchema;
  /** @deprecated use `PaymentMethodCardCardScheme$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCardCardScheme$outboundSchema;
}

/** @internal */
export const PaymentMethodCard$inboundSchema: z.ZodType<
  PaymentMethodCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: PaymentMethodCardMethod$inboundSchema.default("card"),
  number: z.string(),
  expiration_date: z.string(),
  card_scheme: PaymentMethodCardCardScheme$inboundSchema.optional(),
  external_identifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "expiration_date": "expirationDate",
    "card_scheme": "cardScheme",
    "external_identifier": "externalIdentifier",
  });
});

/** @internal */
export type PaymentMethodCard$Outbound = {
  method: string;
  number: string;
  expiration_date: string;
  card_scheme?: string | undefined;
  external_identifier?: string | undefined;
};

/** @internal */
export const PaymentMethodCard$outboundSchema: z.ZodType<
  PaymentMethodCard$Outbound,
  z.ZodTypeDef,
  PaymentMethodCard
> = z.object({
  method: PaymentMethodCardMethod$outboundSchema.default("card"),
  number: z.string(),
  expirationDate: z.string(),
  cardScheme: PaymentMethodCardCardScheme$outboundSchema.optional(),
  externalIdentifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    expirationDate: "expiration_date",
    cardScheme: "card_scheme",
    externalIdentifier: "external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCard$ {
  /** @deprecated use `PaymentMethodCard$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCard$inboundSchema;
  /** @deprecated use `PaymentMethodCard$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCard$outboundSchema;
  /** @deprecated use `PaymentMethodCard$Outbound` instead. */
  export type Outbound = PaymentMethodCard$Outbound;
}

export function paymentMethodCardToJSON(
  paymentMethodCard: PaymentMethodCard,
): string {
  return JSON.stringify(
    PaymentMethodCard$outboundSchema.parse(paymentMethodCard),
  );
}

export function paymentMethodCardFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodCard' from JSON`,
  );
}
