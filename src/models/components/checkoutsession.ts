/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AirlineLeg,
  AirlineLeg$inboundSchema,
  AirlineLeg$Outbound,
  AirlineLeg$outboundSchema,
} from "./airlineleg.js";
import {
  AirlinePassenger,
  AirlinePassenger$inboundSchema,
  AirlinePassenger$Outbound,
  AirlinePassenger$outboundSchema,
} from "./airlinepassenger.js";
import {
  BillingDetails,
  BillingDetails$inboundSchema,
  BillingDetails$Outbound,
  BillingDetails$outboundSchema,
} from "./billingdetails.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";

/**
 * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
 */
export type CheckoutSessionMetadata = {};

/**
 * The billing address for the buyer.
 */
export type CheckoutSessionAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The optional shipping details for this buyer.
 */
export type CheckoutSessionShippingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: CheckoutSessionAddress | undefined;
};

/**
 * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
 */
export type CheckoutSessionBuyer = {
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * Base model with JSON encoders.
   */
  billingDetails?: BillingDetails | undefined;
  /**
   * The optional shipping details for this buyer.
   */
  shippingDetails?: CheckoutSessionShippingDetails | undefined;
};

/**
 * The delivery method of the ticket.
 */
export const CheckoutSessionTicketDeliveryMethod = {
  Electronic: "electronic",
  Other: "other",
} as const;
/**
 * The delivery method of the ticket.
 */
export type CheckoutSessionTicketDeliveryMethod = ClosedEnum<
  typeof CheckoutSessionTicketDeliveryMethod
>;

/**
 * The airline addendum data which describes the airline booking associated with this transaction.
 */
export type CheckoutSessionAirline = {
  /**
   * The unique identifier of the reservation in the global distribution system.
   */
  bookingCode?: string | undefined;
  /**
   * The address of the place/agency that issued the ticket.
   */
  issuedAddress?: string | undefined;
  /**
   * The date that the ticket was last issued in the airline reservation system.
   */
  issuedAt?: Date | undefined;
  /**
   * For airline aggregators, two-character IATA code of the airline issuing the ticket.
   */
  issuingCarrierCode?: string | undefined;
  /**
   * An array of separate trip segments. Each leg contains detailed itinerary information.
   */
  legs?: Array<AirlineLeg> | undefined;
  /**
   * The Passenger Name Record (PNR) in the airline reservation system.
   */
  passengerNameRecord?: string | undefined;
  /**
   * An array of the travelling passengers.
   */
  passengers?: Array<AirlinePassenger> | undefined;
  /**
   * The name of the reservation system.
   */
  reservationSystem?: string | undefined;
  /**
   * Indicates whether the ticket is restricted (refundable).
   */
  restrictedTicket?: boolean | undefined;
  /**
   * The delivery method of the ticket.
   */
  ticketDeliveryMethod?: CheckoutSessionTicketDeliveryMethod | undefined;
  /**
   * The airline's unique ticket number.
   */
  ticketNumber?: string | undefined;
  /**
   * The IATA travel agency code.
   */
  travelAgencyCode?: string | undefined;
  /**
   * The reference number of the invoice that was issued by the travel agency.
   */
  travelAgencyInvoiceNumber?: string | undefined;
  /**
   * The name of the travel agency.
   */
  travelAgencyName?: string | undefined;
  /**
   * The name of the travel agency plan.
   */
  travelAgencyPlanName?: string | undefined;
};

/**
 * Always `checkout-session`
 */
export const CheckoutSessionType = {
  CheckoutSession: "checkout-session",
} as const;
/**
 * Always `checkout-session`
 */
export type CheckoutSessionType = ClosedEnum<typeof CheckoutSessionType>;

/**
 * Always `payment-method`
 */
export const CheckoutSessionPaymentMethodType = {
  PaymentMethod: "payment-method",
} as const;
/**
 * Always `payment-method`
 */
export type CheckoutSessionPaymentMethodType = ClosedEnum<
  typeof CheckoutSessionPaymentMethodType
>;

/**
 * The payment scheme of the card.
 */
export const CheckoutSessionCardType = {
  Credit: "credit",
  Debit: "debit",
  Prepaid: "prepaid",
} as const;
/**
 * The payment scheme of the card.
 */
export type CheckoutSessionCardType = ClosedEnum<
  typeof CheckoutSessionCardType
>;

/**
 * Details for credit or debit card payment method.
 */
export type CheckoutSessionDetails = {
  /**
   * The first 6 digit of the card.
   */
  bin?: string | undefined;
  /**
   * The country of the card issuer.
   */
  cardCountry?: string | undefined;
  /**
   * The payment scheme of the card.
   */
  cardType?: CheckoutSessionCardType | undefined;
};

/**
 * Always `card`
 */
export const CheckoutSessionMethod = {
  Card: "card",
} as const;
/**
 * Always `card`
 */
export type CheckoutSessionMethod = ClosedEnum<typeof CheckoutSessionMethod>;

/**
 * The scheme of the card.
 */
export const CheckoutSessionCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme of the card.
 */
export type CheckoutSessionCardScheme = ClosedEnum<
  typeof CheckoutSessionCardScheme
>;

/**
 * Information about the payment method stored on the checkout session.
 */
export type CheckoutSessionPaymentMethod = {
  /**
   * Always `payment-method`
   */
  type?: CheckoutSessionPaymentMethodType | undefined;
  /**
   * The ID of the payment method.
   */
  id?: string | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: CheckoutSessionDetails | undefined;
  /**
   * The last 4 digits of the the card.
   */
  label?: string | undefined;
  /**
   * Always `card`
   */
  method?: CheckoutSessionMethod | undefined;
  /**
   * The scheme of the card.
   */
  scheme?: CheckoutSessionCardScheme | undefined;
  /**
   * The unique hash derived from the card number.
   */
  fingerprint?: string | undefined;
};

/**
 * Base model with JSON encoders.
 */
export type CheckoutSession = {
  /**
   * An array of cart items that represents the line items of a transaction.
   */
  cartItems?: Array<CartItem> | undefined;
  /**
   * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
   */
  metadata?: CheckoutSessionMetadata | undefined;
  /**
   * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
   */
  buyer?: CheckoutSessionBuyer | undefined;
  /**
   * The airline addendum data which describes the airline booking associated with this transaction.
   */
  airline?: CheckoutSessionAirline | undefined;
  /**
   * Always `checkout-session`
   */
  type?: CheckoutSessionType | undefined;
  /**
   * The ID for the checkout session.
   */
  id: string;
  /**
   * The date and time when this checkout session expires.
   */
  expiresAt: Date;
  /**
   * Information about the payment method stored on the checkout session.
   */
  paymentMethod?: CheckoutSessionPaymentMethod | undefined;
};

/** @internal */
export const CheckoutSessionMetadata$inboundSchema: z.ZodType<
  CheckoutSessionMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CheckoutSessionMetadata$Outbound = {};

/** @internal */
export const CheckoutSessionMetadata$outboundSchema: z.ZodType<
  CheckoutSessionMetadata$Outbound,
  z.ZodTypeDef,
  CheckoutSessionMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionMetadata$ {
  /** @deprecated use `CheckoutSessionMetadata$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionMetadata$inboundSchema;
  /** @deprecated use `CheckoutSessionMetadata$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionMetadata$outboundSchema;
  /** @deprecated use `CheckoutSessionMetadata$Outbound` instead. */
  export type Outbound = CheckoutSessionMetadata$Outbound;
}

export function checkoutSessionMetadataToJSON(
  checkoutSessionMetadata: CheckoutSessionMetadata,
): string {
  return JSON.stringify(
    CheckoutSessionMetadata$outboundSchema.parse(checkoutSessionMetadata),
  );
}

export function checkoutSessionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionMetadata' from JSON`,
  );
}

/** @internal */
export const CheckoutSessionAddress$inboundSchema: z.ZodType<
  CheckoutSessionAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type CheckoutSessionAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const CheckoutSessionAddress$outboundSchema: z.ZodType<
  CheckoutSessionAddress$Outbound,
  z.ZodTypeDef,
  CheckoutSessionAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionAddress$ {
  /** @deprecated use `CheckoutSessionAddress$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionAddress$inboundSchema;
  /** @deprecated use `CheckoutSessionAddress$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionAddress$outboundSchema;
  /** @deprecated use `CheckoutSessionAddress$Outbound` instead. */
  export type Outbound = CheckoutSessionAddress$Outbound;
}

export function checkoutSessionAddressToJSON(
  checkoutSessionAddress: CheckoutSessionAddress,
): string {
  return JSON.stringify(
    CheckoutSessionAddress$outboundSchema.parse(checkoutSessionAddress),
  );
}

export function checkoutSessionAddressFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionAddress' from JSON`,
  );
}

/** @internal */
export const CheckoutSessionShippingDetails$inboundSchema: z.ZodType<
  CheckoutSessionShippingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => CheckoutSessionAddress$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type CheckoutSessionShippingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: CheckoutSessionAddress$Outbound | undefined;
};

/** @internal */
export const CheckoutSessionShippingDetails$outboundSchema: z.ZodType<
  CheckoutSessionShippingDetails$Outbound,
  z.ZodTypeDef,
  CheckoutSessionShippingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => CheckoutSessionAddress$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionShippingDetails$ {
  /** @deprecated use `CheckoutSessionShippingDetails$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionShippingDetails$inboundSchema;
  /** @deprecated use `CheckoutSessionShippingDetails$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionShippingDetails$outboundSchema;
  /** @deprecated use `CheckoutSessionShippingDetails$Outbound` instead. */
  export type Outbound = CheckoutSessionShippingDetails$Outbound;
}

export function checkoutSessionShippingDetailsToJSON(
  checkoutSessionShippingDetails: CheckoutSessionShippingDetails,
): string {
  return JSON.stringify(
    CheckoutSessionShippingDetails$outboundSchema.parse(
      checkoutSessionShippingDetails,
    ),
  );
}

export function checkoutSessionShippingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionShippingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionShippingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionShippingDetails' from JSON`,
  );
}

/** @internal */
export const CheckoutSessionBuyer$inboundSchema: z.ZodType<
  CheckoutSessionBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: BillingDetails$inboundSchema.optional(),
  shipping_details: z.lazy(() => CheckoutSessionShippingDetails$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
    "shipping_details": "shippingDetails",
  });
});

/** @internal */
export type CheckoutSessionBuyer$Outbound = {
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: BillingDetails$Outbound | undefined;
  shipping_details?: CheckoutSessionShippingDetails$Outbound | undefined;
};

/** @internal */
export const CheckoutSessionBuyer$outboundSchema: z.ZodType<
  CheckoutSessionBuyer$Outbound,
  z.ZodTypeDef,
  CheckoutSessionBuyer
> = z.object({
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: BillingDetails$outboundSchema.optional(),
  shippingDetails: z.lazy(() => CheckoutSessionShippingDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    shippingDetails: "shipping_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionBuyer$ {
  /** @deprecated use `CheckoutSessionBuyer$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionBuyer$inboundSchema;
  /** @deprecated use `CheckoutSessionBuyer$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionBuyer$outboundSchema;
  /** @deprecated use `CheckoutSessionBuyer$Outbound` instead. */
  export type Outbound = CheckoutSessionBuyer$Outbound;
}

export function checkoutSessionBuyerToJSON(
  checkoutSessionBuyer: CheckoutSessionBuyer,
): string {
  return JSON.stringify(
    CheckoutSessionBuyer$outboundSchema.parse(checkoutSessionBuyer),
  );
}

export function checkoutSessionBuyerFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionBuyer' from JSON`,
  );
}

/** @internal */
export const CheckoutSessionTicketDeliveryMethod$inboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionTicketDeliveryMethod
> = z.nativeEnum(CheckoutSessionTicketDeliveryMethod);

/** @internal */
export const CheckoutSessionTicketDeliveryMethod$outboundSchema:
  z.ZodNativeEnum<typeof CheckoutSessionTicketDeliveryMethod> =
    CheckoutSessionTicketDeliveryMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionTicketDeliveryMethod$ {
  /** @deprecated use `CheckoutSessionTicketDeliveryMethod$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutSessionTicketDeliveryMethod$inboundSchema;
  /** @deprecated use `CheckoutSessionTicketDeliveryMethod$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutSessionTicketDeliveryMethod$outboundSchema;
}

/** @internal */
export const CheckoutSessionAirline$inboundSchema: z.ZodType<
  CheckoutSessionAirline,
  z.ZodTypeDef,
  unknown
> = z.object({
  booking_code: z.string().optional(),
  issued_address: z.string().optional(),
  issued_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  issuing_carrier_code: z.string().optional(),
  legs: z.array(AirlineLeg$inboundSchema).optional(),
  passenger_name_record: z.string().optional(),
  passengers: z.array(AirlinePassenger$inboundSchema).optional(),
  reservation_system: z.string().optional(),
  restricted_ticket: z.boolean().optional(),
  ticket_delivery_method: CheckoutSessionTicketDeliveryMethod$inboundSchema
    .default("electronic"),
  ticket_number: z.string().optional(),
  travel_agency_code: z.string().optional(),
  travel_agency_invoice_number: z.string().optional(),
  travel_agency_name: z.string().optional(),
  travel_agency_plan_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "booking_code": "bookingCode",
    "issued_address": "issuedAddress",
    "issued_at": "issuedAt",
    "issuing_carrier_code": "issuingCarrierCode",
    "passenger_name_record": "passengerNameRecord",
    "reservation_system": "reservationSystem",
    "restricted_ticket": "restrictedTicket",
    "ticket_delivery_method": "ticketDeliveryMethod",
    "ticket_number": "ticketNumber",
    "travel_agency_code": "travelAgencyCode",
    "travel_agency_invoice_number": "travelAgencyInvoiceNumber",
    "travel_agency_name": "travelAgencyName",
    "travel_agency_plan_name": "travelAgencyPlanName",
  });
});

/** @internal */
export type CheckoutSessionAirline$Outbound = {
  booking_code?: string | undefined;
  issued_address?: string | undefined;
  issued_at?: string | undefined;
  issuing_carrier_code?: string | undefined;
  legs?: Array<AirlineLeg$Outbound> | undefined;
  passenger_name_record?: string | undefined;
  passengers?: Array<AirlinePassenger$Outbound> | undefined;
  reservation_system?: string | undefined;
  restricted_ticket?: boolean | undefined;
  ticket_delivery_method: string;
  ticket_number?: string | undefined;
  travel_agency_code?: string | undefined;
  travel_agency_invoice_number?: string | undefined;
  travel_agency_name?: string | undefined;
  travel_agency_plan_name?: string | undefined;
};

/** @internal */
export const CheckoutSessionAirline$outboundSchema: z.ZodType<
  CheckoutSessionAirline$Outbound,
  z.ZodTypeDef,
  CheckoutSessionAirline
> = z.object({
  bookingCode: z.string().optional(),
  issuedAddress: z.string().optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  issuingCarrierCode: z.string().optional(),
  legs: z.array(AirlineLeg$outboundSchema).optional(),
  passengerNameRecord: z.string().optional(),
  passengers: z.array(AirlinePassenger$outboundSchema).optional(),
  reservationSystem: z.string().optional(),
  restrictedTicket: z.boolean().optional(),
  ticketDeliveryMethod: CheckoutSessionTicketDeliveryMethod$outboundSchema
    .default("electronic"),
  ticketNumber: z.string().optional(),
  travelAgencyCode: z.string().optional(),
  travelAgencyInvoiceNumber: z.string().optional(),
  travelAgencyName: z.string().optional(),
  travelAgencyPlanName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bookingCode: "booking_code",
    issuedAddress: "issued_address",
    issuedAt: "issued_at",
    issuingCarrierCode: "issuing_carrier_code",
    passengerNameRecord: "passenger_name_record",
    reservationSystem: "reservation_system",
    restrictedTicket: "restricted_ticket",
    ticketDeliveryMethod: "ticket_delivery_method",
    ticketNumber: "ticket_number",
    travelAgencyCode: "travel_agency_code",
    travelAgencyInvoiceNumber: "travel_agency_invoice_number",
    travelAgencyName: "travel_agency_name",
    travelAgencyPlanName: "travel_agency_plan_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionAirline$ {
  /** @deprecated use `CheckoutSessionAirline$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionAirline$inboundSchema;
  /** @deprecated use `CheckoutSessionAirline$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionAirline$outboundSchema;
  /** @deprecated use `CheckoutSessionAirline$Outbound` instead. */
  export type Outbound = CheckoutSessionAirline$Outbound;
}

export function checkoutSessionAirlineToJSON(
  checkoutSessionAirline: CheckoutSessionAirline,
): string {
  return JSON.stringify(
    CheckoutSessionAirline$outboundSchema.parse(checkoutSessionAirline),
  );
}

export function checkoutSessionAirlineFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionAirline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionAirline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionAirline' from JSON`,
  );
}

/** @internal */
export const CheckoutSessionType$inboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionType
> = z.nativeEnum(CheckoutSessionType);

/** @internal */
export const CheckoutSessionType$outboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionType
> = CheckoutSessionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionType$ {
  /** @deprecated use `CheckoutSessionType$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionType$inboundSchema;
  /** @deprecated use `CheckoutSessionType$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionType$outboundSchema;
}

/** @internal */
export const CheckoutSessionPaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionPaymentMethodType
> = z.nativeEnum(CheckoutSessionPaymentMethodType);

/** @internal */
export const CheckoutSessionPaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionPaymentMethodType
> = CheckoutSessionPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionPaymentMethodType$ {
  /** @deprecated use `CheckoutSessionPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionPaymentMethodType$inboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionPaymentMethodType$outboundSchema;
}

/** @internal */
export const CheckoutSessionCardType$inboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionCardType
> = z.nativeEnum(CheckoutSessionCardType);

/** @internal */
export const CheckoutSessionCardType$outboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionCardType
> = CheckoutSessionCardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionCardType$ {
  /** @deprecated use `CheckoutSessionCardType$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionCardType$inboundSchema;
  /** @deprecated use `CheckoutSessionCardType$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionCardType$outboundSchema;
}

/** @internal */
export const CheckoutSessionDetails$inboundSchema: z.ZodType<
  CheckoutSessionDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.string().optional(),
  card_country: z.string().optional(),
  card_type: CheckoutSessionCardType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "card_country": "cardCountry",
    "card_type": "cardType",
  });
});

/** @internal */
export type CheckoutSessionDetails$Outbound = {
  bin?: string | undefined;
  card_country?: string | undefined;
  card_type?: string | undefined;
};

/** @internal */
export const CheckoutSessionDetails$outboundSchema: z.ZodType<
  CheckoutSessionDetails$Outbound,
  z.ZodTypeDef,
  CheckoutSessionDetails
> = z.object({
  bin: z.string().optional(),
  cardCountry: z.string().optional(),
  cardType: CheckoutSessionCardType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cardCountry: "card_country",
    cardType: "card_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionDetails$ {
  /** @deprecated use `CheckoutSessionDetails$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionDetails$inboundSchema;
  /** @deprecated use `CheckoutSessionDetails$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionDetails$outboundSchema;
  /** @deprecated use `CheckoutSessionDetails$Outbound` instead. */
  export type Outbound = CheckoutSessionDetails$Outbound;
}

export function checkoutSessionDetailsToJSON(
  checkoutSessionDetails: CheckoutSessionDetails,
): string {
  return JSON.stringify(
    CheckoutSessionDetails$outboundSchema.parse(checkoutSessionDetails),
  );
}

export function checkoutSessionDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionDetails' from JSON`,
  );
}

/** @internal */
export const CheckoutSessionMethod$inboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionMethod
> = z.nativeEnum(CheckoutSessionMethod);

/** @internal */
export const CheckoutSessionMethod$outboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionMethod
> = CheckoutSessionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionMethod$ {
  /** @deprecated use `CheckoutSessionMethod$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionMethod$inboundSchema;
  /** @deprecated use `CheckoutSessionMethod$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionMethod$outboundSchema;
}

/** @internal */
export const CheckoutSessionCardScheme$inboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionCardScheme
> = z.nativeEnum(CheckoutSessionCardScheme);

/** @internal */
export const CheckoutSessionCardScheme$outboundSchema: z.ZodNativeEnum<
  typeof CheckoutSessionCardScheme
> = CheckoutSessionCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionCardScheme$ {
  /** @deprecated use `CheckoutSessionCardScheme$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionCardScheme$inboundSchema;
  /** @deprecated use `CheckoutSessionCardScheme$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionCardScheme$outboundSchema;
}

/** @internal */
export const CheckoutSessionPaymentMethod$inboundSchema: z.ZodType<
  CheckoutSessionPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CheckoutSessionPaymentMethodType$inboundSchema.default(
    "payment-method",
  ),
  id: z.string().optional(),
  details: z.lazy(() => CheckoutSessionDetails$inboundSchema).optional(),
  label: z.string().optional(),
  method: CheckoutSessionMethod$inboundSchema.default("card"),
  scheme: CheckoutSessionCardScheme$inboundSchema.optional(),
  fingerprint: z.string().optional(),
});

/** @internal */
export type CheckoutSessionPaymentMethod$Outbound = {
  type: string;
  id?: string | undefined;
  details?: CheckoutSessionDetails$Outbound | undefined;
  label?: string | undefined;
  method: string;
  scheme?: string | undefined;
  fingerprint?: string | undefined;
};

/** @internal */
export const CheckoutSessionPaymentMethod$outboundSchema: z.ZodType<
  CheckoutSessionPaymentMethod$Outbound,
  z.ZodTypeDef,
  CheckoutSessionPaymentMethod
> = z.object({
  type: CheckoutSessionPaymentMethodType$outboundSchema.default(
    "payment-method",
  ),
  id: z.string().optional(),
  details: z.lazy(() => CheckoutSessionDetails$outboundSchema).optional(),
  label: z.string().optional(),
  method: CheckoutSessionMethod$outboundSchema.default("card"),
  scheme: CheckoutSessionCardScheme$outboundSchema.optional(),
  fingerprint: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionPaymentMethod$ {
  /** @deprecated use `CheckoutSessionPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionPaymentMethod$inboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = CheckoutSessionPaymentMethod$outboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethod$Outbound` instead. */
  export type Outbound = CheckoutSessionPaymentMethod$Outbound;
}

export function checkoutSessionPaymentMethodToJSON(
  checkoutSessionPaymentMethod: CheckoutSessionPaymentMethod,
): string {
  return JSON.stringify(
    CheckoutSessionPaymentMethod$outboundSchema.parse(
      checkoutSessionPaymentMethod,
    ),
  );
}

export function checkoutSessionPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSessionPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionPaymentMethod' from JSON`,
  );
}

/** @internal */
export const CheckoutSession$inboundSchema: z.ZodType<
  CheckoutSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  cart_items: z.array(CartItem$inboundSchema).optional(),
  metadata: z.lazy(() => CheckoutSessionMetadata$inboundSchema).optional(),
  buyer: z.lazy(() => CheckoutSessionBuyer$inboundSchema).optional(),
  airline: z.lazy(() => CheckoutSessionAirline$inboundSchema).optional(),
  type: CheckoutSessionType$inboundSchema.default("checkout-session"),
  id: z.string(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  payment_method: z.lazy(() => CheckoutSessionPaymentMethod$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "cart_items": "cartItems",
    "expires_at": "expiresAt",
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type CheckoutSession$Outbound = {
  cart_items?: Array<CartItem$Outbound> | undefined;
  metadata?: CheckoutSessionMetadata$Outbound | undefined;
  buyer?: CheckoutSessionBuyer$Outbound | undefined;
  airline?: CheckoutSessionAirline$Outbound | undefined;
  type: string;
  id: string;
  expires_at: string;
  payment_method?: CheckoutSessionPaymentMethod$Outbound | undefined;
};

/** @internal */
export const CheckoutSession$outboundSchema: z.ZodType<
  CheckoutSession$Outbound,
  z.ZodTypeDef,
  CheckoutSession
> = z.object({
  cartItems: z.array(CartItem$outboundSchema).optional(),
  metadata: z.lazy(() => CheckoutSessionMetadata$outboundSchema).optional(),
  buyer: z.lazy(() => CheckoutSessionBuyer$outboundSchema).optional(),
  airline: z.lazy(() => CheckoutSessionAirline$outboundSchema).optional(),
  type: CheckoutSessionType$outboundSchema.default("checkout-session"),
  id: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
  paymentMethod: z.lazy(() => CheckoutSessionPaymentMethod$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    cartItems: "cart_items",
    expiresAt: "expires_at",
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSession$ {
  /** @deprecated use `CheckoutSession$inboundSchema` instead. */
  export const inboundSchema = CheckoutSession$inboundSchema;
  /** @deprecated use `CheckoutSession$outboundSchema` instead. */
  export const outboundSchema = CheckoutSession$outboundSchema;
  /** @deprecated use `CheckoutSession$Outbound` instead. */
  export type Outbound = CheckoutSession$Outbound;
}

export function checkoutSessionToJSON(
  checkoutSession: CheckoutSession,
): string {
  return JSON.stringify(CheckoutSession$outboundSchema.parse(checkoutSession));
}

export function checkoutSessionFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSession' from JSON`,
  );
}
