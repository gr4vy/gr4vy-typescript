/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Airline,
  Airline$inboundSchema,
  Airline$Outbound,
  Airline$outboundSchema,
} from "./airline.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";
import {
  CheckoutSessionPaymentMethod,
  CheckoutSessionPaymentMethod$inboundSchema,
  CheckoutSessionPaymentMethod$Outbound,
  CheckoutSessionPaymentMethod$outboundSchema,
} from "./checkoutsessionpaymentmethod.js";
import {
  GuestBuyerOutput,
  GuestBuyerOutput$inboundSchema,
  GuestBuyerOutput$Outbound,
  GuestBuyerOutput$outboundSchema,
} from "./guestbuyeroutput.js";

export type CheckoutSession = {
  /**
   * An array of cart items that represents the line items of a transaction.
   */
  cartItems?: Array<CartItem> | null | undefined;
  /**
   * Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * Provide buyer details for the transaction. No buyer resource will be created on Gr4vy when used.
   */
  buyer?: GuestBuyerOutput | null | undefined;
  /**
   * The airline addendum data which describes the airline booking associated with this transaction.
   */
  airline?: Airline | null | undefined;
  /**
   * Always `checkout-session`
   */
  type?: "checkout-session" | undefined;
  /**
   * The ID for the checkout session.
   */
  id: string;
  /**
   * The date and time when this checkout session expires.
   */
  expiresAt: Date;
  /**
   * Information about the payment method stored on the checkout session.
   */
  paymentMethod?: CheckoutSessionPaymentMethod | null | undefined;
};

/** @internal */
export const CheckoutSession$inboundSchema: z.ZodType<
  CheckoutSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  cart_items: z.nullable(z.array(CartItem$inboundSchema)).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  buyer: z.nullable(GuestBuyerOutput$inboundSchema).optional(),
  airline: z.nullable(Airline$inboundSchema).optional(),
  type: z.literal("checkout-session").default("checkout-session"),
  id: z.string(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  payment_method: z.nullable(CheckoutSessionPaymentMethod$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "cart_items": "cartItems",
    "expires_at": "expiresAt",
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type CheckoutSession$Outbound = {
  cart_items?: Array<CartItem$Outbound> | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  buyer?: GuestBuyerOutput$Outbound | null | undefined;
  airline?: Airline$Outbound | null | undefined;
  type: "checkout-session";
  id: string;
  expires_at: string;
  payment_method?: CheckoutSessionPaymentMethod$Outbound | null | undefined;
};

/** @internal */
export const CheckoutSession$outboundSchema: z.ZodType<
  CheckoutSession$Outbound,
  z.ZodTypeDef,
  CheckoutSession
> = z.object({
  cartItems: z.nullable(z.array(CartItem$outboundSchema)).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  buyer: z.nullable(GuestBuyerOutput$outboundSchema).optional(),
  airline: z.nullable(Airline$outboundSchema).optional(),
  type: z.literal("checkout-session").default("checkout-session" as const),
  id: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
  paymentMethod: z.nullable(CheckoutSessionPaymentMethod$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    cartItems: "cart_items",
    expiresAt: "expires_at",
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSession$ {
  /** @deprecated use `CheckoutSession$inboundSchema` instead. */
  export const inboundSchema = CheckoutSession$inboundSchema;
  /** @deprecated use `CheckoutSession$outboundSchema` instead. */
  export const outboundSchema = CheckoutSession$outboundSchema;
  /** @deprecated use `CheckoutSession$Outbound` instead. */
  export type Outbound = CheckoutSession$Outbound;
}

export function checkoutSessionToJSON(
  checkoutSession: CheckoutSession,
): string {
  return JSON.stringify(CheckoutSession$outboundSchema.parse(checkoutSession));
}

export function checkoutSessionFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSession' from JSON`,
  );
}
