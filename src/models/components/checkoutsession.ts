/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CartItem, CartItem$ } from "./cartitem";
import * as z from "zod";

/**
 * `checkout-session`.
 */
export enum CheckoutSessionType {
    CheckoutSession = "checkout-session",
}

/**
 * Payment method type.
 */
export enum CheckoutSessionMethod {
    Card = "card",
}

/**
 * The scheme/brand of the card.
 */
export enum CheckoutSessionScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

export enum CheckoutSessionCardType {
    Credit = "credit",
    Debit = "debit",
    Prepaid = "prepaid",
}

export type CheckoutSessionDetails = {
    /**
     * First six digits of PAN.
     */
    bin?: string | null | undefined;
    cardType?: CheckoutSessionCardType | null | undefined;
    /**
     * ISO 3166 two letter country code.
     */
    cardCountry?: string | null | undefined;
};

/**
 * Details about the payment method for card type only.
 */
export type CheckoutSessionPaymentMethod = {
    type?: string | undefined;
    /**
     * Unique ID for the payment method.
     */
    id?: string | null | undefined;
    /**
     * Payment method type.
     */
    method?: CheckoutSessionMethod | undefined;
    /**
     * The scheme/brand of the card.
     */
    scheme?: CheckoutSessionScheme | null | undefined;
    /**
     * Last four digits of PAN.
     */
    label?: string | null | undefined;
    details?: CheckoutSessionDetails | null | undefined;
    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    fingerprint?: string | null | undefined;
};

/**
 * A short-lived checkout session.
 */
export type CheckoutSession = {
    /**
     * `checkout-session`.
     */
    type?: CheckoutSessionType | undefined;
    /**
     * The ID of the Checkout Session.
     */
    id?: string | undefined;
    /**
     * The date and time when the Checkout Session will expire.
     *
     * @remarks
     * By default this will be set to 1 hour from the date of creation.
     */
    expiresAt?: Date | undefined;
    /**
     * An array of cart items that represents the line items of a transaction.
     */
    cartItems?: Array<CartItem> | null | undefined;
    /**
     * Any additional information about the transaction that you would like to
     *
     * @remarks
     * store as key-value pairs. This data is passed to payment service
     * providers that support it.
     */
    metadata?: Record<string, string> | null | undefined;
    /**
     * Details about the payment method for card type only.
     */
    paymentMethod?: CheckoutSessionPaymentMethod | null | undefined;
};

/** @internal */
export const CheckoutSessionType$ = z.nativeEnum(CheckoutSessionType);

/** @internal */
export const CheckoutSessionMethod$ = z.nativeEnum(CheckoutSessionMethod);

/** @internal */
export const CheckoutSessionScheme$ = z.nativeEnum(CheckoutSessionScheme);

/** @internal */
export const CheckoutSessionCardType$ = z.nativeEnum(CheckoutSessionCardType);

/** @internal */
export namespace CheckoutSessionDetails$ {
    export type Inbound = {
        bin?: string | null | undefined;
        card_type?: CheckoutSessionCardType | null | undefined;
        card_country?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<CheckoutSessionDetails, z.ZodTypeDef, Inbound> = z
        .object({
            bin: z.nullable(z.string()).optional(),
            card_type: z.nullable(CheckoutSessionCardType$).optional(),
            card_country: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.card_type === undefined ? null : { cardType: v.card_type }),
                ...(v.card_country === undefined ? null : { cardCountry: v.card_country }),
            };
        });

    export type Outbound = {
        bin?: string | null | undefined;
        card_type?: CheckoutSessionCardType | null | undefined;
        card_country?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckoutSessionDetails> = z
        .object({
            bin: z.nullable(z.string()).optional(),
            cardType: z.nullable(CheckoutSessionCardType$).optional(),
            cardCountry: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.cardType === undefined ? null : { card_type: v.cardType }),
                ...(v.cardCountry === undefined ? null : { card_country: v.cardCountry }),
            };
        });
}

/** @internal */
export namespace CheckoutSessionPaymentMethod$ {
    export type Inbound = {
        type?: string | undefined;
        id?: string | null | undefined;
        method?: CheckoutSessionMethod | undefined;
        scheme?: CheckoutSessionScheme | null | undefined;
        label?: string | null | undefined;
        details?: CheckoutSessionDetails$.Inbound | null | undefined;
        fingerprint?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<CheckoutSessionPaymentMethod, z.ZodTypeDef, Inbound> = z
        .object({
            type: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            method: CheckoutSessionMethod$.optional(),
            scheme: z.nullable(CheckoutSessionScheme$).optional(),
            label: z.nullable(z.string()).optional(),
            details: z.nullable(z.lazy(() => CheckoutSessionDetails$.inboundSchema)).optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.fingerprint === undefined ? null : { fingerprint: v.fingerprint }),
            };
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | null | undefined;
        method?: CheckoutSessionMethod | undefined;
        scheme?: CheckoutSessionScheme | null | undefined;
        label?: string | null | undefined;
        details?: CheckoutSessionDetails$.Outbound | null | undefined;
        fingerprint?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckoutSessionPaymentMethod> = z
        .object({
            type: z.string().optional(),
            id: z.nullable(z.string()).optional(),
            method: CheckoutSessionMethod$.optional(),
            scheme: z.nullable(CheckoutSessionScheme$).optional(),
            label: z.nullable(z.string()).optional(),
            details: z.nullable(z.lazy(() => CheckoutSessionDetails$.outboundSchema)).optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.fingerprint === undefined ? null : { fingerprint: v.fingerprint }),
            };
        });
}

/** @internal */
export namespace CheckoutSession$ {
    export type Inbound = {
        type?: CheckoutSessionType | undefined;
        id?: string | undefined;
        expires_at?: string | undefined;
        cart_items?: Array<CartItem$.Inbound> | null | undefined;
        metadata?: Record<string, string> | null | undefined;
        payment_method?: CheckoutSessionPaymentMethod$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<CheckoutSession, z.ZodTypeDef, Inbound> = z
        .object({
            type: CheckoutSessionType$.optional(),
            id: z.string().optional(),
            expires_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            cart_items: z.nullable(z.array(CartItem$.inboundSchema)).optional(),
            metadata: z.nullable(z.record(z.string())).optional(),
            payment_method: z
                .nullable(z.lazy(() => CheckoutSessionPaymentMethod$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.expires_at === undefined ? null : { expiresAt: v.expires_at }),
                ...(v.cart_items === undefined ? null : { cartItems: v.cart_items }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.payment_method === undefined ? null : { paymentMethod: v.payment_method }),
            };
        });

    export type Outbound = {
        type?: CheckoutSessionType | undefined;
        id?: string | undefined;
        expires_at?: string | undefined;
        cart_items?: Array<CartItem$.Outbound> | null | undefined;
        metadata?: Record<string, string> | null | undefined;
        payment_method?: CheckoutSessionPaymentMethod$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckoutSession> = z
        .object({
            type: CheckoutSessionType$.optional(),
            id: z.string().optional(),
            expiresAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            cartItems: z.nullable(z.array(CartItem$.outboundSchema)).optional(),
            metadata: z.nullable(z.record(z.string())).optional(),
            paymentMethod: z
                .nullable(z.lazy(() => CheckoutSessionPaymentMethod$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.expiresAt === undefined ? null : { expires_at: v.expiresAt }),
                ...(v.cartItems === undefined ? null : { cart_items: v.cartItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.paymentMethod === undefined ? null : { payment_method: v.paymentMethod }),
            };
        });
}
