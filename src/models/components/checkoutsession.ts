/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    CartItem,
    CartItem$inboundSchema,
    CartItem$Outbound,
    CartItem$outboundSchema,
} from "./cartitem.js";
import * as z from "zod";

/**
 * `checkout-session`.
 */
export const CheckoutSessionType = {
    CheckoutSession: "checkout-session",
} as const;
/**
 * `checkout-session`.
 */
export type CheckoutSessionType = ClosedEnum<typeof CheckoutSessionType>;

/**
 * Payment method type.
 */
export const CheckoutSessionMethod = {
    Card: "card",
} as const;
/**
 * Payment method type.
 */
export type CheckoutSessionMethod = ClosedEnum<typeof CheckoutSessionMethod>;

/**
 * The scheme/brand of the card.
 */
export const CheckoutSessionScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The scheme/brand of the card.
 */
export type CheckoutSessionScheme = ClosedEnum<typeof CheckoutSessionScheme>;

export const CheckoutSessionCardType = {
    Credit: "credit",
    Debit: "debit",
    Prepaid: "prepaid",
} as const;
export type CheckoutSessionCardType = ClosedEnum<typeof CheckoutSessionCardType>;

export type CheckoutSessionDetails = {
    /**
     * First six digits of PAN.
     */
    bin?: string | null | undefined;
    cardType?: CheckoutSessionCardType | null | undefined;
    /**
     * ISO 3166 two letter country code.
     */
    cardCountry?: string | null | undefined;
};

/**
 * Details about the payment method for card type only.
 */
export type CheckoutSessionPaymentMethod = {
    type?: string | undefined;
    /**
     * Unique ID for the payment method.
     */
    id?: string | null | undefined;
    /**
     * Payment method type.
     */
    method?: CheckoutSessionMethod | undefined;
    /**
     * The scheme/brand of the card.
     */
    scheme?: CheckoutSessionScheme | null | undefined;
    /**
     * Last four digits of PAN.
     */
    label?: string | null | undefined;
    details?: CheckoutSessionDetails | null | undefined;
    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    fingerprint?: string | null | undefined;
};

/**
 * A short-lived checkout session.
 */
export type CheckoutSession = {
    /**
     * `checkout-session`.
     */
    type?: CheckoutSessionType | undefined;
    /**
     * The ID of the Checkout Session.
     */
    id?: string | undefined;
    /**
     * The date and time when the Checkout Session will expire.
     *
     * @remarks
     * By default this will be set to 1 hour from the date of creation.
     */
    expiresAt?: Date | undefined;
    /**
     * An array of cart items that represents the line items of a transaction.
     */
    cartItems?: Array<CartItem> | null | undefined;
    /**
     * Any additional information about the transaction that you would like to
     *
     * @remarks
     * store as key-value pairs. This data is passed to payment service
     * providers that support it.
     */
    metadata?: { [k: string]: string } | null | undefined;
    /**
     * Details about the payment method for card type only.
     */
    paymentMethod?: CheckoutSessionPaymentMethod | null | undefined;
};

/** @internal */
export const CheckoutSessionType$inboundSchema: z.ZodNativeEnum<typeof CheckoutSessionType> =
    z.nativeEnum(CheckoutSessionType);

/** @internal */
export const CheckoutSessionType$outboundSchema: z.ZodNativeEnum<typeof CheckoutSessionType> =
    CheckoutSessionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionType$ {
    /** @deprecated use `CheckoutSessionType$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionType$inboundSchema;
    /** @deprecated use `CheckoutSessionType$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionType$outboundSchema;
}

/** @internal */
export const CheckoutSessionMethod$inboundSchema: z.ZodNativeEnum<typeof CheckoutSessionMethod> =
    z.nativeEnum(CheckoutSessionMethod);

/** @internal */
export const CheckoutSessionMethod$outboundSchema: z.ZodNativeEnum<typeof CheckoutSessionMethod> =
    CheckoutSessionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionMethod$ {
    /** @deprecated use `CheckoutSessionMethod$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionMethod$inboundSchema;
    /** @deprecated use `CheckoutSessionMethod$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionMethod$outboundSchema;
}

/** @internal */
export const CheckoutSessionScheme$inboundSchema: z.ZodNativeEnum<typeof CheckoutSessionScheme> =
    z.nativeEnum(CheckoutSessionScheme);

/** @internal */
export const CheckoutSessionScheme$outboundSchema: z.ZodNativeEnum<typeof CheckoutSessionScheme> =
    CheckoutSessionScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionScheme$ {
    /** @deprecated use `CheckoutSessionScheme$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionScheme$inboundSchema;
    /** @deprecated use `CheckoutSessionScheme$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionScheme$outboundSchema;
}

/** @internal */
export const CheckoutSessionCardType$inboundSchema: z.ZodNativeEnum<
    typeof CheckoutSessionCardType
> = z.nativeEnum(CheckoutSessionCardType);

/** @internal */
export const CheckoutSessionCardType$outboundSchema: z.ZodNativeEnum<
    typeof CheckoutSessionCardType
> = CheckoutSessionCardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionCardType$ {
    /** @deprecated use `CheckoutSessionCardType$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionCardType$inboundSchema;
    /** @deprecated use `CheckoutSessionCardType$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionCardType$outboundSchema;
}

/** @internal */
export const CheckoutSessionDetails$inboundSchema: z.ZodType<
    CheckoutSessionDetails,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        bin: z.nullable(z.string()).optional(),
        card_type: z.nullable(CheckoutSessionCardType$inboundSchema).optional(),
        card_country: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            card_type: "cardType",
            card_country: "cardCountry",
        });
    });

/** @internal */
export type CheckoutSessionDetails$Outbound = {
    bin?: string | null | undefined;
    card_type?: string | null | undefined;
    card_country?: string | null | undefined;
};

/** @internal */
export const CheckoutSessionDetails$outboundSchema: z.ZodType<
    CheckoutSessionDetails$Outbound,
    z.ZodTypeDef,
    CheckoutSessionDetails
> = z
    .object({
        bin: z.nullable(z.string()).optional(),
        cardType: z.nullable(CheckoutSessionCardType$outboundSchema).optional(),
        cardCountry: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            cardType: "card_type",
            cardCountry: "card_country",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionDetails$ {
    /** @deprecated use `CheckoutSessionDetails$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionDetails$inboundSchema;
    /** @deprecated use `CheckoutSessionDetails$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionDetails$outboundSchema;
    /** @deprecated use `CheckoutSessionDetails$Outbound` instead. */
    export type Outbound = CheckoutSessionDetails$Outbound;
}

/** @internal */
export const CheckoutSessionPaymentMethod$inboundSchema: z.ZodType<
    CheckoutSessionPaymentMethod,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: z.string().optional(),
    id: z.nullable(z.string()).optional(),
    method: CheckoutSessionMethod$inboundSchema.optional(),
    scheme: z.nullable(CheckoutSessionScheme$inboundSchema).optional(),
    label: z.nullable(z.string()).optional(),
    details: z.nullable(z.lazy(() => CheckoutSessionDetails$inboundSchema)).optional(),
    fingerprint: z.nullable(z.string()).optional(),
});

/** @internal */
export type CheckoutSessionPaymentMethod$Outbound = {
    type?: string | undefined;
    id?: string | null | undefined;
    method?: string | undefined;
    scheme?: string | null | undefined;
    label?: string | null | undefined;
    details?: CheckoutSessionDetails$Outbound | null | undefined;
    fingerprint?: string | null | undefined;
};

/** @internal */
export const CheckoutSessionPaymentMethod$outboundSchema: z.ZodType<
    CheckoutSessionPaymentMethod$Outbound,
    z.ZodTypeDef,
    CheckoutSessionPaymentMethod
> = z.object({
    type: z.string().optional(),
    id: z.nullable(z.string()).optional(),
    method: CheckoutSessionMethod$outboundSchema.optional(),
    scheme: z.nullable(CheckoutSessionScheme$outboundSchema).optional(),
    label: z.nullable(z.string()).optional(),
    details: z.nullable(z.lazy(() => CheckoutSessionDetails$outboundSchema)).optional(),
    fingerprint: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionPaymentMethod$ {
    /** @deprecated use `CheckoutSessionPaymentMethod$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionPaymentMethod$inboundSchema;
    /** @deprecated use `CheckoutSessionPaymentMethod$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionPaymentMethod$outboundSchema;
    /** @deprecated use `CheckoutSessionPaymentMethod$Outbound` instead. */
    export type Outbound = CheckoutSessionPaymentMethod$Outbound;
}

/** @internal */
export const CheckoutSession$inboundSchema: z.ZodType<CheckoutSession, z.ZodTypeDef, unknown> = z
    .object({
        type: CheckoutSessionType$inboundSchema.optional(),
        id: z.string().optional(),
        expires_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        cart_items: z.nullable(z.array(CartItem$inboundSchema)).optional(),
        metadata: z.nullable(z.record(z.string())).optional(),
        payment_method: z
            .nullable(z.lazy(() => CheckoutSessionPaymentMethod$inboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expires_at: "expiresAt",
            cart_items: "cartItems",
            payment_method: "paymentMethod",
        });
    });

/** @internal */
export type CheckoutSession$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    expires_at?: string | undefined;
    cart_items?: Array<CartItem$Outbound> | null | undefined;
    metadata?: { [k: string]: string } | null | undefined;
    payment_method?: CheckoutSessionPaymentMethod$Outbound | null | undefined;
};

/** @internal */
export const CheckoutSession$outboundSchema: z.ZodType<
    CheckoutSession$Outbound,
    z.ZodTypeDef,
    CheckoutSession
> = z
    .object({
        type: CheckoutSessionType$outboundSchema.optional(),
        id: z.string().optional(),
        expiresAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        cartItems: z.nullable(z.array(CartItem$outboundSchema)).optional(),
        metadata: z.nullable(z.record(z.string())).optional(),
        paymentMethod: z
            .nullable(z.lazy(() => CheckoutSessionPaymentMethod$outboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expiresAt: "expires_at",
            cartItems: "cart_items",
            paymentMethod: "payment_method",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSession$ {
    /** @deprecated use `CheckoutSession$inboundSchema` instead. */
    export const inboundSchema = CheckoutSession$inboundSchema;
    /** @deprecated use `CheckoutSession$outboundSchema` instead. */
    export const outboundSchema = CheckoutSession$outboundSchema;
    /** @deprecated use `CheckoutSession$Outbound` instead. */
    export type Outbound = CheckoutSession$Outbound;
}
