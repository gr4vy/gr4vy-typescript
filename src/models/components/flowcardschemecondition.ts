/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCardSchemeConditionName {
    CardScheme = "card_scheme",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowCardSchemeConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowCardSchemeConditionValue {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * Card scheme conditions with a name, operator, and value.
 */
export type FlowCardSchemeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCardSchemeConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowCardSchemeConditionOperator;
    /**
     * Card scheme(s) to compare the transaction to.
     */
    value: Array<FlowCardSchemeConditionValue>;
};

/** @internal */
export const FlowCardSchemeConditionName$ = z.nativeEnum(FlowCardSchemeConditionName);

/** @internal */
export const FlowCardSchemeConditionOperator$ = z.nativeEnum(FlowCardSchemeConditionOperator);

/** @internal */
export const FlowCardSchemeConditionValue$ = z.nativeEnum(FlowCardSchemeConditionValue);

/** @internal */
export namespace FlowCardSchemeCondition$ {
    export type Inbound = {
        name: FlowCardSchemeConditionName;
        operator: FlowCardSchemeConditionOperator;
        value: Array<FlowCardSchemeConditionValue>;
    };

    export const inboundSchema: z.ZodType<FlowCardSchemeCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowCardSchemeConditionName$,
            operator: FlowCardSchemeConditionOperator$,
            value: z.array(FlowCardSchemeConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowCardSchemeConditionName;
        operator: FlowCardSchemeConditionOperator;
        value: Array<FlowCardSchemeConditionValue>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCardSchemeCondition> = z
        .object({
            name: FlowCardSchemeConditionName$,
            operator: FlowCardSchemeConditionOperator$,
            value: z.array(FlowCardSchemeConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
