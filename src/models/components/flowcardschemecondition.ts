/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowCardSchemeConditionName = {
    CardScheme: "card_scheme",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowCardSchemeConditionName = ClosedEnum<typeof FlowCardSchemeConditionName>;

/**
 * The comparison to make on the `value`.
 */
export const FlowCardSchemeConditionOperator = {
    IsOneOf: "is_one_of",
    IsNotOneOf: "is_not_one_of",
} as const;
/**
 * The comparison to make on the `value`.
 */
export type FlowCardSchemeConditionOperator = ClosedEnum<typeof FlowCardSchemeConditionOperator>;

export const FlowCardSchemeConditionValue = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
export type FlowCardSchemeConditionValue = ClosedEnum<typeof FlowCardSchemeConditionValue>;

/**
 * Card scheme conditions with a name, operator, and value.
 */
export type FlowCardSchemeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCardSchemeConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowCardSchemeConditionOperator;
    /**
     * Card scheme(s) to compare the transaction to.
     */
    value: Array<FlowCardSchemeConditionValue>;
};

/** @internal */
export const FlowCardSchemeConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowCardSchemeConditionName
> = z.nativeEnum(FlowCardSchemeConditionName);

/** @internal */
export const FlowCardSchemeConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowCardSchemeConditionName
> = FlowCardSchemeConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCardSchemeConditionName$ {
    /** @deprecated use `FlowCardSchemeConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowCardSchemeConditionName$inboundSchema;
    /** @deprecated use `FlowCardSchemeConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowCardSchemeConditionName$outboundSchema;
}

/** @internal */
export const FlowCardSchemeConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowCardSchemeConditionOperator
> = z.nativeEnum(FlowCardSchemeConditionOperator);

/** @internal */
export const FlowCardSchemeConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowCardSchemeConditionOperator
> = FlowCardSchemeConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCardSchemeConditionOperator$ {
    /** @deprecated use `FlowCardSchemeConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowCardSchemeConditionOperator$inboundSchema;
    /** @deprecated use `FlowCardSchemeConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowCardSchemeConditionOperator$outboundSchema;
}

/** @internal */
export const FlowCardSchemeConditionValue$inboundSchema: z.ZodNativeEnum<
    typeof FlowCardSchemeConditionValue
> = z.nativeEnum(FlowCardSchemeConditionValue);

/** @internal */
export const FlowCardSchemeConditionValue$outboundSchema: z.ZodNativeEnum<
    typeof FlowCardSchemeConditionValue
> = FlowCardSchemeConditionValue$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCardSchemeConditionValue$ {
    /** @deprecated use `FlowCardSchemeConditionValue$inboundSchema` instead. */
    export const inboundSchema = FlowCardSchemeConditionValue$inboundSchema;
    /** @deprecated use `FlowCardSchemeConditionValue$outboundSchema` instead. */
    export const outboundSchema = FlowCardSchemeConditionValue$outboundSchema;
}

/** @internal */
export const FlowCardSchemeCondition$inboundSchema: z.ZodType<
    FlowCardSchemeCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowCardSchemeConditionName$inboundSchema,
    operator: FlowCardSchemeConditionOperator$inboundSchema,
    value: z.array(FlowCardSchemeConditionValue$inboundSchema),
});

/** @internal */
export type FlowCardSchemeCondition$Outbound = {
    name: string;
    operator: string;
    value: Array<string>;
};

/** @internal */
export const FlowCardSchemeCondition$outboundSchema: z.ZodType<
    FlowCardSchemeCondition$Outbound,
    z.ZodTypeDef,
    FlowCardSchemeCondition
> = z.object({
    name: FlowCardSchemeConditionName$outboundSchema,
    operator: FlowCardSchemeConditionOperator$outboundSchema,
    value: z.array(FlowCardSchemeConditionValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCardSchemeCondition$ {
    /** @deprecated use `FlowCardSchemeCondition$inboundSchema` instead. */
    export const inboundSchema = FlowCardSchemeCondition$inboundSchema;
    /** @deprecated use `FlowCardSchemeCondition$outboundSchema` instead. */
    export const outboundSchema = FlowCardSchemeCondition$outboundSchema;
    /** @deprecated use `FlowCardSchemeCondition$Outbound` instead. */
    export type Outbound = FlowCardSchemeCondition$Outbound;
}
