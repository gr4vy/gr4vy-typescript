/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Request body for provision a network token.
 */
export type NetworkTokenRequest = {
    /**
     * The 3 or 4 digit security code often found on the card. This often
     *
     * @remarks
     * referred to as the CVV or CVD.
     *
     * The security code can only be set if the stored payment method
     * represents a card.
     */
    securityCode?: string | null | undefined;
    /**
     * Defines if the request is merchant initiated or not.
     */
    merchantInitiated: boolean;
    /**
     * Defines if the request is a subsequent of another request or not.
     */
    isSubsequentPayment: boolean;
};

/** @internal */
export const NetworkTokenRequest$inboundSchema: z.ZodType<
    NetworkTokenRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        security_code: z.nullable(z.string()).optional(),
        merchant_initiated: z.boolean(),
        is_subsequent_payment: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            security_code: "securityCode",
            merchant_initiated: "merchantInitiated",
            is_subsequent_payment: "isSubsequentPayment",
        });
    });

/** @internal */
export type NetworkTokenRequest$Outbound = {
    security_code?: string | null | undefined;
    merchant_initiated: boolean;
    is_subsequent_payment: boolean;
};

/** @internal */
export const NetworkTokenRequest$outboundSchema: z.ZodType<
    NetworkTokenRequest$Outbound,
    z.ZodTypeDef,
    NetworkTokenRequest
> = z
    .object({
        securityCode: z.nullable(z.string()).optional(),
        merchantInitiated: z.boolean(),
        isSubsequentPayment: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            securityCode: "security_code",
            merchantInitiated: "merchant_initiated",
            isSubsequentPayment: "is_subsequent_payment",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenRequest$ {
    /** @deprecated use `NetworkTokenRequest$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenRequest$inboundSchema;
    /** @deprecated use `NetworkTokenRequest$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenRequest$outboundSchema;
    /** @deprecated use `NetworkTokenRequest$Outbound` instead. */
    export type Outbound = NetworkTokenRequest$Outbound;
}
