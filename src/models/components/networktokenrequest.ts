/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * Request body for provision a network token.
 */
export type NetworkTokenRequest = {
    /**
     * The 3 or 4 digit security code often found on the card. This often
     *
     * @remarks
     * referred to as the CVV or CVD.
     *
     * The security code can only be set if the stored payment method
     * represents a card.
     */
    securityCode?: string | undefined;
    /**
     * Defines if the request is merchant initiated or not.
     */
    merchantInitiated: boolean;
    /**
     * Defines if the request is a subsequent of another request or not.
     */
    isSubsequentPayment: boolean;
};

/** @internal */
export namespace NetworkTokenRequest$ {
    export const inboundSchema: z.ZodType<NetworkTokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            security_code: z.string().optional(),
            merchant_initiated: z.boolean(),
            is_subsequent_payment: z.boolean(),
        })
        .transform((v) => {
            return remap$(v, {
                security_code: "securityCode",
                merchant_initiated: "merchantInitiated",
                is_subsequent_payment: "isSubsequentPayment",
            });
        });

    export type Outbound = {
        security_code?: string | undefined;
        merchant_initiated: boolean;
        is_subsequent_payment: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NetworkTokenRequest> = z
        .object({
            securityCode: z.string().optional(),
            merchantInitiated: z.boolean(),
            isSubsequentPayment: z.boolean(),
        })
        .transform((v) => {
            return remap$(v, {
                securityCode: "security_code",
                merchantInitiated: "merchant_initiated",
                isSubsequentPayment: "is_subsequent_payment",
            });
        });
}
