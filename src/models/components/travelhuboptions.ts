/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TravelHubCustomData,
  TravelHubCustomData$inboundSchema,
  TravelHubCustomData$Outbound,
  TravelHubCustomData$outboundSchema,
} from "./travelhubcustomdata.js";

export type TravelhubOptions = {
  /**
   * A list of `customData` to pass to the TravelHub API.
   */
  customData?: Array<TravelHubCustomData> | null | undefined;
  /**
   * Customer company name to pass to the TravelHub API.
   */
  companyName?: string | null | undefined;
};

/** @internal */
export const TravelhubOptions$inboundSchema: z.ZodType<
  TravelhubOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  customData: z.nullable(z.array(TravelHubCustomData$inboundSchema)).optional(),
  companyName: z.nullable(z.string()).optional(),
});

/** @internal */
export type TravelhubOptions$Outbound = {
  customData?: Array<TravelHubCustomData$Outbound> | null | undefined;
  companyName?: string | null | undefined;
};

/** @internal */
export const TravelhubOptions$outboundSchema: z.ZodType<
  TravelhubOptions$Outbound,
  z.ZodTypeDef,
  TravelhubOptions
> = z.object({
  customData: z.nullable(z.array(TravelHubCustomData$outboundSchema))
    .optional(),
  companyName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TravelhubOptions$ {
  /** @deprecated use `TravelhubOptions$inboundSchema` instead. */
  export const inboundSchema = TravelhubOptions$inboundSchema;
  /** @deprecated use `TravelhubOptions$outboundSchema` instead. */
  export const outboundSchema = TravelhubOptions$outboundSchema;
  /** @deprecated use `TravelhubOptions$Outbound` instead. */
  export type Outbound = TravelhubOptions$Outbound;
}

export function travelhubOptionsToJSON(
  travelhubOptions: TravelhubOptions,
): string {
  return JSON.stringify(
    TravelhubOptions$outboundSchema.parse(travelhubOptions),
  );
}

export function travelhubOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TravelhubOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TravelhubOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TravelhubOptions' from JSON`,
  );
}
