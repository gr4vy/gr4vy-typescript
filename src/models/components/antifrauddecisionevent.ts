/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum AntiFraudDecisionEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `anti-fraud-decision`.
 */
export enum AntiFraudDecisionEventName {
    AntiFraudDecision = "anti-fraud-decision",
}

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | undefined;
    /**
     * The parsed decision response from the anti-fraud provider response.
     */
    decision?: string | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to an anti-fraud provider.
 */
export type AntiFraudDecisionEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision`.
     */
    name?: AntiFraudDecisionEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionEventContext | undefined;
};

/** @internal */
export namespace AntiFraudDecisionEventType$ {
    export const inboundSchema = z.nativeEnum(AntiFraudDecisionEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudDecisionEventName$ {
    export const inboundSchema = z.nativeEnum(AntiFraudDecisionEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AntiFraudDecisionEventContext$ {
    export const inboundSchema: z.ZodType<AntiFraudDecisionEventContext, z.ZodTypeDef, unknown> = z
        .object({
            anti_fraud_service_id: z.string().optional(),
            anti_fraud_service_name: z.string().optional(),
            anti_fraud_service_definition_id: z.string().optional(),
            anti_fraud_service_check_id: z.string().optional(),
            request: z.string().optional(),
            response: z.string().optional(),
            response_status_code: z.number().optional(),
            decision: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                anti_fraud_service_id: "antiFraudServiceId",
                anti_fraud_service_name: "antiFraudServiceName",
                anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
                anti_fraud_service_check_id: "antiFraudServiceCheckId",
                response_status_code: "responseStatusCode",
            });
        });

    export type Outbound = {
        anti_fraud_service_id?: string | undefined;
        anti_fraud_service_name?: string | undefined;
        anti_fraud_service_definition_id?: string | undefined;
        anti_fraud_service_check_id?: string | undefined;
        request?: string | undefined;
        response?: string | undefined;
        response_status_code?: number | undefined;
        decision?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudDecisionEventContext> =
        z
            .object({
                antiFraudServiceId: z.string().optional(),
                antiFraudServiceName: z.string().optional(),
                antiFraudServiceDefinitionId: z.string().optional(),
                antiFraudServiceCheckId: z.string().optional(),
                request: z.string().optional(),
                response: z.string().optional(),
                responseStatusCode: z.number().optional(),
                decision: z.string().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    antiFraudServiceId: "anti_fraud_service_id",
                    antiFraudServiceName: "anti_fraud_service_name",
                    antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
                    antiFraudServiceCheckId: "anti_fraud_service_check_id",
                    responseStatusCode: "response_status_code",
                });
            });
}

/** @internal */
export namespace AntiFraudDecisionEvent$ {
    export const inboundSchema: z.ZodType<AntiFraudDecisionEvent, z.ZodTypeDef, unknown> = z
        .object({
            type: AntiFraudDecisionEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudDecisionEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => AntiFraudDecisionEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: AntiFraudDecisionEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudDecisionEvent> = z
        .object({
            type: AntiFraudDecisionEventType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: AntiFraudDecisionEventName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => AntiFraudDecisionEventContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
