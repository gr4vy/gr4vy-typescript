/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const AntiFraudDecisionEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type AntiFraudDecisionEventType = ClosedEnum<typeof AntiFraudDecisionEventType>;

/**
 * The name of this resource. Is always `anti-fraud-decision`.
 */
export const AntiFraudDecisionEventName = {
    AntiFraudDecision: "anti-fraud-decision",
} as const;
/**
 * The name of this resource. Is always `anti-fraud-decision`.
 */
export type AntiFraudDecisionEventName = ClosedEnum<typeof AntiFraudDecisionEventName>;

/**
 * Additional context for this event.
 */
export type AntiFraudDecisionEventContext = {
    /**
     * The unique ID of the anti-fraud service used.
     */
    antiFraudServiceId?: string | undefined;
    /**
     * The name of the anti-fraud service used.
     */
    antiFraudServiceName?: string | undefined;
    /**
     * The anti-fraud service definition used.
     */
    antiFraudServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the decision.
     */
    antiFraudServiceCheckId?: string | undefined;
    /**
     * The HTTP body sent to fetch a decision.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the anti-fraud provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the anti-fraud provider.
     */
    responseStatusCode?: number | undefined;
    /**
     * The parsed decision response from the anti-fraud provider response.
     */
    decision?: string | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to an anti-fraud provider.
 */
export type AntiFraudDecisionEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: AntiFraudDecisionEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `anti-fraud-decision`.
     */
    name?: AntiFraudDecisionEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: AntiFraudDecisionEventContext | undefined;
};

/** @internal */
export const AntiFraudDecisionEventType$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionEventType
> = z.nativeEnum(AntiFraudDecisionEventType);

/** @internal */
export const AntiFraudDecisionEventType$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionEventType
> = AntiFraudDecisionEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionEventType$ {
    /** @deprecated use `AntiFraudDecisionEventType$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionEventType$inboundSchema;
    /** @deprecated use `AntiFraudDecisionEventType$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionEventType$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionEventName$inboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionEventName
> = z.nativeEnum(AntiFraudDecisionEventName);

/** @internal */
export const AntiFraudDecisionEventName$outboundSchema: z.ZodNativeEnum<
    typeof AntiFraudDecisionEventName
> = AntiFraudDecisionEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionEventName$ {
    /** @deprecated use `AntiFraudDecisionEventName$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionEventName$inboundSchema;
    /** @deprecated use `AntiFraudDecisionEventName$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionEventName$outboundSchema;
}

/** @internal */
export const AntiFraudDecisionEventContext$inboundSchema: z.ZodType<
    AntiFraudDecisionEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        anti_fraud_service_id: z.string().optional(),
        anti_fraud_service_name: z.string().optional(),
        anti_fraud_service_definition_id: z.string().optional(),
        anti_fraud_service_check_id: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().optional(),
        decision: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            anti_fraud_service_id: "antiFraudServiceId",
            anti_fraud_service_name: "antiFraudServiceName",
            anti_fraud_service_definition_id: "antiFraudServiceDefinitionId",
            anti_fraud_service_check_id: "antiFraudServiceCheckId",
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type AntiFraudDecisionEventContext$Outbound = {
    anti_fraud_service_id?: string | undefined;
    anti_fraud_service_name?: string | undefined;
    anti_fraud_service_definition_id?: string | undefined;
    anti_fraud_service_check_id?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
    decision?: string | undefined;
};

/** @internal */
export const AntiFraudDecisionEventContext$outboundSchema: z.ZodType<
    AntiFraudDecisionEventContext$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionEventContext
> = z
    .object({
        antiFraudServiceId: z.string().optional(),
        antiFraudServiceName: z.string().optional(),
        antiFraudServiceDefinitionId: z.string().optional(),
        antiFraudServiceCheckId: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().optional(),
        decision: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            antiFraudServiceId: "anti_fraud_service_id",
            antiFraudServiceName: "anti_fraud_service_name",
            antiFraudServiceDefinitionId: "anti_fraud_service_definition_id",
            antiFraudServiceCheckId: "anti_fraud_service_check_id",
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionEventContext$ {
    /** @deprecated use `AntiFraudDecisionEventContext$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionEventContext$inboundSchema;
    /** @deprecated use `AntiFraudDecisionEventContext$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionEventContext$outboundSchema;
    /** @deprecated use `AntiFraudDecisionEventContext$Outbound` instead. */
    export type Outbound = AntiFraudDecisionEventContext$Outbound;
}

/** @internal */
export const AntiFraudDecisionEvent$inboundSchema: z.ZodType<
    AntiFraudDecisionEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: AntiFraudDecisionEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => AntiFraudDecisionEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type AntiFraudDecisionEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: AntiFraudDecisionEventContext$Outbound | undefined;
};

/** @internal */
export const AntiFraudDecisionEvent$outboundSchema: z.ZodType<
    AntiFraudDecisionEvent$Outbound,
    z.ZodTypeDef,
    AntiFraudDecisionEvent
> = z
    .object({
        type: AntiFraudDecisionEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: AntiFraudDecisionEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => AntiFraudDecisionEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudDecisionEvent$ {
    /** @deprecated use `AntiFraudDecisionEvent$inboundSchema` instead. */
    export const inboundSchema = AntiFraudDecisionEvent$inboundSchema;
    /** @deprecated use `AntiFraudDecisionEvent$outboundSchema` instead. */
    export const outboundSchema = AntiFraudDecisionEvent$outboundSchema;
    /** @deprecated use `AntiFraudDecisionEvent$Outbound` instead. */
    export type Outbound = AntiFraudDecisionEvent$Outbound;
}
