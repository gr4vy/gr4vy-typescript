/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Base model with JSON encoders.
 */
export type CryptogramCreate = {
  /**
   * Defines if the request is merchant initiated or not.
   */
  merchantInitiated: boolean;
};

/** @internal */
export const CryptogramCreate$inboundSchema: z.ZodType<
  CryptogramCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchant_initiated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "merchant_initiated": "merchantInitiated",
  });
});

/** @internal */
export type CryptogramCreate$Outbound = {
  merchant_initiated: boolean;
};

/** @internal */
export const CryptogramCreate$outboundSchema: z.ZodType<
  CryptogramCreate$Outbound,
  z.ZodTypeDef,
  CryptogramCreate
> = z.object({
  merchantInitiated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    merchantInitiated: "merchant_initiated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CryptogramCreate$ {
  /** @deprecated use `CryptogramCreate$inboundSchema` instead. */
  export const inboundSchema = CryptogramCreate$inboundSchema;
  /** @deprecated use `CryptogramCreate$outboundSchema` instead. */
  export const outboundSchema = CryptogramCreate$outboundSchema;
  /** @deprecated use `CryptogramCreate$Outbound` instead. */
  export type Outbound = CryptogramCreate$Outbound;
}

export function cryptogramCreateToJSON(
  cryptogramCreate: CryptogramCreate,
): string {
  return JSON.stringify(
    CryptogramCreate$outboundSchema.parse(cryptogramCreate),
  );
}

export function cryptogramCreateFromJSON(
  jsonString: string,
): SafeParseResult<CryptogramCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CryptogramCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CryptogramCreate' from JSON`,
  );
}
