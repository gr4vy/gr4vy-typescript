/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AirlineLeg,
  AirlineLeg$inboundSchema,
  AirlineLeg$Outbound,
  AirlineLeg$outboundSchema,
} from "./airlineleg.js";
import {
  AirlinePassenger,
  AirlinePassenger$inboundSchema,
  AirlinePassenger$Outbound,
  AirlinePassenger$outboundSchema,
} from "./airlinepassenger.js";
import {
  CardType,
  CardType$inboundSchema,
  CardType$outboundSchema,
} from "./cardtype.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";
import {
  GiftCardRedemption,
  GiftCardRedemption$inboundSchema,
  GiftCardRedemption$Outbound,
  GiftCardRedemption$outboundSchema,
} from "./giftcardredemption.js";
import {
  ThreeDSecureDataV1,
  ThreeDSecureDataV1$inboundSchema,
  ThreeDSecureDataV1$Outbound,
  ThreeDSecureDataV1$outboundSchema,
} from "./threedsecuredatav1.js";
import {
  ThreeDSecureV2,
  ThreeDSecureV2$inboundSchema,
  ThreeDSecureV2$Outbound,
  ThreeDSecureV2$outboundSchema,
} from "./threedsecurev2.js";

/**
 * Always `transaction`.
 */
export const TransactionType = {
  Transaction: "transaction",
} as const;
/**
 * Always `transaction`.
 */
export type TransactionType = ClosedEnum<typeof TransactionType>;

/**
 * The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.
 */
export const TransactionTransactionStatus = {
  Processing: "processing",
  AuthorizationSucceeded: "authorization_succeeded",
  AuthorizationDeclined: "authorization_declined",
  AuthorizationFailed: "authorization_failed",
  AuthorizationVoided: "authorization_voided",
  AuthorizationVoidPending: "authorization_void_pending",
  CaptureSucceeded: "capture_succeeded",
  CapturePending: "capture_pending",
  BuyerApprovalPending: "buyer_approval_pending",
} as const;
/**
 * The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.
 */
export type TransactionTransactionStatus = ClosedEnum<
  typeof TransactionTransactionStatus
>;

/**
 * The original `intent` used when the transaction was created.
 */
export const TransactionTransactionIntent = {
  Authorize: "authorize",
  Capture: "capture",
} as const;
/**
 * The original `intent` used when the transaction was created.
 */
export type TransactionTransactionIntent = ClosedEnum<
  typeof TransactionTransactionIntent
>;

/**
 * Always `payment-method`.
 */
export const TransactionPaymentMethodType = {
  PaymentMethod: "payment-method",
} as const;
/**
 * Always `payment-method`.
 */
export type TransactionPaymentMethodType = ClosedEnum<
  typeof TransactionPaymentMethodType
>;

/**
 * Details for credit or debit card payment method.
 */
export type TransactionDetails = {
  bin?: string | undefined;
  /**
   * An enumeration.
   */
  cardType?: CardType | undefined;
  cardIssuerName?: string | undefined;
};

/**
 * The type of this payment method.
 */
export const TransactionPaymentMethodMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The type of this payment method.
 */
export type TransactionPaymentMethodMethod = ClosedEnum<
  typeof TransactionPaymentMethodMethod
>;

/**
 * The mode to use with this payment method.
 */
export const TransactionMode = {
  Card: "card",
  Redirect: "redirect",
  Applepay: "applepay",
  Googlepay: "googlepay",
  CheckoutSession: "checkout-session",
  ClickToPay: "click-to-pay",
  GiftCard: "gift-card",
} as const;
/**
 * The mode to use with this payment method.
 */
export type TransactionMode = ClosedEnum<typeof TransactionMode>;

/**
 * The scheme of the card. Only applies to card payments.
 */
export const TransactionCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme of the card. Only applies to card payments.
 */
export type TransactionCardScheme = ClosedEnum<typeof TransactionCardScheme>;

/**
 * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
 */
export const TransactionApprovalTarget = {
  NewWindow: "new_window",
  Any: "any",
} as const;
/**
 * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
 */
export type TransactionApprovalTarget = ClosedEnum<
  typeof TransactionApprovalTarget
>;

/**
 * The payment method used for this transaction.
 */
export type TransactionPaymentMethod = {
  /**
   * Always `payment-method`.
   */
  type?: TransactionPaymentMethodType | undefined;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize their payment.
   */
  approvalUrl?: string | undefined;
  /**
   * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
   */
  country?: string | undefined;
  /**
   * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
   */
  currency?: string | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: TransactionDetails | undefined;
  /**
   * The expiration date for the payment method.
   */
  expirationDate?: string | undefined;
  /**
   * The unique hash derived from the payment method identifier (e.g. card number).
   */
  fingerprint?: string | undefined;
  /**
   * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
   */
  label?: string | undefined;
  /**
   * The date and time when this card was last replaced by the account updater.
   */
  lastReplacedAt?: Date | undefined;
  /**
   * The type of this payment method.
   */
  method: TransactionPaymentMethodMethod;
  /**
   * The mode to use with this payment method.
   */
  mode?: TransactionMode | undefined;
  /**
   * The scheme of the card. Only applies to card payments.
   */
  scheme?: TransactionCardScheme | undefined;
  /**
   * The ID of the payment method.
   */
  id?: string | undefined;
  /**
   * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
   */
  approvalTarget?: TransactionApprovalTarget | undefined;
  /**
   * An external identifier that can be used to match the payment method against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
   */
  paymentAccountReference?: string | undefined;
};

/**
 * The method used for the transaction.
 */
export const TransactionMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The method used for the transaction.
 */
export type TransactionMethod = ClosedEnum<typeof TransactionMethod>;

/**
 * The name of the instrument used to process the transaction.
 */
export const TransactionInstrumentType = {
  Pan: "pan",
  CardToken: "card_token",
  Redirect: "redirect",
  RedirectToken: "redirect_token",
  Googlepay: "googlepay",
  Applepay: "applepay",
  NetworkToken: "network_token",
} as const;
/**
 * The name of the instrument used to process the transaction.
 */
export type TransactionInstrumentType = ClosedEnum<
  typeof TransactionInstrumentType
>;

/**
 * Always `payment-service`.
 */
export const TransactionPaymentServiceType = {
  PaymentService: "payment-service",
} as const;
/**
 * Always `payment-service`.
 */
export type TransactionPaymentServiceType = ClosedEnum<
  typeof TransactionPaymentServiceType
>;

/**
 * The payment method that this service handles.
 */
export const TransactionPaymentServiceMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The payment method that this service handles.
 */
export type TransactionPaymentServiceMethod = ClosedEnum<
  typeof TransactionPaymentServiceMethod
>;

/**
 * The payment service used for this transaction.
 */
export type TransactionPaymentService = {
  /**
   * Always `payment-service`.
   */
  type?: TransactionPaymentServiceType | undefined;
  /**
   * The ID for the payment-service.
   */
  id: string;
  /**
   * The definition ID of the service used to process this payment.
   */
  paymentServiceDefinitionId: string;
  /**
   * The payment method that this service handles.
   */
  method: TransactionPaymentServiceMethod;
  /**
   * The display name for the payment service.
   */
  displayName: string;
};

/**
 * Always `buyer`.
 */
export const TransactionBuyerType = {
  Buyer: "buyer",
} as const;
/**
 * Always `buyer`.
 */
export type TransactionBuyerType = ClosedEnum<typeof TransactionBuyerType>;

/**
 * The billing address for the buyer.
 */
export type TransactionBuyerAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The kind of tax ID
 */
export const TransactionTaxIdKind = {
  AeTrn: "ae.trn",
  AuAbn: "au.abn",
  ArDni: "ar.dni",
  ArCuil: "ar.cuil",
  ArCuit: "ar.cuit",
  BrCnpj: "br.cnpj",
  BrCpf: "br.cpf",
  CaBn: "ca.bn",
  CaGstHst: "ca.gst_hst",
  CaPstBc: "ca.pst_bc",
  CaPstMb: "ca.pst_mb",
  CaPstSk: "ca.pst_sk",
  CaQst: "ca.qst",
  ChVat: "ch.vat",
  ClTin: "cl.tin",
  CoItin: "co.itin",
  CoNit: "co.nit",
  EsCif: "es.cif",
  EuVat: "eu.vat",
  GbVat: "gb.vat",
  HkBr: "hk.br",
  IdNik: "id.nik",
  IdNpwp: "id.npwp",
  InGst: "in.gst",
  JpCn: "jp.cn",
  JpRn: "jp.rn",
  KrBrn: "kr.brn",
  LiUid: "li.uid",
  MxCurp: "mx.curp",
  MxRfc: "mx.rfc",
  MyFrp: "my.frp",
  MyItn: "my.itn",
  MyNric: "my.nric",
  MySst: "my.sst",
  NoVat: "no.vat",
  NzGst: "nz.gst",
  PhTin: "ph.tin",
  RuInn: "ru.inn",
  RuKpp: "ru.kpp",
  SaVat: "sa.vat",
  SgGst: "sg.gst",
  SgUen: "sg.uen",
  ThId: "th.id",
  ThVat: "th.vat",
  TwVat: "tw.vat",
  UsEin: "us.ein",
  ZaVat: "za.vat",
  BoCi: "bo.ci",
} as const;
/**
 * The kind of tax ID
 */
export type TransactionTaxIdKind = ClosedEnum<typeof TransactionTaxIdKind>;

/**
 * The tax ID information associated with the billing details.
 */
export type TransactionTaxId = {
  /**
   * The tax ID for the buyer.
   */
  value: string;
  /**
   * The kind of tax ID
   */
  kind: TransactionTaxIdKind;
};

/**
 * The billing name, address, email, and other fields for this buyer.
 */
export type TransactionBillingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: TransactionBuyerAddress | undefined;
  /**
   * The tax ID information associated with the billing details.
   */
  taxId?: TransactionTaxId | undefined;
};

/**
 * The buyer used for this transaction.
 */
export type TransactionBuyer = {
  /**
   * Always `buyer`.
   */
  type?: TransactionBuyerType | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | undefined;
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * The billing name, address, email, and other fields for this buyer.
   */
  billingDetails?: TransactionBillingDetails | undefined;
  /**
   * The buyer account number.
   */
  accountNumber?: string | undefined;
};

/**
 * The billing address for the buyer.
 */
export type TransactionAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * Always `shipping-details`.
 */
export const TransactionShippingDetailsType = {
  ShippingDetails: "shipping-details",
} as const;
/**
 * Always `shipping-details`.
 */
export type TransactionShippingDetailsType = ClosedEnum<
  typeof TransactionShippingDetailsType
>;

/**
 * The shipping details associated with the transaction.
 */
export type TransactionShippingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: TransactionAddress | undefined;
  /**
   * The ID for the shipping details.
   */
  id?: string | undefined;
  /**
   * The ID for the buyer.
   */
  buyerId?: string | undefined;
  /**
   * Always `shipping-details`.
   */
  type?: TransactionShippingDetailsType | undefined;
};

/**
 * Always `gift-card-service`.
 */
export const TransactionGiftCardServiceType = {
  GiftCardService: "gift-card-service",
} as const;
/**
 * Always `gift-card-service`.
 */
export type TransactionGiftCardServiceType = ClosedEnum<
  typeof TransactionGiftCardServiceType
>;

/**
 * The ID of the definition for this service.
 */
export const TransactionGiftCardServiceProvider = {
  MockGiftCard: "mock-gift-card",
  QwikcilverGiftCard: "qwikcilver-gift-card",
} as const;
/**
 * The ID of the definition for this service.
 */
export type TransactionGiftCardServiceProvider = ClosedEnum<
  typeof TransactionGiftCardServiceProvider
>;

/**
 * The gift card service used for this transaction.
 */
export type TransactionGiftCardService = {
  /**
   * Always `gift-card-service`.
   */
  type?: TransactionGiftCardServiceType | undefined;
  /**
   * The ID for the gift card service.
   */
  id: string;
  /**
   * The ID of the definition for this service.
   */
  giftCardServiceDefinitionId: TransactionGiftCardServiceProvider;
  /**
   * The display name for the gift card service.
   */
  displayName: string;
};

/**
 * The delivery method of the ticket.
 */
export const TransactionTicketDeliveryMethod = {
  Electronic: "electronic",
  Other: "other",
} as const;
/**
 * The delivery method of the ticket.
 */
export type TransactionTicketDeliveryMethod = ClosedEnum<
  typeof TransactionTicketDeliveryMethod
>;

/**
 * Contains information about an airline travel, if applicable.
 */
export type TransactionAirline = {
  /**
   * The unique identifier of the reservation in the global distribution system.
   */
  bookingCode?: string | undefined;
  /**
   * The address of the place/agency that issued the ticket.
   */
  issuedAddress?: string | undefined;
  /**
   * The date that the ticket was last issued in the airline reservation system.
   */
  issuedAt?: Date | undefined;
  /**
   * For airline aggregators, two-character IATA code of the airline issuing the ticket.
   */
  issuingCarrierCode?: string | undefined;
  /**
   * An array of separate trip segments. Each leg contains detailed itinerary information.
   */
  legs?: Array<AirlineLeg> | undefined;
  /**
   * The Passenger Name Record (PNR) in the airline reservation system.
   */
  passengerNameRecord?: string | undefined;
  /**
   * An array of the travelling passengers.
   */
  passengers?: Array<AirlinePassenger> | undefined;
  /**
   * The name of the reservation system.
   */
  reservationSystem?: string | undefined;
  /**
   * Indicates whether the ticket is restricted (refundable).
   */
  restrictedTicket?: boolean | undefined;
  /**
   * The delivery method of the ticket.
   */
  ticketDeliveryMethod?: TransactionTicketDeliveryMethod | undefined;
  /**
   * The airline's unique ticket number.
   */
  ticketNumber?: string | undefined;
  /**
   * The IATA travel agency code.
   */
  travelAgencyCode?: string | undefined;
  /**
   * The reference number of the invoice that was issued by the travel agency.
   */
  travelAgencyInvoiceNumber?: string | undefined;
  /**
   * The name of the travel agency.
   */
  travelAgencyName?: string | undefined;
  /**
   * The name of the travel agency plan.
   */
  travelAgencyPlanName?: string | undefined;
};

/**
 * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
 */
export const AVSResponseCode = {
  Match: "match",
  NoMatch: "no_match",
  PartialMatchAddress: "partial_match_address",
  PartialMatchPostcode: "partial_match_postcode",
  Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
 */
export type AVSResponseCode = ClosedEnum<typeof AVSResponseCode>;

/**
 * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
 */
export const CVVResponseCode = {
  Match: "match",
  NoMatch: "no_match",
  Unavailable: "unavailable",
  NotProvided: "not_provided",
} as const;
/**
 * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
 */
export type CVVResponseCode = ClosedEnum<typeof CVVResponseCode>;

/**
 * The source of the transaction.
 */
export const TransactionTransactionPaymentSource = {
  Ecommerce: "ecommerce",
  Moto: "moto",
  Recurring: "recurring",
  Installment: "installment",
  CardOnFile: "card_on_file",
} as const;
/**
 * The source of the transaction.
 */
export type TransactionTransactionPaymentSource = ClosedEnum<
  typeof TransactionTransactionPaymentSource
>;

/**
 * The statement descriptor is the text to be shown on the buyer's statements.
 */
export type StatementDescriptor = {
  /**
   * Reflects your doing business as (DBA) name.
   */
  name?: string | undefined;
  /**
   * A short description about the purchase.
   */
  description?: string | undefined;
  /**
   * The merchant's city to be displayed in a statement descriptor.
   */
  city?: string | undefined;
  /**
   * The 2-letter ISO country code of the merchant to be displayed in a statement descriptor.
   */
  country?: string | undefined;
  /**
   * The value in the phone number field of a customer's statement which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The merchant's URL to be displayed in a statement descriptor.
   */
  url?: string | undefined;
};

/**
 * The status of the 3DS challenge for this transaction.
 */
export const ThreeDSecureStatus = {
  SetupError: "setup_error",
  Error: "error",
  Declined: "declined",
  Cancelled: "cancelled",
  Complete: "complete",
} as const;
/**
 * The status of the 3DS challenge for this transaction.
 */
export type ThreeDSecureStatus = ClosedEnum<typeof ThreeDSecureStatus>;

/**
 * The method used for 3DS authentication for this transaction.
 */
export const ThreeDSecureMethod = {
  Challenge: "challenge",
  Frictionless: "frictionless",
} as const;
/**
 * The method used for 3DS authentication for this transaction.
 */
export type ThreeDSecureMethod = ClosedEnum<typeof ThreeDSecureMethod>;

/**
 * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
 */
export type ResponseData = ThreeDSecureDataV1 | ThreeDSecureV2;

/**
 * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
 */
export type ErrorData = {
  /**
   * The error code.
   */
  code?: string | undefined;
  /**
   * The error description.
   */
  description?: string | undefined;
  /**
   * Detail about the 3DS error.
   */
  detail?: string | undefined;
  /**
   * Code indicating the 3-D Secure component that identified the error.
   */
  component?: string | undefined;
};

/**
 * The 3-D Secure data that was sent to the payment service for the transaction.
 */
export type ThreeDSecure = {
  /**
   * The version of 3DS used for this transaction.
   */
  version?: string | undefined;
  /**
   * The status of the 3DS challenge for this transaction.
   */
  status?: ThreeDSecureStatus | undefined;
  /**
   * The method used for 3DS authentication for this transaction.
   */
  method?: ThreeDSecureMethod | undefined;
  /**
   * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
   */
  responseData?: ThreeDSecureDataV1 | ThreeDSecureV2 | undefined;
  /**
   * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
   */
  errorData?: ErrorData | undefined;
};

/**
 * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
 */
export const TransactionIntentOutcome = {
  Pending: "pending",
  Succeeded: "succeeded",
  Failed: "failed",
} as const;
/**
 * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
 */
export type TransactionIntentOutcome = ClosedEnum<
  typeof TransactionIntentOutcome
>;

/**
 * The recipient of the fund's address.
 */
export type TransactionRecipientAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The recipient of any account to account funding. For use with AFTs.
 */
export type Recipient = {
  /**
   * The first name of the recipient.
   */
  firstName: string;
  /**
   * The last name of the recipient.
   */
  lastName: string;
  /**
   * The recipient of the fund's address.
   */
  address?: TransactionRecipientAddress | undefined;
  /**
   * The account number of the recipient. Depending on the type of funds transfer, this could be a wallet ID, bank accoutn number, or email address.
   */
  accountNumber?: string | undefined;
  /**
   * The date of birth of the recipient.
   */
  dateOfBirth?: RFCDate | undefined;
};

/**
 * A full transaction resource.
 */
export type Transaction = {
  /**
   * Always `transaction`.
   */
  type?: TransactionType | undefined;
  /**
   * The ID for the transaction.
   */
  id: string;
  /**
   * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
   */
  reconciliationId: string;
  /**
   * The ID of the merchant account this transaction belongs to.
   */
  merchantAccountId: string;
  /**
   * The currency code for this transaction.
   */
  currency: string;
  /**
   * The total amount for this transaction across all funding sources including gift cards.
   */
  amount: number;
  /**
   * The status of the transaction for the `payment_method`. The status may change over time as asynchronous processing events occur.
   */
  status: TransactionTransactionStatus;
  /**
   * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
   */
  authorizedAmount: number;
  /**
   * The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
   */
  capturedAmount: number;
  /**
   * The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
   */
  refundedAmount: number;
  /**
   * The currency of this transaction's settlement in ISO 4217 three-letter code format.
   */
  settledCurrency?: string | undefined;
  /**
   * The net amount settled for this transaction.
   */
  settledAmount: number;
  /**
   * Indicates whether this transaction has been settled.
   */
  settled: boolean;
  /**
   * The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
   */
  country?: string | undefined;
  /**
   * An external identifier that can be used to match the transaction against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The original `intent` used when the transaction was created.
   */
  intent: TransactionTransactionIntent;
  /**
   * The payment method used for this transaction.
   */
  paymentMethod?: TransactionPaymentMethod | undefined;
  /**
   * The method used for the transaction.
   */
  method?: TransactionMethod | undefined;
  /**
   * The name of the instrument used to process the transaction.
   */
  instrumentType?: TransactionInstrumentType | undefined;
  /**
   * The standardized error code set by Gr4vy.
   */
  errorCode?: string | undefined;
  /**
   * The payment service used for this transaction.
   */
  paymentService?: TransactionPaymentService | undefined;
  /**
   * Whether a manual anti fraud review is pending with an anti fraud service.
   */
  pendingReview?: boolean | undefined;
  /**
   * The buyer used for this transaction.
   */
  buyer?: TransactionBuyer | undefined;
  /**
   * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseCode?: string | undefined;
  /**
   *  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseDescription?: string | undefined;
  /**
   * The shipping details associated with the transaction.
   */
  shippingDetails?: TransactionShippingDetails | undefined;
  /**
   * The identifier for the checkout session this transaction is associated with.
   */
  checkoutSessionId?: string | undefined;
  /**
   * The gift cards redeemed for this transaction.
   */
  giftCardRedemptions: Array<GiftCardRedemption>;
  /**
   * The gift card service used for this transaction.
   */
  giftCardService?: TransactionGiftCardService | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
  /**
   * Contains information about an airline travel, if applicable.
   */
  airline?: TransactionAirline | undefined;
  /**
   * This is the response description received from the processor.
   */
  authResponseCode?: string | undefined;
  /**
   * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
   */
  avsResponseCode?: AVSResponseCode | undefined;
  /**
   * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
   */
  cvvResponseCode?: CVVResponseCode | undefined;
  /**
   * The source of the transaction.
   */
  paymentSource: TransactionTransactionPaymentSource;
  /**
   * Indicates whether the transaction was initiated by the merchant or the customer.
   */
  merchantInitiated: boolean;
  /**
   * Indicates whether the transaction represents a subsequent payment or an initial one.
   */
  isSubsequentPayment: boolean;
  /**
   * An array of cart items that represents the line items of a transaction.
   */
  cartItems?: Array<CartItem> | undefined;
  /**
   * The statement descriptor is the text to be shown on the buyer's statements.
   */
  statementDescriptor?: StatementDescriptor | undefined;
  /**
   * An identifier for the transaction used by the scheme itself, when available.
   */
  schemeTransactionId?: string | undefined;
  /**
   * The 3-D Secure data that was sent to the payment service for the transaction.
   */
  threeDSecure?: ThreeDSecure | undefined;
  /**
   * The payment service's unique ID for the transaction.
   */
  paymentServiceTransactionId?: string | undefined;
  /**
   * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
   */
  additionalIdentifiers?: { [k: string]: string } | undefined;
  /**
   * Additional information about the transaction stored as key-value pairs.
   */
  customData?: { [k: string]: string } | undefined;
  /**
   * The date this transaction was authorized at.
   */
  authorizedAt?: Date | undefined;
  /**
   * The date this transaction was captured at.
   */
  capturedAt?: Date | undefined;
  /**
   * The date this transaction was voided at.
   */
  voidedAt?: Date | undefined;
  /**
   * The date this transaction's approval URL will expire at.
   */
  approvalExpiresAt?: Date | undefined;
  /**
   * The date this transaction's approval timed out at.
   */
  buyerApprovalTimedoutAt?: Date | undefined;
  /**
   * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
   */
  intentOutcome: TransactionIntentOutcome;
  /**
   * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
   */
  multiTender: boolean;
  /**
   * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
   */
  accountFundingTransaction: boolean;
  /**
   * The recipient of any account to account funding. For use with AFTs.
   */
  recipient?: Recipient | undefined;
};

/** @internal */
export const TransactionType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionType
> = z.nativeEnum(TransactionType);

/** @internal */
export const TransactionType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionType
> = TransactionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionType$ {
  /** @deprecated use `TransactionType$inboundSchema` instead. */
  export const inboundSchema = TransactionType$inboundSchema;
  /** @deprecated use `TransactionType$outboundSchema` instead. */
  export const outboundSchema = TransactionType$outboundSchema;
}

/** @internal */
export const TransactionTransactionStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionTransactionStatus
> = z.nativeEnum(TransactionTransactionStatus);

/** @internal */
export const TransactionTransactionStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionTransactionStatus
> = TransactionTransactionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionTransactionStatus$ {
  /** @deprecated use `TransactionTransactionStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionTransactionStatus$inboundSchema;
  /** @deprecated use `TransactionTransactionStatus$outboundSchema` instead. */
  export const outboundSchema = TransactionTransactionStatus$outboundSchema;
}

/** @internal */
export const TransactionTransactionIntent$inboundSchema: z.ZodNativeEnum<
  typeof TransactionTransactionIntent
> = z.nativeEnum(TransactionTransactionIntent);

/** @internal */
export const TransactionTransactionIntent$outboundSchema: z.ZodNativeEnum<
  typeof TransactionTransactionIntent
> = TransactionTransactionIntent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionTransactionIntent$ {
  /** @deprecated use `TransactionTransactionIntent$inboundSchema` instead. */
  export const inboundSchema = TransactionTransactionIntent$inboundSchema;
  /** @deprecated use `TransactionTransactionIntent$outboundSchema` instead. */
  export const outboundSchema = TransactionTransactionIntent$outboundSchema;
}

/** @internal */
export const TransactionPaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentMethodType
> = z.nativeEnum(TransactionPaymentMethodType);

/** @internal */
export const TransactionPaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentMethodType
> = TransactionPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentMethodType$ {
  /** @deprecated use `TransactionPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentMethodType$inboundSchema;
  /** @deprecated use `TransactionPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentMethodType$outboundSchema;
}

/** @internal */
export const TransactionDetails$inboundSchema: z.ZodType<
  TransactionDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.string().optional(),
  card_type: CardType$inboundSchema.optional(),
  card_issuer_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "card_type": "cardType",
    "card_issuer_name": "cardIssuerName",
  });
});

/** @internal */
export type TransactionDetails$Outbound = {
  bin?: string | undefined;
  card_type?: string | undefined;
  card_issuer_name?: string | undefined;
};

/** @internal */
export const TransactionDetails$outboundSchema: z.ZodType<
  TransactionDetails$Outbound,
  z.ZodTypeDef,
  TransactionDetails
> = z.object({
  bin: z.string().optional(),
  cardType: CardType$outboundSchema.optional(),
  cardIssuerName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cardType: "card_type",
    cardIssuerName: "card_issuer_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionDetails$ {
  /** @deprecated use `TransactionDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionDetails$inboundSchema;
  /** @deprecated use `TransactionDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionDetails$outboundSchema;
  /** @deprecated use `TransactionDetails$Outbound` instead. */
  export type Outbound = TransactionDetails$Outbound;
}

export function transactionDetailsToJSON(
  transactionDetails: TransactionDetails,
): string {
  return JSON.stringify(
    TransactionDetails$outboundSchema.parse(transactionDetails),
  );
}

export function transactionDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionDetails' from JSON`,
  );
}

/** @internal */
export const TransactionPaymentMethodMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentMethodMethod
> = z.nativeEnum(TransactionPaymentMethodMethod);

/** @internal */
export const TransactionPaymentMethodMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentMethodMethod
> = TransactionPaymentMethodMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentMethodMethod$ {
  /** @deprecated use `TransactionPaymentMethodMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentMethodMethod$inboundSchema;
  /** @deprecated use `TransactionPaymentMethodMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentMethodMethod$outboundSchema;
}

/** @internal */
export const TransactionMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionMode
> = z.nativeEnum(TransactionMode);

/** @internal */
export const TransactionMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionMode
> = TransactionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionMode$ {
  /** @deprecated use `TransactionMode$inboundSchema` instead. */
  export const inboundSchema = TransactionMode$inboundSchema;
  /** @deprecated use `TransactionMode$outboundSchema` instead. */
  export const outboundSchema = TransactionMode$outboundSchema;
}

/** @internal */
export const TransactionCardScheme$inboundSchema: z.ZodNativeEnum<
  typeof TransactionCardScheme
> = z.nativeEnum(TransactionCardScheme);

/** @internal */
export const TransactionCardScheme$outboundSchema: z.ZodNativeEnum<
  typeof TransactionCardScheme
> = TransactionCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCardScheme$ {
  /** @deprecated use `TransactionCardScheme$inboundSchema` instead. */
  export const inboundSchema = TransactionCardScheme$inboundSchema;
  /** @deprecated use `TransactionCardScheme$outboundSchema` instead. */
  export const outboundSchema = TransactionCardScheme$outboundSchema;
}

/** @internal */
export const TransactionApprovalTarget$inboundSchema: z.ZodNativeEnum<
  typeof TransactionApprovalTarget
> = z.nativeEnum(TransactionApprovalTarget);

/** @internal */
export const TransactionApprovalTarget$outboundSchema: z.ZodNativeEnum<
  typeof TransactionApprovalTarget
> = TransactionApprovalTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionApprovalTarget$ {
  /** @deprecated use `TransactionApprovalTarget$inboundSchema` instead. */
  export const inboundSchema = TransactionApprovalTarget$inboundSchema;
  /** @deprecated use `TransactionApprovalTarget$outboundSchema` instead. */
  export const outboundSchema = TransactionApprovalTarget$outboundSchema;
}

/** @internal */
export const TransactionPaymentMethod$inboundSchema: z.ZodType<
  TransactionPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionPaymentMethodType$inboundSchema.default("payment-method"),
  approval_url: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => TransactionDetails$inboundSchema).optional(),
  expiration_date: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  last_replaced_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  method: TransactionPaymentMethodMethod$inboundSchema,
  mode: TransactionMode$inboundSchema.optional(),
  scheme: TransactionCardScheme$inboundSchema.optional(),
  id: z.string().optional(),
  approval_target: TransactionApprovalTarget$inboundSchema.optional(),
  external_identifier: z.string().optional(),
  payment_account_reference: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "approval_url": "approvalUrl",
    "expiration_date": "expirationDate",
    "last_replaced_at": "lastReplacedAt",
    "approval_target": "approvalTarget",
    "external_identifier": "externalIdentifier",
    "payment_account_reference": "paymentAccountReference",
  });
});

/** @internal */
export type TransactionPaymentMethod$Outbound = {
  type: string;
  approval_url?: string | undefined;
  country?: string | undefined;
  currency?: string | undefined;
  details?: TransactionDetails$Outbound | undefined;
  expiration_date?: string | undefined;
  fingerprint?: string | undefined;
  label?: string | undefined;
  last_replaced_at?: string | undefined;
  method: string;
  mode?: string | undefined;
  scheme?: string | undefined;
  id?: string | undefined;
  approval_target?: string | undefined;
  external_identifier?: string | undefined;
  payment_account_reference?: string | undefined;
};

/** @internal */
export const TransactionPaymentMethod$outboundSchema: z.ZodType<
  TransactionPaymentMethod$Outbound,
  z.ZodTypeDef,
  TransactionPaymentMethod
> = z.object({
  type: TransactionPaymentMethodType$outboundSchema.default("payment-method"),
  approvalUrl: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => TransactionDetails$outboundSchema).optional(),
  expirationDate: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  lastReplacedAt: z.date().transform(v => v.toISOString()).optional(),
  method: TransactionPaymentMethodMethod$outboundSchema,
  mode: TransactionMode$outboundSchema.optional(),
  scheme: TransactionCardScheme$outboundSchema.optional(),
  id: z.string().optional(),
  approvalTarget: TransactionApprovalTarget$outboundSchema.optional(),
  externalIdentifier: z.string().optional(),
  paymentAccountReference: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    approvalUrl: "approval_url",
    expirationDate: "expiration_date",
    lastReplacedAt: "last_replaced_at",
    approvalTarget: "approval_target",
    externalIdentifier: "external_identifier",
    paymentAccountReference: "payment_account_reference",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentMethod$ {
  /** @deprecated use `TransactionPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentMethod$outboundSchema;
  /** @deprecated use `TransactionPaymentMethod$Outbound` instead. */
  export type Outbound = TransactionPaymentMethod$Outbound;
}

export function transactionPaymentMethodToJSON(
  transactionPaymentMethod: TransactionPaymentMethod,
): string {
  return JSON.stringify(
    TransactionPaymentMethod$outboundSchema.parse(transactionPaymentMethod),
  );
}

export function transactionPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionPaymentMethod' from JSON`,
  );
}

/** @internal */
export const TransactionMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionMethod
> = z.nativeEnum(TransactionMethod);

/** @internal */
export const TransactionMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionMethod
> = TransactionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionMethod$ {
  /** @deprecated use `TransactionMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionMethod$inboundSchema;
  /** @deprecated use `TransactionMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionMethod$outboundSchema;
}

/** @internal */
export const TransactionInstrumentType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionInstrumentType
> = z.nativeEnum(TransactionInstrumentType);

/** @internal */
export const TransactionInstrumentType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionInstrumentType
> = TransactionInstrumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionInstrumentType$ {
  /** @deprecated use `TransactionInstrumentType$inboundSchema` instead. */
  export const inboundSchema = TransactionInstrumentType$inboundSchema;
  /** @deprecated use `TransactionInstrumentType$outboundSchema` instead. */
  export const outboundSchema = TransactionInstrumentType$outboundSchema;
}

/** @internal */
export const TransactionPaymentServiceType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentServiceType
> = z.nativeEnum(TransactionPaymentServiceType);

/** @internal */
export const TransactionPaymentServiceType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentServiceType
> = TransactionPaymentServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentServiceType$ {
  /** @deprecated use `TransactionPaymentServiceType$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentServiceType$inboundSchema;
  /** @deprecated use `TransactionPaymentServiceType$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentServiceType$outboundSchema;
}

/** @internal */
export const TransactionPaymentServiceMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentServiceMethod
> = z.nativeEnum(TransactionPaymentServiceMethod);

/** @internal */
export const TransactionPaymentServiceMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionPaymentServiceMethod
> = TransactionPaymentServiceMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentServiceMethod$ {
  /** @deprecated use `TransactionPaymentServiceMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentServiceMethod$inboundSchema;
  /** @deprecated use `TransactionPaymentServiceMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentServiceMethod$outboundSchema;
}

/** @internal */
export const TransactionPaymentService$inboundSchema: z.ZodType<
  TransactionPaymentService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionPaymentServiceType$inboundSchema.default("payment-service"),
  id: z.string(),
  payment_service_definition_id: z.string(),
  method: TransactionPaymentServiceMethod$inboundSchema,
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_service_definition_id": "paymentServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type TransactionPaymentService$Outbound = {
  type: string;
  id: string;
  payment_service_definition_id: string;
  method: string;
  display_name: string;
};

/** @internal */
export const TransactionPaymentService$outboundSchema: z.ZodType<
  TransactionPaymentService$Outbound,
  z.ZodTypeDef,
  TransactionPaymentService
> = z.object({
  type: TransactionPaymentServiceType$outboundSchema.default("payment-service"),
  id: z.string(),
  paymentServiceDefinitionId: z.string(),
  method: TransactionPaymentServiceMethod$outboundSchema,
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentServiceDefinitionId: "payment_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentService$ {
  /** @deprecated use `TransactionPaymentService$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentService$inboundSchema;
  /** @deprecated use `TransactionPaymentService$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentService$outboundSchema;
  /** @deprecated use `TransactionPaymentService$Outbound` instead. */
  export type Outbound = TransactionPaymentService$Outbound;
}

export function transactionPaymentServiceToJSON(
  transactionPaymentService: TransactionPaymentService,
): string {
  return JSON.stringify(
    TransactionPaymentService$outboundSchema.parse(transactionPaymentService),
  );
}

export function transactionPaymentServiceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionPaymentService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionPaymentService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionPaymentService' from JSON`,
  );
}

/** @internal */
export const TransactionBuyerType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionBuyerType
> = z.nativeEnum(TransactionBuyerType);

/** @internal */
export const TransactionBuyerType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionBuyerType
> = TransactionBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionBuyerType$ {
  /** @deprecated use `TransactionBuyerType$inboundSchema` instead. */
  export const inboundSchema = TransactionBuyerType$inboundSchema;
  /** @deprecated use `TransactionBuyerType$outboundSchema` instead. */
  export const outboundSchema = TransactionBuyerType$outboundSchema;
}

/** @internal */
export const TransactionBuyerAddress$inboundSchema: z.ZodType<
  TransactionBuyerAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type TransactionBuyerAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const TransactionBuyerAddress$outboundSchema: z.ZodType<
  TransactionBuyerAddress$Outbound,
  z.ZodTypeDef,
  TransactionBuyerAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionBuyerAddress$ {
  /** @deprecated use `TransactionBuyerAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionBuyerAddress$inboundSchema;
  /** @deprecated use `TransactionBuyerAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionBuyerAddress$outboundSchema;
  /** @deprecated use `TransactionBuyerAddress$Outbound` instead. */
  export type Outbound = TransactionBuyerAddress$Outbound;
}

export function transactionBuyerAddressToJSON(
  transactionBuyerAddress: TransactionBuyerAddress,
): string {
  return JSON.stringify(
    TransactionBuyerAddress$outboundSchema.parse(transactionBuyerAddress),
  );
}

export function transactionBuyerAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionBuyerAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionBuyerAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionBuyerAddress' from JSON`,
  );
}

/** @internal */
export const TransactionTaxIdKind$inboundSchema: z.ZodNativeEnum<
  typeof TransactionTaxIdKind
> = z.nativeEnum(TransactionTaxIdKind);

/** @internal */
export const TransactionTaxIdKind$outboundSchema: z.ZodNativeEnum<
  typeof TransactionTaxIdKind
> = TransactionTaxIdKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionTaxIdKind$ {
  /** @deprecated use `TransactionTaxIdKind$inboundSchema` instead. */
  export const inboundSchema = TransactionTaxIdKind$inboundSchema;
  /** @deprecated use `TransactionTaxIdKind$outboundSchema` instead. */
  export const outboundSchema = TransactionTaxIdKind$outboundSchema;
}

/** @internal */
export const TransactionTaxId$inboundSchema: z.ZodType<
  TransactionTaxId,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  kind: TransactionTaxIdKind$inboundSchema,
});

/** @internal */
export type TransactionTaxId$Outbound = {
  value: string;
  kind: string;
};

/** @internal */
export const TransactionTaxId$outboundSchema: z.ZodType<
  TransactionTaxId$Outbound,
  z.ZodTypeDef,
  TransactionTaxId
> = z.object({
  value: z.string(),
  kind: TransactionTaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionTaxId$ {
  /** @deprecated use `TransactionTaxId$inboundSchema` instead. */
  export const inboundSchema = TransactionTaxId$inboundSchema;
  /** @deprecated use `TransactionTaxId$outboundSchema` instead. */
  export const outboundSchema = TransactionTaxId$outboundSchema;
  /** @deprecated use `TransactionTaxId$Outbound` instead. */
  export type Outbound = TransactionTaxId$Outbound;
}

export function transactionTaxIdToJSON(
  transactionTaxId: TransactionTaxId,
): string {
  return JSON.stringify(
    TransactionTaxId$outboundSchema.parse(transactionTaxId),
  );
}

export function transactionTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<TransactionTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionTaxId' from JSON`,
  );
}

/** @internal */
export const TransactionBillingDetails$inboundSchema: z.ZodType<
  TransactionBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => TransactionBuyerAddress$inboundSchema).optional(),
  tax_id: z.lazy(() => TransactionTaxId$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "tax_id": "taxId",
  });
});

/** @internal */
export type TransactionBillingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: TransactionBuyerAddress$Outbound | undefined;
  tax_id?: TransactionTaxId$Outbound | undefined;
};

/** @internal */
export const TransactionBillingDetails$outboundSchema: z.ZodType<
  TransactionBillingDetails$Outbound,
  z.ZodTypeDef,
  TransactionBillingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => TransactionBuyerAddress$outboundSchema).optional(),
  taxId: z.lazy(() => TransactionTaxId$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionBillingDetails$ {
  /** @deprecated use `TransactionBillingDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionBillingDetails$inboundSchema;
  /** @deprecated use `TransactionBillingDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionBillingDetails$outboundSchema;
  /** @deprecated use `TransactionBillingDetails$Outbound` instead. */
  export type Outbound = TransactionBillingDetails$Outbound;
}

export function transactionBillingDetailsToJSON(
  transactionBillingDetails: TransactionBillingDetails,
): string {
  return JSON.stringify(
    TransactionBillingDetails$outboundSchema.parse(transactionBillingDetails),
  );
}

export function transactionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionBillingDetails' from JSON`,
  );
}

/** @internal */
export const TransactionBuyer$inboundSchema: z.ZodType<
  TransactionBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionBuyerType$inboundSchema.default("buyer"),
  id: z.string().optional(),
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: z.lazy(() => TransactionBillingDetails$inboundSchema)
    .optional(),
  account_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
    "account_number": "accountNumber",
  });
});

/** @internal */
export type TransactionBuyer$Outbound = {
  type: string;
  id?: string | undefined;
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: TransactionBillingDetails$Outbound | undefined;
  account_number?: string | undefined;
};

/** @internal */
export const TransactionBuyer$outboundSchema: z.ZodType<
  TransactionBuyer$Outbound,
  z.ZodTypeDef,
  TransactionBuyer
> = z.object({
  type: TransactionBuyerType$outboundSchema.default("buyer"),
  id: z.string().optional(),
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: z.lazy(() => TransactionBillingDetails$outboundSchema)
    .optional(),
  accountNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    accountNumber: "account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionBuyer$ {
  /** @deprecated use `TransactionBuyer$inboundSchema` instead. */
  export const inboundSchema = TransactionBuyer$inboundSchema;
  /** @deprecated use `TransactionBuyer$outboundSchema` instead. */
  export const outboundSchema = TransactionBuyer$outboundSchema;
  /** @deprecated use `TransactionBuyer$Outbound` instead. */
  export type Outbound = TransactionBuyer$Outbound;
}

export function transactionBuyerToJSON(
  transactionBuyer: TransactionBuyer,
): string {
  return JSON.stringify(
    TransactionBuyer$outboundSchema.parse(transactionBuyer),
  );
}

export function transactionBuyerFromJSON(
  jsonString: string,
): SafeParseResult<TransactionBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionBuyer' from JSON`,
  );
}

/** @internal */
export const TransactionAddress$inboundSchema: z.ZodType<
  TransactionAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type TransactionAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const TransactionAddress$outboundSchema: z.ZodType<
  TransactionAddress$Outbound,
  z.ZodTypeDef,
  TransactionAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionAddress$ {
  /** @deprecated use `TransactionAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionAddress$inboundSchema;
  /** @deprecated use `TransactionAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionAddress$outboundSchema;
  /** @deprecated use `TransactionAddress$Outbound` instead. */
  export type Outbound = TransactionAddress$Outbound;
}

export function transactionAddressToJSON(
  transactionAddress: TransactionAddress,
): string {
  return JSON.stringify(
    TransactionAddress$outboundSchema.parse(transactionAddress),
  );
}

export function transactionAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionAddress' from JSON`,
  );
}

/** @internal */
export const TransactionShippingDetailsType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionShippingDetailsType
> = z.nativeEnum(TransactionShippingDetailsType);

/** @internal */
export const TransactionShippingDetailsType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionShippingDetailsType
> = TransactionShippingDetailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionShippingDetailsType$ {
  /** @deprecated use `TransactionShippingDetailsType$inboundSchema` instead. */
  export const inboundSchema = TransactionShippingDetailsType$inboundSchema;
  /** @deprecated use `TransactionShippingDetailsType$outboundSchema` instead. */
  export const outboundSchema = TransactionShippingDetailsType$outboundSchema;
}

/** @internal */
export const TransactionShippingDetails$inboundSchema: z.ZodType<
  TransactionShippingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => TransactionAddress$inboundSchema).optional(),
  id: z.string().optional(),
  buyer_id: z.string().optional(),
  type: TransactionShippingDetailsType$inboundSchema.default(
    "shipping-details",
  ),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "buyer_id": "buyerId",
  });
});

/** @internal */
export type TransactionShippingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: TransactionAddress$Outbound | undefined;
  id?: string | undefined;
  buyer_id?: string | undefined;
  type: string;
};

/** @internal */
export const TransactionShippingDetails$outboundSchema: z.ZodType<
  TransactionShippingDetails$Outbound,
  z.ZodTypeDef,
  TransactionShippingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => TransactionAddress$outboundSchema).optional(),
  id: z.string().optional(),
  buyerId: z.string().optional(),
  type: TransactionShippingDetailsType$outboundSchema.default(
    "shipping-details",
  ),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    buyerId: "buyer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionShippingDetails$ {
  /** @deprecated use `TransactionShippingDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionShippingDetails$inboundSchema;
  /** @deprecated use `TransactionShippingDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionShippingDetails$outboundSchema;
  /** @deprecated use `TransactionShippingDetails$Outbound` instead. */
  export type Outbound = TransactionShippingDetails$Outbound;
}

export function transactionShippingDetailsToJSON(
  transactionShippingDetails: TransactionShippingDetails,
): string {
  return JSON.stringify(
    TransactionShippingDetails$outboundSchema.parse(transactionShippingDetails),
  );
}

export function transactionShippingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionShippingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionShippingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionShippingDetails' from JSON`,
  );
}

/** @internal */
export const TransactionGiftCardServiceType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionGiftCardServiceType
> = z.nativeEnum(TransactionGiftCardServiceType);

/** @internal */
export const TransactionGiftCardServiceType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionGiftCardServiceType
> = TransactionGiftCardServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionGiftCardServiceType$ {
  /** @deprecated use `TransactionGiftCardServiceType$inboundSchema` instead. */
  export const inboundSchema = TransactionGiftCardServiceType$inboundSchema;
  /** @deprecated use `TransactionGiftCardServiceType$outboundSchema` instead. */
  export const outboundSchema = TransactionGiftCardServiceType$outboundSchema;
}

/** @internal */
export const TransactionGiftCardServiceProvider$inboundSchema: z.ZodNativeEnum<
  typeof TransactionGiftCardServiceProvider
> = z.nativeEnum(TransactionGiftCardServiceProvider);

/** @internal */
export const TransactionGiftCardServiceProvider$outboundSchema: z.ZodNativeEnum<
  typeof TransactionGiftCardServiceProvider
> = TransactionGiftCardServiceProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionGiftCardServiceProvider$ {
  /** @deprecated use `TransactionGiftCardServiceProvider$inboundSchema` instead. */
  export const inboundSchema = TransactionGiftCardServiceProvider$inboundSchema;
  /** @deprecated use `TransactionGiftCardServiceProvider$outboundSchema` instead. */
  export const outboundSchema =
    TransactionGiftCardServiceProvider$outboundSchema;
}

/** @internal */
export const TransactionGiftCardService$inboundSchema: z.ZodType<
  TransactionGiftCardService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionGiftCardServiceType$inboundSchema.default(
    "gift-card-service",
  ),
  id: z.string(),
  gift_card_service_definition_id:
    TransactionGiftCardServiceProvider$inboundSchema,
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "gift_card_service_definition_id": "giftCardServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type TransactionGiftCardService$Outbound = {
  type: string;
  id: string;
  gift_card_service_definition_id: string;
  display_name: string;
};

/** @internal */
export const TransactionGiftCardService$outboundSchema: z.ZodType<
  TransactionGiftCardService$Outbound,
  z.ZodTypeDef,
  TransactionGiftCardService
> = z.object({
  type: TransactionGiftCardServiceType$outboundSchema.default(
    "gift-card-service",
  ),
  id: z.string(),
  giftCardServiceDefinitionId:
    TransactionGiftCardServiceProvider$outboundSchema,
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    giftCardServiceDefinitionId: "gift_card_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionGiftCardService$ {
  /** @deprecated use `TransactionGiftCardService$inboundSchema` instead. */
  export const inboundSchema = TransactionGiftCardService$inboundSchema;
  /** @deprecated use `TransactionGiftCardService$outboundSchema` instead. */
  export const outboundSchema = TransactionGiftCardService$outboundSchema;
  /** @deprecated use `TransactionGiftCardService$Outbound` instead. */
  export type Outbound = TransactionGiftCardService$Outbound;
}

export function transactionGiftCardServiceToJSON(
  transactionGiftCardService: TransactionGiftCardService,
): string {
  return JSON.stringify(
    TransactionGiftCardService$outboundSchema.parse(transactionGiftCardService),
  );
}

export function transactionGiftCardServiceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionGiftCardService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionGiftCardService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionGiftCardService' from JSON`,
  );
}

/** @internal */
export const TransactionTicketDeliveryMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionTicketDeliveryMethod
> = z.nativeEnum(TransactionTicketDeliveryMethod);

/** @internal */
export const TransactionTicketDeliveryMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionTicketDeliveryMethod
> = TransactionTicketDeliveryMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionTicketDeliveryMethod$ {
  /** @deprecated use `TransactionTicketDeliveryMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionTicketDeliveryMethod$inboundSchema;
  /** @deprecated use `TransactionTicketDeliveryMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionTicketDeliveryMethod$outboundSchema;
}

/** @internal */
export const TransactionAirline$inboundSchema: z.ZodType<
  TransactionAirline,
  z.ZodTypeDef,
  unknown
> = z.object({
  booking_code: z.string().optional(),
  issued_address: z.string().optional(),
  issued_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  issuing_carrier_code: z.string().optional(),
  legs: z.array(AirlineLeg$inboundSchema).optional(),
  passenger_name_record: z.string().optional(),
  passengers: z.array(AirlinePassenger$inboundSchema).optional(),
  reservation_system: z.string().optional(),
  restricted_ticket: z.boolean().optional(),
  ticket_delivery_method: TransactionTicketDeliveryMethod$inboundSchema.default(
    "electronic",
  ),
  ticket_number: z.string().optional(),
  travel_agency_code: z.string().optional(),
  travel_agency_invoice_number: z.string().optional(),
  travel_agency_name: z.string().optional(),
  travel_agency_plan_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "booking_code": "bookingCode",
    "issued_address": "issuedAddress",
    "issued_at": "issuedAt",
    "issuing_carrier_code": "issuingCarrierCode",
    "passenger_name_record": "passengerNameRecord",
    "reservation_system": "reservationSystem",
    "restricted_ticket": "restrictedTicket",
    "ticket_delivery_method": "ticketDeliveryMethod",
    "ticket_number": "ticketNumber",
    "travel_agency_code": "travelAgencyCode",
    "travel_agency_invoice_number": "travelAgencyInvoiceNumber",
    "travel_agency_name": "travelAgencyName",
    "travel_agency_plan_name": "travelAgencyPlanName",
  });
});

/** @internal */
export type TransactionAirline$Outbound = {
  booking_code?: string | undefined;
  issued_address?: string | undefined;
  issued_at?: string | undefined;
  issuing_carrier_code?: string | undefined;
  legs?: Array<AirlineLeg$Outbound> | undefined;
  passenger_name_record?: string | undefined;
  passengers?: Array<AirlinePassenger$Outbound> | undefined;
  reservation_system?: string | undefined;
  restricted_ticket?: boolean | undefined;
  ticket_delivery_method: string;
  ticket_number?: string | undefined;
  travel_agency_code?: string | undefined;
  travel_agency_invoice_number?: string | undefined;
  travel_agency_name?: string | undefined;
  travel_agency_plan_name?: string | undefined;
};

/** @internal */
export const TransactionAirline$outboundSchema: z.ZodType<
  TransactionAirline$Outbound,
  z.ZodTypeDef,
  TransactionAirline
> = z.object({
  bookingCode: z.string().optional(),
  issuedAddress: z.string().optional(),
  issuedAt: z.date().transform(v => v.toISOString()).optional(),
  issuingCarrierCode: z.string().optional(),
  legs: z.array(AirlineLeg$outboundSchema).optional(),
  passengerNameRecord: z.string().optional(),
  passengers: z.array(AirlinePassenger$outboundSchema).optional(),
  reservationSystem: z.string().optional(),
  restrictedTicket: z.boolean().optional(),
  ticketDeliveryMethod: TransactionTicketDeliveryMethod$outboundSchema.default(
    "electronic",
  ),
  ticketNumber: z.string().optional(),
  travelAgencyCode: z.string().optional(),
  travelAgencyInvoiceNumber: z.string().optional(),
  travelAgencyName: z.string().optional(),
  travelAgencyPlanName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bookingCode: "booking_code",
    issuedAddress: "issued_address",
    issuedAt: "issued_at",
    issuingCarrierCode: "issuing_carrier_code",
    passengerNameRecord: "passenger_name_record",
    reservationSystem: "reservation_system",
    restrictedTicket: "restricted_ticket",
    ticketDeliveryMethod: "ticket_delivery_method",
    ticketNumber: "ticket_number",
    travelAgencyCode: "travel_agency_code",
    travelAgencyInvoiceNumber: "travel_agency_invoice_number",
    travelAgencyName: "travel_agency_name",
    travelAgencyPlanName: "travel_agency_plan_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionAirline$ {
  /** @deprecated use `TransactionAirline$inboundSchema` instead. */
  export const inboundSchema = TransactionAirline$inboundSchema;
  /** @deprecated use `TransactionAirline$outboundSchema` instead. */
  export const outboundSchema = TransactionAirline$outboundSchema;
  /** @deprecated use `TransactionAirline$Outbound` instead. */
  export type Outbound = TransactionAirline$Outbound;
}

export function transactionAirlineToJSON(
  transactionAirline: TransactionAirline,
): string {
  return JSON.stringify(
    TransactionAirline$outboundSchema.parse(transactionAirline),
  );
}

export function transactionAirlineFromJSON(
  jsonString: string,
): SafeParseResult<TransactionAirline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionAirline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionAirline' from JSON`,
  );
}

/** @internal */
export const AVSResponseCode$inboundSchema: z.ZodNativeEnum<
  typeof AVSResponseCode
> = z.nativeEnum(AVSResponseCode);

/** @internal */
export const AVSResponseCode$outboundSchema: z.ZodNativeEnum<
  typeof AVSResponseCode
> = AVSResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AVSResponseCode$ {
  /** @deprecated use `AVSResponseCode$inboundSchema` instead. */
  export const inboundSchema = AVSResponseCode$inboundSchema;
  /** @deprecated use `AVSResponseCode$outboundSchema` instead. */
  export const outboundSchema = AVSResponseCode$outboundSchema;
}

/** @internal */
export const CVVResponseCode$inboundSchema: z.ZodNativeEnum<
  typeof CVVResponseCode
> = z.nativeEnum(CVVResponseCode);

/** @internal */
export const CVVResponseCode$outboundSchema: z.ZodNativeEnum<
  typeof CVVResponseCode
> = CVVResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVVResponseCode$ {
  /** @deprecated use `CVVResponseCode$inboundSchema` instead. */
  export const inboundSchema = CVVResponseCode$inboundSchema;
  /** @deprecated use `CVVResponseCode$outboundSchema` instead. */
  export const outboundSchema = CVVResponseCode$outboundSchema;
}

/** @internal */
export const TransactionTransactionPaymentSource$inboundSchema: z.ZodNativeEnum<
  typeof TransactionTransactionPaymentSource
> = z.nativeEnum(TransactionTransactionPaymentSource);

/** @internal */
export const TransactionTransactionPaymentSource$outboundSchema:
  z.ZodNativeEnum<typeof TransactionTransactionPaymentSource> =
    TransactionTransactionPaymentSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionTransactionPaymentSource$ {
  /** @deprecated use `TransactionTransactionPaymentSource$inboundSchema` instead. */
  export const inboundSchema =
    TransactionTransactionPaymentSource$inboundSchema;
  /** @deprecated use `TransactionTransactionPaymentSource$outboundSchema` instead. */
  export const outboundSchema =
    TransactionTransactionPaymentSource$outboundSchema;
}

/** @internal */
export const StatementDescriptor$inboundSchema: z.ZodType<
  StatementDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  phone_number: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type StatementDescriptor$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  phone_number?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const StatementDescriptor$outboundSchema: z.ZodType<
  StatementDescriptor$Outbound,
  z.ZodTypeDef,
  StatementDescriptor
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  phoneNumber: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatementDescriptor$ {
  /** @deprecated use `StatementDescriptor$inboundSchema` instead. */
  export const inboundSchema = StatementDescriptor$inboundSchema;
  /** @deprecated use `StatementDescriptor$outboundSchema` instead. */
  export const outboundSchema = StatementDescriptor$outboundSchema;
  /** @deprecated use `StatementDescriptor$Outbound` instead. */
  export type Outbound = StatementDescriptor$Outbound;
}

export function statementDescriptorToJSON(
  statementDescriptor: StatementDescriptor,
): string {
  return JSON.stringify(
    StatementDescriptor$outboundSchema.parse(statementDescriptor),
  );
}

export function statementDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<StatementDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatementDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatementDescriptor' from JSON`,
  );
}

/** @internal */
export const ThreeDSecureStatus$inboundSchema: z.ZodNativeEnum<
  typeof ThreeDSecureStatus
> = z.nativeEnum(ThreeDSecureStatus);

/** @internal */
export const ThreeDSecureStatus$outboundSchema: z.ZodNativeEnum<
  typeof ThreeDSecureStatus
> = ThreeDSecureStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureStatus$ {
  /** @deprecated use `ThreeDSecureStatus$inboundSchema` instead. */
  export const inboundSchema = ThreeDSecureStatus$inboundSchema;
  /** @deprecated use `ThreeDSecureStatus$outboundSchema` instead. */
  export const outboundSchema = ThreeDSecureStatus$outboundSchema;
}

/** @internal */
export const ThreeDSecureMethod$inboundSchema: z.ZodNativeEnum<
  typeof ThreeDSecureMethod
> = z.nativeEnum(ThreeDSecureMethod);

/** @internal */
export const ThreeDSecureMethod$outboundSchema: z.ZodNativeEnum<
  typeof ThreeDSecureMethod
> = ThreeDSecureMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureMethod$ {
  /** @deprecated use `ThreeDSecureMethod$inboundSchema` instead. */
  export const inboundSchema = ThreeDSecureMethod$inboundSchema;
  /** @deprecated use `ThreeDSecureMethod$outboundSchema` instead. */
  export const outboundSchema = ThreeDSecureMethod$outboundSchema;
}

/** @internal */
export const ResponseData$inboundSchema: z.ZodType<
  ResponseData,
  z.ZodTypeDef,
  unknown
> = z.union([ThreeDSecureDataV1$inboundSchema, ThreeDSecureV2$inboundSchema]);

/** @internal */
export type ResponseData$Outbound =
  | ThreeDSecureDataV1$Outbound
  | ThreeDSecureV2$Outbound;

/** @internal */
export const ResponseData$outboundSchema: z.ZodType<
  ResponseData$Outbound,
  z.ZodTypeDef,
  ResponseData
> = z.union([ThreeDSecureDataV1$outboundSchema, ThreeDSecureV2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseData$ {
  /** @deprecated use `ResponseData$inboundSchema` instead. */
  export const inboundSchema = ResponseData$inboundSchema;
  /** @deprecated use `ResponseData$outboundSchema` instead. */
  export const outboundSchema = ResponseData$outboundSchema;
  /** @deprecated use `ResponseData$Outbound` instead. */
  export type Outbound = ResponseData$Outbound;
}

export function responseDataToJSON(responseData: ResponseData): string {
  return JSON.stringify(ResponseData$outboundSchema.parse(responseData));
}

export function responseDataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseData' from JSON`,
  );
}

/** @internal */
export const ErrorData$inboundSchema: z.ZodType<
  ErrorData,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  description: z.string().optional(),
  detail: z.string().optional(),
  component: z.string().optional(),
});

/** @internal */
export type ErrorData$Outbound = {
  code?: string | undefined;
  description?: string | undefined;
  detail?: string | undefined;
  component?: string | undefined;
};

/** @internal */
export const ErrorData$outboundSchema: z.ZodType<
  ErrorData$Outbound,
  z.ZodTypeDef,
  ErrorData
> = z.object({
  code: z.string().optional(),
  description: z.string().optional(),
  detail: z.string().optional(),
  component: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorData$ {
  /** @deprecated use `ErrorData$inboundSchema` instead. */
  export const inboundSchema = ErrorData$inboundSchema;
  /** @deprecated use `ErrorData$outboundSchema` instead. */
  export const outboundSchema = ErrorData$outboundSchema;
  /** @deprecated use `ErrorData$Outbound` instead. */
  export type Outbound = ErrorData$Outbound;
}

export function errorDataToJSON(errorData: ErrorData): string {
  return JSON.stringify(ErrorData$outboundSchema.parse(errorData));
}

export function errorDataFromJSON(
  jsonString: string,
): SafeParseResult<ErrorData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorData' from JSON`,
  );
}

/** @internal */
export const ThreeDSecure$inboundSchema: z.ZodType<
  ThreeDSecure,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  status: ThreeDSecureStatus$inboundSchema.optional(),
  method: ThreeDSecureMethod$inboundSchema.optional(),
  response_data: z.union([
    ThreeDSecureDataV1$inboundSchema,
    ThreeDSecureV2$inboundSchema,
  ]).optional(),
  error_data: z.lazy(() => ErrorData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_data": "responseData",
    "error_data": "errorData",
  });
});

/** @internal */
export type ThreeDSecure$Outbound = {
  version?: string | undefined;
  status?: string | undefined;
  method?: string | undefined;
  response_data?:
    | ThreeDSecureDataV1$Outbound
    | ThreeDSecureV2$Outbound
    | undefined;
  error_data?: ErrorData$Outbound | undefined;
};

/** @internal */
export const ThreeDSecure$outboundSchema: z.ZodType<
  ThreeDSecure$Outbound,
  z.ZodTypeDef,
  ThreeDSecure
> = z.object({
  version: z.string().optional(),
  status: ThreeDSecureStatus$outboundSchema.optional(),
  method: ThreeDSecureMethod$outboundSchema.optional(),
  responseData: z.union([
    ThreeDSecureDataV1$outboundSchema,
    ThreeDSecureV2$outboundSchema,
  ]).optional(),
  errorData: z.lazy(() => ErrorData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    responseData: "response_data",
    errorData: "error_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecure$ {
  /** @deprecated use `ThreeDSecure$inboundSchema` instead. */
  export const inboundSchema = ThreeDSecure$inboundSchema;
  /** @deprecated use `ThreeDSecure$outboundSchema` instead. */
  export const outboundSchema = ThreeDSecure$outboundSchema;
  /** @deprecated use `ThreeDSecure$Outbound` instead. */
  export type Outbound = ThreeDSecure$Outbound;
}

export function threeDSecureToJSON(threeDSecure: ThreeDSecure): string {
  return JSON.stringify(ThreeDSecure$outboundSchema.parse(threeDSecure));
}

export function threeDSecureFromJSON(
  jsonString: string,
): SafeParseResult<ThreeDSecure, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreeDSecure$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreeDSecure' from JSON`,
  );
}

/** @internal */
export const TransactionIntentOutcome$inboundSchema: z.ZodNativeEnum<
  typeof TransactionIntentOutcome
> = z.nativeEnum(TransactionIntentOutcome);

/** @internal */
export const TransactionIntentOutcome$outboundSchema: z.ZodNativeEnum<
  typeof TransactionIntentOutcome
> = TransactionIntentOutcome$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionIntentOutcome$ {
  /** @deprecated use `TransactionIntentOutcome$inboundSchema` instead. */
  export const inboundSchema = TransactionIntentOutcome$inboundSchema;
  /** @deprecated use `TransactionIntentOutcome$outboundSchema` instead. */
  export const outboundSchema = TransactionIntentOutcome$outboundSchema;
}

/** @internal */
export const TransactionRecipientAddress$inboundSchema: z.ZodType<
  TransactionRecipientAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type TransactionRecipientAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const TransactionRecipientAddress$outboundSchema: z.ZodType<
  TransactionRecipientAddress$Outbound,
  z.ZodTypeDef,
  TransactionRecipientAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRecipientAddress$ {
  /** @deprecated use `TransactionRecipientAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionRecipientAddress$inboundSchema;
  /** @deprecated use `TransactionRecipientAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionRecipientAddress$outboundSchema;
  /** @deprecated use `TransactionRecipientAddress$Outbound` instead. */
  export type Outbound = TransactionRecipientAddress$Outbound;
}

export function transactionRecipientAddressToJSON(
  transactionRecipientAddress: TransactionRecipientAddress,
): string {
  return JSON.stringify(
    TransactionRecipientAddress$outboundSchema.parse(
      transactionRecipientAddress,
    ),
  );
}

export function transactionRecipientAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionRecipientAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionRecipientAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionRecipientAddress' from JSON`,
  );
}

/** @internal */
export const Recipient$inboundSchema: z.ZodType<
  Recipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string(),
  last_name: z.string(),
  address: z.lazy(() => TransactionRecipientAddress$inboundSchema).optional(),
  account_number: z.string().optional(),
  date_of_birth: z.string().transform(v => new RFCDate(v)).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "account_number": "accountNumber",
    "date_of_birth": "dateOfBirth",
  });
});

/** @internal */
export type Recipient$Outbound = {
  first_name: string;
  last_name: string;
  address?: TransactionRecipientAddress$Outbound | undefined;
  account_number?: string | undefined;
  date_of_birth?: string | undefined;
};

/** @internal */
export const Recipient$outboundSchema: z.ZodType<
  Recipient$Outbound,
  z.ZodTypeDef,
  Recipient
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  address: z.lazy(() => TransactionRecipientAddress$outboundSchema).optional(),
  accountNumber: z.string().optional(),
  dateOfBirth: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    accountNumber: "account_number",
    dateOfBirth: "date_of_birth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recipient$ {
  /** @deprecated use `Recipient$inboundSchema` instead. */
  export const inboundSchema = Recipient$inboundSchema;
  /** @deprecated use `Recipient$outboundSchema` instead. */
  export const outboundSchema = Recipient$outboundSchema;
  /** @deprecated use `Recipient$Outbound` instead. */
  export type Outbound = Recipient$Outbound;
}

export function recipientToJSON(recipient: Recipient): string {
  return JSON.stringify(Recipient$outboundSchema.parse(recipient));
}

export function recipientFromJSON(
  jsonString: string,
): SafeParseResult<Recipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Recipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Recipient' from JSON`,
  );
}

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionType$inboundSchema.default("transaction"),
  id: z.string(),
  reconciliation_id: z.string(),
  merchant_account_id: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionTransactionStatus$inboundSchema,
  authorized_amount: z.number().int(),
  captured_amount: z.number().int(),
  refunded_amount: z.number().int(),
  settled_currency: z.string().optional(),
  settled_amount: z.number().int(),
  settled: z.boolean(),
  country: z.string().optional(),
  external_identifier: z.string().optional(),
  intent: TransactionTransactionIntent$inboundSchema,
  payment_method: z.lazy(() => TransactionPaymentMethod$inboundSchema)
    .optional(),
  method: TransactionMethod$inboundSchema.optional(),
  instrument_type: TransactionInstrumentType$inboundSchema.optional(),
  error_code: z.string().optional(),
  payment_service: z.lazy(() => TransactionPaymentService$inboundSchema)
    .optional(),
  pending_review: z.boolean().default(false),
  buyer: z.lazy(() => TransactionBuyer$inboundSchema).optional(),
  raw_response_code: z.string().optional(),
  raw_response_description: z.string().optional(),
  shipping_details: z.lazy(() => TransactionShippingDetails$inboundSchema)
    .optional(),
  checkout_session_id: z.string().optional(),
  gift_card_redemptions: z.array(GiftCardRedemption$inboundSchema),
  gift_card_service: z.lazy(() => TransactionGiftCardService$inboundSchema)
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  airline: z.lazy(() => TransactionAirline$inboundSchema).optional(),
  auth_response_code: z.string().optional(),
  avs_response_code: AVSResponseCode$inboundSchema.optional(),
  cvv_response_code: CVVResponseCode$inboundSchema.optional(),
  payment_source: TransactionTransactionPaymentSource$inboundSchema,
  merchant_initiated: z.boolean(),
  is_subsequent_payment: z.boolean(),
  cart_items: z.array(CartItem$inboundSchema).optional(),
  statement_descriptor: z.lazy(() => StatementDescriptor$inboundSchema)
    .optional(),
  scheme_transaction_id: z.string().optional(),
  three_d_secure: z.lazy(() => ThreeDSecure$inboundSchema).optional(),
  payment_service_transaction_id: z.string().optional(),
  additional_identifiers: z.record(z.string()).optional(),
  custom_data: z.record(z.string()).optional(),
  authorized_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  captured_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  voided_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  approval_expires_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  buyer_approval_timedout_at: z.string().datetime({ offset: true }).transform(
    v => new Date(v)
  ).optional(),
  intent_outcome: TransactionIntentOutcome$inboundSchema,
  multi_tender: z.boolean(),
  account_funding_transaction: z.boolean(),
  recipient: z.lazy(() => Recipient$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "reconciliation_id": "reconciliationId",
    "merchant_account_id": "merchantAccountId",
    "authorized_amount": "authorizedAmount",
    "captured_amount": "capturedAmount",
    "refunded_amount": "refundedAmount",
    "settled_currency": "settledCurrency",
    "settled_amount": "settledAmount",
    "external_identifier": "externalIdentifier",
    "payment_method": "paymentMethod",
    "instrument_type": "instrumentType",
    "error_code": "errorCode",
    "payment_service": "paymentService",
    "pending_review": "pendingReview",
    "raw_response_code": "rawResponseCode",
    "raw_response_description": "rawResponseDescription",
    "shipping_details": "shippingDetails",
    "checkout_session_id": "checkoutSessionId",
    "gift_card_redemptions": "giftCardRedemptions",
    "gift_card_service": "giftCardService",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "auth_response_code": "authResponseCode",
    "avs_response_code": "avsResponseCode",
    "cvv_response_code": "cvvResponseCode",
    "payment_source": "paymentSource",
    "merchant_initiated": "merchantInitiated",
    "is_subsequent_payment": "isSubsequentPayment",
    "cart_items": "cartItems",
    "statement_descriptor": "statementDescriptor",
    "scheme_transaction_id": "schemeTransactionId",
    "three_d_secure": "threeDSecure",
    "payment_service_transaction_id": "paymentServiceTransactionId",
    "additional_identifiers": "additionalIdentifiers",
    "custom_data": "customData",
    "authorized_at": "authorizedAt",
    "captured_at": "capturedAt",
    "voided_at": "voidedAt",
    "approval_expires_at": "approvalExpiresAt",
    "buyer_approval_timedout_at": "buyerApprovalTimedoutAt",
    "intent_outcome": "intentOutcome",
    "multi_tender": "multiTender",
    "account_funding_transaction": "accountFundingTransaction",
  });
});

/** @internal */
export type Transaction$Outbound = {
  type: string;
  id: string;
  reconciliation_id: string;
  merchant_account_id: string;
  currency: string;
  amount: number;
  status: string;
  authorized_amount: number;
  captured_amount: number;
  refunded_amount: number;
  settled_currency?: string | undefined;
  settled_amount: number;
  settled: boolean;
  country?: string | undefined;
  external_identifier?: string | undefined;
  intent: string;
  payment_method?: TransactionPaymentMethod$Outbound | undefined;
  method?: string | undefined;
  instrument_type?: string | undefined;
  error_code?: string | undefined;
  payment_service?: TransactionPaymentService$Outbound | undefined;
  pending_review: boolean;
  buyer?: TransactionBuyer$Outbound | undefined;
  raw_response_code?: string | undefined;
  raw_response_description?: string | undefined;
  shipping_details?: TransactionShippingDetails$Outbound | undefined;
  checkout_session_id?: string | undefined;
  gift_card_redemptions: Array<GiftCardRedemption$Outbound>;
  gift_card_service?: TransactionGiftCardService$Outbound | undefined;
  created_at: string;
  updated_at: string;
  airline?: TransactionAirline$Outbound | undefined;
  auth_response_code?: string | undefined;
  avs_response_code?: string | undefined;
  cvv_response_code?: string | undefined;
  payment_source: string;
  merchant_initiated: boolean;
  is_subsequent_payment: boolean;
  cart_items?: Array<CartItem$Outbound> | undefined;
  statement_descriptor?: StatementDescriptor$Outbound | undefined;
  scheme_transaction_id?: string | undefined;
  three_d_secure?: ThreeDSecure$Outbound | undefined;
  payment_service_transaction_id?: string | undefined;
  additional_identifiers?: { [k: string]: string } | undefined;
  custom_data?: { [k: string]: string } | undefined;
  authorized_at?: string | undefined;
  captured_at?: string | undefined;
  voided_at?: string | undefined;
  approval_expires_at?: string | undefined;
  buyer_approval_timedout_at?: string | undefined;
  intent_outcome: string;
  multi_tender: boolean;
  account_funding_transaction: boolean;
  recipient?: Recipient$Outbound | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  type: TransactionType$outboundSchema.default("transaction"),
  id: z.string(),
  reconciliationId: z.string(),
  merchantAccountId: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionTransactionStatus$outboundSchema,
  authorizedAmount: z.number().int(),
  capturedAmount: z.number().int(),
  refundedAmount: z.number().int(),
  settledCurrency: z.string().optional(),
  settledAmount: z.number().int(),
  settled: z.boolean(),
  country: z.string().optional(),
  externalIdentifier: z.string().optional(),
  intent: TransactionTransactionIntent$outboundSchema,
  paymentMethod: z.lazy(() => TransactionPaymentMethod$outboundSchema)
    .optional(),
  method: TransactionMethod$outboundSchema.optional(),
  instrumentType: TransactionInstrumentType$outboundSchema.optional(),
  errorCode: z.string().optional(),
  paymentService: z.lazy(() => TransactionPaymentService$outboundSchema)
    .optional(),
  pendingReview: z.boolean().default(false),
  buyer: z.lazy(() => TransactionBuyer$outboundSchema).optional(),
  rawResponseCode: z.string().optional(),
  rawResponseDescription: z.string().optional(),
  shippingDetails: z.lazy(() => TransactionShippingDetails$outboundSchema)
    .optional(),
  checkoutSessionId: z.string().optional(),
  giftCardRedemptions: z.array(GiftCardRedemption$outboundSchema),
  giftCardService: z.lazy(() => TransactionGiftCardService$outboundSchema)
    .optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  airline: z.lazy(() => TransactionAirline$outboundSchema).optional(),
  authResponseCode: z.string().optional(),
  avsResponseCode: AVSResponseCode$outboundSchema.optional(),
  cvvResponseCode: CVVResponseCode$outboundSchema.optional(),
  paymentSource: TransactionTransactionPaymentSource$outboundSchema,
  merchantInitiated: z.boolean(),
  isSubsequentPayment: z.boolean(),
  cartItems: z.array(CartItem$outboundSchema).optional(),
  statementDescriptor: z.lazy(() => StatementDescriptor$outboundSchema)
    .optional(),
  schemeTransactionId: z.string().optional(),
  threeDSecure: z.lazy(() => ThreeDSecure$outboundSchema).optional(),
  paymentServiceTransactionId: z.string().optional(),
  additionalIdentifiers: z.record(z.string()).optional(),
  customData: z.record(z.string()).optional(),
  authorizedAt: z.date().transform(v => v.toISOString()).optional(),
  capturedAt: z.date().transform(v => v.toISOString()).optional(),
  voidedAt: z.date().transform(v => v.toISOString()).optional(),
  approvalExpiresAt: z.date().transform(v => v.toISOString()).optional(),
  buyerApprovalTimedoutAt: z.date().transform(v => v.toISOString()).optional(),
  intentOutcome: TransactionIntentOutcome$outboundSchema,
  multiTender: z.boolean(),
  accountFundingTransaction: z.boolean(),
  recipient: z.lazy(() => Recipient$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    reconciliationId: "reconciliation_id",
    merchantAccountId: "merchant_account_id",
    authorizedAmount: "authorized_amount",
    capturedAmount: "captured_amount",
    refundedAmount: "refunded_amount",
    settledCurrency: "settled_currency",
    settledAmount: "settled_amount",
    externalIdentifier: "external_identifier",
    paymentMethod: "payment_method",
    instrumentType: "instrument_type",
    errorCode: "error_code",
    paymentService: "payment_service",
    pendingReview: "pending_review",
    rawResponseCode: "raw_response_code",
    rawResponseDescription: "raw_response_description",
    shippingDetails: "shipping_details",
    checkoutSessionId: "checkout_session_id",
    giftCardRedemptions: "gift_card_redemptions",
    giftCardService: "gift_card_service",
    createdAt: "created_at",
    updatedAt: "updated_at",
    authResponseCode: "auth_response_code",
    avsResponseCode: "avs_response_code",
    cvvResponseCode: "cvv_response_code",
    paymentSource: "payment_source",
    merchantInitiated: "merchant_initiated",
    isSubsequentPayment: "is_subsequent_payment",
    cartItems: "cart_items",
    statementDescriptor: "statement_descriptor",
    schemeTransactionId: "scheme_transaction_id",
    threeDSecure: "three_d_secure",
    paymentServiceTransactionId: "payment_service_transaction_id",
    additionalIdentifiers: "additional_identifiers",
    customData: "custom_data",
    authorizedAt: "authorized_at",
    capturedAt: "captured_at",
    voidedAt: "voided_at",
    approvalExpiresAt: "approval_expires_at",
    buyerApprovalTimedoutAt: "buyer_approval_timedout_at",
    intentOutcome: "intent_outcome",
    multiTender: "multi_tender",
    accountFundingTransaction: "account_funding_transaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}
