/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Airline,
  Airline$inboundSchema,
  Airline$Outbound,
  Airline$outboundSchema,
} from "./airline.js";
import {
  AntiFraudDecision,
  AntiFraudDecision$inboundSchema,
  AntiFraudDecision$outboundSchema,
} from "./antifrauddecision.js";
import {
  AVSResponseCode,
  AVSResponseCode$inboundSchema,
  AVSResponseCode$outboundSchema,
} from "./avsresponsecode.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";
import {
  CVVResponseCode,
  CVVResponseCode$inboundSchema,
  CVVResponseCode$outboundSchema,
} from "./cvvresponsecode.js";
import {
  GiftCardRedemption,
  GiftCardRedemption$inboundSchema,
  GiftCardRedemption$Outbound,
  GiftCardRedemption$outboundSchema,
} from "./giftcardredemption.js";
import {
  GiftCardService,
  GiftCardService$inboundSchema,
  GiftCardService$Outbound,
  GiftCardService$outboundSchema,
} from "./giftcardservice.js";
import {
  InstrumentType,
  InstrumentType$inboundSchema,
  InstrumentType$outboundSchema,
} from "./instrumenttype.js";
import {
  Method,
  Method$inboundSchema,
  Method$outboundSchema,
} from "./method.js";
import {
  Recipient,
  Recipient$inboundSchema,
  Recipient$Outbound,
  Recipient$outboundSchema,
} from "./recipient.js";
import {
  ShippingDetails,
  ShippingDetails$inboundSchema,
  ShippingDetails$Outbound,
  ShippingDetails$outboundSchema,
} from "./shippingdetails.js";
import {
  StatementDescriptor,
  StatementDescriptor$inboundSchema,
  StatementDescriptor$Outbound,
  StatementDescriptor$outboundSchema,
} from "./statementdescriptor.js";
import {
  TransactionBuyer,
  TransactionBuyer$inboundSchema,
  TransactionBuyer$Outbound,
  TransactionBuyer$outboundSchema,
} from "./transactionbuyer.js";
import {
  TransactionIntent,
  TransactionIntent$inboundSchema,
  TransactionIntent$outboundSchema,
} from "./transactionintent.js";
import {
  TransactionIntentOutcome,
  TransactionIntentOutcome$inboundSchema,
  TransactionIntentOutcome$outboundSchema,
} from "./transactionintentoutcome.js";
import {
  TransactionPaymentMethod,
  TransactionPaymentMethod$inboundSchema,
  TransactionPaymentMethod$Outbound,
  TransactionPaymentMethod$outboundSchema,
} from "./transactionpaymentmethod.js";
import {
  TransactionPaymentService,
  TransactionPaymentService$inboundSchema,
  TransactionPaymentService$Outbound,
  TransactionPaymentService$outboundSchema,
} from "./transactionpaymentservice.js";
import {
  TransactionStatus,
  TransactionStatus$inboundSchema,
  TransactionStatus$outboundSchema,
} from "./transactionstatus.js";
import {
  TransactionThreeDSecureSummary,
  TransactionThreeDSecureSummary$inboundSchema,
  TransactionThreeDSecureSummary$Outbound,
  TransactionThreeDSecureSummary$outboundSchema,
} from "./transactionthreedsecuresummary.js";

/**
 * The source of the transaction.
 */
export const TransactionPaymentSource1 = {
  Ecommerce: "ecommerce",
  Moto: "moto",
  Recurring: "recurring",
  Installment: "installment",
  CardOnFile: "card_on_file",
} as const;
/**
 * The source of the transaction.
 */
export type TransactionPaymentSource1 = OpenEnum<
  typeof TransactionPaymentSource1
>;

/**
 * A full transaction resource.
 */
export type Transaction = {
  /**
   * Always `transaction`.
   */
  type?: "transaction" | undefined;
  /**
   * The ID for the transaction.
   */
  id: string;
  /**
   * The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
   */
  reconciliationId: string;
  /**
   * The ID of the merchant account this transaction belongs to.
   */
  merchantAccountId: string;
  /**
   * The currency code for this transaction.
   */
  currency: string;
  /**
   * The total amount for this transaction across all funding sources including gift cards.
   */
  amount: number;
  status: TransactionStatus;
  /**
   * The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
   */
  authorizedAmount: number;
  /**
   * The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
   */
  capturedAmount: number;
  /**
   * The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
   */
  refundedAmount: number;
  /**
   * The ISO 4217 currency code of this transaction's settlement.
   */
  settledCurrency?: string | null | undefined;
  /**
   * The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
   */
  settledAmount: number;
  /**
   * Indicates whether this transaction has been settled.
   */
  settled: boolean;
  /**
   * The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
   */
  country?: string | null | undefined;
  /**
   * An external identifier that can be used to match the transaction against your own records.
   */
  externalIdentifier?: string | null | undefined;
  intent: TransactionIntent;
  /**
   * The payment method used for this transaction.
   */
  paymentMethod?: TransactionPaymentMethod | null | undefined;
  /**
   * The method used for the transaction.
   */
  method?: Method | null | undefined;
  /**
   * The name of the instrument used to process the transaction.
   */
  instrumentType?: InstrumentType | null | undefined;
  /**
   * The standardized error code set by Gr4vy.
   */
  errorCode?: string | null | undefined;
  /**
   * The payment service used for this transaction.
   */
  paymentService?: TransactionPaymentService | null | undefined;
  /**
   * Whether a manual anti fraud review is pending with an anti fraud service.
   */
  pendingReview?: boolean | undefined;
  /**
   * The buyer used for this transaction.
   */
  buyer?: TransactionBuyer | null | undefined;
  /**
   * This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseCode?: string | null | undefined;
  /**
   *  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
   */
  rawResponseDescription?: string | null | undefined;
  /**
   * The shipping details associated with the transaction.
   */
  shippingDetails?: ShippingDetails | null | undefined;
  /**
   * The identifier for the checkout session this transaction is associated with.
   */
  checkoutSessionId?: string | null | undefined;
  /**
   * The gift cards redeemed for this transaction.
   */
  giftCardRedemptions: Array<GiftCardRedemption>;
  /**
   * The gift card service used for this transaction.
   */
  giftCardService?: GiftCardService | null | undefined;
  /**
   * The date and time when the transaction was created, in ISO 8601 format.
   */
  createdAt: Date;
  /**
   * The date and time when the transaction was last updated, in ISO 8601 format.
   */
  updatedAt: Date;
  /**
   * Contains information about an airline travel, if applicable.
   */
  airline?: Airline | null | undefined;
  /**
   * This is the response description received from the processor.
   */
  authResponseCode?: string | null | undefined;
  /**
   * The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
   */
  avsResponseCode?: AVSResponseCode | null | undefined;
  /**
   * The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
   */
  cvvResponseCode?: CVVResponseCode | null | undefined;
  /**
   * The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
   */
  antiFraudDecision?: AntiFraudDecision | null | undefined;
  /**
   * The source of the transaction.
   */
  paymentSource: TransactionPaymentSource1;
  /**
   * Indicates whether the transaction was initiated by the merchant or the customer.
   */
  merchantInitiated: boolean;
  /**
   * Indicates whether the transaction represents a subsequent payment or an initial one.
   */
  isSubsequentPayment: boolean;
  /**
   * An array of cart items that represents the line items of a transaction.
   */
  cartItems?: Array<CartItem> | null | undefined;
  /**
   * The statement descriptor is the text to be shown on the buyer's statements.
   */
  statementDescriptor?: StatementDescriptor | null | undefined;
  /**
   * An identifier for the transaction used by the scheme itself, when available.
   */
  schemeTransactionId?: string | null | undefined;
  /**
   * The 3-D Secure data that was sent to the payment service for the transaction.
   */
  threeDSecure?: TransactionThreeDSecureSummary | null | undefined;
  /**
   * The payment service's unique ID for the transaction.
   */
  paymentServiceTransactionId?: string | null | undefined;
  /**
   * A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
   */
  additionalIdentifiers?: { [k: string]: string | null } | undefined;
  /**
   * Additional information about the transaction stored as key-value pairs.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * The date this transaction was authorized at.
   */
  authorizedAt?: Date | null | undefined;
  /**
   * The date this transaction was captured at.
   */
  capturedAt?: Date | null | undefined;
  /**
   * The date this transaction was voided at.
   */
  voidedAt?: Date | null | undefined;
  /**
   * The date this transaction's approval URL will expire at.
   */
  approvalExpiresAt?: Date | null | undefined;
  /**
   * The date this transaction's approval timed out at.
   */
  buyerApprovalTimedoutAt?: Date | null | undefined;
  intentOutcome: TransactionIntentOutcome;
  /**
   * The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
   */
  multiTender: boolean;
  /**
   * Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
   */
  accountFundingTransaction: boolean;
  /**
   * The recipient of any account to account funding. For use with AFTs.
   */
  recipient?: Recipient | null | undefined;
  /**
   * An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
   */
  merchantAdviceCode?: string | null | undefined;
  /**
   * The number of installments for this transaction, if applicable.
   */
  installmentCount?: number | null | undefined;
};

/** @internal */
export const TransactionPaymentSource1$inboundSchema: z.ZodType<
  TransactionPaymentSource1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TransactionPaymentSource1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TransactionPaymentSource1$outboundSchema: z.ZodType<
  TransactionPaymentSource1,
  z.ZodTypeDef,
  TransactionPaymentSource1
> = z.union([
  z.nativeEnum(TransactionPaymentSource1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentSource1$ {
  /** @deprecated use `TransactionPaymentSource1$inboundSchema` instead. */
  export const inboundSchema = TransactionPaymentSource1$inboundSchema;
  /** @deprecated use `TransactionPaymentSource1$outboundSchema` instead. */
  export const outboundSchema = TransactionPaymentSource1$outboundSchema;
}

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("transaction").default("transaction"),
  id: z.string(),
  reconciliation_id: z.string(),
  merchant_account_id: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionStatus$inboundSchema,
  authorized_amount: z.number().int(),
  captured_amount: z.number().int(),
  refunded_amount: z.number().int(),
  settled_currency: z.nullable(z.string()).optional(),
  settled_amount: z.number().int(),
  settled: z.boolean(),
  country: z.nullable(z.string()).optional(),
  external_identifier: z.nullable(z.string()).optional(),
  intent: TransactionIntent$inboundSchema,
  payment_method: z.nullable(TransactionPaymentMethod$inboundSchema).optional(),
  method: z.nullable(Method$inboundSchema).optional(),
  instrument_type: z.nullable(InstrumentType$inboundSchema).optional(),
  error_code: z.nullable(z.string()).optional(),
  payment_service: z.nullable(TransactionPaymentService$inboundSchema)
    .optional(),
  pending_review: z.boolean().default(false),
  buyer: z.nullable(TransactionBuyer$inboundSchema).optional(),
  raw_response_code: z.nullable(z.string()).optional(),
  raw_response_description: z.nullable(z.string()).optional(),
  shipping_details: z.nullable(ShippingDetails$inboundSchema).optional(),
  checkout_session_id: z.nullable(z.string()).optional(),
  gift_card_redemptions: z.array(GiftCardRedemption$inboundSchema),
  gift_card_service: z.nullable(GiftCardService$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  airline: z.nullable(Airline$inboundSchema).optional(),
  auth_response_code: z.nullable(z.string()).optional(),
  avs_response_code: z.nullable(AVSResponseCode$inboundSchema).optional(),
  cvv_response_code: z.nullable(CVVResponseCode$inboundSchema).optional(),
  anti_fraud_decision: z.nullable(AntiFraudDecision$inboundSchema).optional(),
  payment_source: TransactionPaymentSource1$inboundSchema,
  merchant_initiated: z.boolean(),
  is_subsequent_payment: z.boolean(),
  cart_items: z.nullable(z.array(CartItem$inboundSchema)).optional(),
  statement_descriptor: z.nullable(StatementDescriptor$inboundSchema)
    .optional(),
  scheme_transaction_id: z.nullable(z.string()).optional(),
  three_d_secure: z.nullable(TransactionThreeDSecureSummary$inboundSchema)
    .optional(),
  payment_service_transaction_id: z.nullable(z.string()).optional(),
  additional_identifiers: z.record(z.nullable(z.string())).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  authorized_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  captured_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  voided_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  approval_expires_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  buyer_approval_timedout_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  intent_outcome: TransactionIntentOutcome$inboundSchema,
  multi_tender: z.boolean(),
  account_funding_transaction: z.boolean(),
  recipient: z.nullable(Recipient$inboundSchema).optional(),
  merchant_advice_code: z.nullable(z.string()).optional(),
  installment_count: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "reconciliation_id": "reconciliationId",
    "merchant_account_id": "merchantAccountId",
    "authorized_amount": "authorizedAmount",
    "captured_amount": "capturedAmount",
    "refunded_amount": "refundedAmount",
    "settled_currency": "settledCurrency",
    "settled_amount": "settledAmount",
    "external_identifier": "externalIdentifier",
    "payment_method": "paymentMethod",
    "instrument_type": "instrumentType",
    "error_code": "errorCode",
    "payment_service": "paymentService",
    "pending_review": "pendingReview",
    "raw_response_code": "rawResponseCode",
    "raw_response_description": "rawResponseDescription",
    "shipping_details": "shippingDetails",
    "checkout_session_id": "checkoutSessionId",
    "gift_card_redemptions": "giftCardRedemptions",
    "gift_card_service": "giftCardService",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "auth_response_code": "authResponseCode",
    "avs_response_code": "avsResponseCode",
    "cvv_response_code": "cvvResponseCode",
    "anti_fraud_decision": "antiFraudDecision",
    "payment_source": "paymentSource",
    "merchant_initiated": "merchantInitiated",
    "is_subsequent_payment": "isSubsequentPayment",
    "cart_items": "cartItems",
    "statement_descriptor": "statementDescriptor",
    "scheme_transaction_id": "schemeTransactionId",
    "three_d_secure": "threeDSecure",
    "payment_service_transaction_id": "paymentServiceTransactionId",
    "additional_identifiers": "additionalIdentifiers",
    "authorized_at": "authorizedAt",
    "captured_at": "capturedAt",
    "voided_at": "voidedAt",
    "approval_expires_at": "approvalExpiresAt",
    "buyer_approval_timedout_at": "buyerApprovalTimedoutAt",
    "intent_outcome": "intentOutcome",
    "multi_tender": "multiTender",
    "account_funding_transaction": "accountFundingTransaction",
    "merchant_advice_code": "merchantAdviceCode",
    "installment_count": "installmentCount",
  });
});

/** @internal */
export type Transaction$Outbound = {
  type: "transaction";
  id: string;
  reconciliation_id: string;
  merchant_account_id: string;
  currency: string;
  amount: number;
  status: string;
  authorized_amount: number;
  captured_amount: number;
  refunded_amount: number;
  settled_currency?: string | null | undefined;
  settled_amount: number;
  settled: boolean;
  country?: string | null | undefined;
  external_identifier?: string | null | undefined;
  intent: string;
  payment_method?: TransactionPaymentMethod$Outbound | null | undefined;
  method?: string | null | undefined;
  instrument_type?: string | null | undefined;
  error_code?: string | null | undefined;
  payment_service?: TransactionPaymentService$Outbound | null | undefined;
  pending_review: boolean;
  buyer?: TransactionBuyer$Outbound | null | undefined;
  raw_response_code?: string | null | undefined;
  raw_response_description?: string | null | undefined;
  shipping_details?: ShippingDetails$Outbound | null | undefined;
  checkout_session_id?: string | null | undefined;
  gift_card_redemptions: Array<GiftCardRedemption$Outbound>;
  gift_card_service?: GiftCardService$Outbound | null | undefined;
  created_at: string;
  updated_at: string;
  airline?: Airline$Outbound | null | undefined;
  auth_response_code?: string | null | undefined;
  avs_response_code?: string | null | undefined;
  cvv_response_code?: string | null | undefined;
  anti_fraud_decision?: string | null | undefined;
  payment_source: string;
  merchant_initiated: boolean;
  is_subsequent_payment: boolean;
  cart_items?: Array<CartItem$Outbound> | null | undefined;
  statement_descriptor?: StatementDescriptor$Outbound | null | undefined;
  scheme_transaction_id?: string | null | undefined;
  three_d_secure?: TransactionThreeDSecureSummary$Outbound | null | undefined;
  payment_service_transaction_id?: string | null | undefined;
  additional_identifiers?: { [k: string]: string | null } | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  authorized_at?: string | null | undefined;
  captured_at?: string | null | undefined;
  voided_at?: string | null | undefined;
  approval_expires_at?: string | null | undefined;
  buyer_approval_timedout_at?: string | null | undefined;
  intent_outcome: string;
  multi_tender: boolean;
  account_funding_transaction: boolean;
  recipient?: Recipient$Outbound | null | undefined;
  merchant_advice_code?: string | null | undefined;
  installment_count?: number | null | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  type: z.literal("transaction").default("transaction" as const),
  id: z.string(),
  reconciliationId: z.string(),
  merchantAccountId: z.string(),
  currency: z.string(),
  amount: z.number().int(),
  status: TransactionStatus$outboundSchema,
  authorizedAmount: z.number().int(),
  capturedAmount: z.number().int(),
  refundedAmount: z.number().int(),
  settledCurrency: z.nullable(z.string()).optional(),
  settledAmount: z.number().int(),
  settled: z.boolean(),
  country: z.nullable(z.string()).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
  intent: TransactionIntent$outboundSchema,
  paymentMethod: z.nullable(TransactionPaymentMethod$outboundSchema).optional(),
  method: z.nullable(Method$outboundSchema).optional(),
  instrumentType: z.nullable(InstrumentType$outboundSchema).optional(),
  errorCode: z.nullable(z.string()).optional(),
  paymentService: z.nullable(TransactionPaymentService$outboundSchema)
    .optional(),
  pendingReview: z.boolean().default(false),
  buyer: z.nullable(TransactionBuyer$outboundSchema).optional(),
  rawResponseCode: z.nullable(z.string()).optional(),
  rawResponseDescription: z.nullable(z.string()).optional(),
  shippingDetails: z.nullable(ShippingDetails$outboundSchema).optional(),
  checkoutSessionId: z.nullable(z.string()).optional(),
  giftCardRedemptions: z.array(GiftCardRedemption$outboundSchema),
  giftCardService: z.nullable(GiftCardService$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  airline: z.nullable(Airline$outboundSchema).optional(),
  authResponseCode: z.nullable(z.string()).optional(),
  avsResponseCode: z.nullable(AVSResponseCode$outboundSchema).optional(),
  cvvResponseCode: z.nullable(CVVResponseCode$outboundSchema).optional(),
  antiFraudDecision: z.nullable(AntiFraudDecision$outboundSchema).optional(),
  paymentSource: TransactionPaymentSource1$outboundSchema,
  merchantInitiated: z.boolean(),
  isSubsequentPayment: z.boolean(),
  cartItems: z.nullable(z.array(CartItem$outboundSchema)).optional(),
  statementDescriptor: z.nullable(StatementDescriptor$outboundSchema)
    .optional(),
  schemeTransactionId: z.nullable(z.string()).optional(),
  threeDSecure: z.nullable(TransactionThreeDSecureSummary$outboundSchema)
    .optional(),
  paymentServiceTransactionId: z.nullable(z.string()).optional(),
  additionalIdentifiers: z.record(z.nullable(z.string())).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  authorizedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  capturedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  voidedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  approvalExpiresAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  buyerApprovalTimedoutAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  intentOutcome: TransactionIntentOutcome$outboundSchema,
  multiTender: z.boolean(),
  accountFundingTransaction: z.boolean(),
  recipient: z.nullable(Recipient$outboundSchema).optional(),
  merchantAdviceCode: z.nullable(z.string()).optional(),
  installmentCount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    reconciliationId: "reconciliation_id",
    merchantAccountId: "merchant_account_id",
    authorizedAmount: "authorized_amount",
    capturedAmount: "captured_amount",
    refundedAmount: "refunded_amount",
    settledCurrency: "settled_currency",
    settledAmount: "settled_amount",
    externalIdentifier: "external_identifier",
    paymentMethod: "payment_method",
    instrumentType: "instrument_type",
    errorCode: "error_code",
    paymentService: "payment_service",
    pendingReview: "pending_review",
    rawResponseCode: "raw_response_code",
    rawResponseDescription: "raw_response_description",
    shippingDetails: "shipping_details",
    checkoutSessionId: "checkout_session_id",
    giftCardRedemptions: "gift_card_redemptions",
    giftCardService: "gift_card_service",
    createdAt: "created_at",
    updatedAt: "updated_at",
    authResponseCode: "auth_response_code",
    avsResponseCode: "avs_response_code",
    cvvResponseCode: "cvv_response_code",
    antiFraudDecision: "anti_fraud_decision",
    paymentSource: "payment_source",
    merchantInitiated: "merchant_initiated",
    isSubsequentPayment: "is_subsequent_payment",
    cartItems: "cart_items",
    statementDescriptor: "statement_descriptor",
    schemeTransactionId: "scheme_transaction_id",
    threeDSecure: "three_d_secure",
    paymentServiceTransactionId: "payment_service_transaction_id",
    additionalIdentifiers: "additional_identifiers",
    authorizedAt: "authorized_at",
    capturedAt: "captured_at",
    voidedAt: "voided_at",
    approvalExpiresAt: "approval_expires_at",
    buyerApprovalTimedoutAt: "buyer_approval_timedout_at",
    intentOutcome: "intent_outcome",
    multiTender: "multi_tender",
    accountFundingTransaction: "account_funding_transaction",
    merchantAdviceCode: "merchant_advice_code",
    installmentCount: "installment_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}
