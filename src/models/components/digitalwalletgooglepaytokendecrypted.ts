/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const DigitalWalletGooglePayTokenDecryptedType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type DigitalWalletGooglePayTokenDecryptedType = ClosedEnum<
    typeof DigitalWalletGooglePayTokenDecryptedType
>;

/**
 * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
 */
export const DigitalWalletGooglePayTokenDecryptedName = {
    DigitalWalletGooglePayTokenDecrypted: "digital-wallet-google-pay-token-decrypted",
} as const;
/**
 * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
 */
export type DigitalWalletGooglePayTokenDecryptedName = ClosedEnum<
    typeof DigitalWalletGooglePayTokenDecryptedName
>;

/**
 * The type of payment instrument.
 */
export const DigitalWalletGooglePayTokenDecryptedContextType = {
    Dpan: "dpan",
    Fpan: "fpan",
} as const;
/**
 * The type of payment instrument.
 */
export type DigitalWalletGooglePayTokenDecryptedContextType = ClosedEnum<
    typeof DigitalWalletGooglePayTokenDecryptedContextType
>;

/**
 * Google Pay decrypted token context.
 */
export type DigitalWalletGooglePayTokenDecryptedContext = {
    /**
     * Version information about the payment token.
     */
    version?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletGooglePayTokenDecryptedContextType | null | undefined;
    /**
     * Expiration of the decrypted data.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * ECI indicator, as defined by 3D Secure.
     */
    eci?: string | null | undefined;
    /**
     * Date and time at which the message expires as UTC milliseconds since epoch.
     */
    messageExpiration?: string | undefined;
    /**
     * A unique ID that identifies the message in case it needs to be revoked or located at a later time.
     */
    messageId?: string | undefined;
    /**
     * The type of the payment credential.
     */
    paymentMethod?: string | undefined;
};

/**
 * The result after decrypting an Google Pay token.
 */
export type DigitalWalletGooglePayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletGooglePayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
     */
    name?: DigitalWalletGooglePayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Google Pay decrypted token context.
     */
    context?: DigitalWalletGooglePayTokenDecryptedContext | undefined;
};

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedType$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedType
> = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedType);

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedType$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedType
> = DigitalWalletGooglePayTokenDecryptedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletGooglePayTokenDecryptedType$ {
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletGooglePayTokenDecryptedType$inboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletGooglePayTokenDecryptedType$outboundSchema;
}

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedName$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedName
> = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedName);

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedName$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedName
> = DigitalWalletGooglePayTokenDecryptedName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletGooglePayTokenDecryptedName$ {
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedName$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletGooglePayTokenDecryptedName$inboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedName$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletGooglePayTokenDecryptedName$outboundSchema;
}

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedContextType$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedContextType
> = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedContextType);

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedContextType$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedContextType
> = DigitalWalletGooglePayTokenDecryptedContextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletGooglePayTokenDecryptedContextType$ {
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedContextType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletGooglePayTokenDecryptedContextType$inboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedContextType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletGooglePayTokenDecryptedContextType$outboundSchema;
}

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedContext$inboundSchema: z.ZodType<
    DigitalWalletGooglePayTokenDecryptedContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        version: z.string().optional(),
        type: z.nullable(DigitalWalletGooglePayTokenDecryptedContextType$inboundSchema).optional(),
        expiration_date: z.string().optional(),
        has_cryptogram: z.boolean().optional(),
        eci: z.nullable(z.string()).optional(),
        message_expiration: z.string().optional(),
        message_id: z.string().optional(),
        payment_method: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expiration_date: "expirationDate",
            has_cryptogram: "hasCryptogram",
            message_expiration: "messageExpiration",
            message_id: "messageId",
            payment_method: "paymentMethod",
        });
    });

/** @internal */
export type DigitalWalletGooglePayTokenDecryptedContext$Outbound = {
    version?: string | undefined;
    type?: string | null | undefined;
    expiration_date?: string | undefined;
    has_cryptogram?: boolean | undefined;
    eci?: string | null | undefined;
    message_expiration?: string | undefined;
    message_id?: string | undefined;
    payment_method?: string | undefined;
};

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedContext$outboundSchema: z.ZodType<
    DigitalWalletGooglePayTokenDecryptedContext$Outbound,
    z.ZodTypeDef,
    DigitalWalletGooglePayTokenDecryptedContext
> = z
    .object({
        version: z.string().optional(),
        type: z.nullable(DigitalWalletGooglePayTokenDecryptedContextType$outboundSchema).optional(),
        expirationDate: z.string().optional(),
        hasCryptogram: z.boolean().optional(),
        eci: z.nullable(z.string()).optional(),
        messageExpiration: z.string().optional(),
        messageId: z.string().optional(),
        paymentMethod: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expirationDate: "expiration_date",
            hasCryptogram: "has_cryptogram",
            messageExpiration: "message_expiration",
            messageId: "message_id",
            paymentMethod: "payment_method",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletGooglePayTokenDecryptedContext$ {
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedContext$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletGooglePayTokenDecryptedContext$inboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedContext$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletGooglePayTokenDecryptedContext$outboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecryptedContext$Outbound` instead. */
    export type Outbound = DigitalWalletGooglePayTokenDecryptedContext$Outbound;
}

/** @internal */
export const DigitalWalletGooglePayTokenDecrypted$inboundSchema: z.ZodType<
    DigitalWalletGooglePayTokenDecrypted,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: DigitalWalletGooglePayTokenDecryptedType$inboundSchema.optional(),
        id: z.string().optional(),
        name: DigitalWalletGooglePayTokenDecryptedName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => DigitalWalletGooglePayTokenDecryptedContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type DigitalWalletGooglePayTokenDecrypted$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: DigitalWalletGooglePayTokenDecryptedContext$Outbound | undefined;
};

/** @internal */
export const DigitalWalletGooglePayTokenDecrypted$outboundSchema: z.ZodType<
    DigitalWalletGooglePayTokenDecrypted$Outbound,
    z.ZodTypeDef,
    DigitalWalletGooglePayTokenDecrypted
> = z
    .object({
        type: DigitalWalletGooglePayTokenDecryptedType$outboundSchema.optional(),
        id: z.string().optional(),
        name: DigitalWalletGooglePayTokenDecryptedName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => DigitalWalletGooglePayTokenDecryptedContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletGooglePayTokenDecrypted$ {
    /** @deprecated use `DigitalWalletGooglePayTokenDecrypted$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletGooglePayTokenDecrypted$inboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecrypted$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletGooglePayTokenDecrypted$outboundSchema;
    /** @deprecated use `DigitalWalletGooglePayTokenDecrypted$Outbound` instead. */
    export type Outbound = DigitalWalletGooglePayTokenDecrypted$Outbound;
}
