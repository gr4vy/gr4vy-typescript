/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum DigitalWalletGooglePayTokenDecryptedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
 */
export enum DigitalWalletGooglePayTokenDecryptedName {
    DigitalWalletGooglePayTokenDecrypted = "digital-wallet-google-pay-token-decrypted",
}

/**
 * The type of payment instrument.
 */
export enum DigitalWalletGooglePayTokenDecryptedContextType {
    Dpan = "dpan",
    Fpan = "fpan",
}

/**
 * Google Pay decrypted token context.
 */
export type DigitalWalletGooglePayTokenDecryptedContext = {
    /**
     * Version information about the payment token.
     */
    version?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletGooglePayTokenDecryptedContextType | null | undefined;
    /**
     * Expiration of the decrypted data.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * ECI indicator, as defined by 3D Secure.
     */
    eci?: string | null | undefined;
    /**
     * Date and time at which the message expires as UTC milliseconds since epoch.
     */
    messageExpiration?: string | undefined;
    /**
     * A unique ID that identifies the message in case it needs to be revoked or located at a later time.
     */
    messageId?: string | undefined;
    /**
     * The type of the payment credential.
     */
    paymentMethod?: string | undefined;
};

/**
 * The result after decrypting an Google Pay token.
 */
export type DigitalWalletGooglePayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletGooglePayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
     */
    name?: DigitalWalletGooglePayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Google Pay decrypted token context.
     */
    context?: DigitalWalletGooglePayTokenDecryptedContext | undefined;
};

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedType$: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedType
> = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedType);

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedName$: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedName
> = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedName);

/** @internal */
export const DigitalWalletGooglePayTokenDecryptedContextType$: z.ZodNativeEnum<
    typeof DigitalWalletGooglePayTokenDecryptedContextType
> = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedContextType);

/** @internal */
export namespace DigitalWalletGooglePayTokenDecryptedContext$ {
    export type Inbound = {
        version?: string | undefined;
        type?: DigitalWalletGooglePayTokenDecryptedContextType | null | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        eci?: string | null | undefined;
        message_expiration?: string | undefined;
        message_id?: string | undefined;
        payment_method?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        DigitalWalletGooglePayTokenDecryptedContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            version: z.string().optional(),
            type: z.nullable(DigitalWalletGooglePayTokenDecryptedContextType$).optional(),
            expiration_date: z.string().optional(),
            has_cryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            message_expiration: z.string().optional(),
            message_id: z.string().optional(),
            payment_method: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.expiration_date === undefined ? null : { expirationDate: v.expiration_date }),
                ...(v.has_cryptogram === undefined ? null : { hasCryptogram: v.has_cryptogram }),
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.message_expiration === undefined
                    ? null
                    : { messageExpiration: v.message_expiration }),
                ...(v.message_id === undefined ? null : { messageId: v.message_id }),
                ...(v.payment_method === undefined ? null : { paymentMethod: v.payment_method }),
            };
        });

    export type Outbound = {
        version?: string | undefined;
        type?: DigitalWalletGooglePayTokenDecryptedContextType | null | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        eci?: string | null | undefined;
        message_expiration?: string | undefined;
        message_id?: string | undefined;
        payment_method?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletGooglePayTokenDecryptedContext
    > = z
        .object({
            version: z.string().optional(),
            type: z.nullable(DigitalWalletGooglePayTokenDecryptedContextType$).optional(),
            expirationDate: z.string().optional(),
            hasCryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            messageExpiration: z.string().optional(),
            messageId: z.string().optional(),
            paymentMethod: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.expirationDate === undefined ? null : { expiration_date: v.expirationDate }),
                ...(v.hasCryptogram === undefined ? null : { has_cryptogram: v.hasCryptogram }),
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.messageExpiration === undefined
                    ? null
                    : { message_expiration: v.messageExpiration }),
                ...(v.messageId === undefined ? null : { message_id: v.messageId }),
                ...(v.paymentMethod === undefined ? null : { payment_method: v.paymentMethod }),
            };
        });
}

/** @internal */
export namespace DigitalWalletGooglePayTokenDecrypted$ {
    export type Inbound = {
        type?: DigitalWalletGooglePayTokenDecryptedType | undefined;
        id?: string | undefined;
        name?: DigitalWalletGooglePayTokenDecryptedName | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletGooglePayTokenDecryptedContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        DigitalWalletGooglePayTokenDecrypted,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: DigitalWalletGooglePayTokenDecryptedType$.optional(),
            id: z.string().optional(),
            name: DigitalWalletGooglePayTokenDecryptedName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => DigitalWalletGooglePayTokenDecryptedContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: DigitalWalletGooglePayTokenDecryptedType | undefined;
        id?: string | undefined;
        name?: DigitalWalletGooglePayTokenDecryptedName | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletGooglePayTokenDecryptedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletGooglePayTokenDecrypted
    > = z
        .object({
            type: DigitalWalletGooglePayTokenDecryptedType$.optional(),
            id: z.string().optional(),
            name: DigitalWalletGooglePayTokenDecryptedName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => DigitalWalletGooglePayTokenDecryptedContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
