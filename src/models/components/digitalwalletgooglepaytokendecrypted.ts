/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum DigitalWalletGooglePayTokenDecryptedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
 */
export enum DigitalWalletGooglePayTokenDecryptedName {
    DigitalWalletGooglePayTokenDecrypted = "digital-wallet-google-pay-token-decrypted",
}

/**
 * The type of payment instrument.
 */
export enum DigitalWalletGooglePayTokenDecryptedContextType {
    Dpan = "dpan",
    Fpan = "fpan",
}

/**
 * Google Pay decrypted token context.
 */
export type DigitalWalletGooglePayTokenDecryptedContext = {
    /**
     * Version information about the payment token.
     */
    version?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletGooglePayTokenDecryptedContextType | null | undefined;
    /**
     * Expiration of the decrypted data.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * ECI indicator, as defined by 3D Secure.
     */
    eci?: string | null | undefined;
    /**
     * Date and time at which the message expires as UTC milliseconds since epoch.
     */
    messageExpiration?: string | undefined;
    /**
     * A unique ID that identifies the message in case it needs to be revoked or located at a later time.
     */
    messageId?: string | undefined;
    /**
     * The type of the payment credential.
     */
    paymentMethod?: string | undefined;
};

/**
 * The result after decrypting an Google Pay token.
 */
export type DigitalWalletGooglePayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletGooglePayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
     */
    name?: DigitalWalletGooglePayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Google Pay decrypted token context.
     */
    context?: DigitalWalletGooglePayTokenDecryptedContext | undefined;
};

/** @internal */
export namespace DigitalWalletGooglePayTokenDecryptedType$ {
    export const inboundSchema = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletGooglePayTokenDecryptedName$ {
    export const inboundSchema = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletGooglePayTokenDecryptedContextType$ {
    export const inboundSchema = z.nativeEnum(DigitalWalletGooglePayTokenDecryptedContextType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletGooglePayTokenDecryptedContext$ {
    export const inboundSchema: z.ZodType<
        DigitalWalletGooglePayTokenDecryptedContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            version: z.string().optional(),
            type: z
                .nullable(DigitalWalletGooglePayTokenDecryptedContextType$.inboundSchema)
                .optional(),
            expiration_date: z.string().optional(),
            has_cryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            message_expiration: z.string().optional(),
            message_id: z.string().optional(),
            payment_method: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expiration_date: "expirationDate",
                has_cryptogram: "hasCryptogram",
                message_expiration: "messageExpiration",
                message_id: "messageId",
                payment_method: "paymentMethod",
            });
        });

    export type Outbound = {
        version?: string | undefined;
        type?: string | null | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        eci?: string | null | undefined;
        message_expiration?: string | undefined;
        message_id?: string | undefined;
        payment_method?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletGooglePayTokenDecryptedContext
    > = z
        .object({
            version: z.string().optional(),
            type: z
                .nullable(DigitalWalletGooglePayTokenDecryptedContextType$.outboundSchema)
                .optional(),
            expirationDate: z.string().optional(),
            hasCryptogram: z.boolean().optional(),
            eci: z.nullable(z.string()).optional(),
            messageExpiration: z.string().optional(),
            messageId: z.string().optional(),
            paymentMethod: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expirationDate: "expiration_date",
                hasCryptogram: "has_cryptogram",
                messageExpiration: "message_expiration",
                messageId: "message_id",
                paymentMethod: "payment_method",
            });
        });
}

/** @internal */
export namespace DigitalWalletGooglePayTokenDecrypted$ {
    export const inboundSchema: z.ZodType<
        DigitalWalletGooglePayTokenDecrypted,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: DigitalWalletGooglePayTokenDecryptedType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: DigitalWalletGooglePayTokenDecryptedName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => DigitalWalletGooglePayTokenDecryptedContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletGooglePayTokenDecryptedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletGooglePayTokenDecrypted
    > = z
        .object({
            type: DigitalWalletGooglePayTokenDecryptedType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: DigitalWalletGooglePayTokenDecryptedName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => DigitalWalletGooglePayTokenDecryptedContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
