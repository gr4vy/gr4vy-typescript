/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowBrowserLanguageConditionName {
    BrowserLanguage = "browser_language",
}

/**
 * The comparison to make on the browser language `value`.
 */
export enum FlowBrowserLanguageConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Browser language conditions with a name, operator, and value.
 */
export type FlowBrowserLanguageCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowBrowserLanguageConditionName;
    /**
     * The comparison to make on the browser language `value`.
     */
    operator: FlowBrowserLanguageConditionOperator;
    /**
     * Browser language two-letter ISO 639-1 codes to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export const FlowBrowserLanguageConditionName$ = z.nativeEnum(FlowBrowserLanguageConditionName);

/** @internal */
export const FlowBrowserLanguageConditionOperator$ = z.nativeEnum(
    FlowBrowserLanguageConditionOperator
);

/** @internal */
export namespace FlowBrowserLanguageCondition$ {
    export type Inbound = {
        name: FlowBrowserLanguageConditionName;
        operator: FlowBrowserLanguageConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowBrowserLanguageCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowBrowserLanguageConditionName$,
            operator: FlowBrowserLanguageConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowBrowserLanguageConditionName;
        operator: FlowBrowserLanguageConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowBrowserLanguageCondition> = z
        .object({
            name: FlowBrowserLanguageConditionName$,
            operator: FlowBrowserLanguageConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
