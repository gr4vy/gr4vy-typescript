/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowAmountRangeConditionName {
    Amount = "amount",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum FlowAmountRangeConditionOperator {
    IsBetween = "is_between",
}

/**
 * Amount value compare the transaction to.
 */
export type FlowAmountRangeConditionValue = {
    /**
     * Currency ISO codes to compare the transaction to.
     */
    currency?: string | undefined;
    /**
     * Minimum value to compare transaction value to.
     */
    min?: number | undefined;
    /**
     * Maximum value to compare transaction value to.
     */
    max?: number | undefined;
};

/**
 * Amount range conditions with a name, operator, and value.
 */
export type FlowAmountRangeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAmountRangeConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowAmountRangeConditionOperator;
    /**
     * Amount value compare the transaction to.
     */
    value: FlowAmountRangeConditionValue;
};

/** @internal */
export const FlowAmountRangeConditionName$: z.ZodNativeEnum<typeof FlowAmountRangeConditionName> =
    z.nativeEnum(FlowAmountRangeConditionName);

/** @internal */
export const FlowAmountRangeConditionOperator$: z.ZodNativeEnum<
    typeof FlowAmountRangeConditionOperator
> = z.nativeEnum(FlowAmountRangeConditionOperator);

/** @internal */
export namespace FlowAmountRangeConditionValue$ {
    export type Inbound = {
        currency?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
    };

    export const inboundSchema: z.ZodType<FlowAmountRangeConditionValue, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string().optional(),
            min: z.number().optional(),
            max: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.min === undefined ? null : { min: v.min }),
                ...(v.max === undefined ? null : { max: v.max }),
            };
        });

    export type Outbound = {
        currency?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAmountRangeConditionValue> =
        z
            .object({
                currency: z.string().optional(),
                min: z.number().optional(),
                max: z.number().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.currency === undefined ? null : { currency: v.currency }),
                    ...(v.min === undefined ? null : { min: v.min }),
                    ...(v.max === undefined ? null : { max: v.max }),
                };
            });
}

/** @internal */
export namespace FlowAmountRangeCondition$ {
    export type Inbound = {
        name: FlowAmountRangeConditionName;
        operator: FlowAmountRangeConditionOperator;
        value: FlowAmountRangeConditionValue$.Inbound;
    };

    export const inboundSchema: z.ZodType<FlowAmountRangeCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowAmountRangeConditionName$,
            operator: FlowAmountRangeConditionOperator$,
            value: z.lazy(() => FlowAmountRangeConditionValue$.inboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowAmountRangeConditionName;
        operator: FlowAmountRangeConditionOperator;
        value: FlowAmountRangeConditionValue$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAmountRangeCondition> = z
        .object({
            name: FlowAmountRangeConditionName$,
            operator: FlowAmountRangeConditionOperator$,
            value: z.lazy(() => FlowAmountRangeConditionValue$.outboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
