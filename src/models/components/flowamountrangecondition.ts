/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowAmountRangeConditionName {
    Amount = "amount",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum FlowAmountRangeConditionOperator {
    IsBetween = "is_between",
}

/**
 * Amount value compare the transaction to.
 */
export type FlowAmountRangeConditionValue = {
    /**
     * Currency ISO codes to compare the transaction to.
     */
    currency?: string | undefined;
    /**
     * Minimum value to compare transaction value to.
     */
    min?: number | undefined;
    /**
     * Maximum value to compare transaction value to.
     */
    max?: number | undefined;
};

/**
 * Amount range conditions with a name, operator, and value.
 */
export type FlowAmountRangeCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowAmountRangeConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowAmountRangeConditionOperator;
    /**
     * Amount value compare the transaction to.
     */
    value: FlowAmountRangeConditionValue;
};

/** @internal */
export namespace FlowAmountRangeConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowAmountRangeConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowAmountRangeConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowAmountRangeConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowAmountRangeConditionValue$ {
    export const inboundSchema: z.ZodType<FlowAmountRangeConditionValue, z.ZodTypeDef, unknown> =
        z.object({
            currency: z.string().optional(),
            min: z.number().optional(),
            max: z.number().optional(),
        });

    export type Outbound = {
        currency?: string | undefined;
        min?: number | undefined;
        max?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAmountRangeConditionValue> =
        z.object({
            currency: z.string().optional(),
            min: z.number().optional(),
            max: z.number().optional(),
        });
}

/** @internal */
export namespace FlowAmountRangeCondition$ {
    export const inboundSchema: z.ZodType<FlowAmountRangeCondition, z.ZodTypeDef, unknown> =
        z.object({
            name: FlowAmountRangeConditionName$.inboundSchema,
            operator: FlowAmountRangeConditionOperator$.inboundSchema,
            value: z.lazy(() => FlowAmountRangeConditionValue$.inboundSchema),
        });

    export type Outbound = {
        name: string;
        operator: string;
        value: FlowAmountRangeConditionValue$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowAmountRangeCondition> =
        z.object({
            name: FlowAmountRangeConditionName$.outboundSchema,
            operator: FlowAmountRangeConditionOperator$.outboundSchema,
            value: z.lazy(() => FlowAmountRangeConditionValue$.outboundSchema),
        });
}
