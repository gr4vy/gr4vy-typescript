/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { TaxIdKind, TaxIdKind$inboundSchema, TaxIdKind$outboundSchema } from "./taxidkind.js";
import * as z from "zod";

/**
 * The address for these buyer details.
 */
export type BillingDetailsSummaryAddress = {
    city?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    stateCode?: string | undefined;
    houseNumberOrName?: string | undefined;
    line1?: string | undefined;
    line2?: string | undefined;
    organization?: string | undefined;
};

/**
 * The tax ID for these buyer details.
 */
export type BillingDetailsSummaryTaxId = {
    value: string;
    /**
     * An enumeration.
     */
    kind: TaxIdKind;
};

export const BillingDetailsSummaryType = {
    BillingDetails: "billing-details",
} as const;
export type BillingDetailsSummaryType = ClosedEnum<typeof BillingDetailsSummaryType>;

/**
 * Base model with JSON encoders.
 */
export type BillingDetailsSummary = {
    /**
     * The first or given name for these buyer details.
     */
    firstName?: string | undefined;
    /**
     * The last or family name for these buyer details.
     */
    lastName?: string | undefined;
    /**
     * The email address for these buyer details.
     */
    emailAddress?: string | undefined;
    /**
     * The phone number for these buyer details.
     */
    phoneNumber?: string | undefined;
    /**
     * The address for these buyer details.
     */
    address?: BillingDetailsSummaryAddress | undefined;
    /**
     * The tax ID for these buyer details.
     */
    taxId?: BillingDetailsSummaryTaxId | undefined;
    type?: BillingDetailsSummaryType | undefined;
};

/** @internal */
export const BillingDetailsSummaryAddress$inboundSchema: z.ZodType<
    BillingDetailsSummaryAddress,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        city: z.string().optional(),
        country: z.string().optional(),
        postal_code: z.string().optional(),
        state: z.string().optional(),
        state_code: z.string().optional(),
        house_number_or_name: z.string().optional(),
        line1: z.string().optional(),
        line2: z.string().optional(),
        organization: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type BillingDetailsSummaryAddress$Outbound = {
    city?: string | undefined;
    country?: string | undefined;
    postal_code?: string | undefined;
    state?: string | undefined;
    state_code?: string | undefined;
    house_number_or_name?: string | undefined;
    line1?: string | undefined;
    line2?: string | undefined;
    organization?: string | undefined;
};

/** @internal */
export const BillingDetailsSummaryAddress$outboundSchema: z.ZodType<
    BillingDetailsSummaryAddress$Outbound,
    z.ZodTypeDef,
    BillingDetailsSummaryAddress
> = z
    .object({
        city: z.string().optional(),
        country: z.string().optional(),
        postalCode: z.string().optional(),
        state: z.string().optional(),
        stateCode: z.string().optional(),
        houseNumberOrName: z.string().optional(),
        line1: z.string().optional(),
        line2: z.string().optional(),
        organization: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsSummaryAddress$ {
    /** @deprecated use `BillingDetailsSummaryAddress$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsSummaryAddress$inboundSchema;
    /** @deprecated use `BillingDetailsSummaryAddress$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsSummaryAddress$outboundSchema;
    /** @deprecated use `BillingDetailsSummaryAddress$Outbound` instead. */
    export type Outbound = BillingDetailsSummaryAddress$Outbound;
}

/** @internal */
export const BillingDetailsSummaryTaxId$inboundSchema: z.ZodType<
    BillingDetailsSummaryTaxId,
    z.ZodTypeDef,
    unknown
> = z.object({
    value: z.string(),
    kind: TaxIdKind$inboundSchema,
});

/** @internal */
export type BillingDetailsSummaryTaxId$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const BillingDetailsSummaryTaxId$outboundSchema: z.ZodType<
    BillingDetailsSummaryTaxId$Outbound,
    z.ZodTypeDef,
    BillingDetailsSummaryTaxId
> = z.object({
    value: z.string(),
    kind: TaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsSummaryTaxId$ {
    /** @deprecated use `BillingDetailsSummaryTaxId$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsSummaryTaxId$inboundSchema;
    /** @deprecated use `BillingDetailsSummaryTaxId$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsSummaryTaxId$outboundSchema;
    /** @deprecated use `BillingDetailsSummaryTaxId$Outbound` instead. */
    export type Outbound = BillingDetailsSummaryTaxId$Outbound;
}

/** @internal */
export const BillingDetailsSummaryType$inboundSchema: z.ZodNativeEnum<
    typeof BillingDetailsSummaryType
> = z.nativeEnum(BillingDetailsSummaryType);

/** @internal */
export const BillingDetailsSummaryType$outboundSchema: z.ZodNativeEnum<
    typeof BillingDetailsSummaryType
> = BillingDetailsSummaryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsSummaryType$ {
    /** @deprecated use `BillingDetailsSummaryType$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsSummaryType$inboundSchema;
    /** @deprecated use `BillingDetailsSummaryType$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsSummaryType$outboundSchema;
}

/** @internal */
export const BillingDetailsSummary$inboundSchema: z.ZodType<
    BillingDetailsSummary,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_name: z.string().optional(),
        last_name: z.string().optional(),
        email_address: z.string().optional(),
        phone_number: z.string().optional(),
        address: z.lazy(() => BillingDetailsSummaryAddress$inboundSchema).optional(),
        tax_id: z.lazy(() => BillingDetailsSummaryTaxId$inboundSchema).optional(),
        type: BillingDetailsSummaryType$inboundSchema.default("billing-details"),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type BillingDetailsSummary$Outbound = {
    first_name?: string | undefined;
    last_name?: string | undefined;
    email_address?: string | undefined;
    phone_number?: string | undefined;
    address?: BillingDetailsSummaryAddress$Outbound | undefined;
    tax_id?: BillingDetailsSummaryTaxId$Outbound | undefined;
    type: string;
};

/** @internal */
export const BillingDetailsSummary$outboundSchema: z.ZodType<
    BillingDetailsSummary$Outbound,
    z.ZodTypeDef,
    BillingDetailsSummary
> = z
    .object({
        firstName: z.string().optional(),
        lastName: z.string().optional(),
        emailAddress: z.string().optional(),
        phoneNumber: z.string().optional(),
        address: z.lazy(() => BillingDetailsSummaryAddress$outboundSchema).optional(),
        taxId: z.lazy(() => BillingDetailsSummaryTaxId$outboundSchema).optional(),
        type: BillingDetailsSummaryType$outboundSchema.default("billing-details"),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsSummary$ {
    /** @deprecated use `BillingDetailsSummary$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsSummary$inboundSchema;
    /** @deprecated use `BillingDetailsSummary$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsSummary$outboundSchema;
    /** @deprecated use `BillingDetailsSummary$Outbound` instead. */
    export type Outbound = BillingDetailsSummary$Outbound;
}
