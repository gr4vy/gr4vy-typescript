/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { TaxIdKind, TaxIdKind$inboundSchema, TaxIdKind$outboundSchema } from "./taxidkind.js";
import * as z from "zod";

/**
 * The address for the person.
 */
export type Address = {
    /**
     * The city of the address
     */
    city?: string | null | undefined;
    /**
     * The country of the address
     */
    country?: string | null | undefined;
    /**
     * The postal code of the address
     */
    postalCode?: string | null | undefined;
    /**
     * The full state name of the address
     */
    state?: string | null | undefined;
    /**
     * The state code of the address
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name of the address.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The company or organization name of the address.
     */
    organization?: string | null | undefined;
};

/**
 * The tax ID for these buyer details.
 */
export type TaxId = {
    /**
     * The regional tax identifier
     */
    value: string;
    /**
     * The kind of tax identifier in a format matching `country.name`, e.g. `gb.vat`.
     */
    kind: TaxIdKind;
};

/**
 * Always `billing-details`.
 */
export const BillingDetailsSummaryType = {
    BillingDetails: "billing-details",
} as const;
/**
 * Always `billing-details`.
 */
export type BillingDetailsSummaryType = ClosedEnum<typeof BillingDetailsSummaryType>;

/**
 * Base model with JSON encoders.
 */
export type BillingDetailsSummary = {
    /**
     * The first or given name for the person.
     */
    firstName?: string | null | undefined;
    /**
     * The last or family name for the person.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the person.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the person.
     */
    phoneNumber?: string | null | undefined;
    /**
     * The address for the person.
     */
    address?: Address | null | undefined;
    /**
     * The tax ID for these buyer details.
     */
    taxId?: TaxId | null | undefined;
    /**
     * Always `billing-details`.
     */
    type?: BillingDetailsSummaryType | undefined;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postal_code: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type Address$Outbound = {
    city?: string | null | undefined;
    country?: string | null | undefined;
    postal_code?: string | null | undefined;
    state?: string | null | undefined;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<Address$Outbound, z.ZodTypeDef, Address> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postalCode: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
    /** @deprecated use `Address$inboundSchema` instead. */
    export const inboundSchema = Address$inboundSchema;
    /** @deprecated use `Address$outboundSchema` instead. */
    export const outboundSchema = Address$outboundSchema;
    /** @deprecated use `Address$Outbound` instead. */
    export type Outbound = Address$Outbound;
}

/** @internal */
export const TaxId$inboundSchema: z.ZodType<TaxId, z.ZodTypeDef, unknown> = z.object({
    value: z.string(),
    kind: TaxIdKind$inboundSchema,
});

/** @internal */
export type TaxId$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const TaxId$outboundSchema: z.ZodType<TaxId$Outbound, z.ZodTypeDef, TaxId> = z.object({
    value: z.string(),
    kind: TaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxId$ {
    /** @deprecated use `TaxId$inboundSchema` instead. */
    export const inboundSchema = TaxId$inboundSchema;
    /** @deprecated use `TaxId$outboundSchema` instead. */
    export const outboundSchema = TaxId$outboundSchema;
    /** @deprecated use `TaxId$Outbound` instead. */
    export type Outbound = TaxId$Outbound;
}

/** @internal */
export const BillingDetailsSummaryType$inboundSchema: z.ZodNativeEnum<
    typeof BillingDetailsSummaryType
> = z.nativeEnum(BillingDetailsSummaryType);

/** @internal */
export const BillingDetailsSummaryType$outboundSchema: z.ZodNativeEnum<
    typeof BillingDetailsSummaryType
> = BillingDetailsSummaryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsSummaryType$ {
    /** @deprecated use `BillingDetailsSummaryType$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsSummaryType$inboundSchema;
    /** @deprecated use `BillingDetailsSummaryType$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsSummaryType$outboundSchema;
}

/** @internal */
export const BillingDetailsSummary$inboundSchema: z.ZodType<
    BillingDetailsSummary,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => Address$inboundSchema)).optional(),
        tax_id: z.nullable(z.lazy(() => TaxId$inboundSchema)).optional(),
        type: BillingDetailsSummaryType$inboundSchema.default("billing-details"),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type BillingDetailsSummary$Outbound = {
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: Address$Outbound | null | undefined;
    tax_id?: TaxId$Outbound | null | undefined;
    type: string;
};

/** @internal */
export const BillingDetailsSummary$outboundSchema: z.ZodType<
    BillingDetailsSummary$Outbound,
    z.ZodTypeDef,
    BillingDetailsSummary
> = z
    .object({
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => Address$outboundSchema)).optional(),
        taxId: z.nullable(z.lazy(() => TaxId$outboundSchema)).optional(),
        type: BillingDetailsSummaryType$outboundSchema.default("billing-details"),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsSummary$ {
    /** @deprecated use `BillingDetailsSummary$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsSummary$inboundSchema;
    /** @deprecated use `BillingDetailsSummary$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsSummary$outboundSchema;
    /** @deprecated use `BillingDetailsSummary$Outbound` instead. */
    export type Outbound = BillingDetailsSummary$Outbound;
}
