/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaymentServiceTokenCreate = {
  /**
   * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
   */
  securityCode?: string | null | undefined;
  /**
   * The ID of the payment method to use.
   */
  paymentServiceId: string;
  /**
   * The redirect URL to redirect a buyer to after they have authorized the payment method.
   */
  redirectUrl: string;
};

/** @internal */
export const PaymentServiceTokenCreate$inboundSchema: z.ZodType<
  PaymentServiceTokenCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  security_code: z.nullable(z.string()).optional(),
  payment_service_id: z.string(),
  redirect_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "security_code": "securityCode",
    "payment_service_id": "paymentServiceId",
    "redirect_url": "redirectUrl",
  });
});

/** @internal */
export type PaymentServiceTokenCreate$Outbound = {
  security_code?: string | null | undefined;
  payment_service_id: string;
  redirect_url: string;
};

/** @internal */
export const PaymentServiceTokenCreate$outboundSchema: z.ZodType<
  PaymentServiceTokenCreate$Outbound,
  z.ZodTypeDef,
  PaymentServiceTokenCreate
> = z.object({
  securityCode: z.nullable(z.string()).optional(),
  paymentServiceId: z.string(),
  redirectUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    securityCode: "security_code",
    paymentServiceId: "payment_service_id",
    redirectUrl: "redirect_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceTokenCreate$ {
  /** @deprecated use `PaymentServiceTokenCreate$inboundSchema` instead. */
  export const inboundSchema = PaymentServiceTokenCreate$inboundSchema;
  /** @deprecated use `PaymentServiceTokenCreate$outboundSchema` instead. */
  export const outboundSchema = PaymentServiceTokenCreate$outboundSchema;
  /** @deprecated use `PaymentServiceTokenCreate$Outbound` instead. */
  export type Outbound = PaymentServiceTokenCreate$Outbound;
}

export function paymentServiceTokenCreateToJSON(
  paymentServiceTokenCreate: PaymentServiceTokenCreate,
): string {
  return JSON.stringify(
    PaymentServiceTokenCreate$outboundSchema.parse(paymentServiceTokenCreate),
  );
}

export function paymentServiceTokenCreateFromJSON(
  jsonString: string,
): SafeParseResult<PaymentServiceTokenCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentServiceTokenCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentServiceTokenCreate' from JSON`,
  );
}
