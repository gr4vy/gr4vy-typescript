/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionVoidSucceededEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionVoidSucceededEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionVoidSucceededEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-void-succeeded`.
 */
export const PaymentConnectorResponseTransactionVoidSucceededEventName = {
    PaymentConnectorResponseTransactionVoidSucceeded:
        "payment-connector-response-transaction-void-succeeded",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-void-succeeded`.
 */
export type PaymentConnectorResponseTransactionVoidSucceededEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionVoidSucceededEventName
>;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionVoidSucceededEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The date and time when this transaction was voided.
     */
    voidedAt?: Date | undefined;
};

/**
 * This event logs the exact details parsed details for a succeeded void
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionVoidSucceededEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionVoidSucceededEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-void-succeeded`.
     */
    name?: PaymentConnectorResponseTransactionVoidSucceededEventName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionVoidSucceededEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidSucceededEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionVoidSucceededEventType);

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidSucceededEventType
> = PaymentConnectorResponseTransactionVoidSucceededEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidSucceededEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidSucceededEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionVoidSucceededEventName);

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidSucceededEventName
> = PaymentConnectorResponseTransactionVoidSucceededEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidSucceededEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventName$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidSucceededEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
        payment_service_transaction_id: z.nullable(z.string()).optional(),
        voided_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            voided_at: "voidedAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionVoidSucceededEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
    payment_service_transaction_id?: string | null | undefined;
    voided_at?: string | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidSucceededEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionVoidSucceededEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
        paymentServiceTransactionId: z.nullable(z.string()).optional(),
        voidedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            voidedAt: "voided_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidSucceededEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEventContext$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionVoidSucceededEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidSucceededEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionVoidSucceededEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionVoidSucceededEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionVoidSucceededEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionVoidSucceededEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: PaymentConnectorResponseTransactionVoidSucceededEventContext$Outbound | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionVoidSucceededEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidSucceededEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionVoidSucceededEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionVoidSucceededEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionVoidSucceededEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionVoidSucceededEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidSucceededEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEvent$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEvent$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidSucceededEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidSucceededEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionVoidSucceededEvent$Outbound;
}
