/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Base model with JSON encoders.
 */
export type GiftCardCreate = {
    number: string;
    pin: string;
    buyerId?: string | undefined;
    buyerExternalIdentifier?: string | undefined;
};

/** @internal */
export const GiftCardCreate$inboundSchema: z.ZodType<GiftCardCreate, z.ZodTypeDef, unknown> = z
    .object({
        number: z.string(),
        pin: z.string(),
        buyer_id: z.string().optional(),
        buyer_external_identifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyer_id: "buyerId",
            buyer_external_identifier: "buyerExternalIdentifier",
        });
    });

/** @internal */
export type GiftCardCreate$Outbound = {
    number: string;
    pin: string;
    buyer_id?: string | undefined;
    buyer_external_identifier?: string | undefined;
};

/** @internal */
export const GiftCardCreate$outboundSchema: z.ZodType<
    GiftCardCreate$Outbound,
    z.ZodTypeDef,
    GiftCardCreate
> = z
    .object({
        number: z.string(),
        pin: z.string(),
        buyerId: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyerId: "buyer_id",
            buyerExternalIdentifier: "buyer_external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardCreate$ {
    /** @deprecated use `GiftCardCreate$inboundSchema` instead. */
    export const inboundSchema = GiftCardCreate$inboundSchema;
    /** @deprecated use `GiftCardCreate$outboundSchema` instead. */
    export const outboundSchema = GiftCardCreate$outboundSchema;
    /** @deprecated use `GiftCardCreate$Outbound` instead. */
    export type Outbound = GiftCardCreate$Outbound;
}
