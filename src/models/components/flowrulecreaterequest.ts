/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FlowAmountCondition, FlowAmountCondition$ } from "./flowamountcondition";
import { FlowAmountRangeCondition, FlowAmountRangeCondition$ } from "./flowamountrangecondition";
import { FlowAmountZeroCondition, FlowAmountZeroCondition$ } from "./flowamountzerocondition";
import {
    FlowAntiFraudDecisionCondition,
    FlowAntiFraudDecisionCondition$,
} from "./flowantifrauddecisioncondition";
import { FlowBINRangeCondition, FlowBINRangeCondition$ } from "./flowbinrangecondition";
import {
    FlowBrowserLanguageCondition,
    FlowBrowserLanguageCondition$,
} from "./flowbrowserlanguagecondition";
import { FlowCardCountryCondition, FlowCardCountryCondition$ } from "./flowcardcountrycondition";
import { FlowCardSchemeCondition, FlowCardSchemeCondition$ } from "./flowcardschemecondition";
import { FlowCardSourceCondition, FlowCardSourceCondition$ } from "./flowcardsourcecondition";
import { FlowCardTypeCondition, FlowCardTypeCondition$ } from "./flowcardtypecondition";
import { FlowCountryCondition, FlowCountryCondition$ } from "./flowcountrycondition";
import { FlowCurrencyCondition, FlowCurrencyCondition$ } from "./flowcurrencycondition";
import { FlowGiftCardBINCondition, FlowGiftCardBINCondition$ } from "./flowgiftcardbincondition";
import { FlowHasGiftCardsCondition, FlowHasGiftCardsCondition$ } from "./flowhasgiftcardscondition";
import {
    FlowIsSubsequentPaymentCondition,
    FlowIsSubsequentPaymentCondition$,
} from "./flowissubsequentpaymentcondition";
import {
    FlowMerchantInitiatedCondition,
    FlowMerchantInitiatedCondition$,
} from "./flowmerchantinitiatedcondition";
import { FlowMetadataCondition, FlowMetadataCondition$ } from "./flowmetadatacondition";
import {
    FlowPaymentMethodCondition,
    FlowPaymentMethodCondition$,
} from "./flowpaymentmethodcondition";
import {
    FlowPaymentMethodsCondition,
    FlowPaymentMethodsCondition$,
} from "./flowpaymentmethodscondition";
import {
    FlowPaymentSourceCondition,
    FlowPaymentSourceCondition$,
} from "./flowpaymentsourcecondition";
import {
    FlowProductCategoriesCondition,
    FlowProductCategoriesCondition$,
} from "./flowproductcategoriescondition";
import { FlowProductTypesCondition, FlowProductTypesCondition$ } from "./flowproducttypescondition";
import { FlowRuleBooleanOutcome, FlowRuleBooleanOutcome$ } from "./flowrulebooleanoutcome";
import { FlowRuleMethodOutcome, FlowRuleMethodOutcome$ } from "./flowrulemethodoutcome";
import { FlowRuleServiceOutcome, FlowRuleServiceOutcome$ } from "./flowruleserviceoutcome";
import {
    FlowRuleThreeDSecureOutcome,
    FlowRuleThreeDSecureOutcome$,
} from "./flowrulethreedsecureoutcome";
import { FlowRuleUUIDsListOutcome, FlowRuleUUIDsListOutcome$ } from "./flowruleuuidslistoutcome";
import { FlowSKUsCondition, FlowSKUsCondition$ } from "./flowskuscondition";
import * as z from "zod";

export type FlowRuleCreateRequestConditions =
    | FlowAmountCondition
    | FlowAmountRangeCondition
    | FlowAmountZeroCondition
    | FlowAntiFraudDecisionCondition
    | FlowBINRangeCondition
    | FlowBrowserLanguageCondition
    | FlowCardCountryCondition
    | FlowCardSchemeCondition
    | FlowCardSourceCondition
    | FlowCardTypeCondition
    | FlowCountryCondition
    | FlowCurrencyCondition
    | FlowGiftCardBINCondition
    | FlowHasGiftCardsCondition
    | FlowIsSubsequentPaymentCondition
    | FlowMetadataCondition
    | FlowMerchantInitiatedCondition
    | FlowPaymentMethodCondition
    | FlowPaymentMethodsCondition
    | FlowPaymentSourceCondition
    | FlowProductCategoriesCondition
    | FlowProductTypesCondition
    | FlowSKUsCondition;

export type FlowRuleCreateRequestOutcome =
    | FlowRuleBooleanOutcome
    | FlowRuleMethodOutcome
    | FlowRuleUUIDsListOutcome
    | FlowRuleThreeDSecureOutcome
    | FlowRuleServiceOutcome;

/**
 * A request to create a flow rule.
 */
export type FlowRuleCreateRequest = {
    /**
     * Description of the flow rule.
     */
    description?: string | undefined;
    /**
     * One or more conditions that apply for this rule. Each condition needs to match for this rule to go into effect.
     */
    conditions?:
        | Array<
              | FlowAmountCondition
              | FlowAmountRangeCondition
              | FlowAmountZeroCondition
              | FlowAntiFraudDecisionCondition
              | FlowBINRangeCondition
              | FlowBrowserLanguageCondition
              | FlowCardCountryCondition
              | FlowCardSchemeCondition
              | FlowCardSourceCondition
              | FlowCardTypeCondition
              | FlowCountryCondition
              | FlowCurrencyCondition
              | FlowGiftCardBINCondition
              | FlowHasGiftCardsCondition
              | FlowIsSubsequentPaymentCondition
              | FlowMetadataCondition
              | FlowMerchantInitiatedCondition
              | FlowPaymentMethodCondition
              | FlowPaymentMethodsCondition
              | FlowPaymentSourceCondition
              | FlowProductCategoriesCondition
              | FlowProductTypesCondition
              | FlowSKUsCondition
          >
        | undefined;
    outcome?:
        | FlowRuleBooleanOutcome
        | FlowRuleMethodOutcome
        | FlowRuleUUIDsListOutcome
        | FlowRuleThreeDSecureOutcome
        | FlowRuleServiceOutcome
        | undefined;
};

/** @internal */
export namespace FlowRuleCreateRequestConditions$ {
    export const inboundSchema: z.ZodType<FlowRuleCreateRequestConditions, z.ZodTypeDef, unknown> =
        z.union([
            FlowAmountCondition$.inboundSchema,
            FlowAmountRangeCondition$.inboundSchema,
            FlowAmountZeroCondition$.inboundSchema,
            FlowAntiFraudDecisionCondition$.inboundSchema,
            FlowBINRangeCondition$.inboundSchema,
            FlowBrowserLanguageCondition$.inboundSchema,
            FlowCardCountryCondition$.inboundSchema,
            FlowCardSchemeCondition$.inboundSchema,
            FlowCardSourceCondition$.inboundSchema,
            FlowCardTypeCondition$.inboundSchema,
            FlowCountryCondition$.inboundSchema,
            FlowCurrencyCondition$.inboundSchema,
            FlowGiftCardBINCondition$.inboundSchema,
            FlowHasGiftCardsCondition$.inboundSchema,
            FlowIsSubsequentPaymentCondition$.inboundSchema,
            FlowMetadataCondition$.inboundSchema,
            FlowMerchantInitiatedCondition$.inboundSchema,
            FlowPaymentMethodCondition$.inboundSchema,
            FlowPaymentMethodsCondition$.inboundSchema,
            FlowPaymentSourceCondition$.inboundSchema,
            FlowProductCategoriesCondition$.inboundSchema,
            FlowProductTypesCondition$.inboundSchema,
            FlowSKUsCondition$.inboundSchema,
        ]);

    export type Outbound =
        | FlowAmountCondition$.Outbound
        | FlowAmountRangeCondition$.Outbound
        | FlowAmountZeroCondition$.Outbound
        | FlowAntiFraudDecisionCondition$.Outbound
        | FlowBINRangeCondition$.Outbound
        | FlowBrowserLanguageCondition$.Outbound
        | FlowCardCountryCondition$.Outbound
        | FlowCardSchemeCondition$.Outbound
        | FlowCardSourceCondition$.Outbound
        | FlowCardTypeCondition$.Outbound
        | FlowCountryCondition$.Outbound
        | FlowCurrencyCondition$.Outbound
        | FlowGiftCardBINCondition$.Outbound
        | FlowHasGiftCardsCondition$.Outbound
        | FlowIsSubsequentPaymentCondition$.Outbound
        | FlowMetadataCondition$.Outbound
        | FlowMerchantInitiatedCondition$.Outbound
        | FlowPaymentMethodCondition$.Outbound
        | FlowPaymentMethodsCondition$.Outbound
        | FlowPaymentSourceCondition$.Outbound
        | FlowProductCategoriesCondition$.Outbound
        | FlowProductTypesCondition$.Outbound
        | FlowSKUsCondition$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowRuleCreateRequestConditions
    > = z.union([
        FlowAmountCondition$.outboundSchema,
        FlowAmountRangeCondition$.outboundSchema,
        FlowAmountZeroCondition$.outboundSchema,
        FlowAntiFraudDecisionCondition$.outboundSchema,
        FlowBINRangeCondition$.outboundSchema,
        FlowBrowserLanguageCondition$.outboundSchema,
        FlowCardCountryCondition$.outboundSchema,
        FlowCardSchemeCondition$.outboundSchema,
        FlowCardSourceCondition$.outboundSchema,
        FlowCardTypeCondition$.outboundSchema,
        FlowCountryCondition$.outboundSchema,
        FlowCurrencyCondition$.outboundSchema,
        FlowGiftCardBINCondition$.outboundSchema,
        FlowHasGiftCardsCondition$.outboundSchema,
        FlowIsSubsequentPaymentCondition$.outboundSchema,
        FlowMetadataCondition$.outboundSchema,
        FlowMerchantInitiatedCondition$.outboundSchema,
        FlowPaymentMethodCondition$.outboundSchema,
        FlowPaymentMethodsCondition$.outboundSchema,
        FlowPaymentSourceCondition$.outboundSchema,
        FlowProductCategoriesCondition$.outboundSchema,
        FlowProductTypesCondition$.outboundSchema,
        FlowSKUsCondition$.outboundSchema,
    ]);
}

/** @internal */
export namespace FlowRuleCreateRequestOutcome$ {
    export const inboundSchema: z.ZodType<FlowRuleCreateRequestOutcome, z.ZodTypeDef, unknown> =
        z.union([
            FlowRuleBooleanOutcome$.inboundSchema,
            FlowRuleMethodOutcome$.inboundSchema,
            FlowRuleUUIDsListOutcome$.inboundSchema,
            FlowRuleThreeDSecureOutcome$.inboundSchema,
            FlowRuleServiceOutcome$.inboundSchema,
        ]);

    export type Outbound =
        | FlowRuleBooleanOutcome$.Outbound
        | FlowRuleMethodOutcome$.Outbound
        | FlowRuleUUIDsListOutcome$.Outbound
        | FlowRuleThreeDSecureOutcome$.Outbound
        | FlowRuleServiceOutcome$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleCreateRequestOutcome> =
        z.union([
            FlowRuleBooleanOutcome$.outboundSchema,
            FlowRuleMethodOutcome$.outboundSchema,
            FlowRuleUUIDsListOutcome$.outboundSchema,
            FlowRuleThreeDSecureOutcome$.outboundSchema,
            FlowRuleServiceOutcome$.outboundSchema,
        ]);
}

/** @internal */
export namespace FlowRuleCreateRequest$ {
    export const inboundSchema: z.ZodType<FlowRuleCreateRequest, z.ZodTypeDef, unknown> = z.object({
        description: z.string().optional(),
        conditions: z
            .array(
                z.union([
                    FlowAmountCondition$.inboundSchema,
                    FlowAmountRangeCondition$.inboundSchema,
                    FlowAmountZeroCondition$.inboundSchema,
                    FlowAntiFraudDecisionCondition$.inboundSchema,
                    FlowBINRangeCondition$.inboundSchema,
                    FlowBrowserLanguageCondition$.inboundSchema,
                    FlowCardCountryCondition$.inboundSchema,
                    FlowCardSchemeCondition$.inboundSchema,
                    FlowCardSourceCondition$.inboundSchema,
                    FlowCardTypeCondition$.inboundSchema,
                    FlowCountryCondition$.inboundSchema,
                    FlowCurrencyCondition$.inboundSchema,
                    FlowGiftCardBINCondition$.inboundSchema,
                    FlowHasGiftCardsCondition$.inboundSchema,
                    FlowIsSubsequentPaymentCondition$.inboundSchema,
                    FlowMetadataCondition$.inboundSchema,
                    FlowMerchantInitiatedCondition$.inboundSchema,
                    FlowPaymentMethodCondition$.inboundSchema,
                    FlowPaymentMethodsCondition$.inboundSchema,
                    FlowPaymentSourceCondition$.inboundSchema,
                    FlowProductCategoriesCondition$.inboundSchema,
                    FlowProductTypesCondition$.inboundSchema,
                    FlowSKUsCondition$.inboundSchema,
                ])
            )
            .optional(),
        outcome: z
            .union([
                FlowRuleBooleanOutcome$.inboundSchema,
                FlowRuleMethodOutcome$.inboundSchema,
                FlowRuleUUIDsListOutcome$.inboundSchema,
                FlowRuleThreeDSecureOutcome$.inboundSchema,
                FlowRuleServiceOutcome$.inboundSchema,
            ])
            .optional(),
    });

    export type Outbound = {
        description?: string | undefined;
        conditions?:
            | Array<
                  | FlowAmountCondition$.Outbound
                  | FlowAmountRangeCondition$.Outbound
                  | FlowAmountZeroCondition$.Outbound
                  | FlowAntiFraudDecisionCondition$.Outbound
                  | FlowBINRangeCondition$.Outbound
                  | FlowBrowserLanguageCondition$.Outbound
                  | FlowCardCountryCondition$.Outbound
                  | FlowCardSchemeCondition$.Outbound
                  | FlowCardSourceCondition$.Outbound
                  | FlowCardTypeCondition$.Outbound
                  | FlowCountryCondition$.Outbound
                  | FlowCurrencyCondition$.Outbound
                  | FlowGiftCardBINCondition$.Outbound
                  | FlowHasGiftCardsCondition$.Outbound
                  | FlowIsSubsequentPaymentCondition$.Outbound
                  | FlowMetadataCondition$.Outbound
                  | FlowMerchantInitiatedCondition$.Outbound
                  | FlowPaymentMethodCondition$.Outbound
                  | FlowPaymentMethodsCondition$.Outbound
                  | FlowPaymentSourceCondition$.Outbound
                  | FlowProductCategoriesCondition$.Outbound
                  | FlowProductTypesCondition$.Outbound
                  | FlowSKUsCondition$.Outbound
              >
            | undefined;
        outcome?:
            | FlowRuleBooleanOutcome$.Outbound
            | FlowRuleMethodOutcome$.Outbound
            | FlowRuleUUIDsListOutcome$.Outbound
            | FlowRuleThreeDSecureOutcome$.Outbound
            | FlowRuleServiceOutcome$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleCreateRequest> =
        z.object({
            description: z.string().optional(),
            conditions: z
                .array(
                    z.union([
                        FlowAmountCondition$.outboundSchema,
                        FlowAmountRangeCondition$.outboundSchema,
                        FlowAmountZeroCondition$.outboundSchema,
                        FlowAntiFraudDecisionCondition$.outboundSchema,
                        FlowBINRangeCondition$.outboundSchema,
                        FlowBrowserLanguageCondition$.outboundSchema,
                        FlowCardCountryCondition$.outboundSchema,
                        FlowCardSchemeCondition$.outboundSchema,
                        FlowCardSourceCondition$.outboundSchema,
                        FlowCardTypeCondition$.outboundSchema,
                        FlowCountryCondition$.outboundSchema,
                        FlowCurrencyCondition$.outboundSchema,
                        FlowGiftCardBINCondition$.outboundSchema,
                        FlowHasGiftCardsCondition$.outboundSchema,
                        FlowIsSubsequentPaymentCondition$.outboundSchema,
                        FlowMetadataCondition$.outboundSchema,
                        FlowMerchantInitiatedCondition$.outboundSchema,
                        FlowPaymentMethodCondition$.outboundSchema,
                        FlowPaymentMethodsCondition$.outboundSchema,
                        FlowPaymentSourceCondition$.outboundSchema,
                        FlowProductCategoriesCondition$.outboundSchema,
                        FlowProductTypesCondition$.outboundSchema,
                        FlowSKUsCondition$.outboundSchema,
                    ])
                )
                .optional(),
            outcome: z
                .union([
                    FlowRuleBooleanOutcome$.outboundSchema,
                    FlowRuleMethodOutcome$.outboundSchema,
                    FlowRuleUUIDsListOutcome$.outboundSchema,
                    FlowRuleThreeDSecureOutcome$.outboundSchema,
                    FlowRuleServiceOutcome$.outboundSchema,
                ])
                .optional(),
        });
}
