/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    FlowAmountCondition,
    FlowAmountCondition$inboundSchema,
    FlowAmountCondition$Outbound,
    FlowAmountCondition$outboundSchema,
} from "./flowamountcondition.js";
import {
    FlowAmountRangeCondition,
    FlowAmountRangeCondition$inboundSchema,
    FlowAmountRangeCondition$Outbound,
    FlowAmountRangeCondition$outboundSchema,
} from "./flowamountrangecondition.js";
import {
    FlowAmountZeroCondition,
    FlowAmountZeroCondition$inboundSchema,
    FlowAmountZeroCondition$Outbound,
    FlowAmountZeroCondition$outboundSchema,
} from "./flowamountzerocondition.js";
import {
    FlowAntiFraudDecisionCondition,
    FlowAntiFraudDecisionCondition$inboundSchema,
    FlowAntiFraudDecisionCondition$Outbound,
    FlowAntiFraudDecisionCondition$outboundSchema,
} from "./flowantifrauddecisioncondition.js";
import {
    FlowBINRangeCondition,
    FlowBINRangeCondition$inboundSchema,
    FlowBINRangeCondition$Outbound,
    FlowBINRangeCondition$outboundSchema,
} from "./flowbinrangecondition.js";
import {
    FlowBrowserLanguageCondition,
    FlowBrowserLanguageCondition$inboundSchema,
    FlowBrowserLanguageCondition$Outbound,
    FlowBrowserLanguageCondition$outboundSchema,
} from "./flowbrowserlanguagecondition.js";
import {
    FlowCardCountryCondition,
    FlowCardCountryCondition$inboundSchema,
    FlowCardCountryCondition$Outbound,
    FlowCardCountryCondition$outboundSchema,
} from "./flowcardcountrycondition.js";
import {
    FlowCardSchemeCondition,
    FlowCardSchemeCondition$inboundSchema,
    FlowCardSchemeCondition$Outbound,
    FlowCardSchemeCondition$outboundSchema,
} from "./flowcardschemecondition.js";
import {
    FlowCardSourceCondition,
    FlowCardSourceCondition$inboundSchema,
    FlowCardSourceCondition$Outbound,
    FlowCardSourceCondition$outboundSchema,
} from "./flowcardsourcecondition.js";
import {
    FlowCardTypeCondition,
    FlowCardTypeCondition$inboundSchema,
    FlowCardTypeCondition$Outbound,
    FlowCardTypeCondition$outboundSchema,
} from "./flowcardtypecondition.js";
import {
    FlowCountryCondition,
    FlowCountryCondition$inboundSchema,
    FlowCountryCondition$Outbound,
    FlowCountryCondition$outboundSchema,
} from "./flowcountrycondition.js";
import {
    FlowCurrencyCondition,
    FlowCurrencyCondition$inboundSchema,
    FlowCurrencyCondition$Outbound,
    FlowCurrencyCondition$outboundSchema,
} from "./flowcurrencycondition.js";
import {
    FlowGiftCardBINCondition,
    FlowGiftCardBINCondition$inboundSchema,
    FlowGiftCardBINCondition$Outbound,
    FlowGiftCardBINCondition$outboundSchema,
} from "./flowgiftcardbincondition.js";
import {
    FlowHasGiftCardsCondition,
    FlowHasGiftCardsCondition$inboundSchema,
    FlowHasGiftCardsCondition$Outbound,
    FlowHasGiftCardsCondition$outboundSchema,
} from "./flowhasgiftcardscondition.js";
import {
    FlowIsSubsequentPaymentCondition,
    FlowIsSubsequentPaymentCondition$inboundSchema,
    FlowIsSubsequentPaymentCondition$Outbound,
    FlowIsSubsequentPaymentCondition$outboundSchema,
} from "./flowissubsequentpaymentcondition.js";
import {
    FlowMerchantInitiatedCondition,
    FlowMerchantInitiatedCondition$inboundSchema,
    FlowMerchantInitiatedCondition$Outbound,
    FlowMerchantInitiatedCondition$outboundSchema,
} from "./flowmerchantinitiatedcondition.js";
import {
    FlowMetadataCondition,
    FlowMetadataCondition$inboundSchema,
    FlowMetadataCondition$Outbound,
    FlowMetadataCondition$outboundSchema,
} from "./flowmetadatacondition.js";
import {
    FlowPaymentMethodCondition,
    FlowPaymentMethodCondition$inboundSchema,
    FlowPaymentMethodCondition$Outbound,
    FlowPaymentMethodCondition$outboundSchema,
} from "./flowpaymentmethodcondition.js";
import {
    FlowPaymentMethodsCondition,
    FlowPaymentMethodsCondition$inboundSchema,
    FlowPaymentMethodsCondition$Outbound,
    FlowPaymentMethodsCondition$outboundSchema,
} from "./flowpaymentmethodscondition.js";
import {
    FlowPaymentSourceCondition,
    FlowPaymentSourceCondition$inboundSchema,
    FlowPaymentSourceCondition$Outbound,
    FlowPaymentSourceCondition$outboundSchema,
} from "./flowpaymentsourcecondition.js";
import {
    FlowProductCategoriesCondition,
    FlowProductCategoriesCondition$inboundSchema,
    FlowProductCategoriesCondition$Outbound,
    FlowProductCategoriesCondition$outboundSchema,
} from "./flowproductcategoriescondition.js";
import {
    FlowProductTypesCondition,
    FlowProductTypesCondition$inboundSchema,
    FlowProductTypesCondition$Outbound,
    FlowProductTypesCondition$outboundSchema,
} from "./flowproducttypescondition.js";
import {
    FlowRuleBooleanOutcome,
    FlowRuleBooleanOutcome$inboundSchema,
    FlowRuleBooleanOutcome$Outbound,
    FlowRuleBooleanOutcome$outboundSchema,
} from "./flowrulebooleanoutcome.js";
import {
    FlowRuleMethodOutcome,
    FlowRuleMethodOutcome$inboundSchema,
    FlowRuleMethodOutcome$Outbound,
    FlowRuleMethodOutcome$outboundSchema,
} from "./flowrulemethodoutcome.js";
import {
    FlowRuleServiceOutcome,
    FlowRuleServiceOutcome$inboundSchema,
    FlowRuleServiceOutcome$Outbound,
    FlowRuleServiceOutcome$outboundSchema,
} from "./flowruleserviceoutcome.js";
import {
    FlowRuleThreeDSecureOutcome,
    FlowRuleThreeDSecureOutcome$inboundSchema,
    FlowRuleThreeDSecureOutcome$Outbound,
    FlowRuleThreeDSecureOutcome$outboundSchema,
} from "./flowrulethreedsecureoutcome.js";
import {
    FlowRuleUUIDsListOutcome,
    FlowRuleUUIDsListOutcome$inboundSchema,
    FlowRuleUUIDsListOutcome$Outbound,
    FlowRuleUUIDsListOutcome$outboundSchema,
} from "./flowruleuuidslistoutcome.js";
import {
    FlowSKUsCondition,
    FlowSKUsCondition$inboundSchema,
    FlowSKUsCondition$Outbound,
    FlowSKUsCondition$outboundSchema,
} from "./flowskuscondition.js";
import * as z from "zod";

export type FlowRuleCreateRequestConditions =
    | FlowAmountCondition
    | FlowAmountRangeCondition
    | FlowAmountZeroCondition
    | FlowAntiFraudDecisionCondition
    | FlowBINRangeCondition
    | FlowBrowserLanguageCondition
    | FlowCardCountryCondition
    | FlowCardSchemeCondition
    | FlowCardSourceCondition
    | FlowCardTypeCondition
    | FlowCountryCondition
    | FlowCurrencyCondition
    | FlowGiftCardBINCondition
    | FlowHasGiftCardsCondition
    | FlowIsSubsequentPaymentCondition
    | FlowMetadataCondition
    | FlowMerchantInitiatedCondition
    | FlowPaymentMethodCondition
    | FlowPaymentMethodsCondition
    | FlowPaymentSourceCondition
    | FlowProductCategoriesCondition
    | FlowProductTypesCondition
    | FlowSKUsCondition;

export type FlowRuleCreateRequestOutcome =
    | FlowRuleBooleanOutcome
    | FlowRuleMethodOutcome
    | FlowRuleUUIDsListOutcome
    | FlowRuleThreeDSecureOutcome
    | FlowRuleServiceOutcome;

/**
 * A request to create a flow rule.
 */
export type FlowRuleCreateRequest = {
    /**
     * Description of the flow rule.
     */
    description?: string | undefined;
    /**
     * One or more conditions that apply for this rule. Each condition needs to match for this rule to go into effect.
     */
    conditions?:
        | Array<
              | FlowAmountCondition
              | FlowAmountRangeCondition
              | FlowAmountZeroCondition
              | FlowAntiFraudDecisionCondition
              | FlowBINRangeCondition
              | FlowBrowserLanguageCondition
              | FlowCardCountryCondition
              | FlowCardSchemeCondition
              | FlowCardSourceCondition
              | FlowCardTypeCondition
              | FlowCountryCondition
              | FlowCurrencyCondition
              | FlowGiftCardBINCondition
              | FlowHasGiftCardsCondition
              | FlowIsSubsequentPaymentCondition
              | FlowMetadataCondition
              | FlowMerchantInitiatedCondition
              | FlowPaymentMethodCondition
              | FlowPaymentMethodsCondition
              | FlowPaymentSourceCondition
              | FlowProductCategoriesCondition
              | FlowProductTypesCondition
              | FlowSKUsCondition
          >
        | undefined;
    outcome?:
        | FlowRuleBooleanOutcome
        | FlowRuleMethodOutcome
        | FlowRuleUUIDsListOutcome
        | FlowRuleThreeDSecureOutcome
        | FlowRuleServiceOutcome
        | undefined;
};

/** @internal */
export const FlowRuleCreateRequestConditions$inboundSchema: z.ZodType<
    FlowRuleCreateRequestConditions,
    z.ZodTypeDef,
    unknown
> = z.union([
    FlowAmountCondition$inboundSchema,
    FlowAmountRangeCondition$inboundSchema,
    FlowAmountZeroCondition$inboundSchema,
    FlowAntiFraudDecisionCondition$inboundSchema,
    FlowBINRangeCondition$inboundSchema,
    FlowBrowserLanguageCondition$inboundSchema,
    FlowCardCountryCondition$inboundSchema,
    FlowCardSchemeCondition$inboundSchema,
    FlowCardSourceCondition$inboundSchema,
    FlowCardTypeCondition$inboundSchema,
    FlowCountryCondition$inboundSchema,
    FlowCurrencyCondition$inboundSchema,
    FlowGiftCardBINCondition$inboundSchema,
    FlowHasGiftCardsCondition$inboundSchema,
    FlowIsSubsequentPaymentCondition$inboundSchema,
    FlowMetadataCondition$inboundSchema,
    FlowMerchantInitiatedCondition$inboundSchema,
    FlowPaymentMethodCondition$inboundSchema,
    FlowPaymentMethodsCondition$inboundSchema,
    FlowPaymentSourceCondition$inboundSchema,
    FlowProductCategoriesCondition$inboundSchema,
    FlowProductTypesCondition$inboundSchema,
    FlowSKUsCondition$inboundSchema,
]);

/** @internal */
export type FlowRuleCreateRequestConditions$Outbound =
    | FlowAmountCondition$Outbound
    | FlowAmountRangeCondition$Outbound
    | FlowAmountZeroCondition$Outbound
    | FlowAntiFraudDecisionCondition$Outbound
    | FlowBINRangeCondition$Outbound
    | FlowBrowserLanguageCondition$Outbound
    | FlowCardCountryCondition$Outbound
    | FlowCardSchemeCondition$Outbound
    | FlowCardSourceCondition$Outbound
    | FlowCardTypeCondition$Outbound
    | FlowCountryCondition$Outbound
    | FlowCurrencyCondition$Outbound
    | FlowGiftCardBINCondition$Outbound
    | FlowHasGiftCardsCondition$Outbound
    | FlowIsSubsequentPaymentCondition$Outbound
    | FlowMetadataCondition$Outbound
    | FlowMerchantInitiatedCondition$Outbound
    | FlowPaymentMethodCondition$Outbound
    | FlowPaymentMethodsCondition$Outbound
    | FlowPaymentSourceCondition$Outbound
    | FlowProductCategoriesCondition$Outbound
    | FlowProductTypesCondition$Outbound
    | FlowSKUsCondition$Outbound;

/** @internal */
export const FlowRuleCreateRequestConditions$outboundSchema: z.ZodType<
    FlowRuleCreateRequestConditions$Outbound,
    z.ZodTypeDef,
    FlowRuleCreateRequestConditions
> = z.union([
    FlowAmountCondition$outboundSchema,
    FlowAmountRangeCondition$outboundSchema,
    FlowAmountZeroCondition$outboundSchema,
    FlowAntiFraudDecisionCondition$outboundSchema,
    FlowBINRangeCondition$outboundSchema,
    FlowBrowserLanguageCondition$outboundSchema,
    FlowCardCountryCondition$outboundSchema,
    FlowCardSchemeCondition$outboundSchema,
    FlowCardSourceCondition$outboundSchema,
    FlowCardTypeCondition$outboundSchema,
    FlowCountryCondition$outboundSchema,
    FlowCurrencyCondition$outboundSchema,
    FlowGiftCardBINCondition$outboundSchema,
    FlowHasGiftCardsCondition$outboundSchema,
    FlowIsSubsequentPaymentCondition$outboundSchema,
    FlowMetadataCondition$outboundSchema,
    FlowMerchantInitiatedCondition$outboundSchema,
    FlowPaymentMethodCondition$outboundSchema,
    FlowPaymentMethodsCondition$outboundSchema,
    FlowPaymentSourceCondition$outboundSchema,
    FlowProductCategoriesCondition$outboundSchema,
    FlowProductTypesCondition$outboundSchema,
    FlowSKUsCondition$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleCreateRequestConditions$ {
    /** @deprecated use `FlowRuleCreateRequestConditions$inboundSchema` instead. */
    export const inboundSchema = FlowRuleCreateRequestConditions$inboundSchema;
    /** @deprecated use `FlowRuleCreateRequestConditions$outboundSchema` instead. */
    export const outboundSchema = FlowRuleCreateRequestConditions$outboundSchema;
    /** @deprecated use `FlowRuleCreateRequestConditions$Outbound` instead. */
    export type Outbound = FlowRuleCreateRequestConditions$Outbound;
}

/** @internal */
export const FlowRuleCreateRequestOutcome$inboundSchema: z.ZodType<
    FlowRuleCreateRequestOutcome,
    z.ZodTypeDef,
    unknown
> = z.union([
    FlowRuleBooleanOutcome$inboundSchema,
    FlowRuleMethodOutcome$inboundSchema,
    FlowRuleUUIDsListOutcome$inboundSchema,
    FlowRuleThreeDSecureOutcome$inboundSchema,
    FlowRuleServiceOutcome$inboundSchema,
]);

/** @internal */
export type FlowRuleCreateRequestOutcome$Outbound =
    | FlowRuleBooleanOutcome$Outbound
    | FlowRuleMethodOutcome$Outbound
    | FlowRuleUUIDsListOutcome$Outbound
    | FlowRuleThreeDSecureOutcome$Outbound
    | FlowRuleServiceOutcome$Outbound;

/** @internal */
export const FlowRuleCreateRequestOutcome$outboundSchema: z.ZodType<
    FlowRuleCreateRequestOutcome$Outbound,
    z.ZodTypeDef,
    FlowRuleCreateRequestOutcome
> = z.union([
    FlowRuleBooleanOutcome$outboundSchema,
    FlowRuleMethodOutcome$outboundSchema,
    FlowRuleUUIDsListOutcome$outboundSchema,
    FlowRuleThreeDSecureOutcome$outboundSchema,
    FlowRuleServiceOutcome$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleCreateRequestOutcome$ {
    /** @deprecated use `FlowRuleCreateRequestOutcome$inboundSchema` instead. */
    export const inboundSchema = FlowRuleCreateRequestOutcome$inboundSchema;
    /** @deprecated use `FlowRuleCreateRequestOutcome$outboundSchema` instead. */
    export const outboundSchema = FlowRuleCreateRequestOutcome$outboundSchema;
    /** @deprecated use `FlowRuleCreateRequestOutcome$Outbound` instead. */
    export type Outbound = FlowRuleCreateRequestOutcome$Outbound;
}

/** @internal */
export const FlowRuleCreateRequest$inboundSchema: z.ZodType<
    FlowRuleCreateRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    description: z.string().optional(),
    conditions: z
        .array(
            z.union([
                FlowAmountCondition$inboundSchema,
                FlowAmountRangeCondition$inboundSchema,
                FlowAmountZeroCondition$inboundSchema,
                FlowAntiFraudDecisionCondition$inboundSchema,
                FlowBINRangeCondition$inboundSchema,
                FlowBrowserLanguageCondition$inboundSchema,
                FlowCardCountryCondition$inboundSchema,
                FlowCardSchemeCondition$inboundSchema,
                FlowCardSourceCondition$inboundSchema,
                FlowCardTypeCondition$inboundSchema,
                FlowCountryCondition$inboundSchema,
                FlowCurrencyCondition$inboundSchema,
                FlowGiftCardBINCondition$inboundSchema,
                FlowHasGiftCardsCondition$inboundSchema,
                FlowIsSubsequentPaymentCondition$inboundSchema,
                FlowMetadataCondition$inboundSchema,
                FlowMerchantInitiatedCondition$inboundSchema,
                FlowPaymentMethodCondition$inboundSchema,
                FlowPaymentMethodsCondition$inboundSchema,
                FlowPaymentSourceCondition$inboundSchema,
                FlowProductCategoriesCondition$inboundSchema,
                FlowProductTypesCondition$inboundSchema,
                FlowSKUsCondition$inboundSchema,
            ])
        )
        .optional(),
    outcome: z
        .union([
            FlowRuleBooleanOutcome$inboundSchema,
            FlowRuleMethodOutcome$inboundSchema,
            FlowRuleUUIDsListOutcome$inboundSchema,
            FlowRuleThreeDSecureOutcome$inboundSchema,
            FlowRuleServiceOutcome$inboundSchema,
        ])
        .optional(),
});

/** @internal */
export type FlowRuleCreateRequest$Outbound = {
    description?: string | undefined;
    conditions?:
        | Array<
              | FlowAmountCondition$Outbound
              | FlowAmountRangeCondition$Outbound
              | FlowAmountZeroCondition$Outbound
              | FlowAntiFraudDecisionCondition$Outbound
              | FlowBINRangeCondition$Outbound
              | FlowBrowserLanguageCondition$Outbound
              | FlowCardCountryCondition$Outbound
              | FlowCardSchemeCondition$Outbound
              | FlowCardSourceCondition$Outbound
              | FlowCardTypeCondition$Outbound
              | FlowCountryCondition$Outbound
              | FlowCurrencyCondition$Outbound
              | FlowGiftCardBINCondition$Outbound
              | FlowHasGiftCardsCondition$Outbound
              | FlowIsSubsequentPaymentCondition$Outbound
              | FlowMetadataCondition$Outbound
              | FlowMerchantInitiatedCondition$Outbound
              | FlowPaymentMethodCondition$Outbound
              | FlowPaymentMethodsCondition$Outbound
              | FlowPaymentSourceCondition$Outbound
              | FlowProductCategoriesCondition$Outbound
              | FlowProductTypesCondition$Outbound
              | FlowSKUsCondition$Outbound
          >
        | undefined;
    outcome?:
        | FlowRuleBooleanOutcome$Outbound
        | FlowRuleMethodOutcome$Outbound
        | FlowRuleUUIDsListOutcome$Outbound
        | FlowRuleThreeDSecureOutcome$Outbound
        | FlowRuleServiceOutcome$Outbound
        | undefined;
};

/** @internal */
export const FlowRuleCreateRequest$outboundSchema: z.ZodType<
    FlowRuleCreateRequest$Outbound,
    z.ZodTypeDef,
    FlowRuleCreateRequest
> = z.object({
    description: z.string().optional(),
    conditions: z
        .array(
            z.union([
                FlowAmountCondition$outboundSchema,
                FlowAmountRangeCondition$outboundSchema,
                FlowAmountZeroCondition$outboundSchema,
                FlowAntiFraudDecisionCondition$outboundSchema,
                FlowBINRangeCondition$outboundSchema,
                FlowBrowserLanguageCondition$outboundSchema,
                FlowCardCountryCondition$outboundSchema,
                FlowCardSchemeCondition$outboundSchema,
                FlowCardSourceCondition$outboundSchema,
                FlowCardTypeCondition$outboundSchema,
                FlowCountryCondition$outboundSchema,
                FlowCurrencyCondition$outboundSchema,
                FlowGiftCardBINCondition$outboundSchema,
                FlowHasGiftCardsCondition$outboundSchema,
                FlowIsSubsequentPaymentCondition$outboundSchema,
                FlowMetadataCondition$outboundSchema,
                FlowMerchantInitiatedCondition$outboundSchema,
                FlowPaymentMethodCondition$outboundSchema,
                FlowPaymentMethodsCondition$outboundSchema,
                FlowPaymentSourceCondition$outboundSchema,
                FlowProductCategoriesCondition$outboundSchema,
                FlowProductTypesCondition$outboundSchema,
                FlowSKUsCondition$outboundSchema,
            ])
        )
        .optional(),
    outcome: z
        .union([
            FlowRuleBooleanOutcome$outboundSchema,
            FlowRuleMethodOutcome$outboundSchema,
            FlowRuleUUIDsListOutcome$outboundSchema,
            FlowRuleThreeDSecureOutcome$outboundSchema,
            FlowRuleServiceOutcome$outboundSchema,
        ])
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleCreateRequest$ {
    /** @deprecated use `FlowRuleCreateRequest$inboundSchema` instead. */
    export const inboundSchema = FlowRuleCreateRequest$inboundSchema;
    /** @deprecated use `FlowRuleCreateRequest$outboundSchema` instead. */
    export const outboundSchema = FlowRuleCreateRequest$outboundSchema;
    /** @deprecated use `FlowRuleCreateRequest$Outbound` instead. */
    export type Outbound = FlowRuleCreateRequest$Outbound;
}
