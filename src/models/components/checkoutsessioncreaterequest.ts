/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { CartItem, CartItem$ } from "./cartitem";
import * as z from "zod";

/**
 * A request to create a checkout session.
 */
export type CheckoutSessionCreateRequest = {
    /**
     * An array of cart items that represents the line items of a transaction.
     */
    cartItems?: Array<CartItem> | null | undefined;
    /**
     * Any additional information about the transaction that you would like to
     *
     * @remarks
     * store as key-value pairs. This data is passed to payment service
     * providers that support it.
     */
    metadata?: { [k: string]: string } | null | undefined;
};

/** @internal */
export namespace CheckoutSessionCreateRequest$ {
    export const inboundSchema: z.ZodType<CheckoutSessionCreateRequest, z.ZodTypeDef, unknown> = z
        .object({
            cart_items: z.nullable(z.array(CartItem$.inboundSchema)).optional(),
            metadata: z.nullable(z.record(z.string())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                cart_items: "cartItems",
            });
        });

    export type Outbound = {
        cart_items?: Array<CartItem$.Outbound> | null | undefined;
        metadata?: { [k: string]: string } | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckoutSessionCreateRequest> = z
        .object({
            cartItems: z.nullable(z.array(CartItem$.outboundSchema)).optional(),
            metadata: z.nullable(z.record(z.string())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                cartItems: "cart_items",
            });
        });
}
