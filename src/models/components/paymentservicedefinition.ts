/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    PaymentServiceDefinitionConfiguration,
    PaymentServiceDefinitionConfiguration$,
} from "./paymentservicedefinitionconfiguration";
import * as z from "zod";

/**
 * `payment-service-definition`.
 */
export enum PaymentServiceDefinitionType {
    PaymentServiceDefinition = "payment-service-definition",
}

/**
 * The ID of the payment method that this services handles.
 */
export enum PaymentServiceDefinitionMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * Defines the type of input that needs to be rendered for this field.
 */
export enum Format {
    Text = "text",
    Multiline = "multiline",
    Number = "number",
}

/**
 * A single field that needs to be submitted for a payment service when it
 *
 * @remarks
 * is created.
 */
export type PaymentServiceDefinitionFields = {
    /**
     * The key of a field that needs to be submitted.
     */
    key?: string | undefined;
    /**
     * The name to display for a field in the dashboard.
     */
    displayName?: string | undefined;
    /**
     * Defines if this field is required when the service is created.
     */
    required?: boolean | undefined;
    /**
     * Defines the type of input that needs to be rendered for this field.
     */
    format?: Format | undefined;
    /**
     * Defines if this field is secret. When `true` the field is not
     *
     * @remarks
     * returned when querying the payment service.
     */
    secret?: boolean | undefined;
};

/**
 * The mode of this payment service.
 */
export enum PaymentServiceDefinitionMode {
    Card = "card",
    Redirect = "redirect",
    Applepay = "applepay",
    Googlepay = "googlepay",
}

/**
 * Features supported by the payment definition.
 */
export type SupportedFeatures = {
    /**
     * Supports [capturing](#operation/capture-transaction) authorized
     *
     * @remarks
     * transactions.
     */
    delayedCapture?: boolean | undefined;
    /**
     * Supports passing decrypted digital wallet (e.g. Apple Pay)
     *
     * @remarks
     * tokens to the underlying processor.
     */
    digitalWallets?: boolean | undefined;
    /**
     * Supports processing network tokens by default.
     */
    networkTokensDefault?: boolean | undefined;
    /**
     * Supports toggling processing of network tokens on or off.
     */
    networkTokensToggle?: boolean | undefined;
    /**
     * Supports processing transactions with either raw PAN details or
     *
     * @remarks
     * network tokens.
     */
    openLoop?: boolean | undefined;
    /**
     * Supports toggling processing as open-loop on or off.
     */
    openLoopToggle?: boolean | undefined;
    /**
     * Supports [partially refunding](#operation/refund-transaction) captured
     *
     * @remarks
     * transactions.
     */
    partialRefunds?: boolean | undefined;
    /**
     * Supports storing a payment method via tokenization.
     */
    paymentMethodTokenization?: boolean | undefined;
    /**
     * Supports toggling tokenization for a payment method on or off
     *
     * @remarks
     * from the dashboard.
     */
    paymentMethodTokenizationToggle?: boolean | undefined;
    /**
     * Supports [refunding](#operation/refund-transaction) captured
     *
     * @remarks
     * transactions.
     */
    refunds?: boolean | undefined;
    /**
     * Requires merchant to set up `webhook_url` manually with provider.
     */
    requiresWebhookSetup?: boolean | undefined;
    /**
     * Supports hosted 3-D Secure with a redirect.
     */
    threeDSecureHosted?: boolean | undefined;
    /**
     * Supports passing 3-D Secure data to the underlying processor.
     */
    threeDSecurePassThrough?: boolean | undefined;
    /**
     * Supports verifying the credentials entered while setting up the
     *
     * @remarks
     * underlying processor. This is for internal use only.
     */
    verifyCredentials?: boolean | undefined;
    /**
     * Supports [voiding](#operation/void-transaction) authorized
     *
     * @remarks
     * transactions.
     */
    void?: boolean | undefined;
};

/**
 * An available payment service that can be configured.
 */
export type PaymentServiceDefinition = {
    /**
     * The ID of the payment service. This is the underlying provider followed by a dash followed by the payment method ID.
     */
    id?: string | undefined;
    /**
     * `payment-service-definition`.
     */
    type?: PaymentServiceDefinitionType | undefined;
    /**
     * The display name of this service.
     */
    displayName?: string | undefined;
    /**
     * The ID of the payment method that this services handles.
     */
    method?: PaymentServiceDefinitionMethod | undefined;
    /**
     * A list of fields that need to be submitted when activating the payment. service.
     */
    fields?: Array<PaymentServiceDefinitionFields> | undefined;
    /**
     * A list of three-letter ISO currency codes that this service supports.
     */
    supportedCurrencies?: Array<string> | undefined;
    /**
     * A list of two-letter ISO country codes that this service supports.
     */
    supportedCountries?: Array<string> | undefined;
    /**
     * The mode of this payment service.
     */
    mode?: PaymentServiceDefinitionMode | undefined;
    /**
     * Features supported by the payment definition.
     */
    supportedFeatures?: SupportedFeatures | undefined;
    /**
     * An icon to display for the payment service.
     */
    iconUrl?: string | null | undefined;
    /**
     * Configuration items for the payment service.
     */
    configuration?: PaymentServiceDefinitionConfiguration | undefined;
};

/** @internal */
export const PaymentServiceDefinitionType$ = z.nativeEnum(PaymentServiceDefinitionType);

/** @internal */
export const PaymentServiceDefinitionMethod$ = z.nativeEnum(PaymentServiceDefinitionMethod);

/** @internal */
export const Format$ = z.nativeEnum(Format);

/** @internal */
export namespace PaymentServiceDefinitionFields$ {
    export type Inbound = {
        key?: string | undefined;
        display_name?: string | undefined;
        required?: boolean | undefined;
        format?: Format | undefined;
        secret?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentServiceDefinitionFields, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string().optional(),
            display_name: z.string().optional(),
            required: z.boolean().optional(),
            format: Format$.optional(),
            secret: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.format === undefined ? null : { format: v.format }),
                ...(v.secret === undefined ? null : { secret: v.secret }),
            };
        });

    export type Outbound = {
        key?: string | undefined;
        display_name?: string | undefined;
        required?: boolean | undefined;
        format?: Format | undefined;
        secret?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceDefinitionFields> =
        z
            .object({
                key: z.string().optional(),
                displayName: z.string().optional(),
                required: z.boolean().optional(),
                format: Format$.optional(),
                secret: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                    ...(v.required === undefined ? null : { required: v.required }),
                    ...(v.format === undefined ? null : { format: v.format }),
                    ...(v.secret === undefined ? null : { secret: v.secret }),
                };
            });
}

/** @internal */
export const PaymentServiceDefinitionMode$ = z.nativeEnum(PaymentServiceDefinitionMode);

/** @internal */
export namespace SupportedFeatures$ {
    export type Inbound = {
        delayed_capture?: boolean | undefined;
        digital_wallets?: boolean | undefined;
        network_tokens_default?: boolean | undefined;
        network_tokens_toggle?: boolean | undefined;
        open_loop?: boolean | undefined;
        open_loop_toggle?: boolean | undefined;
        partial_refunds?: boolean | undefined;
        payment_method_tokenization?: boolean | undefined;
        payment_method_tokenization_toggle?: boolean | undefined;
        refunds?: boolean | undefined;
        requires_webhook_setup?: boolean | undefined;
        three_d_secure_hosted?: boolean | undefined;
        three_d_secure_pass_through?: boolean | undefined;
        verify_credentials?: boolean | undefined;
        void?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<SupportedFeatures, z.ZodTypeDef, Inbound> = z
        .object({
            delayed_capture: z.boolean().optional(),
            digital_wallets: z.boolean().optional(),
            network_tokens_default: z.boolean().optional(),
            network_tokens_toggle: z.boolean().optional(),
            open_loop: z.boolean().optional(),
            open_loop_toggle: z.boolean().optional(),
            partial_refunds: z.boolean().optional(),
            payment_method_tokenization: z.boolean().optional(),
            payment_method_tokenization_toggle: z.boolean().optional(),
            refunds: z.boolean().optional(),
            requires_webhook_setup: z.boolean().optional(),
            three_d_secure_hosted: z.boolean().optional(),
            three_d_secure_pass_through: z.boolean().optional(),
            verify_credentials: z.boolean().optional(),
            void: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.delayed_capture === undefined ? null : { delayedCapture: v.delayed_capture }),
                ...(v.digital_wallets === undefined ? null : { digitalWallets: v.digital_wallets }),
                ...(v.network_tokens_default === undefined
                    ? null
                    : { networkTokensDefault: v.network_tokens_default }),
                ...(v.network_tokens_toggle === undefined
                    ? null
                    : { networkTokensToggle: v.network_tokens_toggle }),
                ...(v.open_loop === undefined ? null : { openLoop: v.open_loop }),
                ...(v.open_loop_toggle === undefined
                    ? null
                    : { openLoopToggle: v.open_loop_toggle }),
                ...(v.partial_refunds === undefined ? null : { partialRefunds: v.partial_refunds }),
                ...(v.payment_method_tokenization === undefined
                    ? null
                    : { paymentMethodTokenization: v.payment_method_tokenization }),
                ...(v.payment_method_tokenization_toggle === undefined
                    ? null
                    : { paymentMethodTokenizationToggle: v.payment_method_tokenization_toggle }),
                ...(v.refunds === undefined ? null : { refunds: v.refunds }),
                ...(v.requires_webhook_setup === undefined
                    ? null
                    : { requiresWebhookSetup: v.requires_webhook_setup }),
                ...(v.three_d_secure_hosted === undefined
                    ? null
                    : { threeDSecureHosted: v.three_d_secure_hosted }),
                ...(v.three_d_secure_pass_through === undefined
                    ? null
                    : { threeDSecurePassThrough: v.three_d_secure_pass_through }),
                ...(v.verify_credentials === undefined
                    ? null
                    : { verifyCredentials: v.verify_credentials }),
                ...(v.void === undefined ? null : { void: v.void }),
            };
        });

    export type Outbound = {
        delayed_capture?: boolean | undefined;
        digital_wallets?: boolean | undefined;
        network_tokens_default?: boolean | undefined;
        network_tokens_toggle?: boolean | undefined;
        open_loop?: boolean | undefined;
        open_loop_toggle?: boolean | undefined;
        partial_refunds?: boolean | undefined;
        payment_method_tokenization?: boolean | undefined;
        payment_method_tokenization_toggle?: boolean | undefined;
        refunds?: boolean | undefined;
        requires_webhook_setup?: boolean | undefined;
        three_d_secure_hosted?: boolean | undefined;
        three_d_secure_pass_through?: boolean | undefined;
        verify_credentials?: boolean | undefined;
        void?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SupportedFeatures> = z
        .object({
            delayedCapture: z.boolean().optional(),
            digitalWallets: z.boolean().optional(),
            networkTokensDefault: z.boolean().optional(),
            networkTokensToggle: z.boolean().optional(),
            openLoop: z.boolean().optional(),
            openLoopToggle: z.boolean().optional(),
            partialRefunds: z.boolean().optional(),
            paymentMethodTokenization: z.boolean().optional(),
            paymentMethodTokenizationToggle: z.boolean().optional(),
            refunds: z.boolean().optional(),
            requiresWebhookSetup: z.boolean().optional(),
            threeDSecureHosted: z.boolean().optional(),
            threeDSecurePassThrough: z.boolean().optional(),
            verifyCredentials: z.boolean().optional(),
            void: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.delayedCapture === undefined ? null : { delayed_capture: v.delayedCapture }),
                ...(v.digitalWallets === undefined ? null : { digital_wallets: v.digitalWallets }),
                ...(v.networkTokensDefault === undefined
                    ? null
                    : { network_tokens_default: v.networkTokensDefault }),
                ...(v.networkTokensToggle === undefined
                    ? null
                    : { network_tokens_toggle: v.networkTokensToggle }),
                ...(v.openLoop === undefined ? null : { open_loop: v.openLoop }),
                ...(v.openLoopToggle === undefined ? null : { open_loop_toggle: v.openLoopToggle }),
                ...(v.partialRefunds === undefined ? null : { partial_refunds: v.partialRefunds }),
                ...(v.paymentMethodTokenization === undefined
                    ? null
                    : { payment_method_tokenization: v.paymentMethodTokenization }),
                ...(v.paymentMethodTokenizationToggle === undefined
                    ? null
                    : { payment_method_tokenization_toggle: v.paymentMethodTokenizationToggle }),
                ...(v.refunds === undefined ? null : { refunds: v.refunds }),
                ...(v.requiresWebhookSetup === undefined
                    ? null
                    : { requires_webhook_setup: v.requiresWebhookSetup }),
                ...(v.threeDSecureHosted === undefined
                    ? null
                    : { three_d_secure_hosted: v.threeDSecureHosted }),
                ...(v.threeDSecurePassThrough === undefined
                    ? null
                    : { three_d_secure_pass_through: v.threeDSecurePassThrough }),
                ...(v.verifyCredentials === undefined
                    ? null
                    : { verify_credentials: v.verifyCredentials }),
                ...(v.void === undefined ? null : { void: v.void }),
            };
        });
}

/** @internal */
export namespace PaymentServiceDefinition$ {
    export type Inbound = {
        id?: string | undefined;
        type?: PaymentServiceDefinitionType | undefined;
        display_name?: string | undefined;
        method?: PaymentServiceDefinitionMethod | undefined;
        fields?: Array<PaymentServiceDefinitionFields$.Inbound> | undefined;
        supported_currencies?: Array<string> | undefined;
        supported_countries?: Array<string> | undefined;
        mode?: PaymentServiceDefinitionMode | undefined;
        supported_features?: SupportedFeatures$.Inbound | undefined;
        icon_url?: string | null | undefined;
        configuration?: PaymentServiceDefinitionConfiguration$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentServiceDefinition, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: PaymentServiceDefinitionType$.default(
                PaymentServiceDefinitionType.PaymentServiceDefinition
            ),
            display_name: z.string().optional(),
            method: PaymentServiceDefinitionMethod$.optional(),
            fields: z.array(z.lazy(() => PaymentServiceDefinitionFields$.inboundSchema)).optional(),
            supported_currencies: z.array(z.string()).optional(),
            supported_countries: z.array(z.string()).optional(),
            mode: PaymentServiceDefinitionMode$.optional(),
            supported_features: z.lazy(() => SupportedFeatures$.inboundSchema).optional(),
            icon_url: z.nullable(z.string()).optional(),
            configuration: PaymentServiceDefinitionConfiguration$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.supported_currencies === undefined
                    ? null
                    : { supportedCurrencies: v.supported_currencies }),
                ...(v.supported_countries === undefined
                    ? null
                    : { supportedCountries: v.supported_countries }),
                ...(v.mode === undefined ? null : { mode: v.mode }),
                ...(v.supported_features === undefined
                    ? null
                    : { supportedFeatures: v.supported_features }),
                ...(v.icon_url === undefined ? null : { iconUrl: v.icon_url }),
                ...(v.configuration === undefined ? null : { configuration: v.configuration }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: PaymentServiceDefinitionType;
        display_name?: string | undefined;
        method?: PaymentServiceDefinitionMethod | undefined;
        fields?: Array<PaymentServiceDefinitionFields$.Outbound> | undefined;
        supported_currencies?: Array<string> | undefined;
        supported_countries?: Array<string> | undefined;
        mode?: PaymentServiceDefinitionMode | undefined;
        supported_features?: SupportedFeatures$.Outbound | undefined;
        icon_url?: string | null | undefined;
        configuration?: PaymentServiceDefinitionConfiguration$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceDefinition> = z
        .object({
            id: z.string().optional(),
            type: PaymentServiceDefinitionType$.default(
                PaymentServiceDefinitionType.PaymentServiceDefinition
            ),
            displayName: z.string().optional(),
            method: PaymentServiceDefinitionMethod$.optional(),
            fields: z
                .array(z.lazy(() => PaymentServiceDefinitionFields$.outboundSchema))
                .optional(),
            supportedCurrencies: z.array(z.string()).optional(),
            supportedCountries: z.array(z.string()).optional(),
            mode: PaymentServiceDefinitionMode$.optional(),
            supportedFeatures: z.lazy(() => SupportedFeatures$.outboundSchema).optional(),
            iconUrl: z.nullable(z.string()).optional(),
            configuration: PaymentServiceDefinitionConfiguration$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.supportedCurrencies === undefined
                    ? null
                    : { supported_currencies: v.supportedCurrencies }),
                ...(v.supportedCountries === undefined
                    ? null
                    : { supported_countries: v.supportedCountries }),
                ...(v.mode === undefined ? null : { mode: v.mode }),
                ...(v.supportedFeatures === undefined
                    ? null
                    : { supported_features: v.supportedFeatures }),
                ...(v.iconUrl === undefined ? null : { icon_url: v.iconUrl }),
                ...(v.configuration === undefined ? null : { configuration: v.configuration }),
            };
        });
}
