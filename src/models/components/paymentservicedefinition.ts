/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DefinitionField,
  DefinitionField$inboundSchema,
  DefinitionField$Outbound,
  DefinitionField$outboundSchema,
} from "./definitionfield.js";
import {
  IntegrationClient,
  IntegrationClient$inboundSchema,
  IntegrationClient$outboundSchema,
} from "./integrationclient.js";
import {
  Method,
  Method$inboundSchema,
  Method$outboundSchema,
} from "./method.js";
import { Mode, Mode$inboundSchema, Mode$outboundSchema } from "./mode.js";
import {
  PaymentServiceConfiguration,
  PaymentServiceConfiguration$inboundSchema,
  PaymentServiceConfiguration$Outbound,
  PaymentServiceConfiguration$outboundSchema,
} from "./paymentserviceconfiguration.js";
import {
  RequiredCheckoutFields,
  RequiredCheckoutFields$inboundSchema,
  RequiredCheckoutFields$Outbound,
  RequiredCheckoutFields$outboundSchema,
} from "./requiredcheckoutfields.js";

export type PaymentServiceDefinition = {
  /**
   * The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.
   */
  id: string;
  /**
   * Always `payment-service-definition`.
   */
  type?: "payment-service-definition" | undefined;
  /**
   * A human friendly name for this service.
   */
  displayName: string;
  method: Method;
  /**
   * A list of credentials and related fields which can be configured for this service.
   */
  fields: Array<DefinitionField>;
  /**
   * A list of reporting fields which can be configured for this service.
   */
  reportingFields: Array<DefinitionField>;
  /**
   * A list of three-letter ISO currency codes that this service supports.
   */
  supportedCurrencies: Array<string>;
  /**
   * A list of two-letter ISO country codes that this service supports.
   */
  supportedCountries: Array<string>;
  mode: Mode;
  /**
   * An icon to display for the payment service.
   */
  iconUrl?: string | null | undefined;
  /**
   * Features supported by the payment service.
   */
  supportedFeatures: { [k: string]: boolean };
  /**
   * A list of condition that define when some fields must be provided with a transaction request.
   */
  requiredCheckoutFields: Array<RequiredCheckoutFields>;
  configuration: PaymentServiceConfiguration;
  /**
   * List of supported integration clients. Defaults to redirect for most redirect connectors.
   */
  supportedIntegrationClients: Array<IntegrationClient> | null;
};

/** @internal */
export const PaymentServiceDefinition$inboundSchema: z.ZodType<
  PaymentServiceDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.literal("payment-service-definition").default(
    "payment-service-definition",
  ),
  display_name: z.string(),
  method: Method$inboundSchema,
  fields: z.array(DefinitionField$inboundSchema),
  reporting_fields: z.array(DefinitionField$inboundSchema),
  supported_currencies: z.array(z.string()),
  supported_countries: z.array(z.string()),
  mode: Mode$inboundSchema,
  icon_url: z.nullable(z.string()).optional(),
  supported_features: z.record(z.boolean()),
  required_checkout_fields: z.array(RequiredCheckoutFields$inboundSchema),
  configuration: PaymentServiceConfiguration$inboundSchema,
  supported_integration_clients: z.nullable(
    z.array(IntegrationClient$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "reporting_fields": "reportingFields",
    "supported_currencies": "supportedCurrencies",
    "supported_countries": "supportedCountries",
    "icon_url": "iconUrl",
    "supported_features": "supportedFeatures",
    "required_checkout_fields": "requiredCheckoutFields",
    "supported_integration_clients": "supportedIntegrationClients",
  });
});

/** @internal */
export type PaymentServiceDefinition$Outbound = {
  id: string;
  type: "payment-service-definition";
  display_name: string;
  method: string;
  fields: Array<DefinitionField$Outbound>;
  reporting_fields: Array<DefinitionField$Outbound>;
  supported_currencies: Array<string>;
  supported_countries: Array<string>;
  mode: string;
  icon_url?: string | null | undefined;
  supported_features: { [k: string]: boolean };
  required_checkout_fields: Array<RequiredCheckoutFields$Outbound>;
  configuration: PaymentServiceConfiguration$Outbound;
  supported_integration_clients: Array<string> | null;
};

/** @internal */
export const PaymentServiceDefinition$outboundSchema: z.ZodType<
  PaymentServiceDefinition$Outbound,
  z.ZodTypeDef,
  PaymentServiceDefinition
> = z.object({
  id: z.string(),
  type: z.literal("payment-service-definition").default(
    "payment-service-definition" as const,
  ),
  displayName: z.string(),
  method: Method$outboundSchema,
  fields: z.array(DefinitionField$outboundSchema),
  reportingFields: z.array(DefinitionField$outboundSchema),
  supportedCurrencies: z.array(z.string()),
  supportedCountries: z.array(z.string()),
  mode: Mode$outboundSchema,
  iconUrl: z.nullable(z.string()).optional(),
  supportedFeatures: z.record(z.boolean()),
  requiredCheckoutFields: z.array(RequiredCheckoutFields$outboundSchema),
  configuration: PaymentServiceConfiguration$outboundSchema,
  supportedIntegrationClients: z.nullable(
    z.array(IntegrationClient$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    reportingFields: "reporting_fields",
    supportedCurrencies: "supported_currencies",
    supportedCountries: "supported_countries",
    iconUrl: "icon_url",
    supportedFeatures: "supported_features",
    requiredCheckoutFields: "required_checkout_fields",
    supportedIntegrationClients: "supported_integration_clients",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinition$ {
  /** @deprecated use `PaymentServiceDefinition$inboundSchema` instead. */
  export const inboundSchema = PaymentServiceDefinition$inboundSchema;
  /** @deprecated use `PaymentServiceDefinition$outboundSchema` instead. */
  export const outboundSchema = PaymentServiceDefinition$outboundSchema;
  /** @deprecated use `PaymentServiceDefinition$Outbound` instead. */
  export type Outbound = PaymentServiceDefinition$Outbound;
}

export function paymentServiceDefinitionToJSON(
  paymentServiceDefinition: PaymentServiceDefinition,
): string {
  return JSON.stringify(
    PaymentServiceDefinition$outboundSchema.parse(paymentServiceDefinition),
  );
}

export function paymentServiceDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<PaymentServiceDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentServiceDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentServiceDefinition' from JSON`,
  );
}
