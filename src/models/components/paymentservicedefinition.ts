/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    PaymentServiceDefinitionConfiguration,
    PaymentServiceDefinitionConfiguration$inboundSchema,
    PaymentServiceDefinitionConfiguration$Outbound,
    PaymentServiceDefinitionConfiguration$outboundSchema,
} from "./paymentservicedefinitionconfiguration.js";
import * as z from "zod";

/**
 * `payment-service-definition`.
 */
export const PaymentServiceDefinitionType = {
    PaymentServiceDefinition: "payment-service-definition",
} as const;
/**
 * `payment-service-definition`.
 */
export type PaymentServiceDefinitionType = ClosedEnum<typeof PaymentServiceDefinitionType>;

/**
 * The ID of the payment method that this services handles.
 */
export const PaymentServiceDefinitionMethod = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Kcp: "kcp",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Spei: "spei",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
/**
 * The ID of the payment method that this services handles.
 */
export type PaymentServiceDefinitionMethod = ClosedEnum<typeof PaymentServiceDefinitionMethod>;

/**
 * Defines the type of input that needs to be rendered for this field.
 */
export const Format = {
    Text: "text",
    Multiline: "multiline",
    Number: "number",
} as const;
/**
 * Defines the type of input that needs to be rendered for this field.
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * A single field that needs to be submitted for a payment service when it
 *
 * @remarks
 * is created.
 */
export type PaymentServiceDefinitionFields = {
    /**
     * The key of a field that needs to be submitted.
     */
    key?: string | undefined;
    /**
     * The name to display for a field in the dashboard.
     */
    displayName?: string | undefined;
    /**
     * Defines if this field is required when the service is created.
     */
    required?: boolean | undefined;
    /**
     * Defines the type of input that needs to be rendered for this field.
     */
    format?: Format | undefined;
    /**
     * Defines if this field is secret. When `true` the field is not
     *
     * @remarks
     * returned when querying the payment service.
     */
    secret?: boolean | undefined;
};

/**
 * The mode of this payment service.
 */
export const PaymentServiceDefinitionMode = {
    Card: "card",
    Redirect: "redirect",
    Applepay: "applepay",
    Googlepay: "googlepay",
    ClickToPay: "click-to-pay",
    CheckoutSession: "checkout-session",
} as const;
/**
 * The mode of this payment service.
 */
export type PaymentServiceDefinitionMode = ClosedEnum<typeof PaymentServiceDefinitionMode>;

/**
 * Features supported by the payment definition.
 */
export type SupportedFeatures = {
    /**
     * Supports [capturing](#operation/capture-transaction) authorized
     *
     * @remarks
     * transactions.
     */
    delayedCapture?: boolean | undefined;
    /**
     * Supports passing decrypted digital wallet (e.g. Apple Pay)
     *
     * @remarks
     * tokens to the underlying processor.
     */
    digitalWallets?: boolean | undefined;
    /**
     * Supports processing network tokens by default.
     */
    networkTokensDefault?: boolean | undefined;
    /**
     * Supports toggling processing of network tokens on or off.
     */
    networkTokensToggle?: boolean | undefined;
    /**
     * Supports processing transactions with either raw PAN details or
     *
     * @remarks
     * network tokens.
     */
    openLoop?: boolean | undefined;
    /**
     * Supports toggling processing as open-loop on or off.
     */
    openLoopToggle?: boolean | undefined;
    /**
     * Supports [partially refunding](#operation/refund-transaction) captured
     *
     * @remarks
     * transactions.
     */
    partialRefunds?: boolean | undefined;
    /**
     * Supports storing a payment method via tokenization.
     */
    paymentMethodTokenization?: boolean | undefined;
    /**
     * Supports toggling tokenization for a payment method on or off
     *
     * @remarks
     * from the dashboard.
     */
    paymentMethodTokenizationToggle?: boolean | undefined;
    /**
     * Supports [refunding](#operation/refund-transaction) captured
     *
     * @remarks
     * transactions.
     */
    refunds?: boolean | undefined;
    /**
     * Requires merchant to set up `webhook_url` manually with provider.
     */
    requiresWebhookSetup?: boolean | undefined;
    /**
     * Supports hosted 3-D Secure with a redirect.
     */
    threeDSecureHosted?: boolean | undefined;
    /**
     * Supports passing 3-D Secure data to the underlying processor.
     */
    threeDSecurePassThrough?: boolean | undefined;
    /**
     * Supports verifying the credentials entered while setting up the
     *
     * @remarks
     * underlying processor. This is for internal use only.
     */
    verifyCredentials?: boolean | undefined;
    /**
     * Supports [voiding](#operation/void-transaction) authorized
     *
     * @remarks
     * transactions.
     */
    void?: boolean | undefined;
};

/**
 * An available payment service that can be configured.
 */
export type PaymentServiceDefinition = {
    /**
     * The ID of the payment service. This is the underlying provider followed by a dash followed by the payment method ID.
     */
    id?: string | undefined;
    /**
     * `payment-service-definition`.
     */
    type?: PaymentServiceDefinitionType | undefined;
    /**
     * The display name of this service.
     */
    displayName?: string | undefined;
    /**
     * The ID of the payment method that this services handles.
     */
    method?: PaymentServiceDefinitionMethod | undefined;
    /**
     * A list of fields that need to be submitted when activating the payment. service.
     */
    fields?: Array<PaymentServiceDefinitionFields> | undefined;
    /**
     * A list of three-letter ISO currency codes that this service supports.
     */
    supportedCurrencies?: Array<string> | undefined;
    /**
     * A list of two-letter ISO country codes that this service supports.
     */
    supportedCountries?: Array<string> | undefined;
    /**
     * The mode of this payment service.
     */
    mode?: PaymentServiceDefinitionMode | undefined;
    /**
     * Features supported by the payment definition.
     */
    supportedFeatures?: SupportedFeatures | undefined;
    /**
     * An icon to display for the payment service.
     */
    iconUrl?: string | null | undefined;
    /**
     * Configuration items for the payment service.
     */
    configuration?: PaymentServiceDefinitionConfiguration | undefined;
};

/** @internal */
export const PaymentServiceDefinitionType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceDefinitionType
> = z.nativeEnum(PaymentServiceDefinitionType);

/** @internal */
export const PaymentServiceDefinitionType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceDefinitionType
> = PaymentServiceDefinitionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinitionType$ {
    /** @deprecated use `PaymentServiceDefinitionType$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceDefinitionType$inboundSchema;
    /** @deprecated use `PaymentServiceDefinitionType$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceDefinitionType$outboundSchema;
}

/** @internal */
export const PaymentServiceDefinitionMethod$inboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceDefinitionMethod
> = z.nativeEnum(PaymentServiceDefinitionMethod);

/** @internal */
export const PaymentServiceDefinitionMethod$outboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceDefinitionMethod
> = PaymentServiceDefinitionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinitionMethod$ {
    /** @deprecated use `PaymentServiceDefinitionMethod$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceDefinitionMethod$inboundSchema;
    /** @deprecated use `PaymentServiceDefinitionMethod$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceDefinitionMethod$outboundSchema;
}

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z.nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> = Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
    /** @deprecated use `Format$inboundSchema` instead. */
    export const inboundSchema = Format$inboundSchema;
    /** @deprecated use `Format$outboundSchema` instead. */
    export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const PaymentServiceDefinitionFields$inboundSchema: z.ZodType<
    PaymentServiceDefinitionFields,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        key: z.string().optional(),
        display_name: z.string().optional(),
        required: z.boolean().optional(),
        format: Format$inboundSchema.optional(),
        secret: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
        });
    });

/** @internal */
export type PaymentServiceDefinitionFields$Outbound = {
    key?: string | undefined;
    display_name?: string | undefined;
    required?: boolean | undefined;
    format?: string | undefined;
    secret?: boolean | undefined;
};

/** @internal */
export const PaymentServiceDefinitionFields$outboundSchema: z.ZodType<
    PaymentServiceDefinitionFields$Outbound,
    z.ZodTypeDef,
    PaymentServiceDefinitionFields
> = z
    .object({
        key: z.string().optional(),
        displayName: z.string().optional(),
        required: z.boolean().optional(),
        format: Format$outboundSchema.optional(),
        secret: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinitionFields$ {
    /** @deprecated use `PaymentServiceDefinitionFields$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceDefinitionFields$inboundSchema;
    /** @deprecated use `PaymentServiceDefinitionFields$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceDefinitionFields$outboundSchema;
    /** @deprecated use `PaymentServiceDefinitionFields$Outbound` instead. */
    export type Outbound = PaymentServiceDefinitionFields$Outbound;
}

/** @internal */
export const PaymentServiceDefinitionMode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceDefinitionMode
> = z.nativeEnum(PaymentServiceDefinitionMode);

/** @internal */
export const PaymentServiceDefinitionMode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceDefinitionMode
> = PaymentServiceDefinitionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinitionMode$ {
    /** @deprecated use `PaymentServiceDefinitionMode$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceDefinitionMode$inboundSchema;
    /** @deprecated use `PaymentServiceDefinitionMode$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceDefinitionMode$outboundSchema;
}

/** @internal */
export const SupportedFeatures$inboundSchema: z.ZodType<SupportedFeatures, z.ZodTypeDef, unknown> =
    z
        .object({
            delayed_capture: z.boolean().optional(),
            digital_wallets: z.boolean().optional(),
            network_tokens_default: z.boolean().optional(),
            network_tokens_toggle: z.boolean().optional(),
            open_loop: z.boolean().optional(),
            open_loop_toggle: z.boolean().optional(),
            partial_refunds: z.boolean().optional(),
            payment_method_tokenization: z.boolean().optional(),
            payment_method_tokenization_toggle: z.boolean().optional(),
            refunds: z.boolean().optional(),
            requires_webhook_setup: z.boolean().optional(),
            three_d_secure_hosted: z.boolean().optional(),
            three_d_secure_pass_through: z.boolean().optional(),
            verify_credentials: z.boolean().optional(),
            void: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                delayed_capture: "delayedCapture",
                digital_wallets: "digitalWallets",
                network_tokens_default: "networkTokensDefault",
                network_tokens_toggle: "networkTokensToggle",
                open_loop: "openLoop",
                open_loop_toggle: "openLoopToggle",
                partial_refunds: "partialRefunds",
                payment_method_tokenization: "paymentMethodTokenization",
                payment_method_tokenization_toggle: "paymentMethodTokenizationToggle",
                requires_webhook_setup: "requiresWebhookSetup",
                three_d_secure_hosted: "threeDSecureHosted",
                three_d_secure_pass_through: "threeDSecurePassThrough",
                verify_credentials: "verifyCredentials",
            });
        });

/** @internal */
export type SupportedFeatures$Outbound = {
    delayed_capture?: boolean | undefined;
    digital_wallets?: boolean | undefined;
    network_tokens_default?: boolean | undefined;
    network_tokens_toggle?: boolean | undefined;
    open_loop?: boolean | undefined;
    open_loop_toggle?: boolean | undefined;
    partial_refunds?: boolean | undefined;
    payment_method_tokenization?: boolean | undefined;
    payment_method_tokenization_toggle?: boolean | undefined;
    refunds?: boolean | undefined;
    requires_webhook_setup?: boolean | undefined;
    three_d_secure_hosted?: boolean | undefined;
    three_d_secure_pass_through?: boolean | undefined;
    verify_credentials?: boolean | undefined;
    void?: boolean | undefined;
};

/** @internal */
export const SupportedFeatures$outboundSchema: z.ZodType<
    SupportedFeatures$Outbound,
    z.ZodTypeDef,
    SupportedFeatures
> = z
    .object({
        delayedCapture: z.boolean().optional(),
        digitalWallets: z.boolean().optional(),
        networkTokensDefault: z.boolean().optional(),
        networkTokensToggle: z.boolean().optional(),
        openLoop: z.boolean().optional(),
        openLoopToggle: z.boolean().optional(),
        partialRefunds: z.boolean().optional(),
        paymentMethodTokenization: z.boolean().optional(),
        paymentMethodTokenizationToggle: z.boolean().optional(),
        refunds: z.boolean().optional(),
        requiresWebhookSetup: z.boolean().optional(),
        threeDSecureHosted: z.boolean().optional(),
        threeDSecurePassThrough: z.boolean().optional(),
        verifyCredentials: z.boolean().optional(),
        void: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            delayedCapture: "delayed_capture",
            digitalWallets: "digital_wallets",
            networkTokensDefault: "network_tokens_default",
            networkTokensToggle: "network_tokens_toggle",
            openLoop: "open_loop",
            openLoopToggle: "open_loop_toggle",
            partialRefunds: "partial_refunds",
            paymentMethodTokenization: "payment_method_tokenization",
            paymentMethodTokenizationToggle: "payment_method_tokenization_toggle",
            requiresWebhookSetup: "requires_webhook_setup",
            threeDSecureHosted: "three_d_secure_hosted",
            threeDSecurePassThrough: "three_d_secure_pass_through",
            verifyCredentials: "verify_credentials",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedFeatures$ {
    /** @deprecated use `SupportedFeatures$inboundSchema` instead. */
    export const inboundSchema = SupportedFeatures$inboundSchema;
    /** @deprecated use `SupportedFeatures$outboundSchema` instead. */
    export const outboundSchema = SupportedFeatures$outboundSchema;
    /** @deprecated use `SupportedFeatures$Outbound` instead. */
    export type Outbound = SupportedFeatures$Outbound;
}

/** @internal */
export const PaymentServiceDefinition$inboundSchema: z.ZodType<
    PaymentServiceDefinition,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string().optional(),
        type: PaymentServiceDefinitionType$inboundSchema.default("payment-service-definition"),
        display_name: z.string().optional(),
        method: PaymentServiceDefinitionMethod$inboundSchema.optional(),
        fields: z.array(z.lazy(() => PaymentServiceDefinitionFields$inboundSchema)).optional(),
        supported_currencies: z.array(z.string()).optional(),
        supported_countries: z.array(z.string()).optional(),
        mode: PaymentServiceDefinitionMode$inboundSchema.optional(),
        supported_features: z.lazy(() => SupportedFeatures$inboundSchema).optional(),
        icon_url: z.nullable(z.string()).optional(),
        configuration: PaymentServiceDefinitionConfiguration$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
            supported_currencies: "supportedCurrencies",
            supported_countries: "supportedCountries",
            supported_features: "supportedFeatures",
            icon_url: "iconUrl",
        });
    });

/** @internal */
export type PaymentServiceDefinition$Outbound = {
    id?: string | undefined;
    type: string;
    display_name?: string | undefined;
    method?: string | undefined;
    fields?: Array<PaymentServiceDefinitionFields$Outbound> | undefined;
    supported_currencies?: Array<string> | undefined;
    supported_countries?: Array<string> | undefined;
    mode?: string | undefined;
    supported_features?: SupportedFeatures$Outbound | undefined;
    icon_url?: string | null | undefined;
    configuration?: PaymentServiceDefinitionConfiguration$Outbound | undefined;
};

/** @internal */
export const PaymentServiceDefinition$outboundSchema: z.ZodType<
    PaymentServiceDefinition$Outbound,
    z.ZodTypeDef,
    PaymentServiceDefinition
> = z
    .object({
        id: z.string().optional(),
        type: PaymentServiceDefinitionType$outboundSchema.default("payment-service-definition"),
        displayName: z.string().optional(),
        method: PaymentServiceDefinitionMethod$outboundSchema.optional(),
        fields: z.array(z.lazy(() => PaymentServiceDefinitionFields$outboundSchema)).optional(),
        supportedCurrencies: z.array(z.string()).optional(),
        supportedCountries: z.array(z.string()).optional(),
        mode: PaymentServiceDefinitionMode$outboundSchema.optional(),
        supportedFeatures: z.lazy(() => SupportedFeatures$outboundSchema).optional(),
        iconUrl: z.nullable(z.string()).optional(),
        configuration: PaymentServiceDefinitionConfiguration$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
            supportedCurrencies: "supported_currencies",
            supportedCountries: "supported_countries",
            supportedFeatures: "supported_features",
            iconUrl: "icon_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinition$ {
    /** @deprecated use `PaymentServiceDefinition$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceDefinition$inboundSchema;
    /** @deprecated use `PaymentServiceDefinition$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceDefinition$outboundSchema;
    /** @deprecated use `PaymentServiceDefinition$Outbound` instead. */
    export type Outbound = PaymentServiceDefinition$Outbound;
}
