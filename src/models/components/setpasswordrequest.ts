/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A request to set a password for a user.
 */
export type SetPasswordRequest = {
    /**
     * Unique reset token valid for 7 days.
     */
    resetToken?: string | undefined;
    /**
     * The password the user to log in with.
     */
    password?: string | undefined;
};

/** @internal */
export namespace SetPasswordRequest$ {
    export type Inbound = {
        reset_token?: string | undefined;
        password?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SetPasswordRequest, z.ZodTypeDef, Inbound> = z
        .object({
            reset_token: z.string().optional(),
            password: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.reset_token === undefined ? null : { resetToken: v.reset_token }),
                ...(v.password === undefined ? null : { password: v.password }),
            };
        });

    export type Outbound = {
        reset_token?: string | undefined;
        password?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SetPasswordRequest> = z
        .object({
            resetToken: z.string().optional(),
            password: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.resetToken === undefined ? null : { reset_token: v.resetToken }),
                ...(v.password === undefined ? null : { password: v.password }),
            };
        });
}
