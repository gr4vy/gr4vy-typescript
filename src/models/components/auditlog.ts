/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * `audit-log`.
 */
export const AuditLogType = {
    AuditLog: "audit-log",
} as const;
/**
 * `audit-log`.
 */
export type AuditLogType = ClosedEnum<typeof AuditLogType>;

/**
 * The action that was performed.
 */
export const AuditLogAction = {
    Created: "created",
    Updated: "updated",
    Deleted: "deleted",
} as const;
/**
 * The action that was performed.
 */
export type AuditLogAction = ClosedEnum<typeof AuditLogAction>;

/**
 * The status of the user.
 */
export const AuditLogStatus = {
    Active: "active",
    Pending: "pending",
    Deleted: "deleted",
} as const;
/**
 * The status of the user.
 */
export type AuditLogStatus = ClosedEnum<typeof AuditLogStatus>;

/**
 * The user who performed the action.
 */
export type User = {
    /**
     * The ID of the user.
     */
    id?: string | undefined;
    /**
     * The name of the user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | null | undefined;
    /**
     * Whether the user is Gr4vy staff.
     */
    staff?: boolean | undefined;
    /**
     * The status of the user.
     */
    status?: AuditLogStatus | undefined;
};

/**
 * The resource that was changed.
 */
export type Resource = {
    /**
     * The type of the resource.
     */
    type?: string | undefined;
    /**
     * The ID of the resource.
     */
    id?: string | undefined;
    /**
     * The descriptive name of the resource.
     */
    name?: string | undefined;
};

/**
 * A log of a change that occurred in the Gr4vy instance.
 */
export type AuditLog = {
    /**
     * `audit-log`.
     */
    type?: AuditLogType | undefined;
    /**
     * The ID of the audit log entry.
     */
    id?: string | undefined;
    /**
     * The date and time that the action was performed.
     */
    timestamp?: Date | undefined;
    /**
     * The action that was performed.
     */
    action?: AuditLogAction | undefined;
    /**
     * The ID of the merchant account this entry was created for.
     */
    merchantAccountId?: string | null | undefined;
    /**
     * The user who performed the action.
     */
    user?: User | undefined;
    /**
     * The resource that was changed.
     */
    resource?: Resource | undefined;
};

/** @internal */
export const AuditLogType$inboundSchema: z.ZodNativeEnum<typeof AuditLogType> =
    z.nativeEnum(AuditLogType);

/** @internal */
export const AuditLogType$outboundSchema: z.ZodNativeEnum<typeof AuditLogType> =
    AuditLogType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogType$ {
    /** @deprecated use `AuditLogType$inboundSchema` instead. */
    export const inboundSchema = AuditLogType$inboundSchema;
    /** @deprecated use `AuditLogType$outboundSchema` instead. */
    export const outboundSchema = AuditLogType$outboundSchema;
}

/** @internal */
export const AuditLogAction$inboundSchema: z.ZodNativeEnum<typeof AuditLogAction> =
    z.nativeEnum(AuditLogAction);

/** @internal */
export const AuditLogAction$outboundSchema: z.ZodNativeEnum<typeof AuditLogAction> =
    AuditLogAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogAction$ {
    /** @deprecated use `AuditLogAction$inboundSchema` instead. */
    export const inboundSchema = AuditLogAction$inboundSchema;
    /** @deprecated use `AuditLogAction$outboundSchema` instead. */
    export const outboundSchema = AuditLogAction$outboundSchema;
}

/** @internal */
export const AuditLogStatus$inboundSchema: z.ZodNativeEnum<typeof AuditLogStatus> =
    z.nativeEnum(AuditLogStatus);

/** @internal */
export const AuditLogStatus$outboundSchema: z.ZodNativeEnum<typeof AuditLogStatus> =
    AuditLogStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogStatus$ {
    /** @deprecated use `AuditLogStatus$inboundSchema` instead. */
    export const inboundSchema = AuditLogStatus$inboundSchema;
    /** @deprecated use `AuditLogStatus$outboundSchema` instead. */
    export const outboundSchema = AuditLogStatus$outboundSchema;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        email_address: z.nullable(z.string()).optional(),
        staff: z.boolean().optional(),
        status: AuditLogStatus$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            email_address: "emailAddress",
        });
    });

/** @internal */
export type User$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    email_address?: string | null | undefined;
    staff?: boolean | undefined;
    status?: string | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        emailAddress: z.nullable(z.string()).optional(),
        staff: z.boolean().optional(),
        status: AuditLogStatus$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            emailAddress: "email_address",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
    /** @deprecated use `User$inboundSchema` instead. */
    export const inboundSchema = User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    export const outboundSchema = User$outboundSchema;
    /** @deprecated use `User$Outbound` instead. */
    export type Outbound = User$Outbound;
}

/** @internal */
export const Resource$inboundSchema: z.ZodType<Resource, z.ZodTypeDef, unknown> = z.object({
    type: z.string().optional(),
    id: z.string().optional(),
    name: z.string().optional(),
});

/** @internal */
export type Resource$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
};

/** @internal */
export const Resource$outboundSchema: z.ZodType<Resource$Outbound, z.ZodTypeDef, Resource> =
    z.object({
        type: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resource$ {
    /** @deprecated use `Resource$inboundSchema` instead. */
    export const inboundSchema = Resource$inboundSchema;
    /** @deprecated use `Resource$outboundSchema` instead. */
    export const outboundSchema = Resource$outboundSchema;
    /** @deprecated use `Resource$Outbound` instead. */
    export type Outbound = Resource$Outbound;
}

/** @internal */
export const AuditLog$inboundSchema: z.ZodType<AuditLog, z.ZodTypeDef, unknown> = z
    .object({
        type: AuditLogType$inboundSchema.optional(),
        id: z.string().optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        action: AuditLogAction$inboundSchema.optional(),
        merchant_account_id: z.nullable(z.string()).optional(),
        user: z.lazy(() => User$inboundSchema).optional(),
        resource: z.lazy(() => Resource$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
        });
    });

/** @internal */
export type AuditLog$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    timestamp?: string | undefined;
    action?: string | undefined;
    merchant_account_id?: string | null | undefined;
    user?: User$Outbound | undefined;
    resource?: Resource$Outbound | undefined;
};

/** @internal */
export const AuditLog$outboundSchema: z.ZodType<AuditLog$Outbound, z.ZodTypeDef, AuditLog> = z
    .object({
        type: AuditLogType$outboundSchema.optional(),
        id: z.string().optional(),
        timestamp: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        action: AuditLogAction$outboundSchema.optional(),
        merchantAccountId: z.nullable(z.string()).optional(),
        user: z.lazy(() => User$outboundSchema).optional(),
        resource: z.lazy(() => Resource$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLog$ {
    /** @deprecated use `AuditLog$inboundSchema` instead. */
    export const inboundSchema = AuditLog$inboundSchema;
    /** @deprecated use `AuditLog$outboundSchema` instead. */
    export const outboundSchema = AuditLog$outboundSchema;
    /** @deprecated use `AuditLog$Outbound` instead. */
    export type Outbound = AuditLog$Outbound;
}
