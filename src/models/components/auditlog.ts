/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * `audit-log`.
 */
export enum AuditLogType {
    AuditLog = "audit-log",
}

/**
 * The action that was performed.
 */
export enum AuditLogAction {
    Created = "created",
    Updated = "updated",
    Deleted = "deleted",
}

/**
 * The status of the user.
 */
export enum AuditLogStatus {
    Active = "active",
    Pending = "pending",
    Deleted = "deleted",
}

/**
 * The user who performed the action.
 */
export type User = {
    /**
     * The ID of the user.
     */
    id?: string | undefined;
    /**
     * The name of the user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | null | undefined;
    /**
     * Whether the user is Gr4vy staff.
     */
    staff?: boolean | undefined;
    /**
     * The status of the user.
     */
    status?: AuditLogStatus | undefined;
};

/**
 * The resource that was changed.
 */
export type Resource = {
    /**
     * The type of the resource.
     */
    type?: string | undefined;
    /**
     * The ID of the resource.
     */
    id?: string | undefined;
    /**
     * The descriptive name of the resource.
     */
    name?: string | undefined;
};

/**
 * A log of a change that occurred in the Gr4vy instance.
 */
export type AuditLog = {
    /**
     * `audit-log`.
     */
    type?: AuditLogType | undefined;
    /**
     * The ID of the audit log entry.
     */
    id?: string | undefined;
    /**
     * The date and time that the action was performed.
     */
    timestamp?: Date | undefined;
    /**
     * The action that was performed.
     */
    action?: AuditLogAction | undefined;
    /**
     * The ID of the merchant account this entry was created for.
     */
    merchantAccountId?: string | null | undefined;
    /**
     * The user who performed the action.
     */
    user?: User | undefined;
    /**
     * The resource that was changed.
     */
    resource?: Resource | undefined;
};

/** @internal */
export namespace AuditLogType$ {
    export const inboundSchema = z.nativeEnum(AuditLogType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AuditLogAction$ {
    export const inboundSchema = z.nativeEnum(AuditLogAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AuditLogStatus$ {
    export const inboundSchema = z.nativeEnum(AuditLogStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace User$ {
    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            email_address: z.nullable(z.string()).optional(),
            staff: z.boolean().optional(),
            status: AuditLogStatus$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                email_address: "emailAddress",
            });
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | null | undefined;
        staff?: boolean | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            emailAddress: z.nullable(z.string()).optional(),
            staff: z.boolean().optional(),
            status: AuditLogStatus$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                emailAddress: "email_address",
            });
        });
}

/** @internal */
export namespace Resource$ {
    export const inboundSchema: z.ZodType<Resource, z.ZodTypeDef, unknown> = z.object({
        type: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
    });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Resource> = z.object({
        type: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
    });
}

/** @internal */
export namespace AuditLog$ {
    export const inboundSchema: z.ZodType<AuditLog, z.ZodTypeDef, unknown> = z
        .object({
            type: AuditLogType$.inboundSchema.optional(),
            id: z.string().optional(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            action: AuditLogAction$.inboundSchema.optional(),
            merchant_account_id: z.nullable(z.string()).optional(),
            user: z.lazy(() => User$.inboundSchema).optional(),
            resource: z.lazy(() => Resource$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                merchant_account_id: "merchantAccountId",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        timestamp?: string | undefined;
        action?: string | undefined;
        merchant_account_id?: string | null | undefined;
        user?: User$.Outbound | undefined;
        resource?: Resource$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuditLog> = z
        .object({
            type: AuditLogType$.outboundSchema.optional(),
            id: z.string().optional(),
            timestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            action: AuditLogAction$.outboundSchema.optional(),
            merchantAccountId: z.nullable(z.string()).optional(),
            user: z.lazy(() => User$.outboundSchema).optional(),
            resource: z.lazy(() => Resource$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                merchantAccountId: "merchant_account_id",
            });
        });
}
