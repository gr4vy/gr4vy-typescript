/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * `audit-log`.
 */
export enum AuditLogType {
    AuditLog = "audit-log",
}

/**
 * The action that was performed.
 */
export enum AuditLogAction {
    Created = "created",
    Updated = "updated",
    Deleted = "deleted",
}

/**
 * The status of the user.
 */
export enum AuditLogStatus {
    Active = "active",
    Pending = "pending",
    Deleted = "deleted",
}

/**
 * The user who performed the action.
 */
export type AuditLogUser = {
    /**
     * The ID of the user.
     */
    id?: string | undefined;
    /**
     * The name of the user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | null | undefined;
    /**
     * Whether the user is Gr4vy staff.
     */
    staff?: boolean | undefined;
    /**
     * The status of the user.
     */
    status?: AuditLogStatus | undefined;
};

/**
 * The resource that was changed.
 */
export type Resource = {
    /**
     * The type of the resource.
     */
    type?: string | undefined;
    /**
     * The ID of the resource.
     */
    id?: string | undefined;
    /**
     * The descriptive name of the resource.
     */
    name?: string | undefined;
};

/**
 * A log of a change that occurred in the Gr4vy instance.
 */
export type AuditLog = {
    /**
     * `audit-log`.
     */
    type?: AuditLogType | undefined;
    /**
     * The ID of the audit log entry.
     */
    id?: string | undefined;
    /**
     * The date and time that the action was performed.
     */
    timestamp?: Date | undefined;
    /**
     * The action that was performed.
     */
    action?: AuditLogAction | undefined;
    /**
     * The ID of the merchant account this entry was created for.
     */
    merchantAccountId?: string | null | undefined;
    /**
     * The user who performed the action.
     */
    user?: AuditLogUser | undefined;
    /**
     * The resource that was changed.
     */
    resource?: Resource | undefined;
};

/** @internal */
export const AuditLogType$ = z.nativeEnum(AuditLogType);

/** @internal */
export const AuditLogAction$ = z.nativeEnum(AuditLogAction);

/** @internal */
export const AuditLogStatus$ = z.nativeEnum(AuditLogStatus);

/** @internal */
export namespace AuditLogUser$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | null | undefined;
        staff?: boolean | undefined;
        status?: AuditLogStatus | undefined;
    };

    export const inboundSchema: z.ZodType<AuditLogUser, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            email_address: z.nullable(z.string()).optional(),
            staff: z.boolean().optional(),
            status: AuditLogStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                ...(v.staff === undefined ? null : { staff: v.staff }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | null | undefined;
        staff?: boolean | undefined;
        status?: AuditLogStatus | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuditLogUser> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            emailAddress: z.nullable(z.string()).optional(),
            staff: z.boolean().optional(),
            status: AuditLogStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.staff === undefined ? null : { staff: v.staff }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace Resource$ {
    export type Inbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Resource, z.ZodTypeDef, Inbound> = z
        .object({
            type: z.string().optional(),
            id: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Resource> = z
        .object({
            type: z.string().optional(),
            id: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace AuditLog$ {
    export type Inbound = {
        type?: AuditLogType | undefined;
        id?: string | undefined;
        timestamp?: string | undefined;
        action?: AuditLogAction | undefined;
        merchant_account_id?: string | null | undefined;
        user?: AuditLogUser$.Inbound | undefined;
        resource?: Resource$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AuditLog, z.ZodTypeDef, Inbound> = z
        .object({
            type: AuditLogType$.optional(),
            id: z.string().optional(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            action: AuditLogAction$.optional(),
            merchant_account_id: z.nullable(z.string()).optional(),
            user: z.lazy(() => AuditLogUser$.inboundSchema).optional(),
            resource: z.lazy(() => Resource$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.user === undefined ? null : { user: v.user }),
                ...(v.resource === undefined ? null : { resource: v.resource }),
            };
        });

    export type Outbound = {
        type?: AuditLogType | undefined;
        id?: string | undefined;
        timestamp?: string | undefined;
        action?: AuditLogAction | undefined;
        merchant_account_id?: string | null | undefined;
        user?: AuditLogUser$.Outbound | undefined;
        resource?: Resource$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuditLog> = z
        .object({
            type: AuditLogType$.optional(),
            id: z.string().optional(),
            timestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            action: AuditLogAction$.optional(),
            merchantAccountId: z.nullable(z.string()).optional(),
            user: z.lazy(() => AuditLogUser$.outboundSchema).optional(),
            resource: z.lazy(() => Resource$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.user === undefined ? null : { user: v.user }),
                ...(v.resource === undefined ? null : { resource: v.resource }),
            };
        });
}
