/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export enum ThreeDSecureDataV1Scheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

export type ThreeDSecureDataV1 = {
    /**
     * The cardholder authentication value or AAV.
     */
    cavv: string;
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci: string;
    /**
     * The version of 3-D Secure that was used.
     */
    version: string;
    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
     */
    directoryResponse: string;
    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    scheme?: ThreeDSecureDataV1Scheme | null | undefined;
    /**
     * The response for the 3DS authentication call.
     */
    authenticationResponse: string;
    /**
     * The CAVV algorithm used.
     */
    cavvAlgorithm: string;
    /**
     * The transaction identifier.
     */
    xid: string;
};

/** @internal */
export const ThreeDSecureDataV1Scheme$: z.ZodNativeEnum<typeof ThreeDSecureDataV1Scheme> =
    z.nativeEnum(ThreeDSecureDataV1Scheme);

/** @internal */
export namespace ThreeDSecureDataV1$ {
    export type Inbound = {
        cavv: string;
        eci: string;
        version: string;
        directory_response: string;
        scheme?: ThreeDSecureDataV1Scheme | null | undefined;
        authentication_response: string;
        cavv_algorithm: string;
        xid: string;
    };

    export const inboundSchema: z.ZodType<ThreeDSecureDataV1, z.ZodTypeDef, Inbound> = z
        .object({
            cavv: z.string(),
            eci: z.string(),
            version: z.string(),
            directory_response: z.string(),
            scheme: z.nullable(ThreeDSecureDataV1Scheme$).optional(),
            authentication_response: z.string(),
            cavv_algorithm: z.string(),
            xid: z.string(),
        })
        .transform((v) => {
            return {
                cavv: v.cavv,
                eci: v.eci,
                version: v.version,
                directoryResponse: v.directory_response,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                authenticationResponse: v.authentication_response,
                cavvAlgorithm: v.cavv_algorithm,
                xid: v.xid,
            };
        });

    export type Outbound = {
        cavv: string;
        eci: string;
        version: string;
        directory_response: string;
        scheme?: ThreeDSecureDataV1Scheme | null | undefined;
        authentication_response: string;
        cavv_algorithm: string;
        xid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureDataV1> = z
        .object({
            cavv: z.string(),
            eci: z.string(),
            version: z.string(),
            directoryResponse: z.string(),
            scheme: z.nullable(ThreeDSecureDataV1Scheme$).optional(),
            authenticationResponse: z.string(),
            cavvAlgorithm: z.string(),
            xid: z.string(),
        })
        .transform((v) => {
            return {
                cavv: v.cavv,
                eci: v.eci,
                version: v.version,
                directory_response: v.directoryResponse,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                authentication_response: v.authenticationResponse,
                cavv_algorithm: v.cavvAlgorithm,
                xid: v.xid,
            };
        });
}
