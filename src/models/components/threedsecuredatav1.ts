/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export const ThreeDSecureDataV1CardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export type ThreeDSecureDataV1CardScheme = ClosedEnum<
  typeof ThreeDSecureDataV1CardScheme
>;

/**
 * Base model with JSON encoders.
 */
export type ThreeDSecureDataV1 = {
  /**
   * The cardholder authentication value or AAV.
   */
  cavv: string;
  /**
   * The ecommerce indicator for the 3DS transaction.
   */
  eci: string;
  /**
   * The version of 3-D Secure that was used.
   */
  version: string;
  /**
   * For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.
   */
  directoryResponse: string;
  /**
   * The scheme/brand of the card that is used for 3-D Secure.
   */
  scheme?: ThreeDSecureDataV1CardScheme | undefined;
  /**
   *  The response for the 3DS authentication call.
   */
  authenticationResponse: string;
  /**
   * The CAVV algorithm used.
   */
  cavvAlgorithm: string;
  /**
   * The transaction identifier.
   */
  xid: string;
};

/** @internal */
export const ThreeDSecureDataV1CardScheme$inboundSchema: z.ZodNativeEnum<
  typeof ThreeDSecureDataV1CardScheme
> = z.nativeEnum(ThreeDSecureDataV1CardScheme);

/** @internal */
export const ThreeDSecureDataV1CardScheme$outboundSchema: z.ZodNativeEnum<
  typeof ThreeDSecureDataV1CardScheme
> = ThreeDSecureDataV1CardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureDataV1CardScheme$ {
  /** @deprecated use `ThreeDSecureDataV1CardScheme$inboundSchema` instead. */
  export const inboundSchema = ThreeDSecureDataV1CardScheme$inboundSchema;
  /** @deprecated use `ThreeDSecureDataV1CardScheme$outboundSchema` instead. */
  export const outboundSchema = ThreeDSecureDataV1CardScheme$outboundSchema;
}

/** @internal */
export const ThreeDSecureDataV1$inboundSchema: z.ZodType<
  ThreeDSecureDataV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  cavv: z.string(),
  eci: z.string(),
  version: z.string(),
  directory_response: z.string(),
  scheme: ThreeDSecureDataV1CardScheme$inboundSchema.optional(),
  authentication_response: z.string(),
  cavv_algorithm: z.string(),
  xid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "directory_response": "directoryResponse",
    "authentication_response": "authenticationResponse",
    "cavv_algorithm": "cavvAlgorithm",
  });
});

/** @internal */
export type ThreeDSecureDataV1$Outbound = {
  cavv: string;
  eci: string;
  version: string;
  directory_response: string;
  scheme?: string | undefined;
  authentication_response: string;
  cavv_algorithm: string;
  xid: string;
};

/** @internal */
export const ThreeDSecureDataV1$outboundSchema: z.ZodType<
  ThreeDSecureDataV1$Outbound,
  z.ZodTypeDef,
  ThreeDSecureDataV1
> = z.object({
  cavv: z.string(),
  eci: z.string(),
  version: z.string(),
  directoryResponse: z.string(),
  scheme: ThreeDSecureDataV1CardScheme$outboundSchema.optional(),
  authenticationResponse: z.string(),
  cavvAlgorithm: z.string(),
  xid: z.string(),
}).transform((v) => {
  return remap$(v, {
    directoryResponse: "directory_response",
    authenticationResponse: "authentication_response",
    cavvAlgorithm: "cavv_algorithm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureDataV1$ {
  /** @deprecated use `ThreeDSecureDataV1$inboundSchema` instead. */
  export const inboundSchema = ThreeDSecureDataV1$inboundSchema;
  /** @deprecated use `ThreeDSecureDataV1$outboundSchema` instead. */
  export const outboundSchema = ThreeDSecureDataV1$outboundSchema;
  /** @deprecated use `ThreeDSecureDataV1$Outbound` instead. */
  export type Outbound = ThreeDSecureDataV1$Outbound;
}

export function threeDSecureDataV1ToJSON(
  threeDSecureDataV1: ThreeDSecureDataV1,
): string {
  return JSON.stringify(
    ThreeDSecureDataV1$outboundSchema.parse(threeDSecureDataV1),
  );
}

export function threeDSecureDataV1FromJSON(
  jsonString: string,
): SafeParseResult<ThreeDSecureDataV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreeDSecureDataV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreeDSecureDataV1' from JSON`,
  );
}
