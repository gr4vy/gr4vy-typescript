/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export const ThreeDSecureDataV1Scheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export type ThreeDSecureDataV1Scheme = ClosedEnum<typeof ThreeDSecureDataV1Scheme>;

export type ThreeDSecureDataV1 = {
    /**
     * The cardholder authentication value or AAV.
     */
    cavv: string;
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci: string;
    /**
     * The version of 3-D Secure that was used.
     */
    version: string;
    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
     */
    directoryResponse: string;
    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    scheme?: ThreeDSecureDataV1Scheme | null | undefined;
    /**
     * The response for the 3DS authentication call.
     */
    authenticationResponse: string;
    /**
     * The CAVV algorithm used.
     */
    cavvAlgorithm: string;
    /**
     * The transaction identifier.
     */
    xid: string;
};

/** @internal */
export const ThreeDSecureDataV1Scheme$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureDataV1Scheme
> = z.nativeEnum(ThreeDSecureDataV1Scheme);

/** @internal */
export const ThreeDSecureDataV1Scheme$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureDataV1Scheme
> = ThreeDSecureDataV1Scheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureDataV1Scheme$ {
    /** @deprecated use `ThreeDSecureDataV1Scheme$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureDataV1Scheme$inboundSchema;
    /** @deprecated use `ThreeDSecureDataV1Scheme$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureDataV1Scheme$outboundSchema;
}

/** @internal */
export const ThreeDSecureDataV1$inboundSchema: z.ZodType<
    ThreeDSecureDataV1,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cavv: z.string(),
        eci: z.string(),
        version: z.string(),
        directory_response: z.string(),
        scheme: z.nullable(ThreeDSecureDataV1Scheme$inboundSchema).optional(),
        authentication_response: z.string(),
        cavv_algorithm: z.string(),
        xid: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            directory_response: "directoryResponse",
            authentication_response: "authenticationResponse",
            cavv_algorithm: "cavvAlgorithm",
        });
    });

/** @internal */
export type ThreeDSecureDataV1$Outbound = {
    cavv: string;
    eci: string;
    version: string;
    directory_response: string;
    scheme?: string | null | undefined;
    authentication_response: string;
    cavv_algorithm: string;
    xid: string;
};

/** @internal */
export const ThreeDSecureDataV1$outboundSchema: z.ZodType<
    ThreeDSecureDataV1$Outbound,
    z.ZodTypeDef,
    ThreeDSecureDataV1
> = z
    .object({
        cavv: z.string(),
        eci: z.string(),
        version: z.string(),
        directoryResponse: z.string(),
        scheme: z.nullable(ThreeDSecureDataV1Scheme$outboundSchema).optional(),
        authenticationResponse: z.string(),
        cavvAlgorithm: z.string(),
        xid: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            directoryResponse: "directory_response",
            authenticationResponse: "authentication_response",
            cavvAlgorithm: "cavv_algorithm",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureDataV1$ {
    /** @deprecated use `ThreeDSecureDataV1$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureDataV1$inboundSchema;
    /** @deprecated use `ThreeDSecureDataV1$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureDataV1$outboundSchema;
    /** @deprecated use `ThreeDSecureDataV1$Outbound` instead. */
    export type Outbound = ThreeDSecureDataV1$Outbound;
}
