/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RolePermissions, RolePermissions$ } from "./rolepermissions";
import * as z from "zod";

/**
 * The type of this resource. Always `role`.
 */
export enum UserRoleType {
    Role = "role",
}

export type UserRole = {
    /**
     * The type of this resource. Always `role`.
     */
    type?: UserRoleType | undefined;
    /**
     * The unique ID for this role.
     */
    id?: string | undefined;
    /**
     * The unique name for this role.
     */
    name?: string | undefined;
    /**
     * The description for this role.
     */
    description?: string | undefined;
    /**
     * The permissions associated with a role.
     */
    permissions?: RolePermissions | undefined;
};

/** @internal */
export const UserRoleType$ = z.nativeEnum(UserRoleType);

/** @internal */
export namespace UserRole$ {
    export type Inbound = {
        type?: UserRoleType | undefined;
        id?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        permissions?: RolePermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UserRole, z.ZodTypeDef, Inbound> = z
        .object({
            type: UserRoleType$.optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            description: z.string().optional(),
            permissions: RolePermissions$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        type?: UserRoleType | undefined;
        id?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        permissions?: RolePermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserRole> = z
        .object({
            type: UserRoleType$.optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            description: z.string().optional(),
            permissions: RolePermissions$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}
