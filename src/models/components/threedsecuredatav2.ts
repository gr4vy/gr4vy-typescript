/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The transaction status received as part of the authentication request.
 */
export const DirectoryResponse = {
    C: "C",
    Y: "Y",
    A: "A",
    N: "N",
    R: "R",
    U: "U",
} as const;
/**
 * The transaction status received as part of the authentication request.
 */
export type DirectoryResponse = ClosedEnum<typeof DirectoryResponse>;

/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export const ThreeDSecureDataV2Scheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export type ThreeDSecureDataV2Scheme = ClosedEnum<typeof ThreeDSecureDataV2Scheme>;

/**
 * The transaction status after a the 3DS challenge. This will
 *
 * @remarks
 * be null in case of a frictionless 3DS flow.
 */
export const AuthenticationResponse = {
    Y: "Y",
    A: "A",
    N: "N",
    R: "R",
    U: "U",
} as const;
/**
 * The transaction status after a the 3DS challenge. This will
 *
 * @remarks
 * be null in case of a frictionless 3DS flow.
 */
export type AuthenticationResponse = ClosedEnum<typeof AuthenticationResponse>;

export type ThreeDSecureDataV2 = {
    /**
     * The cardholder authentication value or AAV.
     */
    cavv: string;
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci: string;
    /**
     * The version of 3-D Secure that was used.
     */
    version: string;
    /**
     * The transaction status received as part of the authentication request.
     */
    directoryResponse: DirectoryResponse;
    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    scheme?: ThreeDSecureDataV2Scheme | null | undefined;
    /**
     * The transaction status after a the 3DS challenge. This will
     *
     * @remarks
     * be null in case of a frictionless 3DS flow.
     */
    authenticationResponse?: AuthenticationResponse | null | undefined;
    /**
     * The transaction identifier.
     */
    directoryTransactionId: string;
};

/** @internal */
export const DirectoryResponse$inboundSchema: z.ZodNativeEnum<typeof DirectoryResponse> =
    z.nativeEnum(DirectoryResponse);

/** @internal */
export const DirectoryResponse$outboundSchema: z.ZodNativeEnum<typeof DirectoryResponse> =
    DirectoryResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectoryResponse$ {
    /** @deprecated use `DirectoryResponse$inboundSchema` instead. */
    export const inboundSchema = DirectoryResponse$inboundSchema;
    /** @deprecated use `DirectoryResponse$outboundSchema` instead. */
    export const outboundSchema = DirectoryResponse$outboundSchema;
}

/** @internal */
export const ThreeDSecureDataV2Scheme$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureDataV2Scheme
> = z.nativeEnum(ThreeDSecureDataV2Scheme);

/** @internal */
export const ThreeDSecureDataV2Scheme$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureDataV2Scheme
> = ThreeDSecureDataV2Scheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureDataV2Scheme$ {
    /** @deprecated use `ThreeDSecureDataV2Scheme$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureDataV2Scheme$inboundSchema;
    /** @deprecated use `ThreeDSecureDataV2Scheme$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureDataV2Scheme$outboundSchema;
}

/** @internal */
export const AuthenticationResponse$inboundSchema: z.ZodNativeEnum<typeof AuthenticationResponse> =
    z.nativeEnum(AuthenticationResponse);

/** @internal */
export const AuthenticationResponse$outboundSchema: z.ZodNativeEnum<typeof AuthenticationResponse> =
    AuthenticationResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticationResponse$ {
    /** @deprecated use `AuthenticationResponse$inboundSchema` instead. */
    export const inboundSchema = AuthenticationResponse$inboundSchema;
    /** @deprecated use `AuthenticationResponse$outboundSchema` instead. */
    export const outboundSchema = AuthenticationResponse$outboundSchema;
}

/** @internal */
export const ThreeDSecureDataV2$inboundSchema: z.ZodType<
    ThreeDSecureDataV2,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cavv: z.string(),
        eci: z.string(),
        version: z.string(),
        directory_response: DirectoryResponse$inboundSchema,
        scheme: z.nullable(ThreeDSecureDataV2Scheme$inboundSchema).optional(),
        authentication_response: z.nullable(AuthenticationResponse$inboundSchema).optional(),
        directory_transaction_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            directory_response: "directoryResponse",
            authentication_response: "authenticationResponse",
            directory_transaction_id: "directoryTransactionId",
        });
    });

/** @internal */
export type ThreeDSecureDataV2$Outbound = {
    cavv: string;
    eci: string;
    version: string;
    directory_response: string;
    scheme?: string | null | undefined;
    authentication_response?: string | null | undefined;
    directory_transaction_id: string;
};

/** @internal */
export const ThreeDSecureDataV2$outboundSchema: z.ZodType<
    ThreeDSecureDataV2$Outbound,
    z.ZodTypeDef,
    ThreeDSecureDataV2
> = z
    .object({
        cavv: z.string(),
        eci: z.string(),
        version: z.string(),
        directoryResponse: DirectoryResponse$outboundSchema,
        scheme: z.nullable(ThreeDSecureDataV2Scheme$outboundSchema).optional(),
        authenticationResponse: z.nullable(AuthenticationResponse$outboundSchema).optional(),
        directoryTransactionId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            directoryResponse: "directory_response",
            authenticationResponse: "authentication_response",
            directoryTransactionId: "directory_transaction_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureDataV2$ {
    /** @deprecated use `ThreeDSecureDataV2$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureDataV2$inboundSchema;
    /** @deprecated use `ThreeDSecureDataV2$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureDataV2$outboundSchema;
    /** @deprecated use `ThreeDSecureDataV2$Outbound` instead. */
    export type Outbound = ThreeDSecureDataV2$Outbound;
}
