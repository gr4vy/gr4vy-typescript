/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The transaction status received as part of the authentication request.
 */
export enum DirectoryResponse {
    C = "C",
    Y = "Y",
    A = "A",
    N = "N",
    R = "R",
    U = "U",
}

/**
 * The scheme/brand of the card that is used for 3-D Secure.
 */
export enum ThreeDSecureDataV2Scheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * The transaction status after a the 3DS challenge. This will
 *
 * @remarks
 * be null in case of a frictionless 3DS flow.
 */
export enum AuthenticationResponse {
    Y = "Y",
    A = "A",
    N = "N",
    R = "R",
    U = "U",
}

export type ThreeDSecureDataV2 = {
    /**
     * The cardholder authentication value or AAV.
     */
    cavv: string;
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci: string;
    /**
     * The version of 3-D Secure that was used.
     */
    version: string;
    /**
     * The transaction status received as part of the authentication request.
     */
    directoryResponse: DirectoryResponse;
    /**
     * The scheme/brand of the card that is used for 3-D Secure.
     */
    scheme?: ThreeDSecureDataV2Scheme | null | undefined;
    /**
     * The transaction status after a the 3DS challenge. This will
     *
     * @remarks
     * be null in case of a frictionless 3DS flow.
     */
    authenticationResponse?: AuthenticationResponse | null | undefined;
    /**
     * The transaction identifier.
     */
    directoryTransactionId: string;
};

/** @internal */
export const DirectoryResponse$: z.ZodNativeEnum<typeof DirectoryResponse> =
    z.nativeEnum(DirectoryResponse);

/** @internal */
export const ThreeDSecureDataV2Scheme$: z.ZodNativeEnum<typeof ThreeDSecureDataV2Scheme> =
    z.nativeEnum(ThreeDSecureDataV2Scheme);

/** @internal */
export const AuthenticationResponse$: z.ZodNativeEnum<typeof AuthenticationResponse> =
    z.nativeEnum(AuthenticationResponse);

/** @internal */
export namespace ThreeDSecureDataV2$ {
    export type Inbound = {
        cavv: string;
        eci: string;
        version: string;
        directory_response: DirectoryResponse;
        scheme?: ThreeDSecureDataV2Scheme | null | undefined;
        authentication_response?: AuthenticationResponse | null | undefined;
        directory_transaction_id: string;
    };

    export const inboundSchema: z.ZodType<ThreeDSecureDataV2, z.ZodTypeDef, Inbound> = z
        .object({
            cavv: z.string(),
            eci: z.string(),
            version: z.string(),
            directory_response: DirectoryResponse$,
            scheme: z.nullable(ThreeDSecureDataV2Scheme$).optional(),
            authentication_response: z.nullable(AuthenticationResponse$).optional(),
            directory_transaction_id: z.string(),
        })
        .transform((v) => {
            return {
                cavv: v.cavv,
                eci: v.eci,
                version: v.version,
                directoryResponse: v.directory_response,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.authentication_response === undefined
                    ? null
                    : { authenticationResponse: v.authentication_response }),
                directoryTransactionId: v.directory_transaction_id,
            };
        });

    export type Outbound = {
        cavv: string;
        eci: string;
        version: string;
        directory_response: DirectoryResponse;
        scheme?: ThreeDSecureDataV2Scheme | null | undefined;
        authentication_response?: AuthenticationResponse | null | undefined;
        directory_transaction_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureDataV2> = z
        .object({
            cavv: z.string(),
            eci: z.string(),
            version: z.string(),
            directoryResponse: DirectoryResponse$,
            scheme: z.nullable(ThreeDSecureDataV2Scheme$).optional(),
            authenticationResponse: z.nullable(AuthenticationResponse$).optional(),
            directoryTransactionId: z.string(),
        })
        .transform((v) => {
            return {
                cavv: v.cavv,
                eci: v.eci,
                version: v.version,
                directory_response: v.directoryResponse,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.authenticationResponse === undefined
                    ? null
                    : { authentication_response: v.authenticationResponse }),
                directory_transaction_id: v.directoryTransactionId,
            };
        });
}
