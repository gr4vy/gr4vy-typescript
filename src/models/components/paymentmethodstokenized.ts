/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentMethodTokenized, PaymentMethodTokenized$ } from "./paymentmethodtokenized";
import * as z from "zod";

/**
 * A list of stored payment methods in summarized format.
 */
export type PaymentMethodsTokenized = {
    /**
     * A list of stored payment methods in summarized format.
     */
    items?: Array<PaymentMethodTokenized> | undefined;
};

/** @internal */
export namespace PaymentMethodsTokenized$ {
    export type Inbound = {
        items?: Array<PaymentMethodTokenized$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentMethodsTokenized, z.ZodTypeDef, Inbound> = z
        .object({
            items: z.array(PaymentMethodTokenized$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
            };
        });

    export type Outbound = {
        items?: Array<PaymentMethodTokenized$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodsTokenized> = z
        .object({
            items: z.array(PaymentMethodTokenized$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
            };
        });
}
