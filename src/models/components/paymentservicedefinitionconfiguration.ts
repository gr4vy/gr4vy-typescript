/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export const ApprovalUiTarget = {
    Any: "any",
    NewWindow: "new_window",
} as const;
/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export type ApprovalUiTarget = ClosedEnum<typeof ApprovalUiTarget>;

/**
 * Configuration items for the payment service.
 */
export type PaymentServiceDefinitionConfiguration = {
    /**
     * Height of the approval interface in either pixels or view height (vh).
     */
    approvalUiHeight?: string | undefined;
    /**
     * Width of the approval interface in either pixels or view width (vw).
     */
    approvalUiWidth?: string | undefined;
    /**
     * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
     */
    approvalUiTarget?: ApprovalUiTarget | null | undefined;
};

/** @internal */
export const ApprovalUiTarget$inboundSchema: z.ZodNativeEnum<typeof ApprovalUiTarget> =
    z.nativeEnum(ApprovalUiTarget);

/** @internal */
export const ApprovalUiTarget$outboundSchema: z.ZodNativeEnum<typeof ApprovalUiTarget> =
    ApprovalUiTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalUiTarget$ {
    /** @deprecated use `ApprovalUiTarget$inboundSchema` instead. */
    export const inboundSchema = ApprovalUiTarget$inboundSchema;
    /** @deprecated use `ApprovalUiTarget$outboundSchema` instead. */
    export const outboundSchema = ApprovalUiTarget$outboundSchema;
}

/** @internal */
export const PaymentServiceDefinitionConfiguration$inboundSchema: z.ZodType<
    PaymentServiceDefinitionConfiguration,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        approval_ui_height: z.string().optional(),
        approval_ui_width: z.string().optional(),
        approval_ui_target: z.nullable(ApprovalUiTarget$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            approval_ui_height: "approvalUiHeight",
            approval_ui_width: "approvalUiWidth",
            approval_ui_target: "approvalUiTarget",
        });
    });

/** @internal */
export type PaymentServiceDefinitionConfiguration$Outbound = {
    approval_ui_height?: string | undefined;
    approval_ui_width?: string | undefined;
    approval_ui_target?: string | null | undefined;
};

/** @internal */
export const PaymentServiceDefinitionConfiguration$outboundSchema: z.ZodType<
    PaymentServiceDefinitionConfiguration$Outbound,
    z.ZodTypeDef,
    PaymentServiceDefinitionConfiguration
> = z
    .object({
        approvalUiHeight: z.string().optional(),
        approvalUiWidth: z.string().optional(),
        approvalUiTarget: z.nullable(ApprovalUiTarget$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            approvalUiHeight: "approval_ui_height",
            approvalUiWidth: "approval_ui_width",
            approvalUiTarget: "approval_ui_target",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceDefinitionConfiguration$ {
    /** @deprecated use `PaymentServiceDefinitionConfiguration$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceDefinitionConfiguration$inboundSchema;
    /** @deprecated use `PaymentServiceDefinitionConfiguration$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceDefinitionConfiguration$outboundSchema;
    /** @deprecated use `PaymentServiceDefinitionConfiguration$Outbound` instead. */
    export type Outbound = PaymentServiceDefinitionConfiguration$Outbound;
}
