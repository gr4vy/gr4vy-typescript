/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const CardPaymentMethodMethod = {
    Card: "card",
} as const;
export type CardPaymentMethodMethod = ClosedEnum<typeof CardPaymentMethodMethod>;

/**
 * Base model with JSON encoders.
 */
export type CardPaymentMethod = {
    method?: CardPaymentMethodMethod | undefined;
    number: string;
    expirationDate: string;
    securityCode?: string | undefined;
};

/** @internal */
export const CardPaymentMethodMethod$inboundSchema: z.ZodNativeEnum<
    typeof CardPaymentMethodMethod
> = z.nativeEnum(CardPaymentMethodMethod);

/** @internal */
export const CardPaymentMethodMethod$outboundSchema: z.ZodNativeEnum<
    typeof CardPaymentMethodMethod
> = CardPaymentMethodMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardPaymentMethodMethod$ {
    /** @deprecated use `CardPaymentMethodMethod$inboundSchema` instead. */
    export const inboundSchema = CardPaymentMethodMethod$inboundSchema;
    /** @deprecated use `CardPaymentMethodMethod$outboundSchema` instead. */
    export const outboundSchema = CardPaymentMethodMethod$outboundSchema;
}

/** @internal */
export const CardPaymentMethod$inboundSchema: z.ZodType<CardPaymentMethod, z.ZodTypeDef, unknown> =
    z
        .object({
            method: CardPaymentMethodMethod$inboundSchema.default("card"),
            number: z.string(),
            expiration_date: z.string(),
            security_code: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expiration_date: "expirationDate",
                security_code: "securityCode",
            });
        });

/** @internal */
export type CardPaymentMethod$Outbound = {
    method: string;
    number: string;
    expiration_date: string;
    security_code?: string | undefined;
};

/** @internal */
export const CardPaymentMethod$outboundSchema: z.ZodType<
    CardPaymentMethod$Outbound,
    z.ZodTypeDef,
    CardPaymentMethod
> = z
    .object({
        method: CardPaymentMethodMethod$outboundSchema.default("card"),
        number: z.string(),
        expirationDate: z.string(),
        securityCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expirationDate: "expiration_date",
            securityCode: "security_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardPaymentMethod$ {
    /** @deprecated use `CardPaymentMethod$inboundSchema` instead. */
    export const inboundSchema = CardPaymentMethod$inboundSchema;
    /** @deprecated use `CardPaymentMethod$outboundSchema` instead. */
    export const outboundSchema = CardPaymentMethod$outboundSchema;
    /** @deprecated use `CardPaymentMethod$Outbound` instead. */
    export type Outbound = CardPaymentMethod$Outbound;
}
