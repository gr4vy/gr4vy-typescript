/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCurrencyConditionName {
    Currency = "currency",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum FlowCurrencyConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Currency conditions with a name, operator, and value.
 */
export type FlowCurrencyCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCurrencyConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowCurrencyConditionOperator;
    /**
     * Currency ISO codes to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export const FlowCurrencyConditionName$ = z.nativeEnum(FlowCurrencyConditionName);

/** @internal */
export const FlowCurrencyConditionOperator$ = z.nativeEnum(FlowCurrencyConditionOperator);

/** @internal */
export namespace FlowCurrencyCondition$ {
    export type Inbound = {
        name: FlowCurrencyConditionName;
        operator: FlowCurrencyConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowCurrencyCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowCurrencyConditionName$,
            operator: FlowCurrencyConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowCurrencyConditionName;
        operator: FlowCurrencyConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCurrencyCondition> = z
        .object({
            name: FlowCurrencyConditionName$,
            operator: FlowCurrencyConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
