/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowCurrencyConditionName {
    Currency = "currency",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum FlowCurrencyConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

/**
 * Currency conditions with a name, operator, and value.
 */
export type FlowCurrencyCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowCurrencyConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowCurrencyConditionOperator;
    /**
     * Currency ISO codes to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export namespace FlowCurrencyConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowCurrencyConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCurrencyConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowCurrencyConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowCurrencyCondition$ {
    export const inboundSchema: z.ZodType<FlowCurrencyCondition, z.ZodTypeDef, unknown> = z.object({
        name: FlowCurrencyConditionName$.inboundSchema,
        operator: FlowCurrencyConditionOperator$.inboundSchema,
        value: z.array(z.string()),
    });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowCurrencyCondition> =
        z.object({
            name: FlowCurrencyConditionName$.outboundSchema,
            operator: FlowCurrencyConditionOperator$.outboundSchema,
            value: z.array(z.string()),
        });
}
