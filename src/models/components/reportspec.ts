/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReportSpecModel,
  ReportSpecModel$inboundSchema,
  ReportSpecModel$outboundSchema,
} from "./reportspecmodel.js";

export type ReportSpec = {
  model: ReportSpecModel;
  /**
   * The parameters for the report model.
   */
  params: { [k: string]: any };
};

/** @internal */
export const ReportSpec$inboundSchema: z.ZodType<
  ReportSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: ReportSpecModel$inboundSchema,
  params: z.record(z.any()),
});

/** @internal */
export type ReportSpec$Outbound = {
  model: string;
  params: { [k: string]: any };
};

/** @internal */
export const ReportSpec$outboundSchema: z.ZodType<
  ReportSpec$Outbound,
  z.ZodTypeDef,
  ReportSpec
> = z.object({
  model: ReportSpecModel$outboundSchema,
  params: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportSpec$ {
  /** @deprecated use `ReportSpec$inboundSchema` instead. */
  export const inboundSchema = ReportSpec$inboundSchema;
  /** @deprecated use `ReportSpec$outboundSchema` instead. */
  export const outboundSchema = ReportSpec$outboundSchema;
  /** @deprecated use `ReportSpec$Outbound` instead. */
  export type Outbound = ReportSpec$Outbound;
}

export function reportSpecToJSON(reportSpec: ReportSpec): string {
  return JSON.stringify(ReportSpec$outboundSchema.parse(reportSpec));
}

export function reportSpecFromJSON(
  jsonString: string,
): SafeParseResult<ReportSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportSpec' from JSON`,
  );
}
