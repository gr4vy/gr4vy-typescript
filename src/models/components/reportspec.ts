/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The model (dataset) that the data used for the report is retrieved
 *
 * @remarks
 * from.
 */
export const Model = {
    Transactions: "transactions",
} as const;
/**
 * The model (dataset) that the data used for the report is retrieved
 *
 * @remarks
 * from.
 */
export type Model = ClosedEnum<typeof Model>;

export const ReportSpecFields = {
    Id: "id",
    ExternalIdentifier: "external_identifier",
    Status: "status",
    CreatedAt: "created_at",
    UpdatedAt: "updated_at",
    AuthorizedAt: "authorized_at",
    CapturedAt: "captured_at",
    VoidedAt: "voided_at",
    Amount: "amount",
    Currency: "currency",
    CapturedAmount: "captured_amount",
    RefundedAmount: "refunded_amount",
    Method: "method",
    Scheme: "scheme",
    PaymentServiceTransactionId: "payment_service_transaction_id",
    PaymentServiceId: "payment_service_id",
    PaymentServiceDefinitionId: "payment_service_definition_id",
    PaymentServiceDisplayName: "payment_service_display_name",
    AuthResponseCode: "auth_response_code",
    RawResponseCode: "raw_response_code",
    RawResponseDescription: "raw_response_description",
    Metadata: "metadata",
    IsSubsequentPayment: "is_subsequent_payment",
    MerchantInitiated: "merchant_initiated",
    PaymentSource: "payment_source",
    ThreeDSecureStatus: "three_d_secure_status",
    ThreeDSecureEci: "three_d_secure_eci",
    ThreeDSecureAuthResp: "three_d_secure_auth_resp",
    ThreeDSecureMethod: "three_d_secure_method",
    BuyerExternalIdentifier: "buyer_external_identifier",
    BillingDetailsFirstName: "billing_details_first_name",
    BillingDetailsLastName: "billing_details_last_name",
    BillingDetailsEmailAddress: "billing_details_email_address",
    BillingDetailsPhoneNumber: "billing_details_phone_number",
    BillingDetailsAddressCity: "billing_details_address_city",
    BillingDetailsAddressCountry: "billing_details_address_country",
    BillingDetailsAddressPostalCode: "billing_details_address_postal_code",
    BillingDetailsAddressState: "billing_details_address_state",
    BillingDetailsAddressStateCode: "billing_details_address_state_code",
    BillingDetailsAddressHouseNumberOrName: "billing_details_address_house_number_or_name",
    BillingDetailsAddressLine1: "billing_details_address_line1",
    BillingDetailsAddressLine2: "billing_details_address_line2",
    BillingDetailsAddressOrganization: "billing_details_address_organization",
    BillingDetailsTaxId: "billing_details_tax_id",
    BillingDetailsTaxIdKind: "billing_details_tax_id_kind",
} as const;
export type ReportSpecFields = ClosedEnum<typeof ReportSpecFields>;

/**
 * The filters for the report.
 */
export type Filters = {
    /**
     * A list of status' to filter by.
     */
    status?: Array<string> | undefined;
    /**
     * The created date and time to filter by.
     */
    createdAt?: string | undefined;
    /**
     * The updated date and time to filter by.
     */
    updatedAt?: string | undefined;
    /**
     * The authorized date and time to filter by.
     */
    authorizedAt?: string | undefined;
    /**
     * The captured date and time to filter by.
     */
    capturedAt?: string | undefined;
    /**
     * The voided date and time to filter by.
     */
    voidedAt?: string | undefined;
    /**
     * A list of currencies to filter by.
     */
    currency?: Array<string> | undefined;
    /**
     * A list of methods to filter by.
     */
    method?: Array<string> | undefined;
    /**
     * A list of schemes to filter by.
     */
    scheme?: Array<string> | undefined;
    /**
     * A list of metadata to filter by.
     */
    metadata?: Array<string> | undefined;
    /**
     * A boolean indicating transactions with subsequent payments to filter by.
     */
    isSubsequentPayment?: boolean | undefined;
    /**
     * A boolean indicating transactions initiated by the merchant to filter by.
     */
    merchantInitiated?: boolean | undefined;
    /**
     * A list of transaction sources to filter by.
     */
    paymentSource?: Array<string> | undefined;
    /**
     * A list of 3DS status to filter by.
     */
    threeDSecureStatus?: Array<string> | undefined;
    /**
     * A list of electric commerce indicators to filter by.
     */
    threeDSecureEci?: Array<string> | undefined;
    /**
     * A list of 3DS responses to filter by.
     */
    threeDSecureAuthResp?: Array<string> | undefined;
};

export type Sort = {};

/**
 * Parameters used to configure the report. Acceptable values for
 *
 * @remarks
 * this property depend on the value specified for `model`.
 */
export type Params = {
    /**
     * A list of fields for the report.
     */
    fields?: Array<ReportSpecFields> | undefined;
    /**
     * The filters for the report.
     */
    filters?: Filters | undefined;
    /**
     * A list of fields to sort the report.
     */
    sort?: Array<Sort> | undefined;
};

/**
 * The specification of a report.
 */
export type ReportSpec = {
    /**
     * The model (dataset) that the data used for the report is retrieved
     *
     * @remarks
     * from.
     */
    model: Model;
    /**
     * Parameters used to configure the report. Acceptable values for
     *
     * @remarks
     * this property depend on the value specified for `model`.
     */
    params: Params;
};

/** @internal */
export const Model$inboundSchema: z.ZodNativeEnum<typeof Model> = z.nativeEnum(Model);

/** @internal */
export const Model$outboundSchema: z.ZodNativeEnum<typeof Model> = Model$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
    /** @deprecated use `Model$inboundSchema` instead. */
    export const inboundSchema = Model$inboundSchema;
    /** @deprecated use `Model$outboundSchema` instead. */
    export const outboundSchema = Model$outboundSchema;
}

/** @internal */
export const ReportSpecFields$inboundSchema: z.ZodNativeEnum<typeof ReportSpecFields> =
    z.nativeEnum(ReportSpecFields);

/** @internal */
export const ReportSpecFields$outboundSchema: z.ZodNativeEnum<typeof ReportSpecFields> =
    ReportSpecFields$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportSpecFields$ {
    /** @deprecated use `ReportSpecFields$inboundSchema` instead. */
    export const inboundSchema = ReportSpecFields$inboundSchema;
    /** @deprecated use `ReportSpecFields$outboundSchema` instead. */
    export const outboundSchema = ReportSpecFields$outboundSchema;
}

/** @internal */
export const Filters$inboundSchema: z.ZodType<Filters, z.ZodTypeDef, unknown> = z
    .object({
        status: z.array(z.string()).optional(),
        created_at: z.string().optional(),
        updated_at: z.string().optional(),
        authorized_at: z.string().optional(),
        captured_at: z.string().optional(),
        voided_at: z.string().optional(),
        currency: z.array(z.string()).optional(),
        method: z.array(z.string()).optional(),
        scheme: z.array(z.string()).optional(),
        metadata: z.array(z.string()).optional(),
        is_subsequent_payment: z.boolean().optional(),
        merchant_initiated: z.boolean().optional(),
        payment_source: z.array(z.string()).optional(),
        three_d_secure_status: z.array(z.string()).optional(),
        three_d_secure_eci: z.array(z.string()).optional(),
        three_d_secure_auth_resp: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
            authorized_at: "authorizedAt",
            captured_at: "capturedAt",
            voided_at: "voidedAt",
            is_subsequent_payment: "isSubsequentPayment",
            merchant_initiated: "merchantInitiated",
            payment_source: "paymentSource",
            three_d_secure_status: "threeDSecureStatus",
            three_d_secure_eci: "threeDSecureEci",
            three_d_secure_auth_resp: "threeDSecureAuthResp",
        });
    });

/** @internal */
export type Filters$Outbound = {
    status?: Array<string> | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    authorized_at?: string | undefined;
    captured_at?: string | undefined;
    voided_at?: string | undefined;
    currency?: Array<string> | undefined;
    method?: Array<string> | undefined;
    scheme?: Array<string> | undefined;
    metadata?: Array<string> | undefined;
    is_subsequent_payment?: boolean | undefined;
    merchant_initiated?: boolean | undefined;
    payment_source?: Array<string> | undefined;
    three_d_secure_status?: Array<string> | undefined;
    three_d_secure_eci?: Array<string> | undefined;
    three_d_secure_auth_resp?: Array<string> | undefined;
};

/** @internal */
export const Filters$outboundSchema: z.ZodType<Filters$Outbound, z.ZodTypeDef, Filters> = z
    .object({
        status: z.array(z.string()).optional(),
        createdAt: z.string().optional(),
        updatedAt: z.string().optional(),
        authorizedAt: z.string().optional(),
        capturedAt: z.string().optional(),
        voidedAt: z.string().optional(),
        currency: z.array(z.string()).optional(),
        method: z.array(z.string()).optional(),
        scheme: z.array(z.string()).optional(),
        metadata: z.array(z.string()).optional(),
        isSubsequentPayment: z.boolean().optional(),
        merchantInitiated: z.boolean().optional(),
        paymentSource: z.array(z.string()).optional(),
        threeDSecureStatus: z.array(z.string()).optional(),
        threeDSecureEci: z.array(z.string()).optional(),
        threeDSecureAuthResp: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
            authorizedAt: "authorized_at",
            capturedAt: "captured_at",
            voidedAt: "voided_at",
            isSubsequentPayment: "is_subsequent_payment",
            merchantInitiated: "merchant_initiated",
            paymentSource: "payment_source",
            threeDSecureStatus: "three_d_secure_status",
            threeDSecureEci: "three_d_secure_eci",
            threeDSecureAuthResp: "three_d_secure_auth_resp",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters$ {
    /** @deprecated use `Filters$inboundSchema` instead. */
    export const inboundSchema = Filters$inboundSchema;
    /** @deprecated use `Filters$outboundSchema` instead. */
    export const outboundSchema = Filters$outboundSchema;
    /** @deprecated use `Filters$Outbound` instead. */
    export type Outbound = Filters$Outbound;
}

/** @internal */
export const Sort$inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Sort$Outbound = {};

/** @internal */
export const Sort$outboundSchema: z.ZodType<Sort$Outbound, z.ZodTypeDef, Sort> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
    /** @deprecated use `Sort$inboundSchema` instead. */
    export const inboundSchema = Sort$inboundSchema;
    /** @deprecated use `Sort$outboundSchema` instead. */
    export const outboundSchema = Sort$outboundSchema;
    /** @deprecated use `Sort$Outbound` instead. */
    export type Outbound = Sort$Outbound;
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z.object({
    fields: z.array(ReportSpecFields$inboundSchema).optional(),
    filters: z.lazy(() => Filters$inboundSchema).optional(),
    sort: z.array(z.lazy(() => Sort$inboundSchema)).optional(),
});

/** @internal */
export type Params$Outbound = {
    fields?: Array<string> | undefined;
    filters?: Filters$Outbound | undefined;
    sort?: Array<Sort$Outbound> | undefined;
};

/** @internal */
export const Params$outboundSchema: z.ZodType<Params$Outbound, z.ZodTypeDef, Params> = z.object({
    fields: z.array(ReportSpecFields$outboundSchema).optional(),
    filters: z.lazy(() => Filters$outboundSchema).optional(),
    sort: z.array(z.lazy(() => Sort$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
    /** @deprecated use `Params$inboundSchema` instead. */
    export const inboundSchema = Params$inboundSchema;
    /** @deprecated use `Params$outboundSchema` instead. */
    export const outboundSchema = Params$outboundSchema;
    /** @deprecated use `Params$Outbound` instead. */
    export type Outbound = Params$Outbound;
}

/** @internal */
export const ReportSpec$inboundSchema: z.ZodType<ReportSpec, z.ZodTypeDef, unknown> = z.object({
    model: Model$inboundSchema,
    params: z.lazy(() => Params$inboundSchema),
});

/** @internal */
export type ReportSpec$Outbound = {
    model: string;
    params: Params$Outbound;
};

/** @internal */
export const ReportSpec$outboundSchema: z.ZodType<ReportSpec$Outbound, z.ZodTypeDef, ReportSpec> =
    z.object({
        model: Model$outboundSchema,
        params: z.lazy(() => Params$outboundSchema),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportSpec$ {
    /** @deprecated use `ReportSpec$inboundSchema` instead. */
    export const inboundSchema = ReportSpec$inboundSchema;
    /** @deprecated use `ReportSpec$outboundSchema` instead. */
    export const outboundSchema = ReportSpec$outboundSchema;
    /** @deprecated use `ReportSpec$Outbound` instead. */
    export type Outbound = ReportSpec$Outbound;
}
