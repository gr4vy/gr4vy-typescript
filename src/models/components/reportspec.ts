/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The model (dataset) that the data used for the report is retrieved
 *
 * @remarks
 * from.
 */
export enum Model {
    Transactions = "transactions",
}

export enum ReportSpecFields {
    Id = "id",
    ExternalIdentifier = "external_identifier",
    Status = "status",
    CreatedAt = "created_at",
    UpdatedAt = "updated_at",
    AuthorizedAt = "authorized_at",
    CapturedAt = "captured_at",
    VoidedAt = "voided_at",
    Amount = "amount",
    Currency = "currency",
    CapturedAmount = "captured_amount",
    RefundedAmount = "refunded_amount",
    Method = "method",
    Scheme = "scheme",
    PaymentServiceTransactionId = "payment_service_transaction_id",
    PaymentServiceId = "payment_service_id",
    PaymentServiceDefinitionId = "payment_service_definition_id",
    PaymentServiceDisplayName = "payment_service_display_name",
    AuthResponseCode = "auth_response_code",
    RawResponseCode = "raw_response_code",
    RawResponseDescription = "raw_response_description",
    Metadata = "metadata",
    ThreeDSecureStatus = "three_d_secure_status",
    ThreeDSecureEci = "three_d_secure_eci",
    ThreeDSecureAuthResp = "three_d_secure_auth_resp",
    ThreeDSecureMethod = "three_d_secure_method",
    BuyerExternalIdentifier = "buyer_external_identifier",
    BillingDetailsFirstName = "billing_details_first_name",
    BillingDetailsLastName = "billing_details_last_name",
    BillingDetailsEmailAddress = "billing_details_email_address",
    BillingDetailsPhoneNumber = "billing_details_phone_number",
    BillingDetailsAddressCity = "billing_details_address_city",
    BillingDetailsAddressCountry = "billing_details_address_country",
    BillingDetailsAddressPostalCode = "billing_details_address_postal_code",
    BillingDetailsAddressState = "billing_details_address_state",
    BillingDetailsAddressStateCode = "billing_details_address_state_code",
    BillingDetailsAddressHouseNumberOrName = "billing_details_address_house_number_or_name",
    BillingDetailsAddressLine1 = "billing_details_address_line1",
    BillingDetailsAddressLine2 = "billing_details_address_line2",
    BillingDetailsAddressOrganization = "billing_details_address_organization",
    BillingDetailsTaxId = "billing_details_tax_id",
    BillingDetailsTaxIdKind = "billing_details_tax_id_kind",
}

/**
 * The filters for the report.
 */
export type Filters = {
    /**
     * A list of status' to filter by.
     */
    status?: Array<string> | undefined;
    /**
     * The created date and time to filter by.
     */
    createdAt?: string | undefined;
    /**
     * The updated date and time to filter by.
     */
    updatedAt?: string | undefined;
    /**
     * The authorized date and time to filter by.
     */
    authorizedAt?: string | undefined;
    /**
     * The captured date and time to filter by.
     */
    capturedAt?: string | undefined;
    /**
     * The voided date and time to filter by.
     */
    voidedAt?: string | undefined;
    /**
     * A list of currencies to filter by.
     */
    currency?: Array<string> | undefined;
    /**
     * A list of methods to filter by.
     */
    method?: Array<string> | undefined;
    /**
     * A list of schemes to filter by.
     */
    scheme?: Array<string> | undefined;
    /**
     * A list of metadata to filter by.
     */
    metadata?: Array<string> | undefined;
    /**
     * A list of 3DS status to filter by.
     */
    threeDSecureStatus?: Array<string> | undefined;
    /**
     * A list of electric commerce indicators to filter by.
     */
    threeDSecureEci?: Array<string> | undefined;
    /**
     * A list of 3DS responses to filter by.
     */
    threeDSecureAuthResp?: Array<string> | undefined;
};

export type Sort = {};

/**
 * Parameters used to configure the report. Acceptable values for
 *
 * @remarks
 * this property depend on the value specified for `model`.
 */
export type Params = {
    /**
     * A list of fields for the report.
     */
    fields?: Array<ReportSpecFields> | undefined;
    /**
     * The filters for the report.
     */
    filters?: Filters | undefined;
    /**
     * A list of fields to sort the report.
     */
    sort?: Array<Sort> | undefined;
    additionalProperties: Record<string, any>;
};

/**
 * The specification of a report.
 */
export type ReportSpec = {
    /**
     * The model (dataset) that the data used for the report is retrieved
     *
     * @remarks
     * from.
     */
    model: Model;
    /**
     * Parameters used to configure the report. Acceptable values for
     *
     * @remarks
     * this property depend on the value specified for `model`.
     */
    params: Params;
};

/** @internal */
export const Model$: z.ZodNativeEnum<typeof Model> = z.nativeEnum(Model);

/** @internal */
export const ReportSpecFields$: z.ZodNativeEnum<typeof ReportSpecFields> =
    z.nativeEnum(ReportSpecFields);

/** @internal */
export namespace Filters$ {
    export type Inbound = {
        status?: Array<string> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        authorized_at?: string | undefined;
        captured_at?: string | undefined;
        voided_at?: string | undefined;
        currency?: Array<string> | undefined;
        method?: Array<string> | undefined;
        scheme?: Array<string> | undefined;
        metadata?: Array<string> | undefined;
        three_d_secure_status?: Array<string> | undefined;
        three_d_secure_eci?: Array<string> | undefined;
        three_d_secure_auth_resp?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<Filters, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.array(z.string()).optional(),
            created_at: z.string().optional(),
            updated_at: z.string().optional(),
            authorized_at: z.string().optional(),
            captured_at: z.string().optional(),
            voided_at: z.string().optional(),
            currency: z.array(z.string()).optional(),
            method: z.array(z.string()).optional(),
            scheme: z.array(z.string()).optional(),
            metadata: z.array(z.string()).optional(),
            three_d_secure_status: z.array(z.string()).optional(),
            three_d_secure_eci: z.array(z.string()).optional(),
            three_d_secure_auth_resp: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.authorized_at === undefined ? null : { authorizedAt: v.authorized_at }),
                ...(v.captured_at === undefined ? null : { capturedAt: v.captured_at }),
                ...(v.voided_at === undefined ? null : { voidedAt: v.voided_at }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.three_d_secure_status === undefined
                    ? null
                    : { threeDSecureStatus: v.three_d_secure_status }),
                ...(v.three_d_secure_eci === undefined
                    ? null
                    : { threeDSecureEci: v.three_d_secure_eci }),
                ...(v.three_d_secure_auth_resp === undefined
                    ? null
                    : { threeDSecureAuthResp: v.three_d_secure_auth_resp }),
            };
        });

    export type Outbound = {
        status?: Array<string> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        authorized_at?: string | undefined;
        captured_at?: string | undefined;
        voided_at?: string | undefined;
        currency?: Array<string> | undefined;
        method?: Array<string> | undefined;
        scheme?: Array<string> | undefined;
        metadata?: Array<string> | undefined;
        three_d_secure_status?: Array<string> | undefined;
        three_d_secure_eci?: Array<string> | undefined;
        three_d_secure_auth_resp?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Filters> = z
        .object({
            status: z.array(z.string()).optional(),
            createdAt: z.string().optional(),
            updatedAt: z.string().optional(),
            authorizedAt: z.string().optional(),
            capturedAt: z.string().optional(),
            voidedAt: z.string().optional(),
            currency: z.array(z.string()).optional(),
            method: z.array(z.string()).optional(),
            scheme: z.array(z.string()).optional(),
            metadata: z.array(z.string()).optional(),
            threeDSecureStatus: z.array(z.string()).optional(),
            threeDSecureEci: z.array(z.string()).optional(),
            threeDSecureAuthResp: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.authorizedAt === undefined ? null : { authorized_at: v.authorizedAt }),
                ...(v.capturedAt === undefined ? null : { captured_at: v.capturedAt }),
                ...(v.voidedAt === undefined ? null : { voided_at: v.voidedAt }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.threeDSecureStatus === undefined
                    ? null
                    : { three_d_secure_status: v.threeDSecureStatus }),
                ...(v.threeDSecureEci === undefined
                    ? null
                    : { three_d_secure_eci: v.threeDSecureEci }),
                ...(v.threeDSecureAuthResp === undefined
                    ? null
                    : { three_d_secure_auth_resp: v.threeDSecureAuthResp }),
            };
        });
}

/** @internal */
export namespace Sort$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Sort, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Sort> = z.object({});
}

/** @internal */
export namespace Params$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        fields?: Array<ReportSpecFields> | undefined;
        filters?: Filters$.Inbound | undefined;
        sort?: Array<Sort$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Params, z.ZodTypeDef, Inbound> = z
        .object({
            fields: z.array(ReportSpecFields$).optional(),
            filters: z.lazy(() => Filters$.inboundSchema).optional(),
            sort: z.array(z.lazy(() => Sort$.inboundSchema)).optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { fields, filters, sort, ...additionalProperties } = v;

            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                additionalProperties,
            };
        });

    export type Outbound = {
        fields?: Array<ReportSpecFields> | undefined;
        filters?: Filters$.Outbound | undefined;
        sort?: Array<Sort$.Outbound> | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Params> = z
        .object({
            fields: z.array(ReportSpecFields$).optional(),
            filters: z.lazy(() => Filters$.outboundSchema).optional(),
            sort: z.array(z.lazy(() => Sort$.outboundSchema)).optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}

/** @internal */
export namespace ReportSpec$ {
    export type Inbound = {
        model: Model;
        params: Params$.Inbound;
    };

    export const inboundSchema: z.ZodType<ReportSpec, z.ZodTypeDef, Inbound> = z
        .object({
            model: Model$,
            params: z.lazy(() => Params$.inboundSchema),
        })
        .transform((v) => {
            return {
                model: v.model,
                params: v.params,
            };
        });

    export type Outbound = {
        model: Model;
        params: Params$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportSpec> = z
        .object({
            model: Model$,
            params: z.lazy(() => Params$.outboundSchema),
        })
        .transform((v) => {
            return {
                model: v.model,
                params: v.params,
            };
        });
}
