/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * `payment-method`.
 */
export const PaymentMethodTokenizedType = {
    PaymentMethod: "payment-method",
} as const;
/**
 * `payment-method`.
 */
export type PaymentMethodTokenizedType = ClosedEnum<typeof PaymentMethodTokenizedType>;

/**
 * The type of this payment method.
 */
export const Method = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Kcp: "kcp",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Spei: "spei",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
/**
 * The type of this payment method.
 */
export type Method = ClosedEnum<typeof Method>;

/**
 * The type of the card, if the payment method is a card.
 */
export const Scheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The type of the card, if the payment method is a card.
 */
export type Scheme = ClosedEnum<typeof Scheme>;

export const AdditionalSchemes = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
export type AdditionalSchemes = ClosedEnum<typeof AdditionalSchemes>;

/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export const ApprovalTarget = {
    Any: "any",
    NewWindow: "new_window",
} as const;
/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export type ApprovalTarget = ClosedEnum<typeof ApprovalTarget>;

/**
 * A mini format version of a payment method.
 */
export type PaymentMethodTokenized = {
    /**
     * `payment-method`.
     */
    type?: PaymentMethodTokenizedType | undefined;
    /**
     * The unique ID of the payment method.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The type of this payment method.
     */
    method?: Method | undefined;
    /**
     * A label for the payment method. For a `card` payment method this is the
     *
     * @remarks
     * last 4 digits on the card. For others it would be the email address.
     */
    label?: string | undefined;
    /**
     * The type of the card, if the payment method is a card.
     */
    scheme?: Scheme | null | undefined;
    /**
     * Additional schemes of the card. Only applies to card payment methods.
     */
    additionalSchemes?: Array<AdditionalSchemes> | null | undefined;
    /**
     * The expiration date for the payment method.
     */
    expirationDate?: string | null | undefined;
    /**
     * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
     */
    approvalTarget?: ApprovalTarget | null | undefined;
    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    approvalUrl?: string | null | undefined;
    /**
     * The ISO-4217 currency code that this payment method can be
     *
     * @remarks
     * used for. If this value is `null` the payment method may be
     * used for multiple currencies.
     */
    currency?: string | null | undefined;
    /**
     * The 2-letter ISO code of the country this payment method can
     *
     * @remarks
     * be used for. If this value is `null` the payment method may be
     * used in multiple countries.
     */
    country?: string | null | undefined;
    /**
     * The date and time when this card was last replaced.
     *
     * @remarks
     *
     * When the Account Updater determines that new card details are available, existing details are not
     * changed immediately. There are three scenarios in which the actual replacement occurs:
     *
     * 1. When this card has expired.
     * 2. When only the expiration date changed.
     * 3. When a transaction using this card is declined with any of the following codes:
     *     * `canceled_payment_method`
     *     * `expired_payment_method`
     *     * `unavailable_payment_method`
     *     * `unknown_payment_method`
     *
     * When the replacement is applied, this field is updated.
     * For non-card payment methods, the value of this field is always set to `null`.
     */
    lastReplacedAt?: Date | null | undefined;
    /**
     * Whether this card has a pending replacement that hasn't been applied yet.
     *
     * @remarks
     *
     * When the Account Updater determines that new card details are available, existing details are not
     * changed immediately, but this field is set to `true`. There are three scenarios in which the actual
     * replacement occurs:
     *
     * 1. When this card has expired.
     * 2. When only the expiration date changed.
     * 3. When a transaction using this card is declined with any of the following codes:
     *     * `canceled_payment_method`
     *     * `expired_payment_method`
     *     * `unavailable_payment_method`
     *     * `unknown_payment_method`
     *
     * When the replacement is applied, this field is set to `false`.
     * For non-card payment methods, the value of this field is always set to `false`.
     */
    hasReplacement?: boolean | undefined;
};

/** @internal */
export const PaymentMethodTokenizedType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentMethodTokenizedType
> = z.nativeEnum(PaymentMethodTokenizedType);

/** @internal */
export const PaymentMethodTokenizedType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentMethodTokenizedType
> = PaymentMethodTokenizedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodTokenizedType$ {
    /** @deprecated use `PaymentMethodTokenizedType$inboundSchema` instead. */
    export const inboundSchema = PaymentMethodTokenizedType$inboundSchema;
    /** @deprecated use `PaymentMethodTokenizedType$outboundSchema` instead. */
    export const outboundSchema = PaymentMethodTokenizedType$outboundSchema;
}

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z.nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> = Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
    /** @deprecated use `Method$inboundSchema` instead. */
    export const inboundSchema = Method$inboundSchema;
    /** @deprecated use `Method$outboundSchema` instead. */
    export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const Scheme$inboundSchema: z.ZodNativeEnum<typeof Scheme> = z.nativeEnum(Scheme);

/** @internal */
export const Scheme$outboundSchema: z.ZodNativeEnum<typeof Scheme> = Scheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scheme$ {
    /** @deprecated use `Scheme$inboundSchema` instead. */
    export const inboundSchema = Scheme$inboundSchema;
    /** @deprecated use `Scheme$outboundSchema` instead. */
    export const outboundSchema = Scheme$outboundSchema;
}

/** @internal */
export const AdditionalSchemes$inboundSchema: z.ZodNativeEnum<typeof AdditionalSchemes> =
    z.nativeEnum(AdditionalSchemes);

/** @internal */
export const AdditionalSchemes$outboundSchema: z.ZodNativeEnum<typeof AdditionalSchemes> =
    AdditionalSchemes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalSchemes$ {
    /** @deprecated use `AdditionalSchemes$inboundSchema` instead. */
    export const inboundSchema = AdditionalSchemes$inboundSchema;
    /** @deprecated use `AdditionalSchemes$outboundSchema` instead. */
    export const outboundSchema = AdditionalSchemes$outboundSchema;
}

/** @internal */
export const ApprovalTarget$inboundSchema: z.ZodNativeEnum<typeof ApprovalTarget> =
    z.nativeEnum(ApprovalTarget);

/** @internal */
export const ApprovalTarget$outboundSchema: z.ZodNativeEnum<typeof ApprovalTarget> =
    ApprovalTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalTarget$ {
    /** @deprecated use `ApprovalTarget$inboundSchema` instead. */
    export const inboundSchema = ApprovalTarget$inboundSchema;
    /** @deprecated use `ApprovalTarget$outboundSchema` instead. */
    export const outboundSchema = ApprovalTarget$outboundSchema;
}

/** @internal */
export const PaymentMethodTokenized$inboundSchema: z.ZodType<
    PaymentMethodTokenized,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentMethodTokenizedType$inboundSchema.optional(),
        id: z.string().optional(),
        merchant_account_id: z.string().optional(),
        method: Method$inboundSchema.optional(),
        label: z.string().optional(),
        scheme: z.nullable(Scheme$inboundSchema).optional(),
        additional_schemes: z.nullable(z.array(AdditionalSchemes$inboundSchema)).optional(),
        expiration_date: z.nullable(z.string()).optional(),
        approval_target: z.nullable(ApprovalTarget$inboundSchema).optional(),
        approval_url: z.nullable(z.string()).optional(),
        currency: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        last_replaced_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        has_replacement: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            additional_schemes: "additionalSchemes",
            expiration_date: "expirationDate",
            approval_target: "approvalTarget",
            approval_url: "approvalUrl",
            last_replaced_at: "lastReplacedAt",
            has_replacement: "hasReplacement",
        });
    });

/** @internal */
export type PaymentMethodTokenized$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    merchant_account_id?: string | undefined;
    method?: string | undefined;
    label?: string | undefined;
    scheme?: string | null | undefined;
    additional_schemes?: Array<string> | null | undefined;
    expiration_date?: string | null | undefined;
    approval_target?: string | null | undefined;
    approval_url?: string | null | undefined;
    currency?: string | null | undefined;
    country?: string | null | undefined;
    last_replaced_at?: string | null | undefined;
    has_replacement?: boolean | undefined;
};

/** @internal */
export const PaymentMethodTokenized$outboundSchema: z.ZodType<
    PaymentMethodTokenized$Outbound,
    z.ZodTypeDef,
    PaymentMethodTokenized
> = z
    .object({
        type: PaymentMethodTokenizedType$outboundSchema.optional(),
        id: z.string().optional(),
        merchantAccountId: z.string().optional(),
        method: Method$outboundSchema.optional(),
        label: z.string().optional(),
        scheme: z.nullable(Scheme$outboundSchema).optional(),
        additionalSchemes: z.nullable(z.array(AdditionalSchemes$outboundSchema)).optional(),
        expirationDate: z.nullable(z.string()).optional(),
        approvalTarget: z.nullable(ApprovalTarget$outboundSchema).optional(),
        approvalUrl: z.nullable(z.string()).optional(),
        currency: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        lastReplacedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        hasReplacement: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            additionalSchemes: "additional_schemes",
            expirationDate: "expiration_date",
            approvalTarget: "approval_target",
            approvalUrl: "approval_url",
            lastReplacedAt: "last_replaced_at",
            hasReplacement: "has_replacement",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodTokenized$ {
    /** @deprecated use `PaymentMethodTokenized$inboundSchema` instead. */
    export const inboundSchema = PaymentMethodTokenized$inboundSchema;
    /** @deprecated use `PaymentMethodTokenized$outboundSchema` instead. */
    export const outboundSchema = PaymentMethodTokenized$outboundSchema;
    /** @deprecated use `PaymentMethodTokenized$Outbound` instead. */
    export type Outbound = PaymentMethodTokenized$Outbound;
}
