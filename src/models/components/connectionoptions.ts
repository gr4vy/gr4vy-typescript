/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CheckoutCardConnectionOptions,
  CheckoutCardConnectionOptions$inboundSchema,
  CheckoutCardConnectionOptions$Outbound,
  CheckoutCardConnectionOptions$outboundSchema,
} from "./checkoutcardconnectionoptions.js";

export type ConnectionOptions = {
  /**
   * Custom options for `checkout-card` payment service.
   */
  checkoutCard?: CheckoutCardConnectionOptions | null | undefined;
};

/** @internal */
export const ConnectionOptions$inboundSchema: z.ZodType<
  ConnectionOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  "checkout-card": z.nullable(CheckoutCardConnectionOptions$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "checkout-card": "checkoutCard",
  });
});

/** @internal */
export type ConnectionOptions$Outbound = {
  "checkout-card"?: CheckoutCardConnectionOptions$Outbound | null | undefined;
};

/** @internal */
export const ConnectionOptions$outboundSchema: z.ZodType<
  ConnectionOptions$Outbound,
  z.ZodTypeDef,
  ConnectionOptions
> = z.object({
  checkoutCard: z.nullable(CheckoutCardConnectionOptions$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    checkoutCard: "checkout-card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionOptions$ {
  /** @deprecated use `ConnectionOptions$inboundSchema` instead. */
  export const inboundSchema = ConnectionOptions$inboundSchema;
  /** @deprecated use `ConnectionOptions$outboundSchema` instead. */
  export const outboundSchema = ConnectionOptions$outboundSchema;
  /** @deprecated use `ConnectionOptions$Outbound` instead. */
  export type Outbound = ConnectionOptions$Outbound;
}

export function connectionOptionsToJSON(
  connectionOptions: ConnectionOptions,
): string {
  return JSON.stringify(
    ConnectionOptions$outboundSchema.parse(connectionOptions),
  );
}

export function connectionOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionOptions' from JSON`,
  );
}
