/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum DigitalWalletClickToPayTokenDecryptedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `digital-wallet-click-to-pay-token-decrypted`.
 */
export enum DigitalWalletClickToPayTokenDecryptedName {
    DigitalWalletClickToPayTokenDecrypted = "digital-wallet-click-to-pay-token-decrypted",
}

/**
 * The type of payment instrument.
 */
export enum DigitalWalletClickToPayTokenDecryptedContextType {
    Dpan = "dpan",
    Fpan = "fpan",
}

/**
 * Click to Pay decrypted token context.
 */
export type DigitalWalletClickToPayTokenDecryptedContext = {
    /**
     * Correlation ID for transaction.
     */
    correlationId?: string | undefined;
    /**
     * Merchant Checkout Transaction Identifier which links the client-side JavaScript calls and server-side API calls for a specific transaction.
     */
    merchantTransactionId?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletClickToPayTokenDecryptedContextType | undefined;
    /**
     * Expiration of the card/token.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3-D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * The cardholder name.
     */
    cardholderName?: string | null | undefined;
    /**
     * First six digits of underlying card.
     */
    cardBin?: string | null | undefined;
    /**
     * Last four digits of underlying card.
     */
    cardLastFour?: string | null | undefined;
    /**
     * Expiration date of underlying card.
     */
    cardExpirationDate?: string | null | undefined;
    /**
     * Card type.
     */
    cardType?: string | null | undefined;
    /**
     * Address line 1.
     */
    billingLine1?: string | null | undefined;
    /**
     * Address line 2.
     */
    billingLine2?: string | null | undefined;
    /**
     * Address city.
     */
    billingCity?: string | null | undefined;
    /**
     * Address state.
     */
    billingState?: string | null | undefined;
    /**
     * Address zip/postal code.
     */
    billingZip?: string | null | undefined;
    /**
     * ISO 3166-1 alpha 2 address country code.
     */
    billingCountryCode?: string | null | undefined;
};

/**
 * The result after decrypting an Click to Pay token.
 */
export type DigitalWalletClickToPayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletClickToPayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-click-to-pay-token-decrypted`.
     */
    name?: DigitalWalletClickToPayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Click to Pay decrypted token context.
     */
    context?: DigitalWalletClickToPayTokenDecryptedContext | undefined;
};

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedType$: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedType
> = z.nativeEnum(DigitalWalletClickToPayTokenDecryptedType);

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedName$: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedName
> = z.nativeEnum(DigitalWalletClickToPayTokenDecryptedName);

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedContextType$: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedContextType
> = z.nativeEnum(DigitalWalletClickToPayTokenDecryptedContextType);

/** @internal */
export namespace DigitalWalletClickToPayTokenDecryptedContext$ {
    export type Inbound = {
        correlation_id?: string | undefined;
        merchant_transaction_id?: string | undefined;
        type?: DigitalWalletClickToPayTokenDecryptedContextType | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        cardholder_name?: string | null | undefined;
        card_bin?: string | null | undefined;
        card_last_four?: string | null | undefined;
        card_expiration_date?: string | null | undefined;
        card_type?: string | null | undefined;
        billing_line1?: string | null | undefined;
        billing_line2?: string | null | undefined;
        billing_city?: string | null | undefined;
        billing_state?: string | null | undefined;
        billing_zip?: string | null | undefined;
        billing_country_code?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        DigitalWalletClickToPayTokenDecryptedContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            correlation_id: z.string().optional(),
            merchant_transaction_id: z.string().optional(),
            type: DigitalWalletClickToPayTokenDecryptedContextType$.optional(),
            expiration_date: z.string().optional(),
            has_cryptogram: z.boolean().optional(),
            cardholder_name: z.nullable(z.string()).optional(),
            card_bin: z.nullable(z.string()).optional(),
            card_last_four: z.nullable(z.string()).optional(),
            card_expiration_date: z.nullable(z.string()).optional(),
            card_type: z.nullable(z.string()).optional(),
            billing_line1: z.nullable(z.string()).optional(),
            billing_line2: z.nullable(z.string()).optional(),
            billing_city: z.nullable(z.string()).optional(),
            billing_state: z.nullable(z.string()).optional(),
            billing_zip: z.nullable(z.string()).optional(),
            billing_country_code: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.correlation_id === undefined ? null : { correlationId: v.correlation_id }),
                ...(v.merchant_transaction_id === undefined
                    ? null
                    : { merchantTransactionId: v.merchant_transaction_id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.expiration_date === undefined ? null : { expirationDate: v.expiration_date }),
                ...(v.has_cryptogram === undefined ? null : { hasCryptogram: v.has_cryptogram }),
                ...(v.cardholder_name === undefined ? null : { cardholderName: v.cardholder_name }),
                ...(v.card_bin === undefined ? null : { cardBin: v.card_bin }),
                ...(v.card_last_four === undefined ? null : { cardLastFour: v.card_last_four }),
                ...(v.card_expiration_date === undefined
                    ? null
                    : { cardExpirationDate: v.card_expiration_date }),
                ...(v.card_type === undefined ? null : { cardType: v.card_type }),
                ...(v.billing_line1 === undefined ? null : { billingLine1: v.billing_line1 }),
                ...(v.billing_line2 === undefined ? null : { billingLine2: v.billing_line2 }),
                ...(v.billing_city === undefined ? null : { billingCity: v.billing_city }),
                ...(v.billing_state === undefined ? null : { billingState: v.billing_state }),
                ...(v.billing_zip === undefined ? null : { billingZip: v.billing_zip }),
                ...(v.billing_country_code === undefined
                    ? null
                    : { billingCountryCode: v.billing_country_code }),
            };
        });

    export type Outbound = {
        correlation_id?: string | undefined;
        merchant_transaction_id?: string | undefined;
        type?: DigitalWalletClickToPayTokenDecryptedContextType | undefined;
        expiration_date?: string | undefined;
        has_cryptogram?: boolean | undefined;
        cardholder_name?: string | null | undefined;
        card_bin?: string | null | undefined;
        card_last_four?: string | null | undefined;
        card_expiration_date?: string | null | undefined;
        card_type?: string | null | undefined;
        billing_line1?: string | null | undefined;
        billing_line2?: string | null | undefined;
        billing_city?: string | null | undefined;
        billing_state?: string | null | undefined;
        billing_zip?: string | null | undefined;
        billing_country_code?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletClickToPayTokenDecryptedContext
    > = z
        .object({
            correlationId: z.string().optional(),
            merchantTransactionId: z.string().optional(),
            type: DigitalWalletClickToPayTokenDecryptedContextType$.optional(),
            expirationDate: z.string().optional(),
            hasCryptogram: z.boolean().optional(),
            cardholderName: z.nullable(z.string()).optional(),
            cardBin: z.nullable(z.string()).optional(),
            cardLastFour: z.nullable(z.string()).optional(),
            cardExpirationDate: z.nullable(z.string()).optional(),
            cardType: z.nullable(z.string()).optional(),
            billingLine1: z.nullable(z.string()).optional(),
            billingLine2: z.nullable(z.string()).optional(),
            billingCity: z.nullable(z.string()).optional(),
            billingState: z.nullable(z.string()).optional(),
            billingZip: z.nullable(z.string()).optional(),
            billingCountryCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.correlationId === undefined ? null : { correlation_id: v.correlationId }),
                ...(v.merchantTransactionId === undefined
                    ? null
                    : { merchant_transaction_id: v.merchantTransactionId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.expirationDate === undefined ? null : { expiration_date: v.expirationDate }),
                ...(v.hasCryptogram === undefined ? null : { has_cryptogram: v.hasCryptogram }),
                ...(v.cardholderName === undefined ? null : { cardholder_name: v.cardholderName }),
                ...(v.cardBin === undefined ? null : { card_bin: v.cardBin }),
                ...(v.cardLastFour === undefined ? null : { card_last_four: v.cardLastFour }),
                ...(v.cardExpirationDate === undefined
                    ? null
                    : { card_expiration_date: v.cardExpirationDate }),
                ...(v.cardType === undefined ? null : { card_type: v.cardType }),
                ...(v.billingLine1 === undefined ? null : { billing_line1: v.billingLine1 }),
                ...(v.billingLine2 === undefined ? null : { billing_line2: v.billingLine2 }),
                ...(v.billingCity === undefined ? null : { billing_city: v.billingCity }),
                ...(v.billingState === undefined ? null : { billing_state: v.billingState }),
                ...(v.billingZip === undefined ? null : { billing_zip: v.billingZip }),
                ...(v.billingCountryCode === undefined
                    ? null
                    : { billing_country_code: v.billingCountryCode }),
            };
        });
}

/** @internal */
export namespace DigitalWalletClickToPayTokenDecrypted$ {
    export type Inbound = {
        type?: DigitalWalletClickToPayTokenDecryptedType | undefined;
        id?: string | undefined;
        name?: DigitalWalletClickToPayTokenDecryptedName | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletClickToPayTokenDecryptedContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        DigitalWalletClickToPayTokenDecrypted,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: DigitalWalletClickToPayTokenDecryptedType$.optional(),
            id: z.string().optional(),
            name: DigitalWalletClickToPayTokenDecryptedName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(() => DigitalWalletClickToPayTokenDecryptedContext$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: DigitalWalletClickToPayTokenDecryptedType | undefined;
        id?: string | undefined;
        name?: DigitalWalletClickToPayTokenDecryptedName | undefined;
        created_at?: string | undefined;
        context?: DigitalWalletClickToPayTokenDecryptedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DigitalWalletClickToPayTokenDecrypted
    > = z
        .object({
            type: DigitalWalletClickToPayTokenDecryptedType$.optional(),
            id: z.string().optional(),
            name: DigitalWalletClickToPayTokenDecryptedName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(() => DigitalWalletClickToPayTokenDecryptedContext$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
