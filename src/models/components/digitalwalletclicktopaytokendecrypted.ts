/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const DigitalWalletClickToPayTokenDecryptedType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type DigitalWalletClickToPayTokenDecryptedType = ClosedEnum<
    typeof DigitalWalletClickToPayTokenDecryptedType
>;

/**
 * The name of this resource. Is always `digital-wallet-click-to-pay-token-decrypted`.
 */
export const DigitalWalletClickToPayTokenDecryptedName = {
    DigitalWalletClickToPayTokenDecrypted: "digital-wallet-click-to-pay-token-decrypted",
} as const;
/**
 * The name of this resource. Is always `digital-wallet-click-to-pay-token-decrypted`.
 */
export type DigitalWalletClickToPayTokenDecryptedName = ClosedEnum<
    typeof DigitalWalletClickToPayTokenDecryptedName
>;

/**
 * The type of payment instrument.
 */
export const DigitalWalletClickToPayTokenDecryptedContextType = {
    Dpan: "dpan",
    Fpan: "fpan",
} as const;
/**
 * The type of payment instrument.
 */
export type DigitalWalletClickToPayTokenDecryptedContextType = ClosedEnum<
    typeof DigitalWalletClickToPayTokenDecryptedContextType
>;

/**
 * Click to Pay decrypted token context.
 */
export type DigitalWalletClickToPayTokenDecryptedContext = {
    /**
     * Correlation ID for transaction.
     */
    correlationId?: string | undefined;
    /**
     * Merchant Checkout Transaction Identifier which links the client-side JavaScript calls and server-side API calls for a specific transaction.
     */
    merchantTransactionId?: string | undefined;
    /**
     * The type of payment instrument.
     */
    type?: DigitalWalletClickToPayTokenDecryptedContextType | undefined;
    /**
     * Expiration of the card/token.
     */
    expirationDate?: string | undefined;
    /**
     * Online payment cryptogram, as defined by 3-D Secure.
     */
    hasCryptogram?: boolean | undefined;
    /**
     * The cardholder name.
     */
    cardholderName?: string | null | undefined;
    /**
     * First six digits of underlying card.
     */
    cardBin?: string | null | undefined;
    /**
     * Last four digits of underlying card.
     */
    cardLastFour?: string | null | undefined;
    /**
     * Expiration date of underlying card.
     */
    cardExpirationDate?: string | null | undefined;
    /**
     * Card type.
     */
    cardType?: string | null | undefined;
    /**
     * Address line 1.
     */
    billingLine1?: string | null | undefined;
    /**
     * Address line 2.
     */
    billingLine2?: string | null | undefined;
    /**
     * Address city.
     */
    billingCity?: string | null | undefined;
    /**
     * Address state.
     */
    billingState?: string | null | undefined;
    /**
     * Address zip/postal code.
     */
    billingZip?: string | null | undefined;
    /**
     * ISO 3166-1 alpha 2 address country code.
     */
    billingCountryCode?: string | null | undefined;
};

/**
 * The result after decrypting an Click to Pay token.
 */
export type DigitalWalletClickToPayTokenDecrypted = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: DigitalWalletClickToPayTokenDecryptedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `digital-wallet-click-to-pay-token-decrypted`.
     */
    name?: DigitalWalletClickToPayTokenDecryptedName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Click to Pay decrypted token context.
     */
    context?: DigitalWalletClickToPayTokenDecryptedContext | undefined;
};

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedType$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedType
> = z.nativeEnum(DigitalWalletClickToPayTokenDecryptedType);

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedType$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedType
> = DigitalWalletClickToPayTokenDecryptedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletClickToPayTokenDecryptedType$ {
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletClickToPayTokenDecryptedType$inboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletClickToPayTokenDecryptedType$outboundSchema;
}

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedName$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedName
> = z.nativeEnum(DigitalWalletClickToPayTokenDecryptedName);

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedName$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedName
> = DigitalWalletClickToPayTokenDecryptedName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletClickToPayTokenDecryptedName$ {
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedName$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletClickToPayTokenDecryptedName$inboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedName$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletClickToPayTokenDecryptedName$outboundSchema;
}

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedContextType$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedContextType
> = z.nativeEnum(DigitalWalletClickToPayTokenDecryptedContextType);

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedContextType$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletClickToPayTokenDecryptedContextType
> = DigitalWalletClickToPayTokenDecryptedContextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletClickToPayTokenDecryptedContextType$ {
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedContextType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletClickToPayTokenDecryptedContextType$inboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedContextType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletClickToPayTokenDecryptedContextType$outboundSchema;
}

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedContext$inboundSchema: z.ZodType<
    DigitalWalletClickToPayTokenDecryptedContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        correlation_id: z.string().optional(),
        merchant_transaction_id: z.string().optional(),
        type: DigitalWalletClickToPayTokenDecryptedContextType$inboundSchema.optional(),
        expiration_date: z.string().optional(),
        has_cryptogram: z.boolean().optional(),
        cardholder_name: z.nullable(z.string()).optional(),
        card_bin: z.nullable(z.string()).optional(),
        card_last_four: z.nullable(z.string()).optional(),
        card_expiration_date: z.nullable(z.string()).optional(),
        card_type: z.nullable(z.string()).optional(),
        billing_line1: z.nullable(z.string()).optional(),
        billing_line2: z.nullable(z.string()).optional(),
        billing_city: z.nullable(z.string()).optional(),
        billing_state: z.nullable(z.string()).optional(),
        billing_zip: z.nullable(z.string()).optional(),
        billing_country_code: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            correlation_id: "correlationId",
            merchant_transaction_id: "merchantTransactionId",
            expiration_date: "expirationDate",
            has_cryptogram: "hasCryptogram",
            cardholder_name: "cardholderName",
            card_bin: "cardBin",
            card_last_four: "cardLastFour",
            card_expiration_date: "cardExpirationDate",
            card_type: "cardType",
            billing_line1: "billingLine1",
            billing_line2: "billingLine2",
            billing_city: "billingCity",
            billing_state: "billingState",
            billing_zip: "billingZip",
            billing_country_code: "billingCountryCode",
        });
    });

/** @internal */
export type DigitalWalletClickToPayTokenDecryptedContext$Outbound = {
    correlation_id?: string | undefined;
    merchant_transaction_id?: string | undefined;
    type?: string | undefined;
    expiration_date?: string | undefined;
    has_cryptogram?: boolean | undefined;
    cardholder_name?: string | null | undefined;
    card_bin?: string | null | undefined;
    card_last_four?: string | null | undefined;
    card_expiration_date?: string | null | undefined;
    card_type?: string | null | undefined;
    billing_line1?: string | null | undefined;
    billing_line2?: string | null | undefined;
    billing_city?: string | null | undefined;
    billing_state?: string | null | undefined;
    billing_zip?: string | null | undefined;
    billing_country_code?: string | null | undefined;
};

/** @internal */
export const DigitalWalletClickToPayTokenDecryptedContext$outboundSchema: z.ZodType<
    DigitalWalletClickToPayTokenDecryptedContext$Outbound,
    z.ZodTypeDef,
    DigitalWalletClickToPayTokenDecryptedContext
> = z
    .object({
        correlationId: z.string().optional(),
        merchantTransactionId: z.string().optional(),
        type: DigitalWalletClickToPayTokenDecryptedContextType$outboundSchema.optional(),
        expirationDate: z.string().optional(),
        hasCryptogram: z.boolean().optional(),
        cardholderName: z.nullable(z.string()).optional(),
        cardBin: z.nullable(z.string()).optional(),
        cardLastFour: z.nullable(z.string()).optional(),
        cardExpirationDate: z.nullable(z.string()).optional(),
        cardType: z.nullable(z.string()).optional(),
        billingLine1: z.nullable(z.string()).optional(),
        billingLine2: z.nullable(z.string()).optional(),
        billingCity: z.nullable(z.string()).optional(),
        billingState: z.nullable(z.string()).optional(),
        billingZip: z.nullable(z.string()).optional(),
        billingCountryCode: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            correlationId: "correlation_id",
            merchantTransactionId: "merchant_transaction_id",
            expirationDate: "expiration_date",
            hasCryptogram: "has_cryptogram",
            cardholderName: "cardholder_name",
            cardBin: "card_bin",
            cardLastFour: "card_last_four",
            cardExpirationDate: "card_expiration_date",
            cardType: "card_type",
            billingLine1: "billing_line1",
            billingLine2: "billing_line2",
            billingCity: "billing_city",
            billingState: "billing_state",
            billingZip: "billing_zip",
            billingCountryCode: "billing_country_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletClickToPayTokenDecryptedContext$ {
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedContext$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletClickToPayTokenDecryptedContext$inboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedContext$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletClickToPayTokenDecryptedContext$outboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecryptedContext$Outbound` instead. */
    export type Outbound = DigitalWalletClickToPayTokenDecryptedContext$Outbound;
}

/** @internal */
export const DigitalWalletClickToPayTokenDecrypted$inboundSchema: z.ZodType<
    DigitalWalletClickToPayTokenDecrypted,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: DigitalWalletClickToPayTokenDecryptedType$inboundSchema.optional(),
        id: z.string().optional(),
        name: DigitalWalletClickToPayTokenDecryptedName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => DigitalWalletClickToPayTokenDecryptedContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type DigitalWalletClickToPayTokenDecrypted$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: DigitalWalletClickToPayTokenDecryptedContext$Outbound | undefined;
};

/** @internal */
export const DigitalWalletClickToPayTokenDecrypted$outboundSchema: z.ZodType<
    DigitalWalletClickToPayTokenDecrypted$Outbound,
    z.ZodTypeDef,
    DigitalWalletClickToPayTokenDecrypted
> = z
    .object({
        type: DigitalWalletClickToPayTokenDecryptedType$outboundSchema.optional(),
        id: z.string().optional(),
        name: DigitalWalletClickToPayTokenDecryptedName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => DigitalWalletClickToPayTokenDecryptedContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletClickToPayTokenDecrypted$ {
    /** @deprecated use `DigitalWalletClickToPayTokenDecrypted$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletClickToPayTokenDecrypted$inboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecrypted$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletClickToPayTokenDecrypted$outboundSchema;
    /** @deprecated use `DigitalWalletClickToPayTokenDecrypted$Outbound` instead. */
    export type Outbound = DigitalWalletClickToPayTokenDecrypted$Outbound;
}
