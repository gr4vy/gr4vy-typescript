/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Base model with JSON encoders.
 */
export type TransactionRefundAllCreate = {
  /**
   * An optional reason to attach extra context to the refund requests.
   */
  reason?: string | undefined;
  /**
   * An external identifier that can be used to match the refunds against your own records.
   */
  externalIdentifier?: string | undefined;
};

/** @internal */
export const TransactionRefundAllCreate$inboundSchema: z.ZodType<
  TransactionRefundAllCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: z.string().optional(),
  external_identifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "external_identifier": "externalIdentifier",
  });
});

/** @internal */
export type TransactionRefundAllCreate$Outbound = {
  reason?: string | undefined;
  external_identifier?: string | undefined;
};

/** @internal */
export const TransactionRefundAllCreate$outboundSchema: z.ZodType<
  TransactionRefundAllCreate$Outbound,
  z.ZodTypeDef,
  TransactionRefundAllCreate
> = z.object({
  reason: z.string().optional(),
  externalIdentifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    externalIdentifier: "external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundAllCreate$ {
  /** @deprecated use `TransactionRefundAllCreate$inboundSchema` instead. */
  export const inboundSchema = TransactionRefundAllCreate$inboundSchema;
  /** @deprecated use `TransactionRefundAllCreate$outboundSchema` instead. */
  export const outboundSchema = TransactionRefundAllCreate$outboundSchema;
  /** @deprecated use `TransactionRefundAllCreate$Outbound` instead. */
  export type Outbound = TransactionRefundAllCreate$Outbound;
}

export function transactionRefundAllCreateToJSON(
  transactionRefundAllCreate: TransactionRefundAllCreate,
): string {
  return JSON.stringify(
    TransactionRefundAllCreate$outboundSchema.parse(transactionRefundAllCreate),
  );
}

export function transactionRefundAllCreateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionRefundAllCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionRefundAllCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionRefundAllCreate' from JSON`,
  );
}
