/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The billing address for the buyer.
 */
export type BuyerRequestAddress = {
    /**
     * The city for the address.
     */
    city: string | null;
    /**
     * The country for the address in ISO 3166 format.
     */
    country: string | null;
    /**
     * The postal code or zip code for the address.
     */
    postalCode: string | null;
    /**
     * The state, county, or province for the address.
     */
    state: string | null;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1: string | null;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export enum BuyerRequestKind {
    AeTrn = "ae.trn",
    AuAbn = "au.abn",
    ArDni = "ar.dni",
    ArCuil = "ar.cuil",
    ArCuit = "ar.cuit",
    BrCnpj = "br.cnpj",
    BrCpf = "br.cpf",
    CaBn = "ca.bn",
    CaGstHst = "ca.gst_hst",
    CaPstBc = "ca.pst_bc",
    CaPstMb = "ca.pst_mb",
    CaPstSk = "ca.pst_sk",
    CaQst = "ca.qst",
    ChVat = "ch.vat",
    ClTin = "cl.tin",
    EsCif = "es.cif",
    EuVat = "eu.vat",
    GbVat = "gb.vat",
    HkBr = "hk.br",
    IdNik = "id.nik",
    IdNpwp = "id.npwp",
    InGst = "in.gst",
    JpCn = "jp.cn",
    JpRn = "jp.rn",
    KrBrn = "kr.brn",
    LiUid = "li.uid",
    MxCurp = "mx.curp",
    MyFrp = "my.frp",
    MyItn = "my.itn",
    MyNric = "my.nric",
    MySst = "my.sst",
    NoVat = "no.vat",
    NzGst = "nz.gst",
    PhTin = "ph.tin",
    RuInn = "ru.inn",
    RuKpp = "ru.kpp",
    SaVat = "sa.vat",
    SgGst = "sg.gst",
    SgUen = "sg.uen",
    ThId = "th.id",
    ThVat = "th.vat",
    TwVat = "tw.vat",
    UsEin = "us.ein",
    ZaVat = "za.vat",
}

/**
 * The tax ID information associated with the billing details.
 */
export type BuyerRequestTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: BuyerRequestKind;
};

/**
 * The optional billing details to associate with a buyer.
 */
export type BillingDetailsCreate = {
    /**
     * The first name(s) or given name for the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the buyer which should be formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address for the buyer.
     */
    address?: BuyerRequestAddress | null | undefined;
    /**
     * The tax ID information associated with the billing details.
     */
    taxId?: BuyerRequestTaxID | null | undefined;
};

/**
 * A request to create a buyer.
 */
export type BuyerRequest = {
    /**
     * An external identifier that can be used to match the buyer against your own records. This value needs to be unique for all buyers.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * The optional billing details to associate with a buyer.
     */
    billingDetails?: BillingDetailsCreate | null | undefined;
};

/** @internal */
export namespace BuyerRequestAddress$ {
    export type Inbound = {
        city: string | null;
        country: string | null;
        postal_code: string | null;
        state: string | null;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1: string | null;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<BuyerRequestAddress, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.nullable(z.string()),
            country: z.nullable(z.string()),
            postal_code: z.nullable(z.string()),
            state: z.nullable(z.string()),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                city: v.city,
                country: v.country,
                postalCode: v.postal_code,
                state: v.state,
                ...(v.state_code === undefined ? null : { stateCode: v.state_code }),
                ...(v.house_number_or_name === undefined
                    ? null
                    : { houseNumberOrName: v.house_number_or_name }),
                line1: v.line1,
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });

    export type Outbound = {
        city: string | null;
        country: string | null;
        postal_code: string | null;
        state: string | null;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1: string | null;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerRequestAddress> = z
        .object({
            city: z.nullable(z.string()),
            country: z.nullable(z.string()),
            postalCode: z.nullable(z.string()),
            state: z.nullable(z.string()),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                city: v.city,
                country: v.country,
                postal_code: v.postalCode,
                state: v.state,
                ...(v.stateCode === undefined ? null : { state_code: v.stateCode }),
                ...(v.houseNumberOrName === undefined
                    ? null
                    : { house_number_or_name: v.houseNumberOrName }),
                line1: v.line1,
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });
}

/** @internal */
export const BuyerRequestKind$: z.ZodNativeEnum<typeof BuyerRequestKind> =
    z.nativeEnum(BuyerRequestKind);

/** @internal */
export namespace BuyerRequestTaxID$ {
    export type Inbound = {
        value: string;
        kind: BuyerRequestKind;
    };

    export const inboundSchema: z.ZodType<BuyerRequestTaxID, z.ZodTypeDef, Inbound> = z
        .object({
            value: z.string(),
            kind: BuyerRequestKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });

    export type Outbound = {
        value: string;
        kind: BuyerRequestKind;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerRequestTaxID> = z
        .object({
            value: z.string(),
            kind: BuyerRequestKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });
}

/** @internal */
export namespace BillingDetailsCreate$ {
    export type Inbound = {
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: BuyerRequestAddress$.Inbound | null | undefined;
        tax_id?: BuyerRequestTaxID$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<BillingDetailsCreate, z.ZodTypeDef, Inbound> = z
        .object({
            first_name: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            email_address: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => BuyerRequestAddress$.inboundSchema)).optional(),
            tax_id: z.nullable(z.lazy(() => BuyerRequestTaxID$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.tax_id === undefined ? null : { taxId: v.tax_id }),
            };
        });

    export type Outbound = {
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: BuyerRequestAddress$.Outbound | null | undefined;
        tax_id?: BuyerRequestTaxID$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BillingDetailsCreate> = z
        .object({
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => BuyerRequestAddress$.outboundSchema)).optional(),
            taxId: z.nullable(z.lazy(() => BuyerRequestTaxID$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.taxId === undefined ? null : { tax_id: v.taxId }),
            };
        });
}

/** @internal */
export namespace BuyerRequest$ {
    export type Inbound = {
        external_identifier?: string | null | undefined;
        display_name?: string | null | undefined;
        billing_details?: BillingDetailsCreate$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<BuyerRequest, z.ZodTypeDef, Inbound> = z
        .object({
            external_identifier: z.nullable(z.string()).optional(),
            display_name: z.nullable(z.string()).optional(),
            billing_details: z
                .nullable(z.lazy(() => BillingDetailsCreate$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
            };
        });

    export type Outbound = {
        external_identifier?: string | null | undefined;
        display_name?: string | null | undefined;
        billing_details?: BillingDetailsCreate$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerRequest> = z
        .object({
            externalIdentifier: z.nullable(z.string()).optional(),
            displayName: z.nullable(z.string()).optional(),
            billingDetails: z
                .nullable(z.lazy(() => BillingDetailsCreate$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
            };
        });
}
