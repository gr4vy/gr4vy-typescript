/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The billing address for the buyer.
 */
export type BuyerRequestAddress = {
    /**
     * The city for the address.
     */
    city: string | null;
    /**
     * The country for the address in ISO 3166 format.
     */
    country: string | null;
    /**
     * The postal code or zip code for the address.
     */
    postalCode: string | null;
    /**
     * The state, county, or province for the address.
     */
    state: string | null;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1: string | null;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export const BuyerRequestKind = {
    AeTrn: "ae.trn",
    AuAbn: "au.abn",
    ArDni: "ar.dni",
    ArCuil: "ar.cuil",
    ArCuit: "ar.cuit",
    BrCnpj: "br.cnpj",
    BrCpf: "br.cpf",
    CaBn: "ca.bn",
    CaGstHst: "ca.gst_hst",
    CaPstBc: "ca.pst_bc",
    CaPstMb: "ca.pst_mb",
    CaPstSk: "ca.pst_sk",
    CaQst: "ca.qst",
    ChVat: "ch.vat",
    ClTin: "cl.tin",
    EsCif: "es.cif",
    EuVat: "eu.vat",
    GbVat: "gb.vat",
    HkBr: "hk.br",
    IdNik: "id.nik",
    IdNpwp: "id.npwp",
    InGst: "in.gst",
    JpCn: "jp.cn",
    JpRn: "jp.rn",
    KrBrn: "kr.brn",
    LiUid: "li.uid",
    MxCurp: "mx.curp",
    MyFrp: "my.frp",
    MyItn: "my.itn",
    MyNric: "my.nric",
    MySst: "my.sst",
    NoVat: "no.vat",
    NzGst: "nz.gst",
    PhTin: "ph.tin",
    RuInn: "ru.inn",
    RuKpp: "ru.kpp",
    SaVat: "sa.vat",
    SgGst: "sg.gst",
    SgUen: "sg.uen",
    ThId: "th.id",
    ThVat: "th.vat",
    TwVat: "tw.vat",
    UsEin: "us.ein",
    ZaVat: "za.vat",
} as const;
/**
 * The kind of tax ID.
 */
export type BuyerRequestKind = ClosedEnum<typeof BuyerRequestKind>;

/**
 * The tax ID information associated with the billing details.
 */
export type BuyerRequestTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: BuyerRequestKind;
};

/**
 * The optional billing details to associate with a buyer.
 */
export type BillingDetailsCreate = {
    /**
     * The first name(s) or given name for the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the buyer which should be formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address for the buyer.
     */
    address?: BuyerRequestAddress | null | undefined;
    /**
     * The tax ID information associated with the billing details.
     */
    taxId?: BuyerRequestTaxID | null | undefined;
};

/**
 * A request to create a buyer.
 */
export type BuyerRequest = {
    /**
     * An external identifier that can be used to match the buyer against your own records. This value needs to be unique for all buyers.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * The optional billing details to associate with a buyer.
     */
    billingDetails?: BillingDetailsCreate | null | undefined;
};

/** @internal */
export const BuyerRequestAddress$inboundSchema: z.ZodType<
    BuyerRequestAddress,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        city: z.nullable(z.string()),
        country: z.nullable(z.string()),
        postal_code: z.nullable(z.string()),
        state: z.nullable(z.string()),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type BuyerRequestAddress$Outbound = {
    city: string | null;
    country: string | null;
    postal_code: string | null;
    state: string | null;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1: string | null;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const BuyerRequestAddress$outboundSchema: z.ZodType<
    BuyerRequestAddress$Outbound,
    z.ZodTypeDef,
    BuyerRequestAddress
> = z
    .object({
        city: z.nullable(z.string()),
        country: z.nullable(z.string()),
        postalCode: z.nullable(z.string()),
        state: z.nullable(z.string()),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerRequestAddress$ {
    /** @deprecated use `BuyerRequestAddress$inboundSchema` instead. */
    export const inboundSchema = BuyerRequestAddress$inboundSchema;
    /** @deprecated use `BuyerRequestAddress$outboundSchema` instead. */
    export const outboundSchema = BuyerRequestAddress$outboundSchema;
    /** @deprecated use `BuyerRequestAddress$Outbound` instead. */
    export type Outbound = BuyerRequestAddress$Outbound;
}

/** @internal */
export const BuyerRequestKind$inboundSchema: z.ZodNativeEnum<typeof BuyerRequestKind> =
    z.nativeEnum(BuyerRequestKind);

/** @internal */
export const BuyerRequestKind$outboundSchema: z.ZodNativeEnum<typeof BuyerRequestKind> =
    BuyerRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerRequestKind$ {
    /** @deprecated use `BuyerRequestKind$inboundSchema` instead. */
    export const inboundSchema = BuyerRequestKind$inboundSchema;
    /** @deprecated use `BuyerRequestKind$outboundSchema` instead. */
    export const outboundSchema = BuyerRequestKind$outboundSchema;
}

/** @internal */
export const BuyerRequestTaxID$inboundSchema: z.ZodType<BuyerRequestTaxID, z.ZodTypeDef, unknown> =
    z.object({
        value: z.string(),
        kind: BuyerRequestKind$inboundSchema,
    });

/** @internal */
export type BuyerRequestTaxID$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const BuyerRequestTaxID$outboundSchema: z.ZodType<
    BuyerRequestTaxID$Outbound,
    z.ZodTypeDef,
    BuyerRequestTaxID
> = z.object({
    value: z.string(),
    kind: BuyerRequestKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerRequestTaxID$ {
    /** @deprecated use `BuyerRequestTaxID$inboundSchema` instead. */
    export const inboundSchema = BuyerRequestTaxID$inboundSchema;
    /** @deprecated use `BuyerRequestTaxID$outboundSchema` instead. */
    export const outboundSchema = BuyerRequestTaxID$outboundSchema;
    /** @deprecated use `BuyerRequestTaxID$Outbound` instead. */
    export type Outbound = BuyerRequestTaxID$Outbound;
}

/** @internal */
export const BillingDetailsCreate$inboundSchema: z.ZodType<
    BillingDetailsCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BuyerRequestAddress$inboundSchema)).optional(),
        tax_id: z.nullable(z.lazy(() => BuyerRequestTaxID$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type BillingDetailsCreate$Outbound = {
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: BuyerRequestAddress$Outbound | null | undefined;
    tax_id?: BuyerRequestTaxID$Outbound | null | undefined;
};

/** @internal */
export const BillingDetailsCreate$outboundSchema: z.ZodType<
    BillingDetailsCreate$Outbound,
    z.ZodTypeDef,
    BillingDetailsCreate
> = z
    .object({
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BuyerRequestAddress$outboundSchema)).optional(),
        taxId: z.nullable(z.lazy(() => BuyerRequestTaxID$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsCreate$ {
    /** @deprecated use `BillingDetailsCreate$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsCreate$inboundSchema;
    /** @deprecated use `BillingDetailsCreate$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsCreate$outboundSchema;
    /** @deprecated use `BillingDetailsCreate$Outbound` instead. */
    export type Outbound = BillingDetailsCreate$Outbound;
}

/** @internal */
export const BuyerRequest$inboundSchema: z.ZodType<BuyerRequest, z.ZodTypeDef, unknown> = z
    .object({
        external_identifier: z.nullable(z.string()).optional(),
        display_name: z.nullable(z.string()).optional(),
        billing_details: z.nullable(z.lazy(() => BillingDetailsCreate$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            external_identifier: "externalIdentifier",
            display_name: "displayName",
            billing_details: "billingDetails",
        });
    });

/** @internal */
export type BuyerRequest$Outbound = {
    external_identifier?: string | null | undefined;
    display_name?: string | null | undefined;
    billing_details?: BillingDetailsCreate$Outbound | null | undefined;
};

/** @internal */
export const BuyerRequest$outboundSchema: z.ZodType<
    BuyerRequest$Outbound,
    z.ZodTypeDef,
    BuyerRequest
> = z
    .object({
        externalIdentifier: z.nullable(z.string()).optional(),
        displayName: z.nullable(z.string()).optional(),
        billingDetails: z.nullable(z.lazy(() => BillingDetailsCreate$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            externalIdentifier: "external_identifier",
            displayName: "display_name",
            billingDetails: "billing_details",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerRequest$ {
    /** @deprecated use `BuyerRequest$inboundSchema` instead. */
    export const inboundSchema = BuyerRequest$inboundSchema;
    /** @deprecated use `BuyerRequest$outboundSchema` instead. */
    export const outboundSchema = BuyerRequest$outboundSchema;
    /** @deprecated use `BuyerRequest$Outbound` instead. */
    export type Outbound = BuyerRequest$Outbound;
}
