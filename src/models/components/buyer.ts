/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    BillingDetails,
    BillingDetails$inboundSchema,
    BillingDetails$Outbound,
    BillingDetails$outboundSchema,
} from "./billingdetails.js";
import * as z from "zod";

export const Type = {
    Buyer: "buyer",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Base model with JSON encoders.
 */
export type Buyer = {
    type?: Type | undefined;
    id?: string | undefined;
    merchantAccountId: string;
    displayName?: string | undefined;
    externalIdentifier?: string | undefined;
    /**
     * Base model with JSON encoders.
     */
    billingDetails?: BillingDetails | undefined;
    createdAt: Date;
    updatedAt: Date;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Buyer$inboundSchema: z.ZodType<Buyer, z.ZodTypeDef, unknown> = z
    .object({
        type: Type$inboundSchema.default("buyer"),
        id: z.string().optional(),
        merchant_account_id: z.string(),
        display_name: z.string().optional(),
        external_identifier: z.string().optional(),
        billing_details: BillingDetails$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            display_name: "displayName",
            external_identifier: "externalIdentifier",
            billing_details: "billingDetails",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Buyer$Outbound = {
    type: string;
    id?: string | undefined;
    merchant_account_id: string;
    display_name?: string | undefined;
    external_identifier?: string | undefined;
    billing_details?: BillingDetails$Outbound | undefined;
    created_at: string;
    updated_at: string;
};

/** @internal */
export const Buyer$outboundSchema: z.ZodType<Buyer$Outbound, z.ZodTypeDef, Buyer> = z
    .object({
        type: Type$outboundSchema.default("buyer"),
        id: z.string().optional(),
        merchantAccountId: z.string(),
        displayName: z.string().optional(),
        externalIdentifier: z.string().optional(),
        billingDetails: BillingDetails$outboundSchema.optional(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            displayName: "display_name",
            externalIdentifier: "external_identifier",
            billingDetails: "billing_details",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Buyer$ {
    /** @deprecated use `Buyer$inboundSchema` instead. */
    export const inboundSchema = Buyer$inboundSchema;
    /** @deprecated use `Buyer$outboundSchema` instead. */
    export const outboundSchema = Buyer$outboundSchema;
    /** @deprecated use `Buyer$Outbound` instead. */
    export type Outbound = Buyer$Outbound;
}
