/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `buyer`.
 */
export const BuyerType = {
    Buyer: "buyer",
} as const;
/**
 * The type of this resource. Is always `buyer`.
 */
export type BuyerType = ClosedEnum<typeof BuyerType>;

/**
 * The type of this resource. Is always `billing-details`.
 */
export const BuyerBillingDetailsType = {
    BillingDetails: "billing-details",
} as const;
/**
 * The type of this resource. Is always `billing-details`.
 */
export type BuyerBillingDetailsType = ClosedEnum<typeof BuyerBillingDetailsType>;

/**
 * The billing address of the buyer.
 */
export type BuyerAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export const BuyerKind = {
    AeTrn: "ae.trn",
    AuAbn: "au.abn",
    ArDni: "ar.dni",
    ArCuil: "ar.cuil",
    ArCuit: "ar.cuit",
    BrCnpj: "br.cnpj",
    BrCpf: "br.cpf",
    CaBn: "ca.bn",
    CaGstHst: "ca.gst_hst",
    CaPstBc: "ca.pst_bc",
    CaPstMb: "ca.pst_mb",
    CaPstSk: "ca.pst_sk",
    CaQst: "ca.qst",
    ChVat: "ch.vat",
    ClTin: "cl.tin",
    EsCif: "es.cif",
    EuVat: "eu.vat",
    GbVat: "gb.vat",
    HkBr: "hk.br",
    IdNik: "id.nik",
    IdNpwp: "id.npwp",
    InGst: "in.gst",
    JpCn: "jp.cn",
    JpRn: "jp.rn",
    KrBrn: "kr.brn",
    LiUid: "li.uid",
    MxCurp: "mx.curp",
    MyFrp: "my.frp",
    MyItn: "my.itn",
    MyNric: "my.nric",
    MySst: "my.sst",
    NoVat: "no.vat",
    NzGst: "nz.gst",
    PhTin: "ph.tin",
    RuInn: "ru.inn",
    RuKpp: "ru.kpp",
    SaVat: "sa.vat",
    SgGst: "sg.gst",
    SgUen: "sg.uen",
    ThId: "th.id",
    ThVat: "th.vat",
    TwVat: "tw.vat",
    UsEin: "us.ein",
    ZaVat: "za.vat",
} as const;
/**
 * The kind of tax ID.
 */
export type BuyerKind = ClosedEnum<typeof BuyerKind>;

/**
 * The tax information associated with the billing details.
 */
export type BuyerTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: BuyerKind;
};

/**
 * The billing details associated with a buyer.
 */
export type BuyerBillingDetails = {
    /**
     * The type of this resource. Is always `billing-details`.
     */
    type?: BuyerBillingDetailsType | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: BuyerAddress | null | undefined;
    /**
     * The tax information associated with the billing details.
     */
    taxId?: BuyerTaxID | null | undefined;
};

export type Buyer = {
    /**
     * The type of this resource. Is always `buyer`.
     */
    type?: BuyerType | undefined;
    /**
     * The unique Gr4vy ID for this buyer.
     */
    id?: string | undefined;
    /**
     * The billing details associated with a buyer.
     */
    billingDetails?: BuyerBillingDetails | null | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * An external identifier that can be used to match the buyer against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const BuyerType$inboundSchema: z.ZodNativeEnum<typeof BuyerType> = z.nativeEnum(BuyerType);

/** @internal */
export const BuyerType$outboundSchema: z.ZodNativeEnum<typeof BuyerType> = BuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerType$ {
    /** @deprecated use `BuyerType$inboundSchema` instead. */
    export const inboundSchema = BuyerType$inboundSchema;
    /** @deprecated use `BuyerType$outboundSchema` instead. */
    export const outboundSchema = BuyerType$outboundSchema;
}

/** @internal */
export const BuyerBillingDetailsType$inboundSchema: z.ZodNativeEnum<
    typeof BuyerBillingDetailsType
> = z.nativeEnum(BuyerBillingDetailsType);

/** @internal */
export const BuyerBillingDetailsType$outboundSchema: z.ZodNativeEnum<
    typeof BuyerBillingDetailsType
> = BuyerBillingDetailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerBillingDetailsType$ {
    /** @deprecated use `BuyerBillingDetailsType$inboundSchema` instead. */
    export const inboundSchema = BuyerBillingDetailsType$inboundSchema;
    /** @deprecated use `BuyerBillingDetailsType$outboundSchema` instead. */
    export const outboundSchema = BuyerBillingDetailsType$outboundSchema;
}

/** @internal */
export const BuyerAddress$inboundSchema: z.ZodType<BuyerAddress, z.ZodTypeDef, unknown> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postal_code: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type BuyerAddress$Outbound = {
    city?: string | null | undefined;
    country?: string | null | undefined;
    postal_code?: string | null | undefined;
    state?: string | null | undefined;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const BuyerAddress$outboundSchema: z.ZodType<
    BuyerAddress$Outbound,
    z.ZodTypeDef,
    BuyerAddress
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postalCode: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerAddress$ {
    /** @deprecated use `BuyerAddress$inboundSchema` instead. */
    export const inboundSchema = BuyerAddress$inboundSchema;
    /** @deprecated use `BuyerAddress$outboundSchema` instead. */
    export const outboundSchema = BuyerAddress$outboundSchema;
    /** @deprecated use `BuyerAddress$Outbound` instead. */
    export type Outbound = BuyerAddress$Outbound;
}

/** @internal */
export const BuyerKind$inboundSchema: z.ZodNativeEnum<typeof BuyerKind> = z.nativeEnum(BuyerKind);

/** @internal */
export const BuyerKind$outboundSchema: z.ZodNativeEnum<typeof BuyerKind> = BuyerKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerKind$ {
    /** @deprecated use `BuyerKind$inboundSchema` instead. */
    export const inboundSchema = BuyerKind$inboundSchema;
    /** @deprecated use `BuyerKind$outboundSchema` instead. */
    export const outboundSchema = BuyerKind$outboundSchema;
}

/** @internal */
export const BuyerTaxID$inboundSchema: z.ZodType<BuyerTaxID, z.ZodTypeDef, unknown> = z.object({
    value: z.string(),
    kind: BuyerKind$inboundSchema,
});

/** @internal */
export type BuyerTaxID$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const BuyerTaxID$outboundSchema: z.ZodType<BuyerTaxID$Outbound, z.ZodTypeDef, BuyerTaxID> =
    z.object({
        value: z.string(),
        kind: BuyerKind$outboundSchema,
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerTaxID$ {
    /** @deprecated use `BuyerTaxID$inboundSchema` instead. */
    export const inboundSchema = BuyerTaxID$inboundSchema;
    /** @deprecated use `BuyerTaxID$outboundSchema` instead. */
    export const outboundSchema = BuyerTaxID$outboundSchema;
    /** @deprecated use `BuyerTaxID$Outbound` instead. */
    export type Outbound = BuyerTaxID$Outbound;
}

/** @internal */
export const BuyerBillingDetails$inboundSchema: z.ZodType<
    BuyerBillingDetails,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: BuyerBillingDetailsType$inboundSchema.optional(),
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BuyerAddress$inboundSchema)).optional(),
        tax_id: z.nullable(z.lazy(() => BuyerTaxID$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type BuyerBillingDetails$Outbound = {
    type?: string | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: BuyerAddress$Outbound | null | undefined;
    tax_id?: BuyerTaxID$Outbound | null | undefined;
};

/** @internal */
export const BuyerBillingDetails$outboundSchema: z.ZodType<
    BuyerBillingDetails$Outbound,
    z.ZodTypeDef,
    BuyerBillingDetails
> = z
    .object({
        type: BuyerBillingDetailsType$outboundSchema.optional(),
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BuyerAddress$outboundSchema)).optional(),
        taxId: z.nullable(z.lazy(() => BuyerTaxID$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerBillingDetails$ {
    /** @deprecated use `BuyerBillingDetails$inboundSchema` instead. */
    export const inboundSchema = BuyerBillingDetails$inboundSchema;
    /** @deprecated use `BuyerBillingDetails$outboundSchema` instead. */
    export const outboundSchema = BuyerBillingDetails$outboundSchema;
    /** @deprecated use `BuyerBillingDetails$Outbound` instead. */
    export type Outbound = BuyerBillingDetails$Outbound;
}

/** @internal */
export const Buyer$inboundSchema: z.ZodType<Buyer, z.ZodTypeDef, unknown> = z
    .object({
        type: BuyerType$inboundSchema.optional(),
        id: z.string().optional(),
        billing_details: z.nullable(z.lazy(() => BuyerBillingDetails$inboundSchema)).optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        display_name: z.nullable(z.string()).optional(),
        external_identifier: z.nullable(z.string()).optional(),
        merchant_account_id: z.string().optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            billing_details: "billingDetails",
            created_at: "createdAt",
            display_name: "displayName",
            external_identifier: "externalIdentifier",
            merchant_account_id: "merchantAccountId",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Buyer$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    billing_details?: BuyerBillingDetails$Outbound | null | undefined;
    created_at?: string | undefined;
    display_name?: string | null | undefined;
    external_identifier?: string | null | undefined;
    merchant_account_id?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const Buyer$outboundSchema: z.ZodType<Buyer$Outbound, z.ZodTypeDef, Buyer> = z
    .object({
        type: BuyerType$outboundSchema.optional(),
        id: z.string().optional(),
        billingDetails: z.nullable(z.lazy(() => BuyerBillingDetails$outboundSchema)).optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        displayName: z.nullable(z.string()).optional(),
        externalIdentifier: z.nullable(z.string()).optional(),
        merchantAccountId: z.string().optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            billingDetails: "billing_details",
            createdAt: "created_at",
            displayName: "display_name",
            externalIdentifier: "external_identifier",
            merchantAccountId: "merchant_account_id",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Buyer$ {
    /** @deprecated use `Buyer$inboundSchema` instead. */
    export const inboundSchema = Buyer$inboundSchema;
    /** @deprecated use `Buyer$outboundSchema` instead. */
    export const outboundSchema = Buyer$outboundSchema;
    /** @deprecated use `Buyer$Outbound` instead. */
    export type Outbound = Buyer$Outbound;
}
