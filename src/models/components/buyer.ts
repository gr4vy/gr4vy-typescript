/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingDetailsOutput,
  BillingDetailsOutput$inboundSchema,
  BillingDetailsOutput$Outbound,
  BillingDetailsOutput$outboundSchema,
} from "./billingdetailsoutput.js";

export type Buyer = {
  /**
   * Always `buyer`.
   */
  type?: "buyer" | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | null | undefined;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * The display name for the buyer.
   */
  displayName?: string | null | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | null | undefined;
  /**
   * The billing name, address, email, and other fields for this buyer.
   */
  billingDetails?: BillingDetailsOutput | null | undefined;
  /**
   * The buyer account number
   */
  accountNumber?: string | null | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
};

/** @internal */
export const Buyer$inboundSchema: z.ZodType<Buyer, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("buyer").default("buyer"),
    id: z.nullable(z.string()).optional(),
    merchant_account_id: z.string(),
    display_name: z.nullable(z.string()).optional(),
    external_identifier: z.nullable(z.string()).optional(),
    billing_details: z.nullable(BillingDetailsOutput$inboundSchema).optional(),
    account_number: z.nullable(z.string()).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "merchant_account_id": "merchantAccountId",
      "display_name": "displayName",
      "external_identifier": "externalIdentifier",
      "billing_details": "billingDetails",
      "account_number": "accountNumber",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Buyer$Outbound = {
  type: "buyer";
  id?: string | null | undefined;
  merchant_account_id: string;
  display_name?: string | null | undefined;
  external_identifier?: string | null | undefined;
  billing_details?: BillingDetailsOutput$Outbound | null | undefined;
  account_number?: string | null | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const Buyer$outboundSchema: z.ZodType<
  Buyer$Outbound,
  z.ZodTypeDef,
  Buyer
> = z.object({
  type: z.literal("buyer").default("buyer" as const),
  id: z.nullable(z.string()).optional(),
  merchantAccountId: z.string(),
  displayName: z.nullable(z.string()).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
  billingDetails: z.nullable(BillingDetailsOutput$outboundSchema).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    accountNumber: "account_number",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Buyer$ {
  /** @deprecated use `Buyer$inboundSchema` instead. */
  export const inboundSchema = Buyer$inboundSchema;
  /** @deprecated use `Buyer$outboundSchema` instead. */
  export const outboundSchema = Buyer$outboundSchema;
  /** @deprecated use `Buyer$Outbound` instead. */
  export type Outbound = Buyer$Outbound;
}

export function buyerToJSON(buyer: Buyer): string {
  return JSON.stringify(Buyer$outboundSchema.parse(buyer));
}

export function buyerFromJSON(
  jsonString: string,
): SafeParseResult<Buyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Buyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Buyer' from JSON`,
  );
}
