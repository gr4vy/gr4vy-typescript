/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Method = {
    Card: "card",
} as const;
export type Method = ClosedEnum<typeof Method>;

/**
 * Card
 *
 * @remarks
 *
 * Card details to use in a transaction or to register a new payment method.
 */
export type ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate = {
    expirationDate: string;
    number: string;
    buyerExternalIdentifier?: string | undefined;
    buyerId?: string | undefined;
    externalIdentifier?: string | undefined;
    cardType?: string | undefined;
    method?: Method | undefined;
    securityCode?: string | undefined;
};

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z.nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> = Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
    /** @deprecated use `Method$inboundSchema` instead. */
    export const inboundSchema = Method$inboundSchema;
    /** @deprecated use `Method$outboundSchema` instead. */
    export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$inboundSchema: z.ZodType<
    ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        expiration_date: z.string(),
        number: z.string(),
        buyer_external_identifier: z.string().optional(),
        buyer_id: z.string().optional(),
        external_identifier: z.string().optional(),
        card_type: z.string().optional(),
        method: Method$inboundSchema.default("card"),
        security_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expiration_date: "expirationDate",
            buyer_external_identifier: "buyerExternalIdentifier",
            buyer_id: "buyerId",
            external_identifier: "externalIdentifier",
            card_type: "cardType",
            security_code: "securityCode",
        });
    });

/** @internal */
export type ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$Outbound = {
    expiration_date: string;
    number: string;
    buyer_external_identifier?: string | undefined;
    buyer_id?: string | undefined;
    external_identifier?: string | undefined;
    card_type?: string | undefined;
    method: string;
    security_code?: string | undefined;
};

/** @internal */
export const ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$outboundSchema: z.ZodType<
    ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$Outbound,
    z.ZodTypeDef,
    ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate
> = z
    .object({
        expirationDate: z.string(),
        number: z.string(),
        buyerExternalIdentifier: z.string().optional(),
        buyerId: z.string().optional(),
        externalIdentifier: z.string().optional(),
        cardType: z.string().optional(),
        method: Method$outboundSchema.default("card"),
        securityCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expirationDate: "expiration_date",
            buyerExternalIdentifier: "buyer_external_identifier",
            buyerId: "buyer_id",
            externalIdentifier: "external_identifier",
            cardType: "card_type",
            securityCode: "security_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$ {
    /** @deprecated use `ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$inboundSchema` instead. */
    export const inboundSchema =
        ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$inboundSchema;
    /** @deprecated use `ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$outboundSchema` instead. */
    export const outboundSchema =
        ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$outboundSchema;
    /** @deprecated use `ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$Outbound` instead. */
    export type Outbound = ApiRoutersPaymentMethodsSchemasCardPaymentMethodCreate$Outbound;
}
