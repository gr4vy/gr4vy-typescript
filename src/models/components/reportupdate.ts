/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Request body to update a report.
 */
export type ReportUpdate = {
    /**
     * The name of the report.
     */
    name?: string | undefined;
    /**
     * The description of the report.
     */
    description?: string | null | undefined;
    /**
     * Indicates whether the report's scheduling is enabled. This value
     *
     * @remarks
     * can only be set to `true` if this is a recurring report.
     *
     * When this value is set to `true`, the report will be executed at
     * the `next_execution_at` date and time.
     *
     * When this value is set to `false`, future executions of the
     * report are paused until this value is set to `true` again.
     *
     * If scheduling is enabled after being disabled, then the
     * `next_execution_at` value is updated if and only if its current
     * value is a past date-time. The `next_execution_at` value is then
     * set to the next closest date-time in the future depending on the
     * values of `schedule` and `schedule_timezone`.
     */
    scheduleEnabled?: boolean | undefined;
};

/** @internal */
export namespace ReportUpdate$ {
    export type Inbound = {
        name?: string | undefined;
        description?: string | null | undefined;
        schedule_enabled?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<ReportUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            schedule_enabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.schedule_enabled === undefined
                    ? null
                    : { scheduleEnabled: v.schedule_enabled }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        description?: string | null | undefined;
        schedule_enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportUpdate> = z
        .object({
            name: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            scheduleEnabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.scheduleEnabled === undefined
                    ? null
                    : { schedule_enabled: v.scheduleEnabled }),
            };
        });
}
