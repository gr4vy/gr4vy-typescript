/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The target type to refund for. This can be used to target a gift card
 *
 * @remarks
 * to refund to instead of the main payment method.
 */
export enum TransactionRefundRequestTargetType {
    PaymentMethod = "payment-method",
    GiftCardRedemption = "gift-card-redemption",
}

/**
 * A request to refund a transaction.
 */
export type TransactionRefundRequest = {
    /**
     * The amount requested to refund.
     *
     * @remarks
     *
     * If omitted, a full refund will be requested for the main payment method.
     *
     * When set, the amount must be lower than or equal to the remaining balance
     * in the associated transaction. Negative and zero-amount refunds are not
     * supported.
     */
    amount?: number | undefined;
    /**
     * The target type to refund for. This can be used to target a gift card
     *
     * @remarks
     * to refund to instead of the main payment method.
     */
    targetType?: TransactionRefundRequestTargetType | null | undefined;
    /**
     * The optional ID of the instrument to refund for. This is only required when
     *
     * @remarks
     * the `target_type` is set to `gift-card-redemption`.
     */
    targetId?: string | null | undefined;
    /**
     * An optional reason to attach extra context to the refund request.
     */
    reason?: string | null | undefined;
};

/** @internal */
export const TransactionRefundRequestTargetType$: z.ZodNativeEnum<
    typeof TransactionRefundRequestTargetType
> = z.nativeEnum(TransactionRefundRequestTargetType);

/** @internal */
export namespace TransactionRefundRequest$ {
    export type Inbound = {
        amount?: number | undefined;
        target_type?: TransactionRefundRequestTargetType | null | undefined;
        target_id?: string | null | undefined;
        reason?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionRefundRequest, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().int().optional(),
            target_type: z.nullable(
                TransactionRefundRequestTargetType$.default(
                    TransactionRefundRequestTargetType.PaymentMethod
                )
            ),
            target_id: z.nullable(z.string()).optional(),
            reason: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                targetType: v.target_type,
                ...(v.target_id === undefined ? null : { targetId: v.target_id }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        target_type: TransactionRefundRequestTargetType | null;
        target_id?: string | null | undefined;
        reason?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionRefundRequest> = z
        .object({
            amount: z.number().int().optional(),
            targetType: z.nullable(
                TransactionRefundRequestTargetType$.default(
                    TransactionRefundRequestTargetType.PaymentMethod
                )
            ),
            targetId: z.nullable(z.string()).optional(),
            reason: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                target_type: v.targetType,
                ...(v.targetId === undefined ? null : { target_id: v.targetId }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}
