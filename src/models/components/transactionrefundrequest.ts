/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The target type to refund for. This can be used to target a gift card
 *
 * @remarks
 * to refund to instead of the main payment method.
 */
export const TransactionRefundRequestTargetType = {
    PaymentMethod: "payment-method",
    GiftCardRedemption: "gift-card-redemption",
} as const;
/**
 * The target type to refund for. This can be used to target a gift card
 *
 * @remarks
 * to refund to instead of the main payment method.
 */
export type TransactionRefundRequestTargetType = ClosedEnum<
    typeof TransactionRefundRequestTargetType
>;

/**
 * A request to refund a transaction.
 */
export type TransactionRefundRequest = {
    /**
     * The amount requested to refund.
     *
     * @remarks
     *
     * If omitted, a full refund will be requested for the main payment method.
     *
     * When set, the amount must be lower than or equal to the remaining balance
     * in the associated transaction. Negative and zero-amount refunds are not
     * supported.
     */
    amount?: number | undefined;
    /**
     * The target type to refund for. This can be used to target a gift card
     *
     * @remarks
     * to refund to instead of the main payment method.
     */
    targetType?: TransactionRefundRequestTargetType | null | undefined;
    /**
     * The optional ID of the instrument to refund for. This is only required when
     *
     * @remarks
     * the `target_type` is set to `gift-card-redemption`.
     */
    targetId?: string | null | undefined;
    /**
     * An optional reason to attach extra context to the refund request.
     */
    reason?: string | null | undefined;
};

/** @internal */
export const TransactionRefundRequestTargetType$inboundSchema: z.ZodNativeEnum<
    typeof TransactionRefundRequestTargetType
> = z.nativeEnum(TransactionRefundRequestTargetType);

/** @internal */
export const TransactionRefundRequestTargetType$outboundSchema: z.ZodNativeEnum<
    typeof TransactionRefundRequestTargetType
> = TransactionRefundRequestTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundRequestTargetType$ {
    /** @deprecated use `TransactionRefundRequestTargetType$inboundSchema` instead. */
    export const inboundSchema = TransactionRefundRequestTargetType$inboundSchema;
    /** @deprecated use `TransactionRefundRequestTargetType$outboundSchema` instead. */
    export const outboundSchema = TransactionRefundRequestTargetType$outboundSchema;
}

/** @internal */
export const TransactionRefundRequest$inboundSchema: z.ZodType<
    TransactionRefundRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        amount: z.number().int().optional(),
        target_type: z.nullable(
            TransactionRefundRequestTargetType$inboundSchema.default("payment-method")
        ),
        target_id: z.nullable(z.string()).optional(),
        reason: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            target_type: "targetType",
            target_id: "targetId",
        });
    });

/** @internal */
export type TransactionRefundRequest$Outbound = {
    amount?: number | undefined;
    target_type: string | null;
    target_id?: string | null | undefined;
    reason?: string | null | undefined;
};

/** @internal */
export const TransactionRefundRequest$outboundSchema: z.ZodType<
    TransactionRefundRequest$Outbound,
    z.ZodTypeDef,
    TransactionRefundRequest
> = z
    .object({
        amount: z.number().int().optional(),
        targetType: z.nullable(
            TransactionRefundRequestTargetType$outboundSchema.default("payment-method")
        ),
        targetId: z.nullable(z.string()).optional(),
        reason: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            targetType: "target_type",
            targetId: "target_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundRequest$ {
    /** @deprecated use `TransactionRefundRequest$inboundSchema` instead. */
    export const inboundSchema = TransactionRefundRequest$inboundSchema;
    /** @deprecated use `TransactionRefundRequest$outboundSchema` instead. */
    export const outboundSchema = TransactionRefundRequest$outboundSchema;
    /** @deprecated use `TransactionRefundRequest$Outbound` instead. */
    export type Outbound = TransactionRefundRequest$Outbound;
}
