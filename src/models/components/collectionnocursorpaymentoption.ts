/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentOption,
  PaymentOption$inboundSchema,
  PaymentOption$Outbound,
  PaymentOption$outboundSchema,
} from "./paymentoption.js";

export type CollectionNoCursorPaymentOption = {
  /**
   * A list of items returned for this request.
   */
  items: Array<PaymentOption>;
};

/** @internal */
export const CollectionNoCursorPaymentOption$inboundSchema: z.ZodType<
  CollectionNoCursorPaymentOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(PaymentOption$inboundSchema),
});

/** @internal */
export type CollectionNoCursorPaymentOption$Outbound = {
  items: Array<PaymentOption$Outbound>;
};

/** @internal */
export const CollectionNoCursorPaymentOption$outboundSchema: z.ZodType<
  CollectionNoCursorPaymentOption$Outbound,
  z.ZodTypeDef,
  CollectionNoCursorPaymentOption
> = z.object({
  items: z.array(PaymentOption$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionNoCursorPaymentOption$ {
  /** @deprecated use `CollectionNoCursorPaymentOption$inboundSchema` instead. */
  export const inboundSchema = CollectionNoCursorPaymentOption$inboundSchema;
  /** @deprecated use `CollectionNoCursorPaymentOption$outboundSchema` instead. */
  export const outboundSchema = CollectionNoCursorPaymentOption$outboundSchema;
  /** @deprecated use `CollectionNoCursorPaymentOption$Outbound` instead. */
  export type Outbound = CollectionNoCursorPaymentOption$Outbound;
}

export function collectionNoCursorPaymentOptionToJSON(
  collectionNoCursorPaymentOption: CollectionNoCursorPaymentOption,
): string {
  return JSON.stringify(
    CollectionNoCursorPaymentOption$outboundSchema.parse(
      collectionNoCursorPaymentOption,
    ),
  );
}

export function collectionNoCursorPaymentOptionFromJSON(
  jsonString: string,
): SafeParseResult<CollectionNoCursorPaymentOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionNoCursorPaymentOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionNoCursorPaymentOption' from JSON`,
  );
}
