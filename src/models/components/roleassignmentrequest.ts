/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The role to associate with the role assignment.
 */
export type RoleAssignmentRequestRole = {
    /**
     * The ID of the role to associate with the role assignment.
     */
    id: string;
};

/**
 * The type of the assignee to associate with the role assignment.
 */
export enum RoleAssignmentRequestType {
    User = "user",
}

/**
 * The assignee to associate with the role assignment.
 */
export type RoleAssignmentRequestAssignee = {
    /**
     * The type of the assignee to associate with the role assignment.
     */
    type: RoleAssignmentRequestType;
    /**
     * The ID of the assignee to associate with the role assignment.
     */
    id: string;
};

/**
 * A request to create a role assignment.
 */
export type RoleAssignmentRequest = {
    /**
     * The role to associate with the role assignment.
     */
    role: RoleAssignmentRequestRole;
    /**
     * The assignee to associate with the role assignment.
     */
    assignee: RoleAssignmentRequestAssignee;
};

/** @internal */
export namespace RoleAssignmentRequestRole$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<RoleAssignmentRequestRole, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoleAssignmentRequestRole> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export const RoleAssignmentRequestType$: z.ZodNativeEnum<typeof RoleAssignmentRequestType> =
    z.nativeEnum(RoleAssignmentRequestType);

/** @internal */
export namespace RoleAssignmentRequestAssignee$ {
    export type Inbound = {
        type: RoleAssignmentRequestType;
        id: string;
    };

    export const inboundSchema: z.ZodType<RoleAssignmentRequestAssignee, z.ZodTypeDef, Inbound> = z
        .object({
            type: RoleAssignmentRequestType$,
            id: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                id: v.id,
            };
        });

    export type Outbound = {
        type: RoleAssignmentRequestType;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoleAssignmentRequestAssignee> =
        z
            .object({
                type: RoleAssignmentRequestType$,
                id: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    id: v.id,
                };
            });
}

/** @internal */
export namespace RoleAssignmentRequest$ {
    export type Inbound = {
        role: RoleAssignmentRequestRole$.Inbound;
        assignee: RoleAssignmentRequestAssignee$.Inbound;
    };

    export const inboundSchema: z.ZodType<RoleAssignmentRequest, z.ZodTypeDef, Inbound> = z
        .object({
            role: z.lazy(() => RoleAssignmentRequestRole$.inboundSchema),
            assignee: z.lazy(() => RoleAssignmentRequestAssignee$.inboundSchema),
        })
        .transform((v) => {
            return {
                role: v.role,
                assignee: v.assignee,
            };
        });

    export type Outbound = {
        role: RoleAssignmentRequestRole$.Outbound;
        assignee: RoleAssignmentRequestAssignee$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoleAssignmentRequest> = z
        .object({
            role: z.lazy(() => RoleAssignmentRequestRole$.outboundSchema),
            assignee: z.lazy(() => RoleAssignmentRequestAssignee$.outboundSchema),
        })
        .transform((v) => {
            return {
                role: v.role,
                assignee: v.assignee,
            };
        });
}
