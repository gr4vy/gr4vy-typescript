/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const UserDevice = {
    Desktop: "desktop",
    Mobile: "mobile",
} as const;
export type UserDevice = ClosedEnum<typeof UserDevice>;

/**
 * Base model with JSON encoders.
 */
export type BrowserInfoWithDevice = {
    javascriptEnabled: boolean;
    javaEnabled: boolean;
    language: string;
    colorDepth: number;
    screenHeight: number;
    screenWidth: number;
    timeZoneOffset: number;
    userAgent: string;
    userDevice: UserDevice;
    acceptHeader?: string | undefined;
};

/** @internal */
export const UserDevice$inboundSchema: z.ZodNativeEnum<typeof UserDevice> =
    z.nativeEnum(UserDevice);

/** @internal */
export const UserDevice$outboundSchema: z.ZodNativeEnum<typeof UserDevice> =
    UserDevice$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDevice$ {
    /** @deprecated use `UserDevice$inboundSchema` instead. */
    export const inboundSchema = UserDevice$inboundSchema;
    /** @deprecated use `UserDevice$outboundSchema` instead. */
    export const outboundSchema = UserDevice$outboundSchema;
}

/** @internal */
export const BrowserInfoWithDevice$inboundSchema: z.ZodType<
    BrowserInfoWithDevice,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        javascript_enabled: z.boolean(),
        java_enabled: z.boolean(),
        language: z.string(),
        color_depth: z.number().int(),
        screen_height: z.number().int(),
        screen_width: z.number().int(),
        time_zone_offset: z.number().int(),
        user_agent: z.string(),
        user_device: UserDevice$inboundSchema,
        accept_header: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            javascript_enabled: "javascriptEnabled",
            java_enabled: "javaEnabled",
            color_depth: "colorDepth",
            screen_height: "screenHeight",
            screen_width: "screenWidth",
            time_zone_offset: "timeZoneOffset",
            user_agent: "userAgent",
            user_device: "userDevice",
            accept_header: "acceptHeader",
        });
    });

/** @internal */
export type BrowserInfoWithDevice$Outbound = {
    javascript_enabled: boolean;
    java_enabled: boolean;
    language: string;
    color_depth: number;
    screen_height: number;
    screen_width: number;
    time_zone_offset: number;
    user_agent: string;
    user_device: string;
    accept_header?: string | undefined;
};

/** @internal */
export const BrowserInfoWithDevice$outboundSchema: z.ZodType<
    BrowserInfoWithDevice$Outbound,
    z.ZodTypeDef,
    BrowserInfoWithDevice
> = z
    .object({
        javascriptEnabled: z.boolean(),
        javaEnabled: z.boolean(),
        language: z.string(),
        colorDepth: z.number().int(),
        screenHeight: z.number().int(),
        screenWidth: z.number().int(),
        timeZoneOffset: z.number().int(),
        userAgent: z.string(),
        userDevice: UserDevice$outboundSchema,
        acceptHeader: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            javascriptEnabled: "javascript_enabled",
            javaEnabled: "java_enabled",
            colorDepth: "color_depth",
            screenHeight: "screen_height",
            screenWidth: "screen_width",
            timeZoneOffset: "time_zone_offset",
            userAgent: "user_agent",
            userDevice: "user_device",
            acceptHeader: "accept_header",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BrowserInfoWithDevice$ {
    /** @deprecated use `BrowserInfoWithDevice$inboundSchema` instead. */
    export const inboundSchema = BrowserInfoWithDevice$inboundSchema;
    /** @deprecated use `BrowserInfoWithDevice$outboundSchema` instead. */
    export const outboundSchema = BrowserInfoWithDevice$outboundSchema;
    /** @deprecated use `BrowserInfoWithDevice$Outbound` instead. */
    export type Outbound = BrowserInfoWithDevice$Outbound;
}
