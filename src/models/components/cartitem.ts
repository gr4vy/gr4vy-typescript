/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ProductType,
    ProductType$inboundSchema,
    ProductType$outboundSchema,
} from "./producttype.js";
import * as z from "zod";

/**
 * Base model with JSON encoders.
 */
export type CartItem = {
    name: string;
    quantity: number;
    unitAmount: number;
    discountAmount?: number | undefined;
    taxAmount?: number | undefined;
    externalIdentifier?: string | undefined;
    sku?: string | undefined;
    productUrl?: string | undefined;
    imageUrl?: string | undefined;
    categories?: Array<string> | undefined;
    /**
     * An enumeration.
     */
    productType?: ProductType | undefined;
};

/** @internal */
export const CartItem$inboundSchema: z.ZodType<CartItem, z.ZodTypeDef, unknown> = z
    .object({
        name: z.string(),
        quantity: z.number().int(),
        unit_amount: z.number().int(),
        discount_amount: z.number().int().default(0),
        tax_amount: z.number().int().default(0),
        external_identifier: z.string().optional(),
        sku: z.string().optional(),
        product_url: z.string().optional(),
        image_url: z.string().optional(),
        categories: z.array(z.string()).optional(),
        product_type: ProductType$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            unit_amount: "unitAmount",
            discount_amount: "discountAmount",
            tax_amount: "taxAmount",
            external_identifier: "externalIdentifier",
            product_url: "productUrl",
            image_url: "imageUrl",
            product_type: "productType",
        });
    });

/** @internal */
export type CartItem$Outbound = {
    name: string;
    quantity: number;
    unit_amount: number;
    discount_amount: number;
    tax_amount: number;
    external_identifier?: string | undefined;
    sku?: string | undefined;
    product_url?: string | undefined;
    image_url?: string | undefined;
    categories?: Array<string> | undefined;
    product_type?: string | undefined;
};

/** @internal */
export const CartItem$outboundSchema: z.ZodType<CartItem$Outbound, z.ZodTypeDef, CartItem> = z
    .object({
        name: z.string(),
        quantity: z.number().int(),
        unitAmount: z.number().int(),
        discountAmount: z.number().int().default(0),
        taxAmount: z.number().int().default(0),
        externalIdentifier: z.string().optional(),
        sku: z.string().optional(),
        productUrl: z.string().optional(),
        imageUrl: z.string().optional(),
        categories: z.array(z.string()).optional(),
        productType: ProductType$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            unitAmount: "unit_amount",
            discountAmount: "discount_amount",
            taxAmount: "tax_amount",
            externalIdentifier: "external_identifier",
            productUrl: "product_url",
            imageUrl: "image_url",
            productType: "product_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CartItem$ {
    /** @deprecated use `CartItem$inboundSchema` instead. */
    export const inboundSchema = CartItem$inboundSchema;
    /** @deprecated use `CartItem$outboundSchema` instead. */
    export const outboundSchema = CartItem$outboundSchema;
    /** @deprecated use `CartItem$Outbound` instead. */
    export type Outbound = CartItem$Outbound;
}
