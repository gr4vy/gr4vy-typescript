/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The product type of the cart item.
 */
export const ProductType = {
    Physical: "physical",
    Discount: "discount",
    ShippingFee: "shipping_fee",
    SalesTax: "sales_tax",
    Digital: "digital",
    GiftCard: "gift_card",
    StoreCredit: "store_credit",
    Surcharge: "surcharge",
} as const;
/**
 * The product type of the cart item.
 */
export type ProductType = ClosedEnum<typeof ProductType>;

/**
 * A cart item that represents a single cart line item for a transaction.
 *
 * @remarks
 * Note that some optional properties are required for certain payment
 * service providers. If no value is set for these properties, we will use
 * their default value.
 *
 * If the total due to be paid for the item is required by the payment service
 * provider, generally referred to as the "total amount", the formula below
 * will usually be used to calculate this amount:
 *
 * `(unit_amount * quantity) - discount_amount + tax_amount`
 *
 * It's highly recommended that the total amount to pay for all items
 * should match the transaction's amount to reduce the risk of the
 * transaction being declined by the payment service provider.
 */
export type CartItem = {
    /**
     * The name of the cart item. The value you set for this property may
     *
     * @remarks
     * be truncated if the maximum length accepted by a payment service
     * provider is less than 255 characters.
     */
    name: string;
    /**
     * The quantity of this item in the cart. This value cannot be negative
     *
     * @remarks
     * or zero.
     */
    quantity: number;
    /**
     * The amount for an individual item represented as a monetary amount
     *
     * @remarks
     * in the smallest currency unit for the given currency, for example
     * `1299` USD cents represents `$12.99`.
     * The amount sent through to the payment processor as unitary amount
     * will be calculated to include the discount and tax values sent
     * as part of this cart item.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    unitAmount: number;
    /**
     * The amount discounted for this item represented as a monetary amount
     *
     * @remarks
     * in the smallest currency unit for the given currency, for example `1299`
     * USD cents represents `$12.99`.
     *
     * Please note that this amount is for the total of the cart item and not
     * for an individual item. For example, if the quantity is 5, this value
     * should be the total discount amount for 5 of the cart item.
     *
     * You might see unexpected failed transactions if the `discount_amount` can
     * not be equally divided by the `quantity` value. This is due to the fact
     * that some payment services require this amount to be specified per unit.
     *
     * In this situation we recommend splitting this item into separate items,
     * each with their own specific discount.
     */
    discountAmount?: number | null | undefined;
    /**
     * The tax amount for this item represented as a monetary amount
     *
     * @remarks
     * in the smallest currency unit for the given currency, for example `1299`
     * USD cents represents `$12.99`.
     *
     * Please not that this amount is for the total of the cart item and not
     * for an individual item. For example, if the quantity is 5, this value
     * should be the total tax amount for 5 of the cart item.
     *
     * You might see unexpected failed transactions if the `tax_amount` can
     * not be equally divided by the `quantity` value. This is due to the fact
     * that some payment services require this amount to be specified per unit.
     *
     * In this situation we recommend splitting this item into separate items,
     * each with their own specific tax amount.
     */
    taxAmount?: number | null | undefined;
    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The SKU for the item.
     */
    sku?: string | null | undefined;
    /**
     * The product URL for the item.
     */
    productUrl?: string | null | undefined;
    /**
     * The URL for the image of the item.
     */
    imageUrl?: string | null | undefined;
    /**
     * A list of strings containing product categories for the item.
     *
     * @remarks
     * Max length per item: 50.
     */
    categories?: Array<string> | null | undefined;
    /**
     * The product type of the cart item.
     */
    productType?: ProductType | null | undefined;
};

/** @internal */
export const ProductType$inboundSchema: z.ZodNativeEnum<typeof ProductType> =
    z.nativeEnum(ProductType);

/** @internal */
export const ProductType$outboundSchema: z.ZodNativeEnum<typeof ProductType> =
    ProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductType$ {
    /** @deprecated use `ProductType$inboundSchema` instead. */
    export const inboundSchema = ProductType$inboundSchema;
    /** @deprecated use `ProductType$outboundSchema` instead. */
    export const outboundSchema = ProductType$outboundSchema;
}

/** @internal */
export const CartItem$inboundSchema: z.ZodType<CartItem, z.ZodTypeDef, unknown> = z
    .object({
        name: z.string(),
        quantity: z.number().int(),
        unit_amount: z.number().int(),
        discount_amount: z.nullable(z.number().int().default(0)),
        tax_amount: z.nullable(z.number().int().default(0)),
        external_identifier: z.nullable(z.string()).optional(),
        sku: z.nullable(z.string()).optional(),
        product_url: z.nullable(z.string()).optional(),
        image_url: z.nullable(z.string()).optional(),
        categories: z.nullable(z.array(z.string())).optional(),
        product_type: z.nullable(ProductType$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            unit_amount: "unitAmount",
            discount_amount: "discountAmount",
            tax_amount: "taxAmount",
            external_identifier: "externalIdentifier",
            product_url: "productUrl",
            image_url: "imageUrl",
            product_type: "productType",
        });
    });

/** @internal */
export type CartItem$Outbound = {
    name: string;
    quantity: number;
    unit_amount: number;
    discount_amount: number | null;
    tax_amount: number | null;
    external_identifier?: string | null | undefined;
    sku?: string | null | undefined;
    product_url?: string | null | undefined;
    image_url?: string | null | undefined;
    categories?: Array<string> | null | undefined;
    product_type?: string | null | undefined;
};

/** @internal */
export const CartItem$outboundSchema: z.ZodType<CartItem$Outbound, z.ZodTypeDef, CartItem> = z
    .object({
        name: z.string(),
        quantity: z.number().int(),
        unitAmount: z.number().int(),
        discountAmount: z.nullable(z.number().int().default(0)),
        taxAmount: z.nullable(z.number().int().default(0)),
        externalIdentifier: z.nullable(z.string()).optional(),
        sku: z.nullable(z.string()).optional(),
        productUrl: z.nullable(z.string()).optional(),
        imageUrl: z.nullable(z.string()).optional(),
        categories: z.nullable(z.array(z.string())).optional(),
        productType: z.nullable(ProductType$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            unitAmount: "unit_amount",
            discountAmount: "discount_amount",
            taxAmount: "tax_amount",
            externalIdentifier: "external_identifier",
            productUrl: "product_url",
            imageUrl: "image_url",
            productType: "product_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CartItem$ {
    /** @deprecated use `CartItem$inboundSchema` instead. */
    export const inboundSchema = CartItem$inboundSchema;
    /** @deprecated use `CartItem$outboundSchema` instead. */
    export const outboundSchema = CartItem$outboundSchema;
    /** @deprecated use `CartItem$Outbound` instead. */
    export type Outbound = CartItem$Outbound;
}
