/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The product type of the cart item.
 */
export enum ProductType {
    Physical = "physical",
    Discount = "discount",
    ShippingFee = "shipping_fee",
    SalesTax = "sales_tax",
    Digital = "digital",
    GiftCard = "gift_card",
    StoreCredit = "store_credit",
    Surcharge = "surcharge",
}

/**
 * A cart item that represents a single cart line item for a transaction.
 *
 * @remarks
 * Note that some optional properties are required for certain payment
 * service providers. If no value is set for these properties, we will use
 * their default value.
 *
 * If the total due to be paid for the item is required by the payment service
 * provider, generally referred to as the "total amount", the formula below
 * will usually be used to calculate this amount:
 *
 * `(unit_amount * quantity) - discount_amount + tax_amount`
 *
 * It's highly recommended that the total amount to pay for all items
 * should match the transaction's amount to reduce the risk of the
 * transaction being declined by the payment service provider.
 */
export type CartItem = {
    /**
     * The name of the cart item. The value you set for this property may
     *
     * @remarks
     * be truncated if the maximum length accepted by a payment service
     * provider is less than 255 characters.
     */
    name: string;
    /**
     * The quantity of this item in the cart. This value cannot be negative
     *
     * @remarks
     * or zero.
     */
    quantity: number;
    /**
     * The amount for an individual item represented as a monetary amount
     *
     * @remarks
     * in the smallest currency unit for the given currency, for example
     * `1299` USD cents represents `$12.99`.
     * The amount sent through to the payment processor as unitary amount
     * will be calculated to include the discount and tax values sent
     * as part of this cart item.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    unitAmount: number;
    /**
     * The amount discounted for this item represented as a monetary amount
     *
     * @remarks
     * in the smallest currency unit for the given currency, for example `1299`
     * USD cents represents `$12.99`.
     *
     * Please note that this amount is for the total of the cart item and not
     * for an individual item. For example, if the quantity is 5, this value
     * should be the total discount amount for 5 of the cart item.
     *
     * You might see unexpected failed transactions if the `discount_amount` can
     * not be equally divided by the `quantity` value. This is due to the fact
     * that some payment services require this amount to be specified per unit.
     *
     * In this situation we recommend splitting this item into separate items,
     * each with their own specific discount.
     */
    discountAmount?: number | null | undefined;
    /**
     * The tax amount for this item represented as a monetary amount
     *
     * @remarks
     * in the smallest currency unit for the given currency, for example `1299`
     * USD cents represents `$12.99`.
     *
     * Please not that this amount is for the total of the cart item and not
     * for an individual item. For example, if the quantity is 5, this value
     * should be the total tax amount for 5 of the cart item.
     *
     * You might see unexpected failed transactions if the `tax_amount` can
     * not be equally divided by the `quantity` value. This is due to the fact
     * that some payment services require this amount to be specified per unit.
     *
     * In this situation we recommend splitting this item into separate items,
     * each with their own specific tax amount.
     */
    taxAmount?: number | null | undefined;
    /**
     * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The SKU for the item.
     */
    sku?: string | null | undefined;
    /**
     * The product URL for the item.
     */
    productUrl?: string | null | undefined;
    /**
     * The URL for the image of the item.
     */
    imageUrl?: string | null | undefined;
    /**
     * A list of strings containing product categories for the item.
     *
     * @remarks
     * Max length per item: 50.
     */
    categories?: Array<string> | null | undefined;
    /**
     * The product type of the cart item.
     */
    productType?: ProductType | null | undefined;
};

/** @internal */
export const ProductType$: z.ZodNativeEnum<typeof ProductType> = z.nativeEnum(ProductType);

/** @internal */
export namespace CartItem$ {
    export type Inbound = {
        name: string;
        quantity: number;
        unit_amount: number;
        discount_amount?: number | null | undefined;
        tax_amount?: number | null | undefined;
        external_identifier?: string | null | undefined;
        sku?: string | null | undefined;
        product_url?: string | null | undefined;
        image_url?: string | null | undefined;
        categories?: Array<string> | null | undefined;
        product_type?: ProductType | null | undefined;
    };

    export const inboundSchema: z.ZodType<CartItem, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            quantity: z.number().int(),
            unit_amount: z.number().int(),
            discount_amount: z.nullable(z.number().int().default(0)),
            tax_amount: z.nullable(z.number().int().default(0)),
            external_identifier: z.nullable(z.string()).optional(),
            sku: z.nullable(z.string()).optional(),
            product_url: z.nullable(z.string()).optional(),
            image_url: z.nullable(z.string()).optional(),
            categories: z.nullable(z.array(z.string())).optional(),
            product_type: z.nullable(ProductType$).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                quantity: v.quantity,
                unitAmount: v.unit_amount,
                discountAmount: v.discount_amount,
                taxAmount: v.tax_amount,
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.product_url === undefined ? null : { productUrl: v.product_url }),
                ...(v.image_url === undefined ? null : { imageUrl: v.image_url }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.product_type === undefined ? null : { productType: v.product_type }),
            };
        });

    export type Outbound = {
        name: string;
        quantity: number;
        unit_amount: number;
        discount_amount: number | null;
        tax_amount: number | null;
        external_identifier?: string | null | undefined;
        sku?: string | null | undefined;
        product_url?: string | null | undefined;
        image_url?: string | null | undefined;
        categories?: Array<string> | null | undefined;
        product_type?: ProductType | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CartItem> = z
        .object({
            name: z.string(),
            quantity: z.number().int(),
            unitAmount: z.number().int(),
            discountAmount: z.nullable(z.number().int().default(0)),
            taxAmount: z.nullable(z.number().int().default(0)),
            externalIdentifier: z.nullable(z.string()).optional(),
            sku: z.nullable(z.string()).optional(),
            productUrl: z.nullable(z.string()).optional(),
            imageUrl: z.nullable(z.string()).optional(),
            categories: z.nullable(z.array(z.string())).optional(),
            productType: z.nullable(ProductType$).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                quantity: v.quantity,
                unit_amount: v.unitAmount,
                discount_amount: v.discountAmount,
                tax_amount: v.taxAmount,
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.productUrl === undefined ? null : { product_url: v.productUrl }),
                ...(v.imageUrl === undefined ? null : { image_url: v.imageUrl }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.productType === undefined ? null : { product_type: v.productType }),
            };
        });
}
