/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The product type of the cart item.
 */
export const ProductType = {
  Physical: "physical",
  Discount: "discount",
  ShippingFee: "shipping_fee",
  SalesTax: "sales_tax",
  Digital: "digital",
  GiftCard: "gift_card",
  StoreCredit: "store_credit",
  Surcharge: "surcharge",
} as const;
/**
 * The product type of the cart item.
 */
export type ProductType = ClosedEnum<typeof ProductType>;

/**
 * Base model with JSON encoders.
 */
export type CartItem = {
  /**
   * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
   */
  name: string;
  /**
   * The quantity of this item in the cart. This value cannot be negative or zero.
   */
  quantity: number;
  /**
   * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
   */
  unitAmount: number;
  /**
   * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
   */
  discountAmount?: number | undefined;
  /**
   * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
   */
  taxAmount?: number | undefined;
  /**
   * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
   */
  externalIdentifier?: string | undefined;
  /**
   * The SKU for the item.
   */
  sku?: string | undefined;
  /**
   * The product URL for the item.
   */
  productUrl?: string | undefined;
  /**
   * The URL for the image of the item.
   */
  imageUrl?: string | undefined;
  /**
   * A list of strings containing product categories for the item.
   */
  categories?: Array<string> | undefined;
  /**
   * The product type of the cart item.
   */
  productType?: ProductType | undefined;
};

/** @internal */
export const ProductType$inboundSchema: z.ZodNativeEnum<typeof ProductType> = z
  .nativeEnum(ProductType);

/** @internal */
export const ProductType$outboundSchema: z.ZodNativeEnum<typeof ProductType> =
  ProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductType$ {
  /** @deprecated use `ProductType$inboundSchema` instead. */
  export const inboundSchema = ProductType$inboundSchema;
  /** @deprecated use `ProductType$outboundSchema` instead. */
  export const outboundSchema = ProductType$outboundSchema;
}

/** @internal */
export const CartItem$inboundSchema: z.ZodType<
  CartItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  quantity: z.number().int(),
  unit_amount: z.number().int(),
  discount_amount: z.number().int().default(0),
  tax_amount: z.number().int().default(0),
  external_identifier: z.string().optional(),
  sku: z.string().optional(),
  product_url: z.string().optional(),
  image_url: z.string().optional(),
  categories: z.array(z.string()).optional(),
  product_type: ProductType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "unit_amount": "unitAmount",
    "discount_amount": "discountAmount",
    "tax_amount": "taxAmount",
    "external_identifier": "externalIdentifier",
    "product_url": "productUrl",
    "image_url": "imageUrl",
    "product_type": "productType",
  });
});

/** @internal */
export type CartItem$Outbound = {
  name: string;
  quantity: number;
  unit_amount: number;
  discount_amount: number;
  tax_amount: number;
  external_identifier?: string | undefined;
  sku?: string | undefined;
  product_url?: string | undefined;
  image_url?: string | undefined;
  categories?: Array<string> | undefined;
  product_type?: string | undefined;
};

/** @internal */
export const CartItem$outboundSchema: z.ZodType<
  CartItem$Outbound,
  z.ZodTypeDef,
  CartItem
> = z.object({
  name: z.string(),
  quantity: z.number().int(),
  unitAmount: z.number().int(),
  discountAmount: z.number().int().default(0),
  taxAmount: z.number().int().default(0),
  externalIdentifier: z.string().optional(),
  sku: z.string().optional(),
  productUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  categories: z.array(z.string()).optional(),
  productType: ProductType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    unitAmount: "unit_amount",
    discountAmount: "discount_amount",
    taxAmount: "tax_amount",
    externalIdentifier: "external_identifier",
    productUrl: "product_url",
    imageUrl: "image_url",
    productType: "product_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CartItem$ {
  /** @deprecated use `CartItem$inboundSchema` instead. */
  export const inboundSchema = CartItem$inboundSchema;
  /** @deprecated use `CartItem$outboundSchema` instead. */
  export const outboundSchema = CartItem$outboundSchema;
  /** @deprecated use `CartItem$Outbound` instead. */
  export type Outbound = CartItem$Outbound;
}

export function cartItemToJSON(cartItem: CartItem): string {
  return JSON.stringify(CartItem$outboundSchema.parse(cartItem));
}

export function cartItemFromJSON(
  jsonString: string,
): SafeParseResult<CartItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CartItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CartItem' from JSON`,
  );
}
