/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    GooglePayAssuranceDetails,
    GooglePayAssuranceDetails$inboundSchema,
    GooglePayAssuranceDetails$Outbound,
    GooglePayAssuranceDetails$outboundSchema,
} from "./googlepayassurancedetails.js";
import * as z from "zod";

export const DigitalWalletPaymentMethodCreateMethod = {
    Applepay: "applepay",
    Googlepay: "googlepay",
} as const;
export type DigitalWalletPaymentMethodCreateMethod = ClosedEnum<
    typeof DigitalWalletPaymentMethodCreateMethod
>;

export type One = {};

export type Token = One | string;

/**
 * Base model with JSON encoders.
 */
export type DigitalWalletPaymentMethodCreate = {
    buyerExternalIdentifier?: string | undefined;
    buyerId?: string | undefined;
    method: DigitalWalletPaymentMethodCreateMethod;
    cardholderName?: string | undefined;
    token: One | string;
    redirectUrl?: string | undefined;
    /**
     * Base model with JSON encoders.
     */
    assuranceDetails?: GooglePayAssuranceDetails | undefined;
    cardSuffix?: string | undefined;
    cardScheme?: string | undefined;
    cardType?: string | undefined;
};

/** @internal */
export const DigitalWalletPaymentMethodCreateMethod$inboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletPaymentMethodCreateMethod
> = z.nativeEnum(DigitalWalletPaymentMethodCreateMethod);

/** @internal */
export const DigitalWalletPaymentMethodCreateMethod$outboundSchema: z.ZodNativeEnum<
    typeof DigitalWalletPaymentMethodCreateMethod
> = DigitalWalletPaymentMethodCreateMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletPaymentMethodCreateMethod$ {
    /** @deprecated use `DigitalWalletPaymentMethodCreateMethod$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletPaymentMethodCreateMethod$inboundSchema;
    /** @deprecated use `DigitalWalletPaymentMethodCreateMethod$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletPaymentMethodCreateMethod$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type One$Outbound = {};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    export const inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    export const outboundSchema = One$outboundSchema;
    /** @deprecated use `One$Outbound` instead. */
    export type Outbound = One$Outbound;
}

/** @internal */
export const Token$inboundSchema: z.ZodType<Token, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => One$inboundSchema),
    z.string(),
]);

/** @internal */
export type Token$Outbound = One$Outbound | string;

/** @internal */
export const Token$outboundSchema: z.ZodType<Token$Outbound, z.ZodTypeDef, Token> = z.union([
    z.lazy(() => One$outboundSchema),
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Token$ {
    /** @deprecated use `Token$inboundSchema` instead. */
    export const inboundSchema = Token$inboundSchema;
    /** @deprecated use `Token$outboundSchema` instead. */
    export const outboundSchema = Token$outboundSchema;
    /** @deprecated use `Token$Outbound` instead. */
    export type Outbound = Token$Outbound;
}

/** @internal */
export const DigitalWalletPaymentMethodCreate$inboundSchema: z.ZodType<
    DigitalWalletPaymentMethodCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        buyer_external_identifier: z.string().optional(),
        buyer_id: z.string().optional(),
        method: DigitalWalletPaymentMethodCreateMethod$inboundSchema,
        cardholder_name: z.string().optional(),
        token: z.union([z.lazy(() => One$inboundSchema), z.string()]),
        redirect_url: z.string().optional(),
        assurance_details: GooglePayAssuranceDetails$inboundSchema.optional(),
        card_suffix: z.string().optional(),
        card_scheme: z.string().optional(),
        card_type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyer_external_identifier: "buyerExternalIdentifier",
            buyer_id: "buyerId",
            cardholder_name: "cardholderName",
            redirect_url: "redirectUrl",
            assurance_details: "assuranceDetails",
            card_suffix: "cardSuffix",
            card_scheme: "cardScheme",
            card_type: "cardType",
        });
    });

/** @internal */
export type DigitalWalletPaymentMethodCreate$Outbound = {
    buyer_external_identifier?: string | undefined;
    buyer_id?: string | undefined;
    method: string;
    cardholder_name?: string | undefined;
    token: One$Outbound | string;
    redirect_url?: string | undefined;
    assurance_details?: GooglePayAssuranceDetails$Outbound | undefined;
    card_suffix?: string | undefined;
    card_scheme?: string | undefined;
    card_type?: string | undefined;
};

/** @internal */
export const DigitalWalletPaymentMethodCreate$outboundSchema: z.ZodType<
    DigitalWalletPaymentMethodCreate$Outbound,
    z.ZodTypeDef,
    DigitalWalletPaymentMethodCreate
> = z
    .object({
        buyerExternalIdentifier: z.string().optional(),
        buyerId: z.string().optional(),
        method: DigitalWalletPaymentMethodCreateMethod$outboundSchema,
        cardholderName: z.string().optional(),
        token: z.union([z.lazy(() => One$outboundSchema), z.string()]),
        redirectUrl: z.string().optional(),
        assuranceDetails: GooglePayAssuranceDetails$outboundSchema.optional(),
        cardSuffix: z.string().optional(),
        cardScheme: z.string().optional(),
        cardType: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyerExternalIdentifier: "buyer_external_identifier",
            buyerId: "buyer_id",
            cardholderName: "cardholder_name",
            redirectUrl: "redirect_url",
            assuranceDetails: "assurance_details",
            cardSuffix: "card_suffix",
            cardScheme: "card_scheme",
            cardType: "card_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletPaymentMethodCreate$ {
    /** @deprecated use `DigitalWalletPaymentMethodCreate$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletPaymentMethodCreate$inboundSchema;
    /** @deprecated use `DigitalWalletPaymentMethodCreate$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletPaymentMethodCreate$outboundSchema;
    /** @deprecated use `DigitalWalletPaymentMethodCreate$Outbound` instead. */
    export type Outbound = DigitalWalletPaymentMethodCreate$Outbound;
}
