/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingDetails,
  BillingDetails$inboundSchema,
  BillingDetails$Outbound,
  BillingDetails$outboundSchema,
} from "./billingdetails.js";
import {
  CardScheme,
  CardScheme$inboundSchema,
  CardScheme$outboundSchema,
} from "./cardscheme.js";
import {
  CardType,
  CardType$inboundSchema,
  CardType$outboundSchema,
} from "./cardtype.js";

/**
 * Always `payment-method`.
 */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodType = {
  PaymentMethod: "payment-method",
} as const;
/**
 * Always `payment-method`.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodType = ClosedEnum<
  typeof ApiRoutersPaymentMethodsSchemasPaymentMethodType
>;

/**
 * Details for credit or debit card payment method.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodDetails = {
  bin?: string | undefined;
  /**
   * An enumeration.
   */
  cardType?: CardType | undefined;
};

/**
 * The type of this payment method.
 */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod = {
  Abitab: "abitab",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The type of this payment method.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod =
  ClosedEnum<typeof ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod>;

/**
 * The mode to use with this payment method.
 */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodMode = {
  Card: "card",
  Redirect: "redirect",
  Applepay: "applepay",
  Googlepay: "googlepay",
  CheckoutSession: "checkout-session",
  ClickToPay: "click-to-pay",
  GiftCard: "gift-card",
} as const;
/**
 * The mode to use with this payment method.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodMode = ClosedEnum<
  typeof ApiRoutersPaymentMethodsSchemasPaymentMethodMode
>;

/**
 * The scheme of the card. Only applies to card payments.
 */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme of the card. Only applies to card payments.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme = ClosedEnum<
  typeof ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme
>;

/**
 * Always `buyer`.
 */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType = {
  Buyer: "buyer",
} as const;
/**
 * Always `buyer`.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType = ClosedEnum<
  typeof ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType
>;

/**
 * The optional buyer for which this payment method has been stored.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer = {
  /**
   * Always `buyer`.
   */
  type?: ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | undefined;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * Base model with JSON encoders.
   */
  billingDetails?: BillingDetails | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
};

/**
 * The state of the payment method.
 */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus = {
  Processing: "processing",
  BuyerApprovalRequired: "buyer_approval_required",
  Succeeded: "succeeded",
  Failed: "failed",
  Paused: "paused",
} as const;
/**
 * The state of the payment method.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus =
  ClosedEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus
  >;

/**
 * Payment Method
 *
 * @remarks
 *
 * A stored payment method.
 */
export type ApiRoutersPaymentMethodsSchemasPaymentMethod = {
  /**
   * Always `payment-method`.
   */
  type?: ApiRoutersPaymentMethodsSchemasPaymentMethodType | undefined;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize their payment.
   */
  approvalUrl?: string | undefined;
  /**
   * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
   */
  country?: string | undefined;
  /**
   * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
   */
  currency?: string | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: ApiRoutersPaymentMethodsSchemasPaymentMethodDetails | undefined;
  /**
   * The expiration date for the payment method.
   */
  expirationDate?: string | undefined;
  /**
   * The unique hash derived from the payment method identifier (e.g. card number).
   */
  fingerprint?: string | undefined;
  /**
   * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
   */
  label?: string | undefined;
  /**
   * The date and time when this card was last replaced by the account updater.
   */
  lastReplacedAt?: Date | undefined;
  /**
   * The type of this payment method.
   */
  method: ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod;
  /**
   * The mode to use with this payment method.
   */
  mode?: ApiRoutersPaymentMethodsSchemasPaymentMethodMode | undefined;
  /**
   * The scheme of the card. Only applies to card payments.
   */
  scheme?: ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme | undefined;
  /**
   * The ID for the payment method.
   */
  id: string;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
   */
  additionalSchemes?: Array<CardScheme> | undefined;
  /**
   * The timestamp when this payment method was last used in a transaction for client initiated transactions.
   */
  citLastUsedAt?: Date | undefined;
  /**
   * The number of times this payment method has been used in transactions for client initiated transactions.
   */
  citUsageCount: number;
  /**
   * Whether this card has a pending replacement that hasn't been applied yet.
   */
  hasReplacement: boolean;
  /**
   * The timestamp when this payment method was last used in a transaction.
   */
  lastUsedAt?: Date | undefined;
  /**
   * The number of times this payment method has been used in transactions.
   */
  usageCount: number;
  /**
   * The optional buyer for which this payment method has been stored.
   */
  buyer?: ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer | undefined;
  /**
   * The merchant reference that can be used to match the payment method against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The state of the payment method.
   */
  status: ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus;
  /**
   * The date and time when this payment method was first created in our system.
   */
  createdAt: Date;
  /**
   * The date and time when this payment method was last updated in our system.
   */
  updatedAt: Date;
};

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodType$inboundSchema:
  z.ZodNativeEnum<typeof ApiRoutersPaymentMethodsSchemasPaymentMethodType> = z
    .nativeEnum(ApiRoutersPaymentMethodsSchemasPaymentMethodType);

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodType$outboundSchema:
  z.ZodNativeEnum<typeof ApiRoutersPaymentMethodsSchemasPaymentMethodType> =
    ApiRoutersPaymentMethodsSchemasPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodType$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodType$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodType$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$inboundSchema:
  z.ZodType<
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bin: z.string().optional(),
    card_type: CardType$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "card_type": "cardType",
    });
  });

/** @internal */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$Outbound = {
  bin?: string | undefined;
  card_type?: string | undefined;
};

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$outboundSchema:
  z.ZodType<
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$Outbound,
    z.ZodTypeDef,
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails
  > = z.object({
    bin: z.string().optional(),
    cardType: CardType$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      cardType: "card_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$outboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$Outbound` instead. */
  export type Outbound =
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$Outbound;
}

export function apiRoutersPaymentMethodsSchemasPaymentMethodDetailsToJSON(
  apiRoutersPaymentMethodsSchemasPaymentMethodDetails:
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails,
): string {
  return JSON.stringify(
    ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$outboundSchema.parse(
      apiRoutersPaymentMethodsSchemasPaymentMethodDetails,
    ),
  );
}

export function apiRoutersPaymentMethodsSchemasPaymentMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiRoutersPaymentMethodsSchemasPaymentMethodDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiRoutersPaymentMethodsSchemasPaymentMethodDetails' from JSON`,
  );
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod
  > = z.nativeEnum(ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod);

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod
  > = ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodMode$inboundSchema:
  z.ZodNativeEnum<typeof ApiRoutersPaymentMethodsSchemasPaymentMethodMode> = z
    .nativeEnum(ApiRoutersPaymentMethodsSchemasPaymentMethodMode);

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodMode$outboundSchema:
  z.ZodNativeEnum<typeof ApiRoutersPaymentMethodsSchemasPaymentMethodMode> =
    ApiRoutersPaymentMethodsSchemasPaymentMethodMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodMode$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodMode$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodMode$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodMode$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodMode$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$inboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme
  > = z.nativeEnum(ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme);

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$outboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme
  > = ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$inboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType
  > = z.nativeEnum(ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType);

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$outboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType
  > = ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$inboundSchema:
  z.ZodType<
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$inboundSchema
      .default("buyer"),
    id: z.string().optional(),
    merchant_account_id: z.string(),
    display_name: z.string().optional(),
    external_identifier: z.string().optional(),
    billing_details: BillingDetails$inboundSchema.optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "merchant_account_id": "merchantAccountId",
      "display_name": "displayName",
      "external_identifier": "externalIdentifier",
      "billing_details": "billingDetails",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$Outbound = {
  type: string;
  id?: string | undefined;
  merchant_account_id: string;
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: BillingDetails$Outbound | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$outboundSchema:
  z.ZodType<
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$Outbound,
    z.ZodTypeDef,
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer
  > = z.object({
    type: ApiRoutersPaymentMethodsSchemasPaymentMethodBuyerType$outboundSchema
      .default("buyer"),
    id: z.string().optional(),
    merchantAccountId: z.string(),
    displayName: z.string().optional(),
    externalIdentifier: z.string().optional(),
    billingDetails: BillingDetails$outboundSchema.optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      merchantAccountId: "merchant_account_id",
      displayName: "display_name",
      externalIdentifier: "external_identifier",
      billingDetails: "billing_details",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$outboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$Outbound` instead. */
  export type Outbound =
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$Outbound;
}

export function apiRoutersPaymentMethodsSchemasPaymentMethodBuyerToJSON(
  apiRoutersPaymentMethodsSchemasPaymentMethodBuyer:
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer,
): string {
  return JSON.stringify(
    ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$outboundSchema.parse(
      apiRoutersPaymentMethodsSchemasPaymentMethodBuyer,
    ),
  );
}

export function apiRoutersPaymentMethodsSchemasPaymentMethodBuyerFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer' from JSON`,
  );
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus
  > = z.nativeEnum(
    ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus,
  );

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus
  > =
    ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$outboundSchema;
}

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethod$inboundSchema:
  z.ZodType<
    ApiRoutersPaymentMethodsSchemasPaymentMethod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ApiRoutersPaymentMethodsSchemasPaymentMethodType$inboundSchema
      .default("payment-method"),
    approval_url: z.string().optional(),
    country: z.string().optional(),
    currency: z.string().optional(),
    details: z.lazy(() =>
      ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$inboundSchema
    ).optional(),
    expiration_date: z.string().optional(),
    fingerprint: z.string().optional(),
    label: z.string().optional(),
    last_replaced_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    method:
      ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$inboundSchema,
    mode: ApiRoutersPaymentMethodsSchemasPaymentMethodMode$inboundSchema
      .optional(),
    scheme: ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$inboundSchema
      .optional(),
    id: z.string(),
    merchant_account_id: z.string(),
    additional_schemes: z.array(CardScheme$inboundSchema).optional(),
    cit_last_used_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    cit_usage_count: z.number().int(),
    has_replacement: z.boolean(),
    last_used_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    usage_count: z.number().int(),
    buyer: z.lazy(() =>
      ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$inboundSchema
    ).optional(),
    external_identifier: z.string().optional(),
    status:
      ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$inboundSchema,
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "approval_url": "approvalUrl",
      "expiration_date": "expirationDate",
      "last_replaced_at": "lastReplacedAt",
      "merchant_account_id": "merchantAccountId",
      "additional_schemes": "additionalSchemes",
      "cit_last_used_at": "citLastUsedAt",
      "cit_usage_count": "citUsageCount",
      "has_replacement": "hasReplacement",
      "last_used_at": "lastUsedAt",
      "usage_count": "usageCount",
      "external_identifier": "externalIdentifier",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type ApiRoutersPaymentMethodsSchemasPaymentMethod$Outbound = {
  type: string;
  approval_url?: string | undefined;
  country?: string | undefined;
  currency?: string | undefined;
  details?:
    | ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$Outbound
    | undefined;
  expiration_date?: string | undefined;
  fingerprint?: string | undefined;
  label?: string | undefined;
  last_replaced_at?: string | undefined;
  method: string;
  mode?: string | undefined;
  scheme?: string | undefined;
  id: string;
  merchant_account_id: string;
  additional_schemes?: Array<string> | undefined;
  cit_last_used_at?: string | undefined;
  cit_usage_count: number;
  has_replacement: boolean;
  last_used_at?: string | undefined;
  usage_count: number;
  buyer?:
    | ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$Outbound
    | undefined;
  external_identifier?: string | undefined;
  status: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const ApiRoutersPaymentMethodsSchemasPaymentMethod$outboundSchema:
  z.ZodType<
    ApiRoutersPaymentMethodsSchemasPaymentMethod$Outbound,
    z.ZodTypeDef,
    ApiRoutersPaymentMethodsSchemasPaymentMethod
  > = z.object({
    type: ApiRoutersPaymentMethodsSchemasPaymentMethodType$outboundSchema
      .default("payment-method"),
    approvalUrl: z.string().optional(),
    country: z.string().optional(),
    currency: z.string().optional(),
    details: z.lazy(() =>
      ApiRoutersPaymentMethodsSchemasPaymentMethodDetails$outboundSchema
    ).optional(),
    expirationDate: z.string().optional(),
    fingerprint: z.string().optional(),
    label: z.string().optional(),
    lastReplacedAt: z.date().transform(v => v.toISOString()).optional(),
    method:
      ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethod$outboundSchema,
    mode: ApiRoutersPaymentMethodsSchemasPaymentMethodMode$outboundSchema
      .optional(),
    scheme:
      ApiRoutersPaymentMethodsSchemasPaymentMethodCardScheme$outboundSchema
        .optional(),
    id: z.string(),
    merchantAccountId: z.string(),
    additionalSchemes: z.array(CardScheme$outboundSchema).optional(),
    citLastUsedAt: z.date().transform(v => v.toISOString()).optional(),
    citUsageCount: z.number().int(),
    hasReplacement: z.boolean(),
    lastUsedAt: z.date().transform(v => v.toISOString()).optional(),
    usageCount: z.number().int(),
    buyer: z.lazy(() =>
      ApiRoutersPaymentMethodsSchemasPaymentMethodBuyer$outboundSchema
    ).optional(),
    externalIdentifier: z.string().optional(),
    status:
      ApiRoutersPaymentMethodsSchemasPaymentMethodPaymentMethodStatus$outboundSchema,
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      approvalUrl: "approval_url",
      expirationDate: "expiration_date",
      lastReplacedAt: "last_replaced_at",
      merchantAccountId: "merchant_account_id",
      additionalSchemes: "additional_schemes",
      citLastUsedAt: "cit_last_used_at",
      citUsageCount: "cit_usage_count",
      hasReplacement: "has_replacement",
      lastUsedAt: "last_used_at",
      usageCount: "usage_count",
      externalIdentifier: "external_identifier",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiRoutersPaymentMethodsSchemasPaymentMethod$ {
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethod$inboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    ApiRoutersPaymentMethodsSchemasPaymentMethod$outboundSchema;
  /** @deprecated use `ApiRoutersPaymentMethodsSchemasPaymentMethod$Outbound` instead. */
  export type Outbound = ApiRoutersPaymentMethodsSchemasPaymentMethod$Outbound;
}

export function apiRoutersPaymentMethodsSchemasPaymentMethodToJSON(
  apiRoutersPaymentMethodsSchemasPaymentMethod:
    ApiRoutersPaymentMethodsSchemasPaymentMethod,
): string {
  return JSON.stringify(
    ApiRoutersPaymentMethodsSchemasPaymentMethod$outboundSchema.parse(
      apiRoutersPaymentMethodsSchemasPaymentMethod,
    ),
  );
}

export function apiRoutersPaymentMethodsSchemasPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiRoutersPaymentMethodsSchemasPaymentMethod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiRoutersPaymentMethodsSchemasPaymentMethod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiRoutersPaymentMethodsSchemasPaymentMethod' from JSON`,
  );
}
