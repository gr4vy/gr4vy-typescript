/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType = {
  Digital: "DIGITAL",
  Physical: "PHYSICAL",
  Hybrid: "HYBRID",
} as const;
export type ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType =
  OpenEnum<typeof ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType>;

export type ForterAntiFraudOptionsCartItemDeliveryDetails = {
  /**
   * The type of delivery for this cart item.
   */
  deliveryType?:
    | ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType
    | null
    | undefined;
  /**
   * The method of delivery for this cart item.
   */
  deliveryMethod?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$inboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$outboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType,
    z.ZodTypeDef,
    ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType
  > = z.union([
    z.nativeEnum(ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$ {
  /** @deprecated use `ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$inboundSchema` instead. */
  export const inboundSchema =
    ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$inboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$outboundSchema` instead. */
  export const outboundSchema =
    ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$outboundSchema;
}

/** @internal */
export const ForterAntiFraudOptionsCartItemDeliveryDetails$inboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemDeliveryDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    delivery_type: z.nullable(
      ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$inboundSchema,
    ).optional(),
    delivery_method: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "delivery_type": "deliveryType",
      "delivery_method": "deliveryMethod",
    });
  });

/** @internal */
export type ForterAntiFraudOptionsCartItemDeliveryDetails$Outbound = {
  delivery_type?: string | null | undefined;
  delivery_method?: string | null | undefined;
};

/** @internal */
export const ForterAntiFraudOptionsCartItemDeliveryDetails$outboundSchema:
  z.ZodType<
    ForterAntiFraudOptionsCartItemDeliveryDetails$Outbound,
    z.ZodTypeDef,
    ForterAntiFraudOptionsCartItemDeliveryDetails
  > = z.object({
    deliveryType: z.nullable(
      ForterAntiFraudOptionsCartItemDeliveryDetailsDeliveryType$outboundSchema,
    ).optional(),
    deliveryMethod: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      deliveryType: "delivery_type",
      deliveryMethod: "delivery_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForterAntiFraudOptionsCartItemDeliveryDetails$ {
  /** @deprecated use `ForterAntiFraudOptionsCartItemDeliveryDetails$inboundSchema` instead. */
  export const inboundSchema =
    ForterAntiFraudOptionsCartItemDeliveryDetails$inboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemDeliveryDetails$outboundSchema` instead. */
  export const outboundSchema =
    ForterAntiFraudOptionsCartItemDeliveryDetails$outboundSchema;
  /** @deprecated use `ForterAntiFraudOptionsCartItemDeliveryDetails$Outbound` instead. */
  export type Outbound = ForterAntiFraudOptionsCartItemDeliveryDetails$Outbound;
}

export function forterAntiFraudOptionsCartItemDeliveryDetailsToJSON(
  forterAntiFraudOptionsCartItemDeliveryDetails:
    ForterAntiFraudOptionsCartItemDeliveryDetails,
): string {
  return JSON.stringify(
    ForterAntiFraudOptionsCartItemDeliveryDetails$outboundSchema.parse(
      forterAntiFraudOptionsCartItemDeliveryDetails,
    ),
  );
}

export function forterAntiFraudOptionsCartItemDeliveryDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  ForterAntiFraudOptionsCartItemDeliveryDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ForterAntiFraudOptionsCartItemDeliveryDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ForterAntiFraudOptionsCartItemDeliveryDetails' from JSON`,
  );
}
