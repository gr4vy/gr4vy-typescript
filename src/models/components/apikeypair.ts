/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MerchantAccount, MerchantAccount$ } from "./merchantaccount";
import * as z from "zod";

/**
 * `api-key-pair`.
 */
export enum APIKeyPairType {
    ApiKeyPair = "api-key-pair",
}

/**
 * The algorithm to use for the API Key Pair. The recommended value is `ECDSA`.
 *
 * @remarks
 * You should only use the `RSA` algorithm in environments that do not support
 * `ECDSA`.
 */
export enum Algorithm {
    Ecdsa = "ECDSA",
    Rsa = "RSA",
}

/**
 * The user who created the API Key Pair.
 */
export type Creator = {
    /**
     * The ID of the user.
     */
    id?: string | undefined;
    /**
     * The name of the user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | null | undefined;
};

/**
 * Details about an API key pair.
 */
export type APIKeyPair = {
    /**
     * `api-key-pair`.
     */
    type?: APIKeyPairType | undefined;
    /**
     * The unique Gr4vy ID for this key-pair.
     */
    id?: string | undefined;
    /**
     * A name for this key-pair which is used in the Gr4vy admin panel to give the key-pair a human readable name.
     */
    displayName?: string | undefined;
    /**
     * The algorithm to use for the API Key Pair. The recommended value is `ECDSA`.
     *
     * @remarks
     * You should only use the `RSA` algorithm in environments that do not support
     * `ECDSA`.
     */
    algorithm?: Algorithm | undefined;
    /**
     * A unique ID for this key-pair. This ID is the thumbprint of the key.
     */
    thumbprint?: string | undefined;
    /**
     * The private key for the key-pair. This is only returned after
     *
     * @remarks
     * the key is initially requested. For subsequent API calls this value is
     * `null`.
     */
    privateKey?: string | null | undefined;
    /**
     * The date and time when this key pair was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this key pair was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The user who created the API Key Pair.
     */
    creator?: Creator | null | undefined;
    merchantAccount?: MerchantAccount | undefined;
};

/** @internal */
export const APIKeyPairType$ = z.nativeEnum(APIKeyPairType);

/** @internal */
export const Algorithm$ = z.nativeEnum(Algorithm);

/** @internal */
export namespace Creator$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Creator, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            email_address: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        email_address?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Creator> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            emailAddress: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
            };
        });
}

/** @internal */
export namespace APIKeyPair$ {
    export type Inbound = {
        type?: APIKeyPairType | undefined;
        id?: string | undefined;
        display_name?: string | undefined;
        algorithm?: Algorithm | undefined;
        thumbprint?: string | undefined;
        private_key?: string | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        creator?: Creator$.Inbound | null | undefined;
        merchant_account?: MerchantAccount$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<APIKeyPair, z.ZodTypeDef, Inbound> = z
        .object({
            type: APIKeyPairType$.optional(),
            id: z.string().optional(),
            display_name: z.string().optional(),
            algorithm: Algorithm$.default(Algorithm.Ecdsa),
            thumbprint: z.string().optional(),
            private_key: z.nullable(z.string()).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            creator: z.nullable(z.lazy(() => Creator$.inboundSchema)).optional(),
            merchant_account: MerchantAccount$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                algorithm: v.algorithm,
                ...(v.thumbprint === undefined ? null : { thumbprint: v.thumbprint }),
                ...(v.private_key === undefined ? null : { privateKey: v.private_key }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.creator === undefined ? null : { creator: v.creator }),
                ...(v.merchant_account === undefined
                    ? null
                    : { merchantAccount: v.merchant_account }),
            };
        });

    export type Outbound = {
        type?: APIKeyPairType | undefined;
        id?: string | undefined;
        display_name?: string | undefined;
        algorithm: Algorithm;
        thumbprint?: string | undefined;
        private_key?: string | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        creator?: Creator$.Outbound | null | undefined;
        merchant_account?: MerchantAccount$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, APIKeyPair> = z
        .object({
            type: APIKeyPairType$.optional(),
            id: z.string().optional(),
            displayName: z.string().optional(),
            algorithm: Algorithm$.default(Algorithm.Ecdsa),
            thumbprint: z.string().optional(),
            privateKey: z.nullable(z.string()).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            creator: z.nullable(z.lazy(() => Creator$.outboundSchema)).optional(),
            merchantAccount: MerchantAccount$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                algorithm: v.algorithm,
                ...(v.thumbprint === undefined ? null : { thumbprint: v.thumbprint }),
                ...(v.privateKey === undefined ? null : { private_key: v.privateKey }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.creator === undefined ? null : { creator: v.creator }),
                ...(v.merchantAccount === undefined
                    ? null
                    : { merchant_account: v.merchantAccount }),
            };
        });
}
