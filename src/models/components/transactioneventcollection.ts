/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    TransactionEvent,
    TransactionEvent$inboundSchema,
    TransactionEvent$Outbound,
    TransactionEvent$outboundSchema,
} from "./transactionevent.js";
import * as z from "zod";

/**
 * Collection of results.
 */
export type TransactionEventCollection = {
    items: Array<TransactionEvent>;
    limit?: number | undefined;
    nextCursor?: string | undefined;
    previousCursor?: string | undefined;
};

/** @internal */
export const TransactionEventCollection$inboundSchema: z.ZodType<
    TransactionEventCollection,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(TransactionEvent$inboundSchema),
        limit: z.number().int().default(20),
        next_cursor: z.string().optional(),
        previous_cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            next_cursor: "nextCursor",
            previous_cursor: "previousCursor",
        });
    });

/** @internal */
export type TransactionEventCollection$Outbound = {
    items: Array<TransactionEvent$Outbound>;
    limit: number;
    next_cursor?: string | undefined;
    previous_cursor?: string | undefined;
};

/** @internal */
export const TransactionEventCollection$outboundSchema: z.ZodType<
    TransactionEventCollection$Outbound,
    z.ZodTypeDef,
    TransactionEventCollection
> = z
    .object({
        items: z.array(TransactionEvent$outboundSchema),
        limit: z.number().int().default(20),
        nextCursor: z.string().optional(),
        previousCursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            nextCursor: "next_cursor",
            previousCursor: "previous_cursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEventCollection$ {
    /** @deprecated use `TransactionEventCollection$inboundSchema` instead. */
    export const inboundSchema = TransactionEventCollection$inboundSchema;
    /** @deprecated use `TransactionEventCollection$outboundSchema` instead. */
    export const outboundSchema = TransactionEventCollection$outboundSchema;
    /** @deprecated use `TransactionEventCollection$Outbound` instead. */
    export type Outbound = TransactionEventCollection$Outbound;
}
