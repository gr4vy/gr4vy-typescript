/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An available Vault Forward definition that can be configured.
 */
export type PCIForwardDefinition = {
    /**
     * The ID of the Vault Forward definition.
     */
    id?: string | undefined;
    /**
     * The type of this resource. It is always `vault-forward-definition`.
     */
    type?: string | undefined;
    /**
     * The display name of this definition.
     */
    displayName?: string | undefined;
    /**
     * The hosts where Vault Forward requests are allowed for this definition.
     */
    hosts?: Array<string> | undefined;
};

/** @internal */
export namespace PCIForwardDefinition$ {
    export type Inbound = {
        id?: string | undefined;
        type?: string | undefined;
        display_name?: string | undefined;
        hosts?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PCIForwardDefinition, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("vault-forward-definition"),
            display_name: z.string().optional(),
            hosts: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.hosts === undefined ? null : { hosts: v.hosts }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: string;
        display_name?: string | undefined;
        hosts?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PCIForwardDefinition> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("vault-forward-definition"),
            displayName: z.string().optional(),
            hosts: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.hosts === undefined ? null : { hosts: v.hosts }),
            };
        });
}
