/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    PCIForwardAuthenticationDefinition,
    PCIForwardAuthenticationDefinition$inboundSchema,
    PCIForwardAuthenticationDefinition$Outbound,
    PCIForwardAuthenticationDefinition$outboundSchema,
} from "./pciforwardauthenticationdefinition.js";
import * as z from "zod";

/**
 * An available Vault Forward definition that can be configured.
 */
export type PCIForwardDefinition = {
    /**
     * The ID of the Vault Forward definition.
     */
    id?: string | undefined;
    /**
     * The type of this resource. It is always `vault-forward-definition`.
     */
    type?: string | undefined;
    /**
     * The display name of this definition.
     */
    displayName?: string | undefined;
    /**
     * The hosts where Vault Forward requests are allowed for this definition.
     */
    hosts?: Array<string> | undefined;
    /**
     * Available authentication methods to be configured for this definition.
     */
    authentications?: Array<PCIForwardAuthenticationDefinition> | undefined;
};

/** @internal */
export const PCIForwardDefinition$inboundSchema: z.ZodType<
    PCIForwardDefinition,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string().optional(),
        type: z.string().default("vault-forward-definition"),
        display_name: z.string().optional(),
        hosts: z.array(z.string()).optional(),
        authentications: z.array(PCIForwardAuthenticationDefinition$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
        });
    });

/** @internal */
export type PCIForwardDefinition$Outbound = {
    id?: string | undefined;
    type: string;
    display_name?: string | undefined;
    hosts?: Array<string> | undefined;
    authentications?: Array<PCIForwardAuthenticationDefinition$Outbound> | undefined;
};

/** @internal */
export const PCIForwardDefinition$outboundSchema: z.ZodType<
    PCIForwardDefinition$Outbound,
    z.ZodTypeDef,
    PCIForwardDefinition
> = z
    .object({
        id: z.string().optional(),
        type: z.string().default("vault-forward-definition"),
        displayName: z.string().optional(),
        hosts: z.array(z.string()).optional(),
        authentications: z.array(PCIForwardAuthenticationDefinition$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardDefinition$ {
    /** @deprecated use `PCIForwardDefinition$inboundSchema` instead. */
    export const inboundSchema = PCIForwardDefinition$inboundSchema;
    /** @deprecated use `PCIForwardDefinition$outboundSchema` instead. */
    export const outboundSchema = PCIForwardDefinition$outboundSchema;
    /** @deprecated use `PCIForwardDefinition$Outbound` instead. */
    export type Outbound = PCIForwardDefinition$Outbound;
}
