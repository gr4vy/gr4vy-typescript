/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * `checkout-session`.
 */
export const CheckoutSessionRequestMethod = {
    CheckoutSession: "checkout-session",
} as const;
/**
 * `checkout-session`.
 */
export type CheckoutSessionRequestMethod = ClosedEnum<typeof CheckoutSessionRequestMethod>;

/**
 * Details to register a new Checkout Session payment method.
 */
export type CheckoutSessionRequest = {
    /**
     * `checkout-session`.
     */
    method: CheckoutSessionRequestMethod;
    /**
     * The ID of the Checkout Session.
     */
    id: string;
    /**
     * The redirect URL to redirect a buyer to after they have authorized their
     *
     * @remarks
     * transaction or payment method. This only applies to payment methods that
     * require buyer approval.
     */
    redirectUrl?: string | null | undefined;
    /**
     * An external identifier that can be used to match the card against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The ID of the buyer to associate this payment method to. If this field is
     *
     * @remarks
     * provided then the `buyer_external_identifier` field needs to be unset.
     */
    buyerId?: string | undefined;
    /**
     * The `external_identifier` of the buyer to associate this payment method
     *
     * @remarks
     * to. If this field is provided then the `buyer_id` field
     * needs to be unset.
     */
    buyerExternalIdentifier?: string | undefined;
};

/** @internal */
export const CheckoutSessionRequestMethod$inboundSchema: z.ZodNativeEnum<
    typeof CheckoutSessionRequestMethod
> = z.nativeEnum(CheckoutSessionRequestMethod);

/** @internal */
export const CheckoutSessionRequestMethod$outboundSchema: z.ZodNativeEnum<
    typeof CheckoutSessionRequestMethod
> = CheckoutSessionRequestMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionRequestMethod$ {
    /** @deprecated use `CheckoutSessionRequestMethod$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionRequestMethod$inboundSchema;
    /** @deprecated use `CheckoutSessionRequestMethod$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionRequestMethod$outboundSchema;
}

/** @internal */
export const CheckoutSessionRequest$inboundSchema: z.ZodType<
    CheckoutSessionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        method: CheckoutSessionRequestMethod$inboundSchema,
        id: z.string(),
        redirect_url: z.nullable(z.string()).optional(),
        external_identifier: z.nullable(z.string()).optional(),
        buyer_id: z.string().optional(),
        buyer_external_identifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            redirect_url: "redirectUrl",
            external_identifier: "externalIdentifier",
            buyer_id: "buyerId",
            buyer_external_identifier: "buyerExternalIdentifier",
        });
    });

/** @internal */
export type CheckoutSessionRequest$Outbound = {
    method: string;
    id: string;
    redirect_url?: string | null | undefined;
    external_identifier?: string | null | undefined;
    buyer_id?: string | undefined;
    buyer_external_identifier?: string | undefined;
};

/** @internal */
export const CheckoutSessionRequest$outboundSchema: z.ZodType<
    CheckoutSessionRequest$Outbound,
    z.ZodTypeDef,
    CheckoutSessionRequest
> = z
    .object({
        method: CheckoutSessionRequestMethod$outboundSchema,
        id: z.string(),
        redirectUrl: z.nullable(z.string()).optional(),
        externalIdentifier: z.nullable(z.string()).optional(),
        buyerId: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            redirectUrl: "redirect_url",
            externalIdentifier: "external_identifier",
            buyerId: "buyer_id",
            buyerExternalIdentifier: "buyer_external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionRequest$ {
    /** @deprecated use `CheckoutSessionRequest$inboundSchema` instead. */
    export const inboundSchema = CheckoutSessionRequest$inboundSchema;
    /** @deprecated use `CheckoutSessionRequest$outboundSchema` instead. */
    export const outboundSchema = CheckoutSessionRequest$outboundSchema;
    /** @deprecated use `CheckoutSessionRequest$Outbound` instead. */
    export type Outbound = CheckoutSessionRequest$Outbound;
}
