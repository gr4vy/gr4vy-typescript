/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentOption,
  PaymentOption$inboundSchema,
  PaymentOption$Outbound,
  PaymentOption$outboundSchema,
} from "./paymentoption.js";

export type PaymentOptions = {
  /**
   * A list of items returned for this request.
   */
  items: Array<PaymentOption>;
};

/** @internal */
export const PaymentOptions$inboundSchema: z.ZodType<
  PaymentOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(PaymentOption$inboundSchema),
});

/** @internal */
export type PaymentOptions$Outbound = {
  items: Array<PaymentOption$Outbound>;
};

/** @internal */
export const PaymentOptions$outboundSchema: z.ZodType<
  PaymentOptions$Outbound,
  z.ZodTypeDef,
  PaymentOptions
> = z.object({
  items: z.array(PaymentOption$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentOptions$ {
  /** @deprecated use `PaymentOptions$inboundSchema` instead. */
  export const inboundSchema = PaymentOptions$inboundSchema;
  /** @deprecated use `PaymentOptions$outboundSchema` instead. */
  export const outboundSchema = PaymentOptions$outboundSchema;
  /** @deprecated use `PaymentOptions$Outbound` instead. */
  export type Outbound = PaymentOptions$Outbound;
}

export function paymentOptionsToJSON(paymentOptions: PaymentOptions): string {
  return JSON.stringify(PaymentOptions$outboundSchema.parse(paymentOptions));
}

export function paymentOptionsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentOptions' from JSON`,
  );
}
