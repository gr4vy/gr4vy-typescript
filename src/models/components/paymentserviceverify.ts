/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * A key-value pair that represents a field defined in the definition for this payment service.
 */
export type PaymentServiceVerifyFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set.
     */
    value: string;
};

/**
 * Request body for verifying credentials against a payment service.
 */
export type PaymentServiceVerify = {
    /**
     * The ID of the payment service to use.
     */
    paymentServiceDefinitionId: string;
    /**
     * The ID of the payment service. Required if sending a partial set of
     *
     * @remarks
     * credentials in the `fields` property.
     */
    paymentServiceId?: string | undefined;
    /**
     * A list of fields where each field is a key-value pair that represents a defined field in the definition of the payment service. You are not required to send the full list of fields if the credentials for the payment service are already stored.
     *
     * @remarks
     * For example, if your credentials for `stripe-card` are stored and you only provide a `secret_key` in the request, it will override the stored `secret_key` and verify the resulting set of credentials against the payment service.
     */
    fields: Array<PaymentServiceVerifyFields>;
};

/** @internal */
export const PaymentServiceVerifyFields$inboundSchema: z.ZodType<
    PaymentServiceVerifyFields,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string(),
    value: z.string(),
});

/** @internal */
export type PaymentServiceVerifyFields$Outbound = {
    key: string;
    value: string;
};

/** @internal */
export const PaymentServiceVerifyFields$outboundSchema: z.ZodType<
    PaymentServiceVerifyFields$Outbound,
    z.ZodTypeDef,
    PaymentServiceVerifyFields
> = z.object({
    key: z.string(),
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceVerifyFields$ {
    /** @deprecated use `PaymentServiceVerifyFields$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceVerifyFields$inboundSchema;
    /** @deprecated use `PaymentServiceVerifyFields$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceVerifyFields$outboundSchema;
    /** @deprecated use `PaymentServiceVerifyFields$Outbound` instead. */
    export type Outbound = PaymentServiceVerifyFields$Outbound;
}

/** @internal */
export const PaymentServiceVerify$inboundSchema: z.ZodType<
    PaymentServiceVerify,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_definition_id: z.string(),
        payment_service_id: z.string().optional(),
        fields: z.array(z.lazy(() => PaymentServiceVerifyFields$inboundSchema)),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_id: "paymentServiceId",
        });
    });

/** @internal */
export type PaymentServiceVerify$Outbound = {
    payment_service_definition_id: string;
    payment_service_id?: string | undefined;
    fields: Array<PaymentServiceVerifyFields$Outbound>;
};

/** @internal */
export const PaymentServiceVerify$outboundSchema: z.ZodType<
    PaymentServiceVerify$Outbound,
    z.ZodTypeDef,
    PaymentServiceVerify
> = z
    .object({
        paymentServiceDefinitionId: z.string(),
        paymentServiceId: z.string().optional(),
        fields: z.array(z.lazy(() => PaymentServiceVerifyFields$outboundSchema)),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceId: "payment_service_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceVerify$ {
    /** @deprecated use `PaymentServiceVerify$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceVerify$inboundSchema;
    /** @deprecated use `PaymentServiceVerify$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceVerify$outboundSchema;
    /** @deprecated use `PaymentServiceVerify$Outbound` instead. */
    export type Outbound = PaymentServiceVerify$Outbound;
}
