/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A key-value pair that represents a field defined in the definition for this payment service.
 */
export type PaymentServiceVerifyFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set.
     */
    value: string;
};

/**
 * Request body for verifying credentials against a payment service.
 */
export type PaymentServiceVerify = {
    /**
     * The ID of the payment service to use.
     */
    paymentServiceDefinitionId: string;
    /**
     * The ID of the payment service. Required if sending a partial set of
     *
     * @remarks
     * credentials in the `fields` property.
     */
    paymentServiceId?: string | undefined;
    /**
     * A list of fields where each field is a key-value pair that represents a defined field in the definition of the payment service. You are not required to send the full list of fields if the credentials for the payment service are already stored.
     *
     * @remarks
     * For example, if your credentials for `stripe-card` are stored and you only provide a `secret_key` in the request, it will override the stored `secret_key` and verify the resulting set of credentials against the payment service.
     */
    fields: Array<PaymentServiceVerifyFields>;
};

/** @internal */
export namespace PaymentServiceVerifyFields$ {
    export type Inbound = {
        key: string;
        value: string;
    };

    export const inboundSchema: z.ZodType<PaymentServiceVerifyFields, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });

    export type Outbound = {
        key: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceVerifyFields> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });
}

/** @internal */
export namespace PaymentServiceVerify$ {
    export type Inbound = {
        payment_service_definition_id: string;
        payment_service_id?: string | undefined;
        fields: Array<PaymentServiceVerifyFields$.Inbound>;
    };

    export const inboundSchema: z.ZodType<PaymentServiceVerify, z.ZodTypeDef, Inbound> = z
        .object({
            payment_service_definition_id: z.string(),
            payment_service_id: z.string().optional(),
            fields: z.array(z.lazy(() => PaymentServiceVerifyFields$.inboundSchema)),
        })
        .transform((v) => {
            return {
                paymentServiceDefinitionId: v.payment_service_definition_id,
                ...(v.payment_service_id === undefined
                    ? null
                    : { paymentServiceId: v.payment_service_id }),
                fields: v.fields,
            };
        });

    export type Outbound = {
        payment_service_definition_id: string;
        payment_service_id?: string | undefined;
        fields: Array<PaymentServiceVerifyFields$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceVerify> = z
        .object({
            paymentServiceDefinitionId: z.string(),
            paymentServiceId: z.string().optional(),
            fields: z.array(z.lazy(() => PaymentServiceVerifyFields$.outboundSchema)),
        })
        .transform((v) => {
            return {
                payment_service_definition_id: v.paymentServiceDefinitionId,
                ...(v.paymentServiceId === undefined
                    ? null
                    : { payment_service_id: v.paymentServiceId }),
                fields: v.fields,
            };
        });
}
