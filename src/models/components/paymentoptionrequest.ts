/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";

export type PaymentOptionRequest = {
  /**
   * The metadata to used to evaluate checkout rules, which will help determine the right payment options to display.
   */
  metadata?: { [k: string]: string } | null | undefined;
  /**
   * The country code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
   */
  country?: string | null | undefined;
  /**
   * The currency code used to evaluate checkout rules, and which are used to help determine the right payment options to display.
   */
  currency?: string | null | undefined;
  /**
   * The amount used to evaluate checkout rules, and which are used to help determine the right payment options to display.
   */
  amount?: number | null | undefined;
  /**
   * The locale used to determine the labels for each payment option.
   */
  locale?: string | undefined;
  /**
   * The cart items used to evaluate checkout rules, and which are used to help determine the right payment options to display.
   */
  cartItems?: Array<CartItem> | null | undefined;
};

/** @internal */
export const PaymentOptionRequest$inboundSchema: z.ZodType<
  PaymentOptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.nullable(z.record(z.string())).optional(),
  country: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number().int()).optional(),
  locale: z.string().default("en"),
  cart_items: z.nullable(z.array(CartItem$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "cart_items": "cartItems",
  });
});

/** @internal */
export type PaymentOptionRequest$Outbound = {
  metadata?: { [k: string]: string } | null | undefined;
  country?: string | null | undefined;
  currency?: string | null | undefined;
  amount?: number | null | undefined;
  locale: string;
  cart_items?: Array<CartItem$Outbound> | null | undefined;
};

/** @internal */
export const PaymentOptionRequest$outboundSchema: z.ZodType<
  PaymentOptionRequest$Outbound,
  z.ZodTypeDef,
  PaymentOptionRequest
> = z.object({
  metadata: z.nullable(z.record(z.string())).optional(),
  country: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number().int()).optional(),
  locale: z.string().default("en"),
  cartItems: z.nullable(z.array(CartItem$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    cartItems: "cart_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentOptionRequest$ {
  /** @deprecated use `PaymentOptionRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentOptionRequest$inboundSchema;
  /** @deprecated use `PaymentOptionRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentOptionRequest$outboundSchema;
  /** @deprecated use `PaymentOptionRequest$Outbound` instead. */
  export type Outbound = PaymentOptionRequest$Outbound;
}

export function paymentOptionRequestToJSON(
  paymentOptionRequest: PaymentOptionRequest,
): string {
  return JSON.stringify(
    PaymentOptionRequest$outboundSchema.parse(paymentOptionRequest),
  );
}

export function paymentOptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentOptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentOptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentOptionRequest' from JSON`,
  );
}
