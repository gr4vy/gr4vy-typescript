/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RefundTargetType,
  RefundTargetType$inboundSchema,
  RefundTargetType$outboundSchema,
} from "./refundtargettype.js";

export type TransactionRefundCreate = {
  /**
   * The amount to refund, in the smallest currency unit (e.g., cents). If omitted, a full refund will be requested.
   */
  amount?: number | null | undefined;
  targetType?: RefundTargetType | undefined;
  /**
   * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
   */
  targetId?: string | null | undefined;
  /**
   * An optional reason to attach extra context to the refund request.
   */
  reason?: string | null | undefined;
  /**
   * An external identifier that can be used to match the refund against your own records.
   */
  externalIdentifier?: string | null | undefined;
};

/** @internal */
export const TransactionRefundCreate$inboundSchema: z.ZodType<
  TransactionRefundCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.nullable(z.number().int()).optional(),
  target_type: RefundTargetType$inboundSchema.optional(),
  target_id: z.nullable(z.string()).optional(),
  reason: z.nullable(z.string()).optional(),
  external_identifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
    "external_identifier": "externalIdentifier",
  });
});

/** @internal */
export type TransactionRefundCreate$Outbound = {
  amount?: number | null | undefined;
  target_type?: string | undefined;
  target_id?: string | null | undefined;
  reason?: string | null | undefined;
  external_identifier?: string | null | undefined;
};

/** @internal */
export const TransactionRefundCreate$outboundSchema: z.ZodType<
  TransactionRefundCreate$Outbound,
  z.ZodTypeDef,
  TransactionRefundCreate
> = z.object({
  amount: z.nullable(z.number().int()).optional(),
  targetType: RefundTargetType$outboundSchema.optional(),
  targetId: z.nullable(z.string()).optional(),
  reason: z.nullable(z.string()).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
    externalIdentifier: "external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundCreate$ {
  /** @deprecated use `TransactionRefundCreate$inboundSchema` instead. */
  export const inboundSchema = TransactionRefundCreate$inboundSchema;
  /** @deprecated use `TransactionRefundCreate$outboundSchema` instead. */
  export const outboundSchema = TransactionRefundCreate$outboundSchema;
  /** @deprecated use `TransactionRefundCreate$Outbound` instead. */
  export type Outbound = TransactionRefundCreate$Outbound;
}

export function transactionRefundCreateToJSON(
  transactionRefundCreate: TransactionRefundCreate,
): string {
  return JSON.stringify(
    TransactionRefundCreate$outboundSchema.parse(transactionRefundCreate),
  );
}

export function transactionRefundCreateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionRefundCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionRefundCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionRefundCreate' from JSON`,
  );
}
