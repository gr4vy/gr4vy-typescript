/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * An enumeration.
 */
export const RefundTargetType = {
    PaymentMethod: "payment-method",
    GiftCardRedemption: "gift-card-redemption",
} as const;
/**
 * An enumeration.
 */
export type RefundTargetType = ClosedEnum<typeof RefundTargetType>;

/**
 * Base model with JSON encoders.
 */
export type TransactionRefundCreate = {
    amount?: number | undefined;
    targetType?: RefundTargetType | undefined;
    targetId?: string | undefined;
    reason?: string | undefined;
};

/** @internal */
export const RefundTargetType$inboundSchema: z.ZodNativeEnum<typeof RefundTargetType> =
    z.nativeEnum(RefundTargetType);

/** @internal */
export const RefundTargetType$outboundSchema: z.ZodNativeEnum<typeof RefundTargetType> =
    RefundTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundTargetType$ {
    /** @deprecated use `RefundTargetType$inboundSchema` instead. */
    export const inboundSchema = RefundTargetType$inboundSchema;
    /** @deprecated use `RefundTargetType$outboundSchema` instead. */
    export const outboundSchema = RefundTargetType$outboundSchema;
}

/** @internal */
export const TransactionRefundCreate$inboundSchema: z.ZodType<
    TransactionRefundCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        amount: z.number().int().optional(),
        target_type: RefundTargetType$inboundSchema.default("payment-method"),
        target_id: z.string().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            target_type: "targetType",
            target_id: "targetId",
        });
    });

/** @internal */
export type TransactionRefundCreate$Outbound = {
    amount?: number | undefined;
    target_type: string;
    target_id?: string | undefined;
    reason?: string | undefined;
};

/** @internal */
export const TransactionRefundCreate$outboundSchema: z.ZodType<
    TransactionRefundCreate$Outbound,
    z.ZodTypeDef,
    TransactionRefundCreate
> = z
    .object({
        amount: z.number().int().optional(),
        targetType: RefundTargetType$outboundSchema.default("payment-method"),
        targetId: z.string().optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            targetType: "target_type",
            targetId: "target_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundCreate$ {
    /** @deprecated use `TransactionRefundCreate$inboundSchema` instead. */
    export const inboundSchema = TransactionRefundCreate$inboundSchema;
    /** @deprecated use `TransactionRefundCreate$outboundSchema` instead. */
    export const outboundSchema = TransactionRefundCreate$outboundSchema;
    /** @deprecated use `TransactionRefundCreate$Outbound` instead. */
    export type Outbound = TransactionRefundCreate$Outbound;
}
