/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The target type to refund for. This can be used to target a gift card to refund to instead of the main payment method.
 */
export const TransactionRefundCreateRefundTargetType = {
  PaymentMethod: "payment-method",
  GiftCardRedemption: "gift-card-redemption",
} as const;
/**
 * The target type to refund for. This can be used to target a gift card to refund to instead of the main payment method.
 */
export type TransactionRefundCreateRefundTargetType = ClosedEnum<
  typeof TransactionRefundCreateRefundTargetType
>;

/**
 * Base model with JSON encoders.
 */
export type TransactionRefundCreate = {
  /**
   * The amount requested to refund. If omitted, a full refund will be requested.
   */
  amount?: number | undefined;
  /**
   * The target type to refund for. This can be used to target a gift card to refund to instead of the main payment method.
   */
  targetType?: TransactionRefundCreateRefundTargetType | undefined;
  /**
   * The optional ID of the instrument to refund for. This is only required when the `target_type` is set to `gift-card-redemption`.
   */
  targetId?: string | undefined;
  /**
   * An optional reason to attach extra context to the refund request.
   */
  reason?: string | undefined;
  /**
   * An external identifier that can be used to match the refund against your own records.
   */
  externalIdentifier?: string | undefined;
};

/** @internal */
export const TransactionRefundCreateRefundTargetType$inboundSchema:
  z.ZodNativeEnum<typeof TransactionRefundCreateRefundTargetType> = z
    .nativeEnum(TransactionRefundCreateRefundTargetType);

/** @internal */
export const TransactionRefundCreateRefundTargetType$outboundSchema:
  z.ZodNativeEnum<typeof TransactionRefundCreateRefundTargetType> =
    TransactionRefundCreateRefundTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundCreateRefundTargetType$ {
  /** @deprecated use `TransactionRefundCreateRefundTargetType$inboundSchema` instead. */
  export const inboundSchema =
    TransactionRefundCreateRefundTargetType$inboundSchema;
  /** @deprecated use `TransactionRefundCreateRefundTargetType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionRefundCreateRefundTargetType$outboundSchema;
}

/** @internal */
export const TransactionRefundCreate$inboundSchema: z.ZodType<
  TransactionRefundCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  target_type: TransactionRefundCreateRefundTargetType$inboundSchema.default(
    "payment-method",
  ),
  target_id: z.string().optional(),
  reason: z.string().optional(),
  external_identifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "target_type": "targetType",
    "target_id": "targetId",
    "external_identifier": "externalIdentifier",
  });
});

/** @internal */
export type TransactionRefundCreate$Outbound = {
  amount?: number | undefined;
  target_type: string;
  target_id?: string | undefined;
  reason?: string | undefined;
  external_identifier?: string | undefined;
};

/** @internal */
export const TransactionRefundCreate$outboundSchema: z.ZodType<
  TransactionRefundCreate$Outbound,
  z.ZodTypeDef,
  TransactionRefundCreate
> = z.object({
  amount: z.number().int().optional(),
  targetType: TransactionRefundCreateRefundTargetType$outboundSchema.default(
    "payment-method",
  ),
  targetId: z.string().optional(),
  reason: z.string().optional(),
  externalIdentifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    targetType: "target_type",
    targetId: "target_id",
    externalIdentifier: "external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRefundCreate$ {
  /** @deprecated use `TransactionRefundCreate$inboundSchema` instead. */
  export const inboundSchema = TransactionRefundCreate$inboundSchema;
  /** @deprecated use `TransactionRefundCreate$outboundSchema` instead. */
  export const outboundSchema = TransactionRefundCreate$outboundSchema;
  /** @deprecated use `TransactionRefundCreate$Outbound` instead. */
  export type Outbound = TransactionRefundCreate$Outbound;
}

export function transactionRefundCreateToJSON(
  transactionRefundCreate: TransactionRefundCreate,
): string {
  return JSON.stringify(
    TransactionRefundCreate$outboundSchema.parse(transactionRefundCreate),
  );
}

export function transactionRefundCreateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionRefundCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionRefundCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionRefundCreate' from JSON`,
  );
}
