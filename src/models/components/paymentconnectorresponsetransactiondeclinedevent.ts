/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionDeclinedEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionDeclinedEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-declined`.
 */
export const PaymentConnectorResponseTransactionDeclinedEventName = {
    PaymentConnectorResponseTransactionDeclined: "payment-connector-response-transaction-declined",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-declined`.
 */
export type PaymentConnectorResponseTransactionDeclinedEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventName
>;

/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_declined`.
 */
export const PaymentConnectorResponseTransactionDeclinedEventStatus = {
    AuthorizationDeclined: "authorization_declined",
} as const;
/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_declined`.
 */
export type PaymentConnectorResponseTransactionDeclinedEventStatus = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventStatus
>;

/**
 * The type of instrument used for this transaction.
 */
export const PaymentConnectorResponseTransactionDeclinedEventInstrumentType = {
    Pan: "pan",
    CardToken: "card_token",
    Redirect: "redirect",
    RedirectToken: "redirect_token",
    Googlepay: "googlepay",
    Applepay: "applepay",
    NetworkToken: "network_token",
} as const;
/**
 * The type of instrument used for this transaction.
 */
export type PaymentConnectorResponseTransactionDeclinedEventInstrumentType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventInstrumentType
>;

/**
 * Defines why the transaction might be retried. A retry is not guaranteed because
 *
 * @remarks
 * the maximum number of retries might already have been attempted.
 *
 * * `failure` - the transaction will be retried because of a failure calling
 *   the payment service.
 * * `retriable_decline` - the transaction will be retried because a decline code
 *   was received that can be retried.
 * * `payment_method_replacement` - the transaction will be retried because a
 *   decline code was received that triggered a payment method replacement.
 */
export const RetryRule = {
    Failure: "failure",
    RetriableDecline: "retriable_decline",
    PaymentMethodReplacement: "payment_method_replacement",
} as const;
/**
 * Defines why the transaction might be retried. A retry is not guaranteed because
 *
 * @remarks
 * the maximum number of retries might already have been attempted.
 *
 * * `failure` - the transaction will be retried because of a failure calling
 *   the payment service.
 * * `retriable_decline` - the transaction will be retried because a decline code
 *   was received that can be retried.
 * * `payment_method_replacement` - the transaction will be retried because a
 *   decline code was received that triggered a payment method replacement.
 */
export type RetryRule = ClosedEnum<typeof RetryRule>;

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    PartialMatchAddress: "partial_match_address",
    PartialMatchPostcode: "partial_match_postcode",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode
>;

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode
>;

/**
 * The card scheme sent to the connector.
 */
export const PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The card scheme sent to the connector.
 */
export type PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme = ClosedEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme
>;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionDeclinedEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The new status code for the transaction. This is always
     *
     * @remarks
     * set to `authorization_declined`.
     */
    status?: PaymentConnectorResponseTransactionDeclinedEventStatus | undefined;
    /**
     * A raw response code returned for the decline.
     */
    code?: string | null | undefined;
    /**
     * The type of instrument used for this transaction.
     */
    instrumentType?: PaymentConnectorResponseTransactionDeclinedEventInstrumentType | undefined;
    /**
     * Defines why the transaction might be retried. A retry is not guaranteed because
     *
     * @remarks
     * the maximum number of retries might already have been attempted.
     *
     * * `failure` - the transaction will be retried because of a failure calling
     *   the payment service.
     * * `retriable_decline` - the transaction will be retried because a decline code
     *   was received that can be retried.
     * * `payment_method_replacement` - the transaction will be retried because a
     *   decline code was received that triggered a payment method replacement.
     */
    retryRule?: RetryRule | null | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a declined transaction
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionDeclinedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionDeclinedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-declined`.
     */
    name?: PaymentConnectorResponseTransactionDeclinedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionDeclinedEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventType);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventType
> = PaymentConnectorResponseTransactionDeclinedEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventType$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorResponseTransactionDeclinedEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventName);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventName
> = PaymentConnectorResponseTransactionDeclinedEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventName$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorResponseTransactionDeclinedEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventStatus$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventStatus
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventStatus);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventStatus$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventStatus
> = PaymentConnectorResponseTransactionDeclinedEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventStatus$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventStatus$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventStatus$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventStatus$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventStatus$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventInstrumentType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventInstrumentType
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventInstrumentType);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventInstrumentType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventInstrumentType
> = PaymentConnectorResponseTransactionDeclinedEventInstrumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventInstrumentType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventInstrumentType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventInstrumentType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventInstrumentType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventInstrumentType$outboundSchema;
}

/** @internal */
export const RetryRule$inboundSchema: z.ZodNativeEnum<typeof RetryRule> = z.nativeEnum(RetryRule);

/** @internal */
export const RetryRule$outboundSchema: z.ZodNativeEnum<typeof RetryRule> = RetryRule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryRule$ {
    /** @deprecated use `RetryRule$inboundSchema` instead. */
    export const inboundSchema = RetryRule$inboundSchema;
    /** @deprecated use `RetryRule$outboundSchema` instead. */
    export const outboundSchema = RetryRule$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode
> = PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode
> = PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme
> = z.nativeEnum(PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme);

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme
> = PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionDeclinedEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
        payment_service_transaction_id: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionDeclinedEventStatus$inboundSchema.optional(),
        code: z.nullable(z.string()).optional(),
        instrument_type:
            PaymentConnectorResponseTransactionDeclinedEventInstrumentType$inboundSchema.optional(),
        retry_rule: z.nullable(RetryRule$inboundSchema).optional(),
        raw_response_code: z.nullable(z.string()).optional(),
        raw_response_description: z.nullable(z.string()).optional(),
        avs_response_code: z
            .nullable(PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$inboundSchema)
            .optional(),
        cvv_response_code: z
            .nullable(PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$inboundSchema)
            .optional(),
        payment_method_scheme: z
            .nullable(
                PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            instrument_type: "instrumentType",
            retry_rule: "retryRule",
            raw_response_code: "rawResponseCode",
            raw_response_description: "rawResponseDescription",
            avs_response_code: "avsResponseCode",
            cvv_response_code: "cvvResponseCode",
            payment_method_scheme: "paymentMethodScheme",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionDeclinedEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
    payment_service_transaction_id?: string | null | undefined;
    status?: string | undefined;
    code?: string | null | undefined;
    instrument_type?: string | undefined;
    retry_rule?: string | null | undefined;
    raw_response_code?: string | null | undefined;
    raw_response_description?: string | null | undefined;
    avs_response_code?: string | null | undefined;
    cvv_response_code?: string | null | undefined;
    payment_method_scheme?: string | null | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionDeclinedEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionDeclinedEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
        paymentServiceTransactionId: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionDeclinedEventStatus$outboundSchema.optional(),
        code: z.nullable(z.string()).optional(),
        instrumentType:
            PaymentConnectorResponseTransactionDeclinedEventInstrumentType$outboundSchema.optional(),
        retryRule: z.nullable(RetryRule$outboundSchema).optional(),
        rawResponseCode: z.nullable(z.string()).optional(),
        rawResponseDescription: z.nullable(z.string()).optional(),
        avsResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionDeclinedEventAvsResponseCode$outboundSchema
            )
            .optional(),
        cvvResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionDeclinedEventCvvResponseCode$outboundSchema
            )
            .optional(),
        paymentMethodScheme: z
            .nullable(
                PaymentConnectorResponseTransactionDeclinedEventPaymentMethodScheme$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            instrumentType: "instrument_type",
            retryRule: "retry_rule",
            rawResponseCode: "raw_response_code",
            rawResponseDescription: "raw_response_description",
            avsResponseCode: "avs_response_code",
            cvvResponseCode: "cvv_response_code",
            paymentMethodScheme: "payment_method_scheme",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionDeclinedEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEventContext$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionDeclinedEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionDeclinedEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionDeclinedEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionDeclinedEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionDeclinedEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionDeclinedEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: PaymentConnectorResponseTransactionDeclinedEventContext$Outbound | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionDeclinedEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionDeclinedEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionDeclinedEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionDeclinedEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionDeclinedEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionDeclinedEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionDeclinedEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEvent$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorResponseTransactionDeclinedEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEvent$outboundSchema` instead. */
    export const outboundSchema = PaymentConnectorResponseTransactionDeclinedEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionDeclinedEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionDeclinedEvent$Outbound;
}
