/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `action`.
 */
export enum FlowPaymentOptionOutcomeType {
    Action = "action",
}

/**
 * Outcome for checkout flow/select payment options action.
 *
 * @remarks
 * Each option is a Gr4vy payment option object.
 */
export type FlowPaymentOptionOutcome = {
    /**
     * The type of this resource. Is always `action`.
     */
    type?: FlowPaymentOptionOutcomeType | undefined;
    /**
     * Payment option identifier.
     */
    id?: string | undefined;
    /**
     * Verbose payment option name.
     */
    label?: string | undefined;
    /**
     * The status of the payment option, true if at least one underlying
     *
     * @remarks
     * connection is active, otherwise false.
     */
    active?: boolean | undefined;
    /**
     * Optional group label for a given payment option, e.g. `Bank`.
     */
    group?: string | null | undefined;
    /**
     * Payment option icon URL.
     */
    iconUrl?: string | undefined;
};

/** @internal */
export const FlowPaymentOptionOutcomeType$ = z.nativeEnum(FlowPaymentOptionOutcomeType);

/** @internal */
export namespace FlowPaymentOptionOutcome$ {
    export type Inbound = {
        type?: FlowPaymentOptionOutcomeType | undefined;
        id?: string | undefined;
        label?: string | undefined;
        active?: boolean | undefined;
        group?: string | null | undefined;
        icon_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FlowPaymentOptionOutcome, z.ZodTypeDef, Inbound> = z
        .object({
            type: FlowPaymentOptionOutcomeType$.optional(),
            id: z.string().optional(),
            label: z.string().optional(),
            active: z.boolean().optional(),
            group: z.nullable(z.string()).optional(),
            icon_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.icon_url === undefined ? null : { iconUrl: v.icon_url }),
            };
        });

    export type Outbound = {
        type?: FlowPaymentOptionOutcomeType | undefined;
        id?: string | undefined;
        label?: string | undefined;
        active?: boolean | undefined;
        group?: string | null | undefined;
        icon_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowPaymentOptionOutcome> = z
        .object({
            type: FlowPaymentOptionOutcomeType$.optional(),
            id: z.string().optional(),
            label: z.string().optional(),
            active: z.boolean().optional(),
            group: z.nullable(z.string()).optional(),
            iconUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.iconUrl === undefined ? null : { icon_url: v.iconUrl }),
            };
        });
}
