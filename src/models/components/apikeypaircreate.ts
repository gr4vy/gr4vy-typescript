/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The algorithm to use for the API Key Pair. The recommended value is `ECDSA`.
 *
 * @remarks
 * You should only use the `RSA` algorithm in environments that do not support
 * `ECDSA`.
 */
export enum APIKeyPairCreateAlgorithm {
    Ecdsa = "ECDSA",
    Rsa = "RSA",
}

/**
 * A request to create an API key-pair.
 */
export type APIKeyPairCreate = {
    /**
     * A name for this key-pair which is used in the Gr4vy admin panel to give the key-pair a human readable name.
     */
    displayName?: string | undefined;
    /**
     * The algorithm to use for the API Key Pair. The recommended value is `ECDSA`.
     *
     * @remarks
     * You should only use the `RSA` algorithm in environments that do not support
     * `ECDSA`.
     */
    algorithm?: APIKeyPairCreateAlgorithm | undefined;
    /**
     * A list of role IDs that will be assigned to the API Key Pair being created.
     *
     * @remarks
     * Only the "Administrator" and "Integration" roles are supported.
     */
    roleIds?: Array<string> | undefined;
    /**
     * The optional ID of the merchant account this API Key Pair should be assigned to.
     *
     * @remarks
     * Leave this unset to create an API key that works across all merchant accounts.
     */
    merchantAccountId?: string | null | undefined;
};

/** @internal */
export const APIKeyPairCreateAlgorithm$ = z.nativeEnum(APIKeyPairCreateAlgorithm);

/** @internal */
export namespace APIKeyPairCreate$ {
    export type Inbound = {
        display_name?: string | undefined;
        algorithm?: APIKeyPairCreateAlgorithm | undefined;
        role_ids?: Array<string> | undefined;
        merchant_account_id?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<APIKeyPairCreate, z.ZodTypeDef, Inbound> = z
        .object({
            display_name: z.string().optional(),
            algorithm: APIKeyPairCreateAlgorithm$.default(APIKeyPairCreateAlgorithm.Ecdsa),
            role_ids: z.array(z.string()).optional(),
            merchant_account_id: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                algorithm: v.algorithm,
                ...(v.role_ids === undefined ? null : { roleIds: v.role_ids }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
            };
        });

    export type Outbound = {
        display_name?: string | undefined;
        algorithm: APIKeyPairCreateAlgorithm;
        role_ids?: Array<string> | undefined;
        merchant_account_id?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, APIKeyPairCreate> = z
        .object({
            displayName: z.string().optional(),
            algorithm: APIKeyPairCreateAlgorithm$.default(APIKeyPairCreateAlgorithm.Ecdsa),
            roleIds: z.array(z.string()).optional(),
            merchantAccountId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                algorithm: v.algorithm,
                ...(v.roleIds === undefined ? null : { role_ids: v.roleIds }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
            };
        });
}
