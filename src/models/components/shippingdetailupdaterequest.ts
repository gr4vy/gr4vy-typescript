/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The physical shipping address associated to this buyer.
 */
export type ShippingDetailUpdateRequestAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

export type ShippingDetailUpdateRequest = {
    /**
     * The first name(s) or given name for the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the buyer which should be formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The physical shipping address associated to this buyer.
     */
    address?: ShippingDetailUpdateRequestAddress | null | undefined;
};

/** @internal */
export namespace ShippingDetailUpdateRequestAddress$ {
    export const inboundSchema: z.ZodType<
        ShippingDetailUpdateRequestAddress,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postal_code: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                postal_code: "postalCode",
                state_code: "stateCode",
                house_number_or_name: "houseNumberOrName",
            });
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ShippingDetailUpdateRequestAddress
    > = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postalCode: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                postalCode: "postal_code",
                stateCode: "state_code",
                houseNumberOrName: "house_number_or_name",
            });
        });
}

/** @internal */
export namespace ShippingDetailUpdateRequest$ {
    export const inboundSchema: z.ZodType<ShippingDetailUpdateRequest, z.ZodTypeDef, unknown> = z
        .object({
            first_name: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            email_address: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            address: z
                .nullable(z.lazy(() => ShippingDetailUpdateRequestAddress$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                first_name: "firstName",
                last_name: "lastName",
                email_address: "emailAddress",
                phone_number: "phoneNumber",
            });
        });

    export type Outbound = {
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: ShippingDetailUpdateRequestAddress$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShippingDetailUpdateRequest> = z
        .object({
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z
                .nullable(z.lazy(() => ShippingDetailUpdateRequestAddress$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                lastName: "last_name",
                emailAddress: "email_address",
                phoneNumber: "phone_number",
            });
        });
}
