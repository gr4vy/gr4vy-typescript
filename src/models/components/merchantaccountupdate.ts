/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const MerchantAccountUpdateLoonAcceptedSchemes = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
export type MerchantAccountUpdateLoonAcceptedSchemes = ClosedEnum<
    typeof MerchantAccountUpdateLoonAcceptedSchemes
>;

/**
 * A request to update a merchant account.
 */
export type MerchantAccountUpdate = {
    /**
     * The human-readable name of the merchant account.
     */
    displayName?: string | undefined;
    /**
     * The optional URL where webhooks will be received.
     */
    outboundWebhookUrl?: string | null | undefined;
    /**
     * The optional username to use when `outbound_webhook_url` is configured and
     *
     * @remarks
     * requires basic authentication.
     */
    outboundWebhookUsername?: string | null | undefined;
    /**
     * The optional password to use when `outbound_webhook_url` is configured and
     *
     * @remarks
     * requires basic authentication.
     */
    outboundWebhookPassword?: string | null | undefined;
    /**
     * Requestor ID provided for Visa after onboarding to use Network Tokens.
     *
     * @remarks
     * The requestor ID must be unique across all schemes and merchant accounts.
     */
    visaNetworkTokensRequestorId?: string | null | undefined;
    /**
     * Application ID provided for Visa after onboarding to use Network
     *
     * @remarks
     * Tokens. The application ID must be unique across all schemes and merchant
     * accounts.
     */
    visaNetworkTokensAppId?: string | null | undefined;
    /**
     * Requestor ID provided for Amex after onboarding to use Network Tokens.
     *
     * @remarks
     * The requestor ID must be unique across all schemes and merchant accounts.
     */
    amexNetworkTokensRequestorId?: string | null | undefined;
    /**
     * Application ID provided for Amex after onboarding to use Network Tokens. The application ID must be unique across all schemes and merchant accounts.
     */
    amexNetworkTokensAppId?: string | null | undefined;
    /**
     * Requestor ID provided for Mastercard after onboarding to use Network
     *
     * @remarks
     * Tokens. The requestor ID must be unique across all schemes and merchant
     * accounts.
     */
    mastercardNetworkTokensRequestorId?: string | null | undefined;
    /**
     * Application ID provided for Mastercard after onboarding to use
     *
     * @remarks
     * Network Tokens. The application ID must be unique across all schemes and
     * merchant accounts.
     */
    mastercardNetworkTokensAppId?: string | null | undefined;
    /**
     * Client key provided by Pagos to authenticate to the Loon API.
     *
     * @remarks
     * Loon is the Account Updater service used by Gr4vy.
     *
     * * If the field is not set, the Account Updater service configuration is not updated.
     * * If the field is set to `null`, the Account Updater service is disabled.
     * * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
     */
    loonClientKey?: string | null | undefined;
    /**
     * Secret key provided by Pagos to authenticate to the Loon API.
     *
     * @remarks
     * Loon is the Account Updater service used by Gr4vy.
     *
     * * If the field is not set, the Account Updater service configuration is not updated.
     * * If the field is set to `null`, the Account Updater service is disabled.
     * * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
     */
    loonSecretKey?: string | null | undefined;
    /**
     * Card schemes accepted when creating jobs using this set of Loon API keys.
     *
     * @remarks
     * Loon is the Account Updater service used by Gr4vy.
     *
     * * If the field is not set, the Account Updater service configuration is not updated.
     * * If the field is set to `null`, the Account Updater service is disabled.
     * * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
     */
    loonAcceptedSchemes?: Array<MerchantAccountUpdateLoonAcceptedSchemes> | null | undefined;
};

/** @internal */
export const MerchantAccountUpdateLoonAcceptedSchemes$inboundSchema: z.ZodNativeEnum<
    typeof MerchantAccountUpdateLoonAcceptedSchemes
> = z.nativeEnum(MerchantAccountUpdateLoonAcceptedSchemes);

/** @internal */
export const MerchantAccountUpdateLoonAcceptedSchemes$outboundSchema: z.ZodNativeEnum<
    typeof MerchantAccountUpdateLoonAcceptedSchemes
> = MerchantAccountUpdateLoonAcceptedSchemes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantAccountUpdateLoonAcceptedSchemes$ {
    /** @deprecated use `MerchantAccountUpdateLoonAcceptedSchemes$inboundSchema` instead. */
    export const inboundSchema = MerchantAccountUpdateLoonAcceptedSchemes$inboundSchema;
    /** @deprecated use `MerchantAccountUpdateLoonAcceptedSchemes$outboundSchema` instead. */
    export const outboundSchema = MerchantAccountUpdateLoonAcceptedSchemes$outboundSchema;
}

/** @internal */
export const MerchantAccountUpdate$inboundSchema: z.ZodType<
    MerchantAccountUpdate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        display_name: z.string().optional(),
        outbound_webhook_url: z.nullable(z.string()).optional(),
        outbound_webhook_username: z.nullable(z.string()).optional(),
        outbound_webhook_password: z.nullable(z.string()).optional(),
        visa_network_tokens_requestor_id: z.nullable(z.string()).optional(),
        visa_network_tokens_app_id: z.nullable(z.string()).optional(),
        amex_network_tokens_requestor_id: z.nullable(z.string()).optional(),
        amex_network_tokens_app_id: z.nullable(z.string()).optional(),
        mastercard_network_tokens_requestor_id: z.nullable(z.string()).optional(),
        mastercard_network_tokens_app_id: z.nullable(z.string()).optional(),
        loon_client_key: z.nullable(z.string()).optional(),
        loon_secret_key: z.nullable(z.string()).optional(),
        loon_accepted_schemes: z
            .nullable(z.array(MerchantAccountUpdateLoonAcceptedSchemes$inboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
            outbound_webhook_url: "outboundWebhookUrl",
            outbound_webhook_username: "outboundWebhookUsername",
            outbound_webhook_password: "outboundWebhookPassword",
            visa_network_tokens_requestor_id: "visaNetworkTokensRequestorId",
            visa_network_tokens_app_id: "visaNetworkTokensAppId",
            amex_network_tokens_requestor_id: "amexNetworkTokensRequestorId",
            amex_network_tokens_app_id: "amexNetworkTokensAppId",
            mastercard_network_tokens_requestor_id: "mastercardNetworkTokensRequestorId",
            mastercard_network_tokens_app_id: "mastercardNetworkTokensAppId",
            loon_client_key: "loonClientKey",
            loon_secret_key: "loonSecretKey",
            loon_accepted_schemes: "loonAcceptedSchemes",
        });
    });

/** @internal */
export type MerchantAccountUpdate$Outbound = {
    display_name?: string | undefined;
    outbound_webhook_url?: string | null | undefined;
    outbound_webhook_username?: string | null | undefined;
    outbound_webhook_password?: string | null | undefined;
    visa_network_tokens_requestor_id?: string | null | undefined;
    visa_network_tokens_app_id?: string | null | undefined;
    amex_network_tokens_requestor_id?: string | null | undefined;
    amex_network_tokens_app_id?: string | null | undefined;
    mastercard_network_tokens_requestor_id?: string | null | undefined;
    mastercard_network_tokens_app_id?: string | null | undefined;
    loon_client_key?: string | null | undefined;
    loon_secret_key?: string | null | undefined;
    loon_accepted_schemes?: Array<string> | null | undefined;
};

/** @internal */
export const MerchantAccountUpdate$outboundSchema: z.ZodType<
    MerchantAccountUpdate$Outbound,
    z.ZodTypeDef,
    MerchantAccountUpdate
> = z
    .object({
        displayName: z.string().optional(),
        outboundWebhookUrl: z.nullable(z.string()).optional(),
        outboundWebhookUsername: z.nullable(z.string()).optional(),
        outboundWebhookPassword: z.nullable(z.string()).optional(),
        visaNetworkTokensRequestorId: z.nullable(z.string()).optional(),
        visaNetworkTokensAppId: z.nullable(z.string()).optional(),
        amexNetworkTokensRequestorId: z.nullable(z.string()).optional(),
        amexNetworkTokensAppId: z.nullable(z.string()).optional(),
        mastercardNetworkTokensRequestorId: z.nullable(z.string()).optional(),
        mastercardNetworkTokensAppId: z.nullable(z.string()).optional(),
        loonClientKey: z.nullable(z.string()).optional(),
        loonSecretKey: z.nullable(z.string()).optional(),
        loonAcceptedSchemes: z
            .nullable(z.array(MerchantAccountUpdateLoonAcceptedSchemes$outboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
            outboundWebhookUrl: "outbound_webhook_url",
            outboundWebhookUsername: "outbound_webhook_username",
            outboundWebhookPassword: "outbound_webhook_password",
            visaNetworkTokensRequestorId: "visa_network_tokens_requestor_id",
            visaNetworkTokensAppId: "visa_network_tokens_app_id",
            amexNetworkTokensRequestorId: "amex_network_tokens_requestor_id",
            amexNetworkTokensAppId: "amex_network_tokens_app_id",
            mastercardNetworkTokensRequestorId: "mastercard_network_tokens_requestor_id",
            mastercardNetworkTokensAppId: "mastercard_network_tokens_app_id",
            loonClientKey: "loon_client_key",
            loonSecretKey: "loon_secret_key",
            loonAcceptedSchemes: "loon_accepted_schemes",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantAccountUpdate$ {
    /** @deprecated use `MerchantAccountUpdate$inboundSchema` instead. */
    export const inboundSchema = MerchantAccountUpdate$inboundSchema;
    /** @deprecated use `MerchantAccountUpdate$outboundSchema` instead. */
    export const outboundSchema = MerchantAccountUpdate$outboundSchema;
    /** @deprecated use `MerchantAccountUpdate$Outbound` instead. */
    export type Outbound = MerchantAccountUpdate$Outbound;
}
