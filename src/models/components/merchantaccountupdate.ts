/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { CardScheme, CardScheme$inboundSchema, CardScheme$outboundSchema } from "./cardscheme.js";
import * as z from "zod";

/**
 * Base model with JSON encoders.
 */
export type MerchantAccountUpdate = {
    loonClientKey?: string | undefined;
    loonSecretKey?: string | undefined;
    loonAcceptedSchemes?: Array<CardScheme> | undefined;
    visaNetworkTokensRequestorId?: string | undefined;
    visaNetworkTokensAppId?: string | undefined;
    amexNetworkTokensRequestorId?: string | undefined;
    amexNetworkTokensAppId?: string | undefined;
    mastercardNetworkTokensRequestorId?: string | undefined;
    mastercardNetworkTokensAppId?: string | undefined;
    displayName?: string | undefined;
    outboundWebhookUrl?: string | undefined;
    outboundWebhookUsername?: string | undefined;
    outboundWebhookPassword?: string | undefined;
};

/** @internal */
export const MerchantAccountUpdate$inboundSchema: z.ZodType<
    MerchantAccountUpdate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        loon_client_key: z.string().optional(),
        loon_secret_key: z.string().optional(),
        loon_accepted_schemes: z.array(CardScheme$inboundSchema).optional(),
        visa_network_tokens_requestor_id: z.string().optional(),
        visa_network_tokens_app_id: z.string().optional(),
        amex_network_tokens_requestor_id: z.string().optional(),
        amex_network_tokens_app_id: z.string().optional(),
        mastercard_network_tokens_requestor_id: z.string().optional(),
        mastercard_network_tokens_app_id: z.string().optional(),
        display_name: z.string().optional(),
        outbound_webhook_url: z.string().optional(),
        outbound_webhook_username: z.string().optional(),
        outbound_webhook_password: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            loon_client_key: "loonClientKey",
            loon_secret_key: "loonSecretKey",
            loon_accepted_schemes: "loonAcceptedSchemes",
            visa_network_tokens_requestor_id: "visaNetworkTokensRequestorId",
            visa_network_tokens_app_id: "visaNetworkTokensAppId",
            amex_network_tokens_requestor_id: "amexNetworkTokensRequestorId",
            amex_network_tokens_app_id: "amexNetworkTokensAppId",
            mastercard_network_tokens_requestor_id: "mastercardNetworkTokensRequestorId",
            mastercard_network_tokens_app_id: "mastercardNetworkTokensAppId",
            display_name: "displayName",
            outbound_webhook_url: "outboundWebhookUrl",
            outbound_webhook_username: "outboundWebhookUsername",
            outbound_webhook_password: "outboundWebhookPassword",
        });
    });

/** @internal */
export type MerchantAccountUpdate$Outbound = {
    loon_client_key?: string | undefined;
    loon_secret_key?: string | undefined;
    loon_accepted_schemes?: Array<string> | undefined;
    visa_network_tokens_requestor_id?: string | undefined;
    visa_network_tokens_app_id?: string | undefined;
    amex_network_tokens_requestor_id?: string | undefined;
    amex_network_tokens_app_id?: string | undefined;
    mastercard_network_tokens_requestor_id?: string | undefined;
    mastercard_network_tokens_app_id?: string | undefined;
    display_name?: string | undefined;
    outbound_webhook_url?: string | undefined;
    outbound_webhook_username?: string | undefined;
    outbound_webhook_password?: string | undefined;
};

/** @internal */
export const MerchantAccountUpdate$outboundSchema: z.ZodType<
    MerchantAccountUpdate$Outbound,
    z.ZodTypeDef,
    MerchantAccountUpdate
> = z
    .object({
        loonClientKey: z.string().optional(),
        loonSecretKey: z.string().optional(),
        loonAcceptedSchemes: z.array(CardScheme$outboundSchema).optional(),
        visaNetworkTokensRequestorId: z.string().optional(),
        visaNetworkTokensAppId: z.string().optional(),
        amexNetworkTokensRequestorId: z.string().optional(),
        amexNetworkTokensAppId: z.string().optional(),
        mastercardNetworkTokensRequestorId: z.string().optional(),
        mastercardNetworkTokensAppId: z.string().optional(),
        displayName: z.string().optional(),
        outboundWebhookUrl: z.string().optional(),
        outboundWebhookUsername: z.string().optional(),
        outboundWebhookPassword: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            loonClientKey: "loon_client_key",
            loonSecretKey: "loon_secret_key",
            loonAcceptedSchemes: "loon_accepted_schemes",
            visaNetworkTokensRequestorId: "visa_network_tokens_requestor_id",
            visaNetworkTokensAppId: "visa_network_tokens_app_id",
            amexNetworkTokensRequestorId: "amex_network_tokens_requestor_id",
            amexNetworkTokensAppId: "amex_network_tokens_app_id",
            mastercardNetworkTokensRequestorId: "mastercard_network_tokens_requestor_id",
            mastercardNetworkTokensAppId: "mastercard_network_tokens_app_id",
            displayName: "display_name",
            outboundWebhookUrl: "outbound_webhook_url",
            outboundWebhookUsername: "outbound_webhook_username",
            outboundWebhookPassword: "outbound_webhook_password",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantAccountUpdate$ {
    /** @deprecated use `MerchantAccountUpdate$inboundSchema` instead. */
    export const inboundSchema = MerchantAccountUpdate$inboundSchema;
    /** @deprecated use `MerchantAccountUpdate$outboundSchema` instead. */
    export const outboundSchema = MerchantAccountUpdate$outboundSchema;
    /** @deprecated use `MerchantAccountUpdate$Outbound` instead. */
    export type Outbound = MerchantAccountUpdate$Outbound;
}
