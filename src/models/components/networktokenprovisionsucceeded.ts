/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const NetworkTokenProvisionSucceededType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type NetworkTokenProvisionSucceededType = ClosedEnum<
    typeof NetworkTokenProvisionSucceededType
>;

/**
 * The name of this resource. Is always `network-token-provision-succeeded`.
 */
export const NetworkTokenProvisionSucceededName = {
    NetworkTokenProvisionSucceeded: "network-token-provision-succeeded",
} as const;
/**
 * The name of this resource. Is always `network-token-provision-succeeded`.
 */
export type NetworkTokenProvisionSucceededName = ClosedEnum<
    typeof NetworkTokenProvisionSucceededName
>;

/**
 * Additional context for this event.
 */
export type NetworkTokenProvisionSucceededContext = {
    /**
     * The endpoint for the request.
     */
    url?: string | undefined;
    /**
     * The HTTP body sent to the Network Token provider.
     */
    request?: string | undefined;
    /**
     * The HTTP body received from the Network Token provider.
     */
    response?: string | undefined;
    /**
     * The HTTP response status code from the Network Token provider.
     */
    responseStatusCode?: number | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to provision a network token, in case the call succeeded.
 */
export type NetworkTokenProvisionSucceeded = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: NetworkTokenProvisionSucceededType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `network-token-provision-succeeded`.
     */
    name?: NetworkTokenProvisionSucceededName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: NetworkTokenProvisionSucceededContext | undefined;
};

/** @internal */
export const NetworkTokenProvisionSucceededType$inboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionSucceededType
> = z.nativeEnum(NetworkTokenProvisionSucceededType);

/** @internal */
export const NetworkTokenProvisionSucceededType$outboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionSucceededType
> = NetworkTokenProvisionSucceededType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionSucceededType$ {
    /** @deprecated use `NetworkTokenProvisionSucceededType$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionSucceededType$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionSucceededType$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionSucceededType$outboundSchema;
}

/** @internal */
export const NetworkTokenProvisionSucceededName$inboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionSucceededName
> = z.nativeEnum(NetworkTokenProvisionSucceededName);

/** @internal */
export const NetworkTokenProvisionSucceededName$outboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionSucceededName
> = NetworkTokenProvisionSucceededName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionSucceededName$ {
    /** @deprecated use `NetworkTokenProvisionSucceededName$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionSucceededName$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionSucceededName$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionSucceededName$outboundSchema;
}

/** @internal */
export const NetworkTokenProvisionSucceededContext$inboundSchema: z.ZodType<
    NetworkTokenProvisionSucceededContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type NetworkTokenProvisionSucceededContext$Outbound = {
    url?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
};

/** @internal */
export const NetworkTokenProvisionSucceededContext$outboundSchema: z.ZodType<
    NetworkTokenProvisionSucceededContext$Outbound,
    z.ZodTypeDef,
    NetworkTokenProvisionSucceededContext
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionSucceededContext$ {
    /** @deprecated use `NetworkTokenProvisionSucceededContext$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionSucceededContext$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionSucceededContext$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionSucceededContext$outboundSchema;
    /** @deprecated use `NetworkTokenProvisionSucceededContext$Outbound` instead. */
    export type Outbound = NetworkTokenProvisionSucceededContext$Outbound;
}

/** @internal */
export const NetworkTokenProvisionSucceeded$inboundSchema: z.ZodType<
    NetworkTokenProvisionSucceeded,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: NetworkTokenProvisionSucceededType$inboundSchema.optional(),
        id: z.string().optional(),
        name: NetworkTokenProvisionSucceededName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => NetworkTokenProvisionSucceededContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type NetworkTokenProvisionSucceeded$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: NetworkTokenProvisionSucceededContext$Outbound | undefined;
};

/** @internal */
export const NetworkTokenProvisionSucceeded$outboundSchema: z.ZodType<
    NetworkTokenProvisionSucceeded$Outbound,
    z.ZodTypeDef,
    NetworkTokenProvisionSucceeded
> = z
    .object({
        type: NetworkTokenProvisionSucceededType$outboundSchema.optional(),
        id: z.string().optional(),
        name: NetworkTokenProvisionSucceededName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => NetworkTokenProvisionSucceededContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionSucceeded$ {
    /** @deprecated use `NetworkTokenProvisionSucceeded$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionSucceeded$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionSucceeded$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionSucceeded$outboundSchema;
    /** @deprecated use `NetworkTokenProvisionSucceeded$Outbound` instead. */
    export type Outbound = NetworkTokenProvisionSucceeded$Outbound;
}
