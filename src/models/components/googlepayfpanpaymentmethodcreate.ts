/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a Google Pay payment with an FPAN.
 */
export type GooglePayFPANPaymentMethodCreate = {
  /**
   * The expiration date of the card, formatted `MM/YY`.
   */
  expirationDate: string;
  /**
   * The 13-19 digit number for this card.
   */
  number: string;
  /**
   * The external identifier of the buyer to attach the method to.
   */
  buyerExternalIdentifier?: string | null | undefined;
  /**
   * The ID of the buyer to attach the method to.
   */
  buyerId?: string | null | undefined;
  /**
   * The merchant reference for this payment method.
   */
  externalIdentifier?: string | null | undefined;
  /**
   * The type of the card used
   */
  cardType?: string | null | undefined;
  /**
   * Aways `googlepay_pan_only`.
   */
  method?: "googlepay_pan_only" | undefined;
  /**
   * The URL to redirect a user back to after the complete 3DS in browser.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
   */
  securityCode?: any | null | undefined;
};

/** @internal */
export const GooglePayFPANPaymentMethodCreate$inboundSchema: z.ZodType<
  GooglePayFPANPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiration_date: z.string(),
  number: z.string(),
  buyer_external_identifier: z.nullable(z.string()).optional(),
  buyer_id: z.nullable(z.string()).optional(),
  external_identifier: z.nullable(z.string()).optional(),
  card_type: z.nullable(z.string()).optional(),
  method: z.literal("googlepay_pan_only").optional(),
  redirect_url: z.nullable(z.string()).optional(),
  security_code: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expiration_date": "expirationDate",
    "buyer_external_identifier": "buyerExternalIdentifier",
    "buyer_id": "buyerId",
    "external_identifier": "externalIdentifier",
    "card_type": "cardType",
    "redirect_url": "redirectUrl",
    "security_code": "securityCode",
  });
});

/** @internal */
export type GooglePayFPANPaymentMethodCreate$Outbound = {
  expiration_date: string;
  number: string;
  buyer_external_identifier?: string | null | undefined;
  buyer_id?: string | null | undefined;
  external_identifier?: string | null | undefined;
  card_type?: string | null | undefined;
  method: "googlepay_pan_only";
  redirect_url?: string | null | undefined;
  security_code?: any | null | undefined;
};

/** @internal */
export const GooglePayFPANPaymentMethodCreate$outboundSchema: z.ZodType<
  GooglePayFPANPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  GooglePayFPANPaymentMethodCreate
> = z.object({
  expirationDate: z.string(),
  number: z.string(),
  buyerExternalIdentifier: z.nullable(z.string()).optional(),
  buyerId: z.nullable(z.string()).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
  cardType: z.nullable(z.string()).optional(),
  method: z.literal("googlepay_pan_only").default(
    "googlepay_pan_only" as const,
  ),
  redirectUrl: z.nullable(z.string()).optional(),
  securityCode: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    expirationDate: "expiration_date",
    buyerExternalIdentifier: "buyer_external_identifier",
    buyerId: "buyer_id",
    externalIdentifier: "external_identifier",
    cardType: "card_type",
    redirectUrl: "redirect_url",
    securityCode: "security_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GooglePayFPANPaymentMethodCreate$ {
  /** @deprecated use `GooglePayFPANPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = GooglePayFPANPaymentMethodCreate$inboundSchema;
  /** @deprecated use `GooglePayFPANPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = GooglePayFPANPaymentMethodCreate$outboundSchema;
  /** @deprecated use `GooglePayFPANPaymentMethodCreate$Outbound` instead. */
  export type Outbound = GooglePayFPANPaymentMethodCreate$Outbound;
}

export function googlePayFPANPaymentMethodCreateToJSON(
  googlePayFPANPaymentMethodCreate: GooglePayFPANPaymentMethodCreate,
): string {
  return JSON.stringify(
    GooglePayFPANPaymentMethodCreate$outboundSchema.parse(
      googlePayFPANPaymentMethodCreate,
    ),
  );
}

export function googlePayFPANPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<GooglePayFPANPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GooglePayFPANPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GooglePayFPANPaymentMethodCreate' from JSON`,
  );
}
