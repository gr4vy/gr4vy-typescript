/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OxxoOptions = {
  /**
   * Defines a custom expiration time (unix time) after which Oxxo payment requests are cancelled
   */
  paymentMethodExpiresAt?: number | null | undefined;
  /**
   * Approval URL that will receive a charge payment method reference.
   */
  approvalUrl?: string | null | undefined;
};

/** @internal */
export const OxxoOptions$inboundSchema: z.ZodType<
  OxxoOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method_expires_at: z.nullable(z.number().int()).optional(),
  approval_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_method_expires_at": "paymentMethodExpiresAt",
    "approval_url": "approvalUrl",
  });
});

/** @internal */
export type OxxoOptions$Outbound = {
  payment_method_expires_at?: number | null | undefined;
  approval_url?: string | null | undefined;
};

/** @internal */
export const OxxoOptions$outboundSchema: z.ZodType<
  OxxoOptions$Outbound,
  z.ZodTypeDef,
  OxxoOptions
> = z.object({
  paymentMethodExpiresAt: z.nullable(z.number().int()).optional(),
  approvalUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentMethodExpiresAt: "payment_method_expires_at",
    approvalUrl: "approval_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OxxoOptions$ {
  /** @deprecated use `OxxoOptions$inboundSchema` instead. */
  export const inboundSchema = OxxoOptions$inboundSchema;
  /** @deprecated use `OxxoOptions$outboundSchema` instead. */
  export const outboundSchema = OxxoOptions$outboundSchema;
  /** @deprecated use `OxxoOptions$Outbound` instead. */
  export type Outbound = OxxoOptions$Outbound;
}

export function oxxoOptionsToJSON(oxxoOptions: OxxoOptions): string {
  return JSON.stringify(OxxoOptions$outboundSchema.parse(oxxoOptions));
}

export function oxxoOptionsFromJSON(
  jsonString: string,
): SafeParseResult<OxxoOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OxxoOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OxxoOptions' from JSON`,
  );
}
