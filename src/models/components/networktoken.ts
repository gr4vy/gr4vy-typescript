/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource.
 */
export enum NetworkTokenType {
    NetworkToken = "network-token",
}

/**
 * The state of the network token.
 *
 * @remarks
 *
 * - `active` - The network token is active and ready to be used.
 * - `inactive` - The network token is being deactivated.
 * - `suspended` - The network token is suspended.
 * - `deleted` - The network token is deleted.
 */
export enum NetworkTokenStatus {
    Active = "active",
    Inactive = "inactive",
    Suspended = "suspended",
    Deleted = "deleted",
}

/**
 * A network token generated by an open-loop PSP.
 */
export type NetworkToken = {
    /**
     * The type of this resource.
     */
    type?: NetworkTokenType | undefined;
    /**
     * The unique ID of the token.
     */
    id?: string | undefined;
    /**
     * The unique ID of the payment method.
     */
    paymentMethodId?: string | undefined;
    /**
     * The state of the network token.
     *
     * @remarks
     *
     * - `active` - The network token is active and ready to be used.
     * - `inactive` - The network token is being deactivated.
     * - `suspended` - The network token is suspended.
     * - `deleted` - The network token is deleted.
     */
    status?: NetworkTokenStatus | undefined;
    /**
     * The value of the network token.
     */
    token?: string | undefined;
    /**
     * The expiration date for the network token.
     */
    expirationDate?: string | null | undefined;
    /**
     * The date and time when this network token was first created in our
     *
     * @remarks
     * system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this network token was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace NetworkTokenType$ {
    export const inboundSchema = z.nativeEnum(NetworkTokenType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace NetworkTokenStatus$ {
    export const inboundSchema = z.nativeEnum(NetworkTokenStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace NetworkToken$ {
    export const inboundSchema: z.ZodType<NetworkToken, z.ZodTypeDef, unknown> = z
        .object({
            type: NetworkTokenType$.inboundSchema.optional(),
            id: z.string().optional(),
            payment_method_id: z.string().optional(),
            status: NetworkTokenStatus$.inboundSchema.optional(),
            token: z.string().optional(),
            expiration_date: z.nullable(z.string()).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_method_id: "paymentMethodId",
                expiration_date: "expirationDate",
                created_at: "createdAt",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        payment_method_id?: string | undefined;
        status?: string | undefined;
        token?: string | undefined;
        expiration_date?: string | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NetworkToken> = z
        .object({
            type: NetworkTokenType$.outboundSchema.optional(),
            id: z.string().optional(),
            paymentMethodId: z.string().optional(),
            status: NetworkTokenStatus$.outboundSchema.optional(),
            token: z.string().optional(),
            expirationDate: z.nullable(z.string()).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                paymentMethodId: "payment_method_id",
                expirationDate: "expiration_date",
                createdAt: "created_at",
                updatedAt: "updated_at",
            });
        });
}
