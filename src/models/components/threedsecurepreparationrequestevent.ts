/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const ThreeDSecurePreparationRequestEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type ThreeDSecurePreparationRequestEventType = ClosedEnum<
    typeof ThreeDSecurePreparationRequestEventType
>;

/**
 * The name of this resource. Is always `three-d-secure-preparation-request`.
 */
export const ThreeDSecurePreparationRequestEventName = {
    ThreeDSecurePreparationRequest: "three-d-secure-preparation-request",
} as const;
/**
 * The name of this resource. Is always `three-d-secure-preparation-request`.
 */
export type ThreeDSecurePreparationRequestEventName = ClosedEnum<
    typeof ThreeDSecurePreparationRequestEventName
>;

/**
 * 3DS pre-authentication context.
 */
export type ThreeDSecurePreparationRequestEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The request body sent to the `url`.
     */
    request?: string | undefined;
    /**
     * The response body received from the `url`.
     */
    response?: string | undefined;
    /**
     * The response status code received from the `url`.
     */
    responseStatusCode?: number | undefined;
    /**
     * If the card is enrolled for 3DS.
     */
    isEnrolled?: boolean | undefined;
    /**
     * The version of 3DS extracted from the `response.
     */
    version?: string | undefined;
};

/**
 * The result and raw data for a 3DS pre-authorization call.
 */
export type ThreeDSecurePreparationRequestEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecurePreparationRequestEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-preparation-request`.
     */
    name?: ThreeDSecurePreparationRequestEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS pre-authentication context.
     */
    context?: ThreeDSecurePreparationRequestEventContext | undefined;
};

/** @internal */
export const ThreeDSecurePreparationRequestEventType$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecurePreparationRequestEventType
> = z.nativeEnum(ThreeDSecurePreparationRequestEventType);

/** @internal */
export const ThreeDSecurePreparationRequestEventType$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecurePreparationRequestEventType
> = ThreeDSecurePreparationRequestEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecurePreparationRequestEventType$ {
    /** @deprecated use `ThreeDSecurePreparationRequestEventType$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecurePreparationRequestEventType$inboundSchema;
    /** @deprecated use `ThreeDSecurePreparationRequestEventType$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecurePreparationRequestEventType$outboundSchema;
}

/** @internal */
export const ThreeDSecurePreparationRequestEventName$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecurePreparationRequestEventName
> = z.nativeEnum(ThreeDSecurePreparationRequestEventName);

/** @internal */
export const ThreeDSecurePreparationRequestEventName$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecurePreparationRequestEventName
> = ThreeDSecurePreparationRequestEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecurePreparationRequestEventName$ {
    /** @deprecated use `ThreeDSecurePreparationRequestEventName$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecurePreparationRequestEventName$inboundSchema;
    /** @deprecated use `ThreeDSecurePreparationRequestEventName$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecurePreparationRequestEventName$outboundSchema;
}

/** @internal */
export const ThreeDSecurePreparationRequestEventContext$inboundSchema: z.ZodType<
    ThreeDSecurePreparationRequestEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        response_status_code: z.number().int().optional(),
        is_enrolled: z.boolean().optional(),
        version: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            response_status_code: "responseStatusCode",
            is_enrolled: "isEnrolled",
        });
    });

/** @internal */
export type ThreeDSecurePreparationRequestEventContext$Outbound = {
    url?: string | undefined;
    request?: string | undefined;
    response?: string | undefined;
    response_status_code?: number | undefined;
    is_enrolled?: boolean | undefined;
    version?: string | undefined;
};

/** @internal */
export const ThreeDSecurePreparationRequestEventContext$outboundSchema: z.ZodType<
    ThreeDSecurePreparationRequestEventContext$Outbound,
    z.ZodTypeDef,
    ThreeDSecurePreparationRequestEventContext
> = z
    .object({
        url: z.string().optional(),
        request: z.string().optional(),
        response: z.string().optional(),
        responseStatusCode: z.number().int().optional(),
        isEnrolled: z.boolean().optional(),
        version: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            responseStatusCode: "response_status_code",
            isEnrolled: "is_enrolled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecurePreparationRequestEventContext$ {
    /** @deprecated use `ThreeDSecurePreparationRequestEventContext$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecurePreparationRequestEventContext$inboundSchema;
    /** @deprecated use `ThreeDSecurePreparationRequestEventContext$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecurePreparationRequestEventContext$outboundSchema;
    /** @deprecated use `ThreeDSecurePreparationRequestEventContext$Outbound` instead. */
    export type Outbound = ThreeDSecurePreparationRequestEventContext$Outbound;
}

/** @internal */
export const ThreeDSecurePreparationRequestEvent$inboundSchema: z.ZodType<
    ThreeDSecurePreparationRequestEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: ThreeDSecurePreparationRequestEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecurePreparationRequestEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => ThreeDSecurePreparationRequestEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type ThreeDSecurePreparationRequestEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: ThreeDSecurePreparationRequestEventContext$Outbound | undefined;
};

/** @internal */
export const ThreeDSecurePreparationRequestEvent$outboundSchema: z.ZodType<
    ThreeDSecurePreparationRequestEvent$Outbound,
    z.ZodTypeDef,
    ThreeDSecurePreparationRequestEvent
> = z
    .object({
        type: ThreeDSecurePreparationRequestEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecurePreparationRequestEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => ThreeDSecurePreparationRequestEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecurePreparationRequestEvent$ {
    /** @deprecated use `ThreeDSecurePreparationRequestEvent$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecurePreparationRequestEvent$inboundSchema;
    /** @deprecated use `ThreeDSecurePreparationRequestEvent$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecurePreparationRequestEvent$outboundSchema;
    /** @deprecated use `ThreeDSecurePreparationRequestEvent$Outbound` instead. */
    export type Outbound = ThreeDSecurePreparationRequestEvent$Outbound;
}
