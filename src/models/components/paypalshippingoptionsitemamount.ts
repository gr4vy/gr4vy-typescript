/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaypalShippingOptionsItemAmount = {
  /**
   * The three-character ISO currency code.
   */
  currencyCode: string;
  /**
   * The amount value, which might include a decimal portion.
   */
  value: string;
};

/** @internal */
export const PaypalShippingOptionsItemAmount$inboundSchema: z.ZodType<
  PaypalShippingOptionsItemAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency_code: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PaypalShippingOptionsItemAmount$Outbound = {
  currency_code: string;
  value: string;
};

/** @internal */
export const PaypalShippingOptionsItemAmount$outboundSchema: z.ZodType<
  PaypalShippingOptionsItemAmount$Outbound,
  z.ZodTypeDef,
  PaypalShippingOptionsItemAmount
> = z.object({
  currencyCode: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaypalShippingOptionsItemAmount$ {
  /** @deprecated use `PaypalShippingOptionsItemAmount$inboundSchema` instead. */
  export const inboundSchema = PaypalShippingOptionsItemAmount$inboundSchema;
  /** @deprecated use `PaypalShippingOptionsItemAmount$outboundSchema` instead. */
  export const outboundSchema = PaypalShippingOptionsItemAmount$outboundSchema;
  /** @deprecated use `PaypalShippingOptionsItemAmount$Outbound` instead. */
  export type Outbound = PaypalShippingOptionsItemAmount$Outbound;
}

export function paypalShippingOptionsItemAmountToJSON(
  paypalShippingOptionsItemAmount: PaypalShippingOptionsItemAmount,
): string {
  return JSON.stringify(
    PaypalShippingOptionsItemAmount$outboundSchema.parse(
      paypalShippingOptionsItemAmount,
    ),
  );
}

export function paypalShippingOptionsItemAmountFromJSON(
  jsonString: string,
): SafeParseResult<PaypalShippingOptionsItemAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaypalShippingOptionsItemAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaypalShippingOptionsItemAmount' from JSON`,
  );
}
