/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    CybersourceCreate,
    CybersourceCreate$inboundSchema,
    CybersourceCreate$Outbound,
    CybersourceCreate$outboundSchema,
} from "./cybersourcecreate.js";
import {
    ForterCreate,
    ForterCreate$inboundSchema,
    ForterCreate$Outbound,
    ForterCreate$outboundSchema,
} from "./fortercreate.js";
import {
    KountCreate,
    KountCreate$inboundSchema,
    KountCreate$Outbound,
    KountCreate$outboundSchema,
} from "./kountcreate.js";
import {
    SiftCreate,
    SiftCreate$inboundSchema,
    SiftCreate$Outbound,
    SiftCreate$outboundSchema,
} from "./siftcreate.js";
import {
    SimulatorCreate,
    SimulatorCreate$inboundSchema,
    SimulatorCreate$Outbound,
    SimulatorCreate$outboundSchema,
} from "./simulatorcreate.js";
import * as z from "zod";

export type AntiFraudServiceCreate =
    | (CybersourceCreate & { antiFraudServiceDefinitionId: "cybersource-anti-fraud" })
    | (SiftCreate & { antiFraudServiceDefinitionId: "sift-anti-fraud" })
    | (ForterCreate & { antiFraudServiceDefinitionId: "forter-anti-fraud" })
    | (KountCreate & { antiFraudServiceDefinitionId: "kount-anti-fraud" })
    | (SimulatorCreate & { antiFraudServiceDefinitionId: "mock-anti-fraud" });

/** @internal */
export const AntiFraudServiceCreate$inboundSchema: z.ZodType<
    AntiFraudServiceCreate,
    z.ZodTypeDef,
    unknown
> = z.union([
    CybersourceCreate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("cybersource-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    SiftCreate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("sift-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    ForterCreate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("forter-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    KountCreate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("kount-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
    SimulatorCreate$inboundSchema.and(
        z
            .object({ anti_fraud_service_definition_id: z.literal("mock-anti-fraud") })
            .transform((v) => ({
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
            }))
    ),
]);

/** @internal */
export type AntiFraudServiceCreate$Outbound =
    | (CybersourceCreate$Outbound & { anti_fraud_service_definition_id: "cybersource-anti-fraud" })
    | (SiftCreate$Outbound & { anti_fraud_service_definition_id: "sift-anti-fraud" })
    | (ForterCreate$Outbound & { anti_fraud_service_definition_id: "forter-anti-fraud" })
    | (KountCreate$Outbound & { anti_fraud_service_definition_id: "kount-anti-fraud" })
    | (SimulatorCreate$Outbound & { anti_fraud_service_definition_id: "mock-anti-fraud" });

/** @internal */
export const AntiFraudServiceCreate$outboundSchema: z.ZodType<
    AntiFraudServiceCreate$Outbound,
    z.ZodTypeDef,
    AntiFraudServiceCreate
> = z.union([
    CybersourceCreate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("cybersource-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    SiftCreate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("sift-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    ForterCreate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("forter-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    KountCreate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("kount-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
    SimulatorCreate$outboundSchema.and(
        z
            .object({ antiFraudServiceDefinitionId: z.literal("mock-anti-fraud") })
            .transform((v) => ({
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
            }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AntiFraudServiceCreate$ {
    /** @deprecated use `AntiFraudServiceCreate$inboundSchema` instead. */
    export const inboundSchema = AntiFraudServiceCreate$inboundSchema;
    /** @deprecated use `AntiFraudServiceCreate$outboundSchema` instead. */
    export const outboundSchema = AntiFraudServiceCreate$outboundSchema;
    /** @deprecated use `AntiFraudServiceCreate$Outbound` instead. */
    export type Outbound = AntiFraudServiceCreate$Outbound;
}
