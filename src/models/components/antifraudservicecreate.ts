/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The name of the Anti-Fraud service provider.
 *
 * @remarks
 * During update request, this value is used for validation only but
 * the underlying service can not be changed for an existing service.
 */
export enum AntiFraudServiceDefinitionId {
    CybersourceAntiFraud = "cybersource-anti-fraud",
    ForterAntiFraud = "forter-anti-fraud",
    SiftAntiFraud = "sift-anti-fraud",
}

/**
 * A key-value pair that represents a field defined in the definition for this anti-fraud service.
 */
export type AntiFraudServiceCreateFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set.
     */
    value: string;
};

/**
 * A request to create an anti-fraud service.
 */
export type AntiFraudServiceCreate = {
    /**
     * The name of the Anti-Fraud service provider.
     *
     * @remarks
     * During update request, this value is used for validation only but
     * the underlying service can not be changed for an existing service.
     */
    antiFraudServiceDefinitionId: AntiFraudServiceDefinitionId;
    /**
     * A unique name for this anti-fraud service which is used in the Gr4vy admin panel to give a anti-fraud Service a human readable name.
     */
    displayName: string;
    /**
     * Defines if this service is currently active or not. There can only
     *
     * @remarks
     * be one active service at any time. When updating a service
     * to active, the current active service will be deactivated.
     */
    active?: boolean | undefined;
    /**
     * Defines if this service needs to handle the review status from anti-fraud
     *
     * @remarks
     * responses with a proper review workflow. If not, the review status will
     * be treated as any other one.
     */
    reviewsEnabled?: boolean | undefined;
    /**
     * A list of fields, each containing a key-value pair for each field defined
     *
     * @remarks
     * by the definition for this anti-fraud service e.g. for Sift
     * `api_key` must be sent within this field when creating the service.
     *
     * For updates, only the fields sent here will be updated,
     * existing ones will not be affected if not present.
     */
    fields: Array<AntiFraudServiceCreateFields>;
};

/** @internal */
export const AntiFraudServiceDefinitionId$: z.ZodNativeEnum<typeof AntiFraudServiceDefinitionId> =
    z.nativeEnum(AntiFraudServiceDefinitionId);

/** @internal */
export namespace AntiFraudServiceCreateFields$ {
    export type Inbound = {
        key: string;
        value: string;
    };

    export const inboundSchema: z.ZodType<AntiFraudServiceCreateFields, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });

    export type Outbound = {
        key: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudServiceCreateFields> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });
}

/** @internal */
export namespace AntiFraudServiceCreate$ {
    export type Inbound = {
        anti_fraud_service_definition_id: AntiFraudServiceDefinitionId;
        display_name: string;
        active?: boolean | undefined;
        reviews_enabled?: boolean | undefined;
        fields: Array<AntiFraudServiceCreateFields$.Inbound>;
    };

    export const inboundSchema: z.ZodType<AntiFraudServiceCreate, z.ZodTypeDef, Inbound> = z
        .object({
            anti_fraud_service_definition_id: AntiFraudServiceDefinitionId$,
            display_name: z.string(),
            active: z.boolean().default(true),
            reviews_enabled: z.boolean().default(false),
            fields: z.array(z.lazy(() => AntiFraudServiceCreateFields$.inboundSchema)),
        })
        .transform((v) => {
            return {
                antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id,
                displayName: v.display_name,
                active: v.active,
                reviewsEnabled: v.reviews_enabled,
                fields: v.fields,
            };
        });

    export type Outbound = {
        anti_fraud_service_definition_id: AntiFraudServiceDefinitionId;
        display_name: string;
        active: boolean;
        reviews_enabled: boolean;
        fields: Array<AntiFraudServiceCreateFields$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudServiceCreate> = z
        .object({
            antiFraudServiceDefinitionId: AntiFraudServiceDefinitionId$,
            displayName: z.string(),
            active: z.boolean().default(true),
            reviewsEnabled: z.boolean().default(false),
            fields: z.array(z.lazy(() => AntiFraudServiceCreateFields$.outboundSchema)),
        })
        .transform((v) => {
            return {
                anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId,
                display_name: v.displayName,
                active: v.active,
                reviews_enabled: v.reviewsEnabled,
                fields: v.fields,
            };
        });
}
