/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * `id`.
 */
export enum CheckoutSessionFieldsIdPaymentMethodMethod {
    Id = "id",
}

/**
 * Details to use a stored card payment method.
 */
export type CheckoutSessionFieldsIdPaymentMethod = {
    /**
     * `id`.
     */
    method: CheckoutSessionFieldsIdPaymentMethodMethod;
    /**
     * The unique ID of the payment method.
     */
    id: string;
    /**
     * The 3 or 4 digit security code often found on the card. This often
     *
     * @remarks
     * referred to as the CVV or CVD.
     *
     * The security code can only be set if the stored payment method
     * represents a card.
     */
    securityCode?: string | undefined;
};

/** @internal */
export const CheckoutSessionFieldsIdPaymentMethodMethod$: z.ZodNativeEnum<
    typeof CheckoutSessionFieldsIdPaymentMethodMethod
> = z.nativeEnum(CheckoutSessionFieldsIdPaymentMethodMethod);

/** @internal */
export namespace CheckoutSessionFieldsIdPaymentMethod$ {
    export type Inbound = {
        method: CheckoutSessionFieldsIdPaymentMethodMethod;
        id: string;
        security_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        CheckoutSessionFieldsIdPaymentMethod,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            method: CheckoutSessionFieldsIdPaymentMethodMethod$,
            id: z.string(),
            security_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                method: v.method,
                id: v.id,
                ...(v.security_code === undefined ? null : { securityCode: v.security_code }),
            };
        });

    export type Outbound = {
        method: CheckoutSessionFieldsIdPaymentMethodMethod;
        id: string;
        security_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CheckoutSessionFieldsIdPaymentMethod
    > = z
        .object({
            method: CheckoutSessionFieldsIdPaymentMethodMethod$,
            id: z.string(),
            securityCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                method: v.method,
                id: v.id,
                ...(v.securityCode === undefined ? null : { security_code: v.securityCode }),
            };
        });
}
