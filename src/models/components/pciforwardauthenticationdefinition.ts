/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The kind of authentication to be used in a Vault Forward request.
 *
 * @remarks
 *
 */
export const Kind = {
    Mle: "mle",
    Mtls: "mtls",
    Signature: "signature",
} as const;
/**
 * The kind of authentication to be used in a Vault Forward request.
 *
 * @remarks
 *
 */
export type Kind = ClosedEnum<typeof Kind>;

/**
 * Defines the type of input that needs to be rendered for this field.
 */
export const PCIForwardAuthenticationDefinitionFormat = {
    Text: "text",
    Multiline: "multiline",
    File: "file",
    Number: "number",
} as const;
/**
 * Defines the type of input that needs to be rendered for this field.
 */
export type PCIForwardAuthenticationDefinitionFormat = ClosedEnum<
    typeof PCIForwardAuthenticationDefinitionFormat
>;

/**
 * A single field that can be submitted for an authentication method when
 *
 * @remarks
 * it is created.
 */
export type PCIForwardAuthenticationDefinitionFields = {
    /**
     * The key of a field that can be submitted.
     */
    key?: string | undefined;
    /**
     * The name to display for a field in the dashboard.
     */
    displayName?: string | undefined;
    /**
     * Defines if this field is required when the authentication method
     *
     * @remarks
     * is created.
     */
    required?: boolean | undefined;
    /**
     * Defines the type of input that needs to be rendered for this field.
     */
    format?: PCIForwardAuthenticationDefinitionFormat | undefined;
    /**
     * Defines if this field is secret. When `true` the field is not
     *
     * @remarks
     * returned when querying the authentication method.
     */
    secret?: boolean | undefined;
};

/**
 * An available Vault Forward authentication definition that can be configured.
 */
export type PCIForwardAuthenticationDefinition = {
    /**
     * The type of this resource. It is always
     *
     * @remarks
     * `vault-forward-authentication-definition`.
     */
    type?: string | undefined;
    /**
     * The kind of authentication to be used in a Vault Forward request.
     *
     * @remarks
     *
     */
    kind?: Kind | undefined;
    /**
     * The title of this authentication definition.
     */
    title?: string | undefined;
    /**
     * The description of this authentication definition.
     */
    description?: string | undefined;
    /**
     * A list of fields that can to be submitted when activating the
     *
     * @remarks
     * authentication method.
     */
    fields?: Array<PCIForwardAuthenticationDefinitionFields> | undefined;
};

/** @internal */
export const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind> = z.nativeEnum(Kind);

/** @internal */
export const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind> = Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kind$ {
    /** @deprecated use `Kind$inboundSchema` instead. */
    export const inboundSchema = Kind$inboundSchema;
    /** @deprecated use `Kind$outboundSchema` instead. */
    export const outboundSchema = Kind$outboundSchema;
}

/** @internal */
export const PCIForwardAuthenticationDefinitionFormat$inboundSchema: z.ZodNativeEnum<
    typeof PCIForwardAuthenticationDefinitionFormat
> = z.nativeEnum(PCIForwardAuthenticationDefinitionFormat);

/** @internal */
export const PCIForwardAuthenticationDefinitionFormat$outboundSchema: z.ZodNativeEnum<
    typeof PCIForwardAuthenticationDefinitionFormat
> = PCIForwardAuthenticationDefinitionFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardAuthenticationDefinitionFormat$ {
    /** @deprecated use `PCIForwardAuthenticationDefinitionFormat$inboundSchema` instead. */
    export const inboundSchema = PCIForwardAuthenticationDefinitionFormat$inboundSchema;
    /** @deprecated use `PCIForwardAuthenticationDefinitionFormat$outboundSchema` instead. */
    export const outboundSchema = PCIForwardAuthenticationDefinitionFormat$outboundSchema;
}

/** @internal */
export const PCIForwardAuthenticationDefinitionFields$inboundSchema: z.ZodType<
    PCIForwardAuthenticationDefinitionFields,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        key: z.string().optional(),
        display_name: z.string().optional(),
        required: z.boolean().optional(),
        format: PCIForwardAuthenticationDefinitionFormat$inboundSchema.optional(),
        secret: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
        });
    });

/** @internal */
export type PCIForwardAuthenticationDefinitionFields$Outbound = {
    key?: string | undefined;
    display_name?: string | undefined;
    required?: boolean | undefined;
    format?: string | undefined;
    secret?: boolean | undefined;
};

/** @internal */
export const PCIForwardAuthenticationDefinitionFields$outboundSchema: z.ZodType<
    PCIForwardAuthenticationDefinitionFields$Outbound,
    z.ZodTypeDef,
    PCIForwardAuthenticationDefinitionFields
> = z
    .object({
        key: z.string().optional(),
        displayName: z.string().optional(),
        required: z.boolean().optional(),
        format: PCIForwardAuthenticationDefinitionFormat$outboundSchema.optional(),
        secret: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardAuthenticationDefinitionFields$ {
    /** @deprecated use `PCIForwardAuthenticationDefinitionFields$inboundSchema` instead. */
    export const inboundSchema = PCIForwardAuthenticationDefinitionFields$inboundSchema;
    /** @deprecated use `PCIForwardAuthenticationDefinitionFields$outboundSchema` instead. */
    export const outboundSchema = PCIForwardAuthenticationDefinitionFields$outboundSchema;
    /** @deprecated use `PCIForwardAuthenticationDefinitionFields$Outbound` instead. */
    export type Outbound = PCIForwardAuthenticationDefinitionFields$Outbound;
}

/** @internal */
export const PCIForwardAuthenticationDefinition$inboundSchema: z.ZodType<
    PCIForwardAuthenticationDefinition,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: z.string().default("vault-forward-authentication-definition"),
    kind: Kind$inboundSchema.optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    fields: z
        .array(z.lazy(() => PCIForwardAuthenticationDefinitionFields$inboundSchema))
        .optional(),
});

/** @internal */
export type PCIForwardAuthenticationDefinition$Outbound = {
    type: string;
    kind?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    fields?: Array<PCIForwardAuthenticationDefinitionFields$Outbound> | undefined;
};

/** @internal */
export const PCIForwardAuthenticationDefinition$outboundSchema: z.ZodType<
    PCIForwardAuthenticationDefinition$Outbound,
    z.ZodTypeDef,
    PCIForwardAuthenticationDefinition
> = z.object({
    type: z.string().default("vault-forward-authentication-definition"),
    kind: Kind$outboundSchema.optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    fields: z
        .array(z.lazy(() => PCIForwardAuthenticationDefinitionFields$outboundSchema))
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardAuthenticationDefinition$ {
    /** @deprecated use `PCIForwardAuthenticationDefinition$inboundSchema` instead. */
    export const inboundSchema = PCIForwardAuthenticationDefinition$inboundSchema;
    /** @deprecated use `PCIForwardAuthenticationDefinition$outboundSchema` instead. */
    export const outboundSchema = PCIForwardAuthenticationDefinition$outboundSchema;
    /** @deprecated use `PCIForwardAuthenticationDefinition$Outbound` instead. */
    export type Outbound = PCIForwardAuthenticationDefinition$Outbound;
}
