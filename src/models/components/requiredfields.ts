/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The billing address of the buyer.
 */
export type Address = {
    /**
     * The city for the billing address.
     */
    city?: boolean | undefined;
    /**
     * The country for the billing address.
     */
    country?: boolean | undefined;
    /**
     * The postal code or zip code for the billing address.
     */
    postalCode?: boolean | undefined;
    /**
     * The state, county, or province for the billing address.
     */
    state?: boolean | undefined;
    /**
     * The house number or name for the billing address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: boolean | undefined;
    /**
     * The first line of the billing address.
     */
    line1?: boolean | undefined;
};

/**
 * The fields that are required to process a transaction for this payment option.
 */
export type RequiredFields = {
    /**
     * The first (given) name of the buyer.
     */
    firstName?: boolean | undefined;
    /**
     * The last (family) name of the buyer.
     */
    lastName?: boolean | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: boolean | undefined;
    /**
     * The phone number of the buyer.
     */
    phoneNumber?: boolean | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: Address | undefined;
    /**
     * The tax id code associated with the billing details.
     */
    taxId?: boolean | undefined;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> = z
    .object({
        city: z.boolean().optional(),
        country: z.boolean().optional(),
        postal_code: z.boolean().optional(),
        state: z.boolean().optional(),
        house_number_or_name: z.boolean().optional(),
        line1: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type Address$Outbound = {
    city?: boolean | undefined;
    country?: boolean | undefined;
    postal_code?: boolean | undefined;
    state?: boolean | undefined;
    house_number_or_name?: boolean | undefined;
    line1?: boolean | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<Address$Outbound, z.ZodTypeDef, Address> = z
    .object({
        city: z.boolean().optional(),
        country: z.boolean().optional(),
        postalCode: z.boolean().optional(),
        state: z.boolean().optional(),
        houseNumberOrName: z.boolean().optional(),
        line1: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
    /** @deprecated use `Address$inboundSchema` instead. */
    export const inboundSchema = Address$inboundSchema;
    /** @deprecated use `Address$outboundSchema` instead. */
    export const outboundSchema = Address$outboundSchema;
    /** @deprecated use `Address$Outbound` instead. */
    export type Outbound = Address$Outbound;
}

/** @internal */
export const RequiredFields$inboundSchema: z.ZodType<RequiredFields, z.ZodTypeDef, unknown> = z
    .object({
        first_name: z.boolean().optional(),
        last_name: z.boolean().optional(),
        email_address: z.boolean().optional(),
        phone_number: z.boolean().optional(),
        address: z.lazy(() => Address$inboundSchema).optional(),
        tax_id: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type RequiredFields$Outbound = {
    first_name?: boolean | undefined;
    last_name?: boolean | undefined;
    email_address?: boolean | undefined;
    phone_number?: boolean | undefined;
    address?: Address$Outbound | undefined;
    tax_id?: boolean | undefined;
};

/** @internal */
export const RequiredFields$outboundSchema: z.ZodType<
    RequiredFields$Outbound,
    z.ZodTypeDef,
    RequiredFields
> = z
    .object({
        firstName: z.boolean().optional(),
        lastName: z.boolean().optional(),
        emailAddress: z.boolean().optional(),
        phoneNumber: z.boolean().optional(),
        address: z.lazy(() => Address$outboundSchema).optional(),
        taxId: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequiredFields$ {
    /** @deprecated use `RequiredFields$inboundSchema` instead. */
    export const inboundSchema = RequiredFields$inboundSchema;
    /** @deprecated use `RequiredFields$outboundSchema` instead. */
    export const outboundSchema = RequiredFields$outboundSchema;
    /** @deprecated use `RequiredFields$Outbound` instead. */
    export type Outbound = RequiredFields$Outbound;
}
