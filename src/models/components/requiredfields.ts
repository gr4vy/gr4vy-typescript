/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The billing address of the buyer.
 */
export type Address = {
    /**
     * The city for the billing address.
     */
    city?: boolean | undefined;
    /**
     * The country for the billing address.
     */
    country?: boolean | undefined;
    /**
     * The postal code or zip code for the billing address.
     */
    postalCode?: boolean | undefined;
    /**
     * The state, county, or province for the billing address.
     */
    state?: boolean | undefined;
    /**
     * The house number or name for the billing address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: boolean | undefined;
    /**
     * The first line of the billing address.
     */
    line1?: boolean | undefined;
};

/**
 * The fields that are required to process a transaction for this payment option.
 */
export type RequiredFields = {
    /**
     * The first (given) name of the buyer.
     */
    firstName?: boolean | undefined;
    /**
     * The last (family) name of the buyer.
     */
    lastName?: boolean | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: boolean | undefined;
    /**
     * The phone number of the buyer.
     */
    phoneNumber?: boolean | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: Address | undefined;
    /**
     * The tax id code associated with the billing details.
     */
    taxId?: boolean | undefined;
};

/** @internal */
export namespace Address$ {
    export type Inbound = {
        city?: boolean | undefined;
        country?: boolean | undefined;
        postal_code?: boolean | undefined;
        state?: boolean | undefined;
        house_number_or_name?: boolean | undefined;
        line1?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Address, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.boolean().optional(),
            country: z.boolean().optional(),
            postal_code: z.boolean().optional(),
            state: z.boolean().optional(),
            house_number_or_name: z.boolean().optional(),
            line1: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postal_code === undefined ? null : { postalCode: v.postal_code }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.house_number_or_name === undefined
                    ? null
                    : { houseNumberOrName: v.house_number_or_name }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
            };
        });

    export type Outbound = {
        city?: boolean | undefined;
        country?: boolean | undefined;
        postal_code?: boolean | undefined;
        state?: boolean | undefined;
        house_number_or_name?: boolean | undefined;
        line1?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Address> = z
        .object({
            city: z.boolean().optional(),
            country: z.boolean().optional(),
            postalCode: z.boolean().optional(),
            state: z.boolean().optional(),
            houseNumberOrName: z.boolean().optional(),
            line1: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postalCode === undefined ? null : { postal_code: v.postalCode }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.houseNumberOrName === undefined
                    ? null
                    : { house_number_or_name: v.houseNumberOrName }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
            };
        });
}

/** @internal */
export namespace RequiredFields$ {
    export type Inbound = {
        first_name?: boolean | undefined;
        last_name?: boolean | undefined;
        email_address?: boolean | undefined;
        phone_number?: boolean | undefined;
        address?: Address$.Inbound | undefined;
        tax_id?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<RequiredFields, z.ZodTypeDef, Inbound> = z
        .object({
            first_name: z.boolean().optional(),
            last_name: z.boolean().optional(),
            email_address: z.boolean().optional(),
            phone_number: z.boolean().optional(),
            address: z.lazy(() => Address$.inboundSchema).optional(),
            tax_id: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.tax_id === undefined ? null : { taxId: v.tax_id }),
            };
        });

    export type Outbound = {
        first_name?: boolean | undefined;
        last_name?: boolean | undefined;
        email_address?: boolean | undefined;
        phone_number?: boolean | undefined;
        address?: Address$.Outbound | undefined;
        tax_id?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequiredFields> = z
        .object({
            firstName: z.boolean().optional(),
            lastName: z.boolean().optional(),
            emailAddress: z.boolean().optional(),
            phoneNumber: z.boolean().optional(),
            address: z.lazy(() => Address$.outboundSchema).optional(),
            taxId: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.taxId === undefined ? null : { tax_id: v.taxId }),
            };
        });
}
