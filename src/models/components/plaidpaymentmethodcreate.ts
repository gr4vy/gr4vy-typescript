/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Plaid Payment Method
 *
 * @remarks
 *
 * Plaid Payment Method to use in a transaction.
 */
export type PlaidPaymentMethodCreate = {
  /**
   * Always `plaid`.
   */
  method?: "plaid" | undefined;
  /**
   * The public token obtained after using Plaid Link.
   */
  token: string;
  /**
   * The Plaid account ID corresponding to the end-user account. If not provided will be fetched from Plaid API expecting to only have one.
   */
  accountId?: string | null | undefined;
  /**
   * The ID of the Plaid payment service related to the provided public token. If not provided will be fetched from the currently active expecting to have a single one.
   */
  paymentServiceId?: string | null | undefined;
  /**
   * The ID of the buyer to attach the method to.
   */
  buyerId?: string | null | undefined;
  /**
   * The merchant reference for this payment method.
   */
  buyerExternalIdentifier?: string | null | undefined;
};

/** @internal */
export const PlaidPaymentMethodCreate$inboundSchema: z.ZodType<
  PlaidPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: z.literal("plaid").default("plaid"),
  token: z.string(),
  account_id: z.nullable(z.string()).optional(),
  payment_service_id: z.nullable(z.string()).optional(),
  buyer_id: z.nullable(z.string()).optional(),
  buyer_external_identifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "payment_service_id": "paymentServiceId",
    "buyer_id": "buyerId",
    "buyer_external_identifier": "buyerExternalIdentifier",
  });
});

/** @internal */
export type PlaidPaymentMethodCreate$Outbound = {
  method: "plaid";
  token: string;
  account_id?: string | null | undefined;
  payment_service_id?: string | null | undefined;
  buyer_id?: string | null | undefined;
  buyer_external_identifier?: string | null | undefined;
};

/** @internal */
export const PlaidPaymentMethodCreate$outboundSchema: z.ZodType<
  PlaidPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  PlaidPaymentMethodCreate
> = z.object({
  method: z.literal("plaid").default("plaid" as const),
  token: z.string(),
  accountId: z.nullable(z.string()).optional(),
  paymentServiceId: z.nullable(z.string()).optional(),
  buyerId: z.nullable(z.string()).optional(),
  buyerExternalIdentifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    paymentServiceId: "payment_service_id",
    buyerId: "buyer_id",
    buyerExternalIdentifier: "buyer_external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlaidPaymentMethodCreate$ {
  /** @deprecated use `PlaidPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = PlaidPaymentMethodCreate$inboundSchema;
  /** @deprecated use `PlaidPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = PlaidPaymentMethodCreate$outboundSchema;
  /** @deprecated use `PlaidPaymentMethodCreate$Outbound` instead. */
  export type Outbound = PlaidPaymentMethodCreate$Outbound;
}

export function plaidPaymentMethodCreateToJSON(
  plaidPaymentMethodCreate: PlaidPaymentMethodCreate,
): string {
  return JSON.stringify(
    PlaidPaymentMethodCreate$outboundSchema.parse(plaidPaymentMethodCreate),
  );
}

export function plaidPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<PlaidPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlaidPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlaidPaymentMethodCreate' from JSON`,
  );
}
