/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowPaymentMethodConditionName = {
    PaymentMethod: "payment_method",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowPaymentMethodConditionName = ClosedEnum<typeof FlowPaymentMethodConditionName>;

/**
 * The comparison to make on the `value`.
 */
export const FlowPaymentMethodConditionOperator = {
    EqualTo: "equal_to",
} as const;
/**
 * The comparison to make on the `value`.
 */
export type FlowPaymentMethodConditionOperator = ClosedEnum<
    typeof FlowPaymentMethodConditionOperator
>;

/**
 * The payment method to compare the transaction to.
 */
export const FlowPaymentMethodConditionValue = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
/**
 * The payment method to compare the transaction to.
 */
export type FlowPaymentMethodConditionValue = ClosedEnum<typeof FlowPaymentMethodConditionValue>;

/**
 * Payment method conditions with a name, operator, and value. This
 *
 * @remarks
 * condition is only for use with the `route-transaction` action.
 */
export type FlowPaymentMethodCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowPaymentMethodConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowPaymentMethodConditionOperator;
    /**
     * The payment method to compare the transaction to.
     */
    value: FlowPaymentMethodConditionValue;
};

/** @internal */
export const FlowPaymentMethodConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentMethodConditionName
> = z.nativeEnum(FlowPaymentMethodConditionName);

/** @internal */
export const FlowPaymentMethodConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentMethodConditionName
> = FlowPaymentMethodConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentMethodConditionName$ {
    /** @deprecated use `FlowPaymentMethodConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentMethodConditionName$inboundSchema;
    /** @deprecated use `FlowPaymentMethodConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentMethodConditionName$outboundSchema;
}

/** @internal */
export const FlowPaymentMethodConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentMethodConditionOperator
> = z.nativeEnum(FlowPaymentMethodConditionOperator);

/** @internal */
export const FlowPaymentMethodConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentMethodConditionOperator
> = FlowPaymentMethodConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentMethodConditionOperator$ {
    /** @deprecated use `FlowPaymentMethodConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentMethodConditionOperator$inboundSchema;
    /** @deprecated use `FlowPaymentMethodConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentMethodConditionOperator$outboundSchema;
}

/** @internal */
export const FlowPaymentMethodConditionValue$inboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentMethodConditionValue
> = z.nativeEnum(FlowPaymentMethodConditionValue);

/** @internal */
export const FlowPaymentMethodConditionValue$outboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentMethodConditionValue
> = FlowPaymentMethodConditionValue$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentMethodConditionValue$ {
    /** @deprecated use `FlowPaymentMethodConditionValue$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentMethodConditionValue$inboundSchema;
    /** @deprecated use `FlowPaymentMethodConditionValue$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentMethodConditionValue$outboundSchema;
}

/** @internal */
export const FlowPaymentMethodCondition$inboundSchema: z.ZodType<
    FlowPaymentMethodCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowPaymentMethodConditionName$inboundSchema,
    operator: FlowPaymentMethodConditionOperator$inboundSchema,
    value: FlowPaymentMethodConditionValue$inboundSchema,
});

/** @internal */
export type FlowPaymentMethodCondition$Outbound = {
    name: string;
    operator: string;
    value: string;
};

/** @internal */
export const FlowPaymentMethodCondition$outboundSchema: z.ZodType<
    FlowPaymentMethodCondition$Outbound,
    z.ZodTypeDef,
    FlowPaymentMethodCondition
> = z.object({
    name: FlowPaymentMethodConditionName$outboundSchema,
    operator: FlowPaymentMethodConditionOperator$outboundSchema,
    value: FlowPaymentMethodConditionValue$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentMethodCondition$ {
    /** @deprecated use `FlowPaymentMethodCondition$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentMethodCondition$inboundSchema;
    /** @deprecated use `FlowPaymentMethodCondition$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentMethodCondition$outboundSchema;
    /** @deprecated use `FlowPaymentMethodCondition$Outbound` instead. */
    export type Outbound = FlowPaymentMethodCondition$Outbound;
}
