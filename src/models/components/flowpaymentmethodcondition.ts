/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowPaymentMethodConditionName {
    PaymentMethod = "payment_method",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowPaymentMethodConditionOperator {
    EqualTo = "equal_to",
}

/**
 * The payment method to compare the transaction to.
 */
export enum FlowPaymentMethodConditionValue {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    CheckoutSession = "checkout-session",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Everydaypay = "everydaypay",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    NetworkToken = "network-token",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * Payment method conditions with a name, operator, and value. This
 *
 * @remarks
 * condition is only for use with the `route-transaction` action.
 */
export type FlowPaymentMethodCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowPaymentMethodConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowPaymentMethodConditionOperator;
    /**
     * The payment method to compare the transaction to.
     */
    value: FlowPaymentMethodConditionValue;
};

/** @internal */
export namespace FlowPaymentMethodConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowPaymentMethodConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowPaymentMethodConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowPaymentMethodConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowPaymentMethodConditionValue$ {
    export const inboundSchema = z.nativeEnum(FlowPaymentMethodConditionValue);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowPaymentMethodCondition$ {
    export const inboundSchema: z.ZodType<FlowPaymentMethodCondition, z.ZodTypeDef, unknown> =
        z.object({
            name: FlowPaymentMethodConditionName$.inboundSchema,
            operator: FlowPaymentMethodConditionOperator$.inboundSchema,
            value: FlowPaymentMethodConditionValue$.inboundSchema,
        });

    export type Outbound = {
        name: string;
        operator: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowPaymentMethodCondition> =
        z.object({
            name: FlowPaymentMethodConditionName$.outboundSchema,
            operator: FlowPaymentMethodConditionOperator$.outboundSchema,
            value: FlowPaymentMethodConditionValue$.outboundSchema,
        });
}
