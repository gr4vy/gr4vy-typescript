/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    TransactionSummary,
    TransactionSummary$inboundSchema,
    TransactionSummary$Outbound,
    TransactionSummary$outboundSchema,
} from "./transactionsummary.js";
import * as z from "zod";

/**
 * A list of transactions.
 */
export type Transactions = {
    /**
     * A list of transactions.
     */
    items?: Array<TransactionSummary> | undefined;
    /**
     * The limit applied to request. This represents the number of items that are at
     *
     * @remarks
     * maximum returned by this request.
     */
    limit?: number | undefined;
    /**
     * The cursor that represents the next page of results. Use the `cursor` query
     *
     * @remarks
     * parameter to fetch this page of items.
     */
    nextCursor?: string | null | undefined;
    /**
     * The cursor that represents the next page of results. Use the `cursor` query
     *
     * @remarks
     * parameter to fetch this page of items.
     */
    previousCursor?: string | null | undefined;
};

/** @internal */
export const Transactions$inboundSchema: z.ZodType<Transactions, z.ZodTypeDef, unknown> = z
    .object({
        items: z.array(TransactionSummary$inboundSchema).optional(),
        limit: z.number().int().default(20),
        next_cursor: z.nullable(z.string()).optional(),
        previous_cursor: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            next_cursor: "nextCursor",
            previous_cursor: "previousCursor",
        });
    });

/** @internal */
export type Transactions$Outbound = {
    items?: Array<TransactionSummary$Outbound> | undefined;
    limit: number;
    next_cursor?: string | null | undefined;
    previous_cursor?: string | null | undefined;
};

/** @internal */
export const Transactions$outboundSchema: z.ZodType<
    Transactions$Outbound,
    z.ZodTypeDef,
    Transactions
> = z
    .object({
        items: z.array(TransactionSummary$outboundSchema).optional(),
        limit: z.number().int().default(20),
        nextCursor: z.nullable(z.string()).optional(),
        previousCursor: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            nextCursor: "next_cursor",
            previousCursor: "previous_cursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transactions$ {
    /** @deprecated use `Transactions$inboundSchema` instead. */
    export const inboundSchema = Transactions$inboundSchema;
    /** @deprecated use `Transactions$outboundSchema` instead. */
    export const outboundSchema = Transactions$outboundSchema;
    /** @deprecated use `Transactions$Outbound` instead. */
    export type Outbound = Transactions$Outbound;
}
