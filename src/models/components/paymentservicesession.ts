/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource.
 */
export enum PaymentServiceSessionType {
    PaymentServiceSession = "payment-service-session",
}

/**
 * The status of the response.
 *
 * @remarks
 *
 * - `succeeded` - The session was successfully generated.
 * - `failed` - The session could not be generated.
 */
export enum PaymentServiceSessionStatus {
    Succeeded = "succeeded",
    Failed = "failed",
}

/**
 * A session request for a payment session. This is an opaque object
 *
 * @remarks
 * passed to the payment service.
 */
export type PaymentServiceSession = {
    /**
     * The type of this resource.
     */
    type?: PaymentServiceSessionType | undefined;
    /**
     * The status of the response.
     *
     * @remarks
     *
     * - `succeeded` - The session was successfully generated.
     * - `failed` - The session could not be generated.
     */
    status?: PaymentServiceSessionStatus | undefined;
    /**
     * A generic error code that may be returned when the session could not be generated.
     */
    code?: string | null | undefined;
    /**
     * The HTTP status code received from the payment service.
     */
    statusCode?: number | null | undefined;
    /**
     * The parsed JSON received from the payment service.
     */
    responseBody?: { [k: string]: any } | null | undefined;
};

/** @internal */
export namespace PaymentServiceSessionType$ {
    export const inboundSchema = z.nativeEnum(PaymentServiceSessionType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentServiceSessionStatus$ {
    export const inboundSchema = z.nativeEnum(PaymentServiceSessionStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentServiceSession$ {
    export const inboundSchema: z.ZodType<PaymentServiceSession, z.ZodTypeDef, unknown> = z
        .object({
            type: PaymentServiceSessionType$.inboundSchema.optional(),
            status: PaymentServiceSessionStatus$.inboundSchema.optional(),
            code: z.nullable(z.string()).optional(),
            status_code: z.nullable(z.number()).optional(),
            response_body: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                status_code: "statusCode",
                response_body: "responseBody",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        status?: string | undefined;
        code?: string | null | undefined;
        status_code?: number | null | undefined;
        response_body?: { [k: string]: any } | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceSession> = z
        .object({
            type: PaymentServiceSessionType$.outboundSchema.optional(),
            status: PaymentServiceSessionStatus$.outboundSchema.optional(),
            code: z.nullable(z.string()).optional(),
            statusCode: z.nullable(z.number()).optional(),
            responseBody: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                statusCode: "status_code",
                responseBody: "response_body",
            });
        });
}
