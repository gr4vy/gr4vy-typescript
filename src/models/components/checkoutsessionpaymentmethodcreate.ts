/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `checkout-session`
 */
export const CheckoutSessionPaymentMethodCreateMethod = {
  CheckoutSession: "checkout-session",
} as const;
/**
 * Always `checkout-session`
 */
export type CheckoutSessionPaymentMethodCreateMethod = ClosedEnum<
  typeof CheckoutSessionPaymentMethodCreateMethod
>;

/**
 * Base model with JSON encoders.
 */
export type CheckoutSessionPaymentMethodCreate = {
  /**
   * Always `checkout-session`
   */
  method?: CheckoutSessionPaymentMethodCreateMethod | undefined;
  /**
   * The ID for the checkout session.
   */
  id: string;
  /**
   * The merchant reference that can be used to match the payment method against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
   */
  buyerId?: string | undefined;
  /**
   * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
   */
  buyerExternalIdentifier?: string | undefined;
};

/** @internal */
export const CheckoutSessionPaymentMethodCreateMethod$inboundSchema:
  z.ZodNativeEnum<typeof CheckoutSessionPaymentMethodCreateMethod> = z
    .nativeEnum(CheckoutSessionPaymentMethodCreateMethod);

/** @internal */
export const CheckoutSessionPaymentMethodCreateMethod$outboundSchema:
  z.ZodNativeEnum<typeof CheckoutSessionPaymentMethodCreateMethod> =
    CheckoutSessionPaymentMethodCreateMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionPaymentMethodCreateMethod$ {
  /** @deprecated use `CheckoutSessionPaymentMethodCreateMethod$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutSessionPaymentMethodCreateMethod$inboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethodCreateMethod$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutSessionPaymentMethodCreateMethod$outboundSchema;
}

/** @internal */
export const CheckoutSessionPaymentMethodCreate$inboundSchema: z.ZodType<
  CheckoutSessionPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: CheckoutSessionPaymentMethodCreateMethod$inboundSchema.default(
    "checkout-session",
  ),
  id: z.string(),
  external_identifier: z.string().optional(),
  buyer_id: z.string().optional(),
  buyer_external_identifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "external_identifier": "externalIdentifier",
    "buyer_id": "buyerId",
    "buyer_external_identifier": "buyerExternalIdentifier",
  });
});

/** @internal */
export type CheckoutSessionPaymentMethodCreate$Outbound = {
  method: string;
  id: string;
  external_identifier?: string | undefined;
  buyer_id?: string | undefined;
  buyer_external_identifier?: string | undefined;
};

/** @internal */
export const CheckoutSessionPaymentMethodCreate$outboundSchema: z.ZodType<
  CheckoutSessionPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  CheckoutSessionPaymentMethodCreate
> = z.object({
  method: CheckoutSessionPaymentMethodCreateMethod$outboundSchema.default(
    "checkout-session",
  ),
  id: z.string(),
  externalIdentifier: z.string().optional(),
  buyerId: z.string().optional(),
  buyerExternalIdentifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    externalIdentifier: "external_identifier",
    buyerId: "buyer_id",
    buyerExternalIdentifier: "buyer_external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutSessionPaymentMethodCreate$ {
  /** @deprecated use `CheckoutSessionPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = CheckoutSessionPaymentMethodCreate$inboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutSessionPaymentMethodCreate$outboundSchema;
  /** @deprecated use `CheckoutSessionPaymentMethodCreate$Outbound` instead. */
  export type Outbound = CheckoutSessionPaymentMethodCreate$Outbound;
}

export function checkoutSessionPaymentMethodCreateToJSON(
  checkoutSessionPaymentMethodCreate: CheckoutSessionPaymentMethodCreate,
): string {
  return JSON.stringify(
    CheckoutSessionPaymentMethodCreate$outboundSchema.parse(
      checkoutSessionPaymentMethodCreate,
    ),
  );
}

export function checkoutSessionPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutSessionPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckoutSessionPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutSessionPaymentMethodCreate' from JSON`,
  );
}
