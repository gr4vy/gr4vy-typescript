/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const ThreeDSecureRequestErrorEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type ThreeDSecureRequestErrorEventType = ClosedEnum<
    typeof ThreeDSecureRequestErrorEventType
>;

/**
 * The name of this resource. Is always `three-d-secure-request-error`.
 */
export const ThreeDSecureRequestErrorEventName = {
    ThreeDSecureRequestError: "three-d-secure-request-error",
} as const;
/**
 * The name of this resource. Is always `three-d-secure-request-error`.
 */
export type ThreeDSecureRequestErrorEventName = ClosedEnum<
    typeof ThreeDSecureRequestErrorEventName
>;

/**
 * 3DS post-authentication context.
 */
export type ThreeDSecureRequestErrorEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The reason for the error.
     */
    reason?: string | undefined;
};

/**
 * Error details for a failed 3DS call.
 */
export type ThreeDSecureRequestErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureRequestErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-request-error`.
     */
    name?: ThreeDSecureRequestErrorEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS post-authentication context.
     */
    context?: ThreeDSecureRequestErrorEventContext | undefined;
};

/** @internal */
export const ThreeDSecureRequestErrorEventType$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureRequestErrorEventType
> = z.nativeEnum(ThreeDSecureRequestErrorEventType);

/** @internal */
export const ThreeDSecureRequestErrorEventType$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureRequestErrorEventType
> = ThreeDSecureRequestErrorEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureRequestErrorEventType$ {
    /** @deprecated use `ThreeDSecureRequestErrorEventType$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureRequestErrorEventType$inboundSchema;
    /** @deprecated use `ThreeDSecureRequestErrorEventType$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureRequestErrorEventType$outboundSchema;
}

/** @internal */
export const ThreeDSecureRequestErrorEventName$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureRequestErrorEventName
> = z.nativeEnum(ThreeDSecureRequestErrorEventName);

/** @internal */
export const ThreeDSecureRequestErrorEventName$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureRequestErrorEventName
> = ThreeDSecureRequestErrorEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureRequestErrorEventName$ {
    /** @deprecated use `ThreeDSecureRequestErrorEventName$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureRequestErrorEventName$inboundSchema;
    /** @deprecated use `ThreeDSecureRequestErrorEventName$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureRequestErrorEventName$outboundSchema;
}

/** @internal */
export const ThreeDSecureRequestErrorEventContext$inboundSchema: z.ZodType<
    ThreeDSecureRequestErrorEventContext,
    z.ZodTypeDef,
    unknown
> = z.object({
    url: z.string().optional(),
    reason: z.string().optional(),
});

/** @internal */
export type ThreeDSecureRequestErrorEventContext$Outbound = {
    url?: string | undefined;
    reason?: string | undefined;
};

/** @internal */
export const ThreeDSecureRequestErrorEventContext$outboundSchema: z.ZodType<
    ThreeDSecureRequestErrorEventContext$Outbound,
    z.ZodTypeDef,
    ThreeDSecureRequestErrorEventContext
> = z.object({
    url: z.string().optional(),
    reason: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureRequestErrorEventContext$ {
    /** @deprecated use `ThreeDSecureRequestErrorEventContext$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureRequestErrorEventContext$inboundSchema;
    /** @deprecated use `ThreeDSecureRequestErrorEventContext$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureRequestErrorEventContext$outboundSchema;
    /** @deprecated use `ThreeDSecureRequestErrorEventContext$Outbound` instead. */
    export type Outbound = ThreeDSecureRequestErrorEventContext$Outbound;
}

/** @internal */
export const ThreeDSecureRequestErrorEvent$inboundSchema: z.ZodType<
    ThreeDSecureRequestErrorEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: ThreeDSecureRequestErrorEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecureRequestErrorEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => ThreeDSecureRequestErrorEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type ThreeDSecureRequestErrorEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: ThreeDSecureRequestErrorEventContext$Outbound | undefined;
};

/** @internal */
export const ThreeDSecureRequestErrorEvent$outboundSchema: z.ZodType<
    ThreeDSecureRequestErrorEvent$Outbound,
    z.ZodTypeDef,
    ThreeDSecureRequestErrorEvent
> = z
    .object({
        type: ThreeDSecureRequestErrorEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecureRequestErrorEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => ThreeDSecureRequestErrorEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureRequestErrorEvent$ {
    /** @deprecated use `ThreeDSecureRequestErrorEvent$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureRequestErrorEvent$inboundSchema;
    /** @deprecated use `ThreeDSecureRequestErrorEvent$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureRequestErrorEvent$outboundSchema;
    /** @deprecated use `ThreeDSecureRequestErrorEvent$Outbound` instead. */
    export type Outbound = ThreeDSecureRequestErrorEvent$Outbound;
}
