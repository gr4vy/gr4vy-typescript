/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum ThreeDSecureRequestErrorEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `three-d-secure-request-error`.
 */
export enum ThreeDSecureRequestErrorEventName {
    ThreeDSecureRequestError = "three-d-secure-request-error",
}

/**
 * 3DS post-authentication context.
 */
export type ThreeDSecureRequestErrorEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The reason for the error.
     */
    reason?: string | undefined;
};

/**
 * Error details for a failed 3DS call.
 */
export type ThreeDSecureRequestErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureRequestErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-request-error`.
     */
    name?: ThreeDSecureRequestErrorEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS post-authentication context.
     */
    context?: ThreeDSecureRequestErrorEventContext | undefined;
};

/** @internal */
export namespace ThreeDSecureRequestErrorEventType$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureRequestErrorEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureRequestErrorEventName$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureRequestErrorEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureRequestErrorEventContext$ {
    export const inboundSchema: z.ZodType<
        ThreeDSecureRequestErrorEventContext,
        z.ZodTypeDef,
        unknown
    > = z.object({
        url: z.string().optional(),
        reason: z.string().optional(),
    });

    export type Outbound = {
        url?: string | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureRequestErrorEventContext
    > = z.object({
        url: z.string().optional(),
        reason: z.string().optional(),
    });
}

/** @internal */
export namespace ThreeDSecureRequestErrorEvent$ {
    export const inboundSchema: z.ZodType<ThreeDSecureRequestErrorEvent, z.ZodTypeDef, unknown> = z
        .object({
            type: ThreeDSecureRequestErrorEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: ThreeDSecureRequestErrorEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => ThreeDSecureRequestErrorEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureRequestErrorEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureRequestErrorEvent> =
        z
            .object({
                type: ThreeDSecureRequestErrorEventType$.outboundSchema.optional(),
                id: z.string().optional(),
                name: ThreeDSecureRequestErrorEventName$.outboundSchema.optional(),
                createdAt: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
                context: z
                    .lazy(() => ThreeDSecureRequestErrorEventContext$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    createdAt: "created_at",
                });
            });
}
