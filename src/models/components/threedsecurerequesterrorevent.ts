/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum ThreeDSecureRequestErrorEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `three-d-secure-request-error`.
 */
export enum ThreeDSecureRequestErrorEventName {
    ThreeDSecureRequestError = "three-d-secure-request-error",
}

/**
 * 3DS post-authentication context.
 */
export type ThreeDSecureRequestErrorEventContext = {
    /**
     * The URL that was called for this request.
     */
    url?: string | undefined;
    /**
     * The reason for the error.
     */
    reason?: string | undefined;
};

/**
 * Error details for a failed 3DS call.
 */
export type ThreeDSecureRequestErrorEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureRequestErrorEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-request-error`.
     */
    name?: ThreeDSecureRequestErrorEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS post-authentication context.
     */
    context?: ThreeDSecureRequestErrorEventContext | undefined;
};

/** @internal */
export const ThreeDSecureRequestErrorEventType$: z.ZodNativeEnum<
    typeof ThreeDSecureRequestErrorEventType
> = z.nativeEnum(ThreeDSecureRequestErrorEventType);

/** @internal */
export const ThreeDSecureRequestErrorEventName$: z.ZodNativeEnum<
    typeof ThreeDSecureRequestErrorEventName
> = z.nativeEnum(ThreeDSecureRequestErrorEventName);

/** @internal */
export namespace ThreeDSecureRequestErrorEventContext$ {
    export type Inbound = {
        url?: string | undefined;
        reason?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        ThreeDSecureRequestErrorEventContext,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            url: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureRequestErrorEventContext
    > = z
        .object({
            url: z.string().optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
            };
        });
}

/** @internal */
export namespace ThreeDSecureRequestErrorEvent$ {
    export type Inbound = {
        type?: ThreeDSecureRequestErrorEventType | undefined;
        id?: string | undefined;
        name?: ThreeDSecureRequestErrorEventName | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureRequestErrorEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ThreeDSecureRequestErrorEvent, z.ZodTypeDef, Inbound> = z
        .object({
            type: ThreeDSecureRequestErrorEventType$.optional(),
            id: z.string().optional(),
            name: ThreeDSecureRequestErrorEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => ThreeDSecureRequestErrorEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: ThreeDSecureRequestErrorEventType | undefined;
        id?: string | undefined;
        name?: ThreeDSecureRequestErrorEventName | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureRequestErrorEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureRequestErrorEvent> =
        z
            .object({
                type: ThreeDSecureRequestErrorEventType$.optional(),
                id: z.string().optional(),
                name: ThreeDSecureRequestErrorEventName$.optional(),
                createdAt: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
                context: z
                    .lazy(() => ThreeDSecureRequestErrorEventContext$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                    ...(v.context === undefined ? null : { context: v.context }),
                };
            });
}
