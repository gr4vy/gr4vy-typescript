/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GiftCardErrorCode,
  GiftCardErrorCode$inboundSchema,
  GiftCardErrorCode$outboundSchema,
} from "./giftcarderrorcode.js";
import {
  GiftCardRedemptionStatus,
  GiftCardRedemptionStatus$inboundSchema,
  GiftCardRedemptionStatus$outboundSchema,
} from "./giftcardredemptionstatus.js";
import {
  TransactionGiftCard,
  TransactionGiftCard$inboundSchema,
  TransactionGiftCard$Outbound,
  TransactionGiftCard$outboundSchema,
} from "./transactiongiftcard.js";

export type GiftCardRedemption = {
  /**
   * Always `gift-card-redemption`.
   */
  type?: "gift-card-redemption" | undefined;
  /**
   * The ID for the gift card redemption.
   */
  id: string;
  status: GiftCardRedemptionStatus;
  /**
   * The amount redeemed for this gift card.
   */
  amount: number;
  /**
   * The amount refunded for this gift card. This can not be larger than `amount`.
   */
  refundedAmount: number;
  /**
   * The gift card service's unique ID for the redemption.
   */
  giftCardServiceRedemptionId?: string | null | undefined;
  /**
   * If this gift card redemption resulted in an error, this will contain the internal code for the error.
   */
  errorCode?: GiftCardErrorCode | null | undefined;
  /**
   * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
   */
  rawErrorCode?: string | null | undefined;
  /**
   * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
   */
  rawErrorMessage?: string | null | undefined;
  giftCard: TransactionGiftCard;
};

/** @internal */
export const GiftCardRedemption$inboundSchema: z.ZodType<
  GiftCardRedemption,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("gift-card-redemption").default("gift-card-redemption"),
  id: z.string(),
  status: GiftCardRedemptionStatus$inboundSchema,
  amount: z.number().int(),
  refunded_amount: z.number().int(),
  gift_card_service_redemption_id: z.nullable(z.string()).optional(),
  error_code: z.nullable(GiftCardErrorCode$inboundSchema).optional(),
  raw_error_code: z.nullable(z.string()).optional(),
  raw_error_message: z.nullable(z.string()).optional(),
  gift_card: TransactionGiftCard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "refunded_amount": "refundedAmount",
    "gift_card_service_redemption_id": "giftCardServiceRedemptionId",
    "error_code": "errorCode",
    "raw_error_code": "rawErrorCode",
    "raw_error_message": "rawErrorMessage",
    "gift_card": "giftCard",
  });
});

/** @internal */
export type GiftCardRedemption$Outbound = {
  type: "gift-card-redemption";
  id: string;
  status: string;
  amount: number;
  refunded_amount: number;
  gift_card_service_redemption_id?: string | null | undefined;
  error_code?: string | null | undefined;
  raw_error_code?: string | null | undefined;
  raw_error_message?: string | null | undefined;
  gift_card: TransactionGiftCard$Outbound;
};

/** @internal */
export const GiftCardRedemption$outboundSchema: z.ZodType<
  GiftCardRedemption$Outbound,
  z.ZodTypeDef,
  GiftCardRedemption
> = z.object({
  type: z.literal("gift-card-redemption").default(
    "gift-card-redemption" as const,
  ),
  id: z.string(),
  status: GiftCardRedemptionStatus$outboundSchema,
  amount: z.number().int(),
  refundedAmount: z.number().int(),
  giftCardServiceRedemptionId: z.nullable(z.string()).optional(),
  errorCode: z.nullable(GiftCardErrorCode$outboundSchema).optional(),
  rawErrorCode: z.nullable(z.string()).optional(),
  rawErrorMessage: z.nullable(z.string()).optional(),
  giftCard: TransactionGiftCard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    refundedAmount: "refunded_amount",
    giftCardServiceRedemptionId: "gift_card_service_redemption_id",
    errorCode: "error_code",
    rawErrorCode: "raw_error_code",
    rawErrorMessage: "raw_error_message",
    giftCard: "gift_card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemption$ {
  /** @deprecated use `GiftCardRedemption$inboundSchema` instead. */
  export const inboundSchema = GiftCardRedemption$inboundSchema;
  /** @deprecated use `GiftCardRedemption$outboundSchema` instead. */
  export const outboundSchema = GiftCardRedemption$outboundSchema;
  /** @deprecated use `GiftCardRedemption$Outbound` instead. */
  export type Outbound = GiftCardRedemption$Outbound;
}

export function giftCardRedemptionToJSON(
  giftCardRedemption: GiftCardRedemption,
): string {
  return JSON.stringify(
    GiftCardRedemption$outboundSchema.parse(giftCardRedemption),
  );
}

export function giftCardRedemptionFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardRedemption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardRedemption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardRedemption' from JSON`,
  );
}
