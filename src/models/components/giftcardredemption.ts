/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `gift-card-redemption`.
 */
export const GiftCardRedemptionType = {
  GiftCardRedemption: "gift-card-redemption",
} as const;
/**
 * Always `gift-card-redemption`.
 */
export type GiftCardRedemptionType = ClosedEnum<typeof GiftCardRedemptionType>;

/**
 * The status of the gift card redemption for the `payment_method`.
 */
export const GiftCardRedemptionStatus = {
  Created: "created",
  Succeeded: "succeeded",
  Failed: "failed",
  Skipped: "skipped",
} as const;
/**
 * The status of the gift card redemption for the `payment_method`.
 */
export type GiftCardRedemptionStatus = ClosedEnum<
  typeof GiftCardRedemptionStatus
>;

/**
 * If this gift card redemption resulted in an error, this will contain the internal code for the error.
 */
export const GiftCardRedemptionGiftCardErrorCode = {
  InvalidGiftCard: "invalid_gift_card",
  ExpiredCard: "expired_card",
  InactiveCard: "inactive_card",
  InvalidServiceCredentials: "invalid_service_credentials",
  InvalidAmount: "invalid_amount",
  IncorrectCurrency: "incorrect_currency",
  InsufficientFunds: "insufficient_funds",
  InvalidServiceConfiguration: "invalid_service_configuration",
  OperationCanceled: "operation_canceled",
  ServiceError: "service_error",
  ServiceNetworkError: "service_network_error",
  UnknownError: "unknown_error",
} as const;
/**
 * If this gift card redemption resulted in an error, this will contain the internal code for the error.
 */
export type GiftCardRedemptionGiftCardErrorCode = ClosedEnum<
  typeof GiftCardRedemptionGiftCardErrorCode
>;

/**
 * Always `gift-card`.
 */
export const GiftCardRedemptionGiftCardType = {
  GiftCard: "gift-card",
} as const;
/**
 * Always `gift-card`.
 */
export type GiftCardRedemptionGiftCardType = ClosedEnum<
  typeof GiftCardRedemptionGiftCardType
>;

/**
 * The gift card used for this redemption
 */
export type GiftCardRedemptionGiftCard = {
  /**
   * Always `gift-card`.
   */
  type?: GiftCardRedemptionGiftCardType | undefined;
  /**
   * The ID for the gift card.
   */
  id?: string | undefined;
  /**
   * The first 6 digits of the full gift card number.
   */
  bin: string;
  /**
   * The 3 digits after the `bin` of the full gift card number.
   */
  subBin: string;
  /**
   * The last 4 digits for the gift card.
   */
  last4: string;
};

/**
 * Base model with JSON encoders.
 */
export type GiftCardRedemption = {
  /**
   * Always `gift-card-redemption`.
   */
  type?: GiftCardRedemptionType | undefined;
  /**
   * The ID for the gift card redemption.
   */
  id: string;
  /**
   * The status of the gift card redemption for the `payment_method`.
   */
  status: GiftCardRedemptionStatus;
  /**
   * The amount redeemed for this gift card.
   */
  amount: number;
  /**
   * The amount refunded for this gift card. This can not be larger than `amount`.
   */
  refundedAmount: number;
  /**
   * The gift card service's unique ID for the redemption.
   */
  giftCardServiceRedemptionId?: string | undefined;
  /**
   * If this gift card redemption resulted in an error, this will contain the internal code for the error.
   */
  errorCode?: GiftCardRedemptionGiftCardErrorCode | undefined;
  /**
   * If this gift card redemption resulted in an error, this will contain the raw error code received from the gift card provider.
   */
  rawErrorCode?: string | undefined;
  /**
   * If this gift card redemption resulted in an error, this will contain the raw error message received from the gift card provider.
   */
  rawErrorMessage?: string | undefined;
  /**
   * The gift card used for this redemption
   */
  giftCard: GiftCardRedemptionGiftCard;
};

/** @internal */
export const GiftCardRedemptionType$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionType
> = z.nativeEnum(GiftCardRedemptionType);

/** @internal */
export const GiftCardRedemptionType$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionType
> = GiftCardRedemptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionType$ {
  /** @deprecated use `GiftCardRedemptionType$inboundSchema` instead. */
  export const inboundSchema = GiftCardRedemptionType$inboundSchema;
  /** @deprecated use `GiftCardRedemptionType$outboundSchema` instead. */
  export const outboundSchema = GiftCardRedemptionType$outboundSchema;
}

/** @internal */
export const GiftCardRedemptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionStatus
> = z.nativeEnum(GiftCardRedemptionStatus);

/** @internal */
export const GiftCardRedemptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionStatus
> = GiftCardRedemptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionStatus$ {
  /** @deprecated use `GiftCardRedemptionStatus$inboundSchema` instead. */
  export const inboundSchema = GiftCardRedemptionStatus$inboundSchema;
  /** @deprecated use `GiftCardRedemptionStatus$outboundSchema` instead. */
  export const outboundSchema = GiftCardRedemptionStatus$outboundSchema;
}

/** @internal */
export const GiftCardRedemptionGiftCardErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionGiftCardErrorCode
> = z.nativeEnum(GiftCardRedemptionGiftCardErrorCode);

/** @internal */
export const GiftCardRedemptionGiftCardErrorCode$outboundSchema:
  z.ZodNativeEnum<typeof GiftCardRedemptionGiftCardErrorCode> =
    GiftCardRedemptionGiftCardErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionGiftCardErrorCode$ {
  /** @deprecated use `GiftCardRedemptionGiftCardErrorCode$inboundSchema` instead. */
  export const inboundSchema =
    GiftCardRedemptionGiftCardErrorCode$inboundSchema;
  /** @deprecated use `GiftCardRedemptionGiftCardErrorCode$outboundSchema` instead. */
  export const outboundSchema =
    GiftCardRedemptionGiftCardErrorCode$outboundSchema;
}

/** @internal */
export const GiftCardRedemptionGiftCardType$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionGiftCardType
> = z.nativeEnum(GiftCardRedemptionGiftCardType);

/** @internal */
export const GiftCardRedemptionGiftCardType$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardRedemptionGiftCardType
> = GiftCardRedemptionGiftCardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionGiftCardType$ {
  /** @deprecated use `GiftCardRedemptionGiftCardType$inboundSchema` instead. */
  export const inboundSchema = GiftCardRedemptionGiftCardType$inboundSchema;
  /** @deprecated use `GiftCardRedemptionGiftCardType$outboundSchema` instead. */
  export const outboundSchema = GiftCardRedemptionGiftCardType$outboundSchema;
}

/** @internal */
export const GiftCardRedemptionGiftCard$inboundSchema: z.ZodType<
  GiftCardRedemptionGiftCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GiftCardRedemptionGiftCardType$inboundSchema.default("gift-card"),
  id: z.string().optional(),
  bin: z.string(),
  sub_bin: z.string(),
  last4: z.string(),
}).transform((v) => {
  return remap$(v, {
    "sub_bin": "subBin",
  });
});

/** @internal */
export type GiftCardRedemptionGiftCard$Outbound = {
  type: string;
  id?: string | undefined;
  bin: string;
  sub_bin: string;
  last4: string;
};

/** @internal */
export const GiftCardRedemptionGiftCard$outboundSchema: z.ZodType<
  GiftCardRedemptionGiftCard$Outbound,
  z.ZodTypeDef,
  GiftCardRedemptionGiftCard
> = z.object({
  type: GiftCardRedemptionGiftCardType$outboundSchema.default("gift-card"),
  id: z.string().optional(),
  bin: z.string(),
  subBin: z.string(),
  last4: z.string(),
}).transform((v) => {
  return remap$(v, {
    subBin: "sub_bin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionGiftCard$ {
  /** @deprecated use `GiftCardRedemptionGiftCard$inboundSchema` instead. */
  export const inboundSchema = GiftCardRedemptionGiftCard$inboundSchema;
  /** @deprecated use `GiftCardRedemptionGiftCard$outboundSchema` instead. */
  export const outboundSchema = GiftCardRedemptionGiftCard$outboundSchema;
  /** @deprecated use `GiftCardRedemptionGiftCard$Outbound` instead. */
  export type Outbound = GiftCardRedemptionGiftCard$Outbound;
}

export function giftCardRedemptionGiftCardToJSON(
  giftCardRedemptionGiftCard: GiftCardRedemptionGiftCard,
): string {
  return JSON.stringify(
    GiftCardRedemptionGiftCard$outboundSchema.parse(giftCardRedemptionGiftCard),
  );
}

export function giftCardRedemptionGiftCardFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardRedemptionGiftCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardRedemptionGiftCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardRedemptionGiftCard' from JSON`,
  );
}

/** @internal */
export const GiftCardRedemption$inboundSchema: z.ZodType<
  GiftCardRedemption,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GiftCardRedemptionType$inboundSchema.default("gift-card-redemption"),
  id: z.string(),
  status: GiftCardRedemptionStatus$inboundSchema,
  amount: z.number().int(),
  refunded_amount: z.number().int(),
  gift_card_service_redemption_id: z.string().optional(),
  error_code: GiftCardRedemptionGiftCardErrorCode$inboundSchema.optional(),
  raw_error_code: z.string().optional(),
  raw_error_message: z.string().optional(),
  gift_card: z.lazy(() => GiftCardRedemptionGiftCard$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "refunded_amount": "refundedAmount",
    "gift_card_service_redemption_id": "giftCardServiceRedemptionId",
    "error_code": "errorCode",
    "raw_error_code": "rawErrorCode",
    "raw_error_message": "rawErrorMessage",
    "gift_card": "giftCard",
  });
});

/** @internal */
export type GiftCardRedemption$Outbound = {
  type: string;
  id: string;
  status: string;
  amount: number;
  refunded_amount: number;
  gift_card_service_redemption_id?: string | undefined;
  error_code?: string | undefined;
  raw_error_code?: string | undefined;
  raw_error_message?: string | undefined;
  gift_card: GiftCardRedemptionGiftCard$Outbound;
};

/** @internal */
export const GiftCardRedemption$outboundSchema: z.ZodType<
  GiftCardRedemption$Outbound,
  z.ZodTypeDef,
  GiftCardRedemption
> = z.object({
  type: GiftCardRedemptionType$outboundSchema.default("gift-card-redemption"),
  id: z.string(),
  status: GiftCardRedemptionStatus$outboundSchema,
  amount: z.number().int(),
  refundedAmount: z.number().int(),
  giftCardServiceRedemptionId: z.string().optional(),
  errorCode: GiftCardRedemptionGiftCardErrorCode$outboundSchema.optional(),
  rawErrorCode: z.string().optional(),
  rawErrorMessage: z.string().optional(),
  giftCard: z.lazy(() => GiftCardRedemptionGiftCard$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    refundedAmount: "refunded_amount",
    giftCardServiceRedemptionId: "gift_card_service_redemption_id",
    errorCode: "error_code",
    rawErrorCode: "raw_error_code",
    rawErrorMessage: "raw_error_message",
    giftCard: "gift_card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemption$ {
  /** @deprecated use `GiftCardRedemption$inboundSchema` instead. */
  export const inboundSchema = GiftCardRedemption$inboundSchema;
  /** @deprecated use `GiftCardRedemption$outboundSchema` instead. */
  export const outboundSchema = GiftCardRedemption$outboundSchema;
  /** @deprecated use `GiftCardRedemption$Outbound` instead. */
  export type Outbound = GiftCardRedemption$Outbound;
}

export function giftCardRedemptionToJSON(
  giftCardRedemption: GiftCardRedemption,
): string {
  return JSON.stringify(
    GiftCardRedemption$outboundSchema.parse(giftCardRedemption),
  );
}

export function giftCardRedemptionFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardRedemption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardRedemption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardRedemption' from JSON`,
  );
}
