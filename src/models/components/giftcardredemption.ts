/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    GiftCardSnapshot,
    GiftCardSnapshot$inboundSchema,
    GiftCardSnapshot$Outbound,
    GiftCardSnapshot$outboundSchema,
} from "./giftcardsnapshot.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const GiftCardRedemptionType = {
    GiftCardRedemption: "gift-card-redemption",
} as const;
/**
 * The type of this resource.
 */
export type GiftCardRedemptionType = ClosedEnum<typeof GiftCardRedemptionType>;

/**
 * The status of the gift card redemption for the `payment_method`.
 */
export const GiftCardRedemptionStatus = {
    Created: "created",
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
} as const;
/**
 * The status of the gift card redemption for the `payment_method`.
 */
export type GiftCardRedemptionStatus = ClosedEnum<typeof GiftCardRedemptionStatus>;

/**
 * If this gift card redemption resulted in an error, this will
 *
 * @remarks
 * contain the internal code for the error.
 */
export const ErrorCode = {
    ExpiredCard: "expired_card",
    InactiveCard: "inactive_card",
    IncorrectCurrency: "incorrect_currency",
    InsufficientFunds: "insufficient_funds",
    InvalidAmount: "invalid_amount",
    InvalidGiftCard: "invalid_gift_card",
    InvalidServiceConfiguration: "invalid_service_configuration",
    InvalidServiceCredentials: "invalid_service_credentials",
    OperationCanceled: "operation_canceled",
    ServiceError: "service_error",
    ServiceNetworkError: "service_network_error",
    UnknownError: "unknown_error",
} as const;
/**
 * If this gift card redemption resulted in an error, this will
 *
 * @remarks
 * contain the internal code for the error.
 */
export type ErrorCode = ClosedEnum<typeof ErrorCode>;

/**
 * A redemption of a gift card used in a transaction.
 */
export type GiftCardRedemption = {
    /**
     * The type of this resource.
     */
    type?: GiftCardRedemptionType | undefined;
    /**
     * The ID of this gift card redemption. This may be `null` if the
     *
     * @remarks
     * no redemption happened.
     */
    id?: string | null | undefined;
    /**
     * The status of the gift card redemption for the `payment_method`.
     */
    status?: GiftCardRedemptionStatus | undefined;
    /**
     * The amount redeemed for this gift card.
     */
    amount?: number | undefined;
    /**
     * The amount refunded for this gift card. This can not be larger
     *
     * @remarks
     * than `amount`.
     */
    refundedAmount?: number | undefined;
    /**
     * The gift card service's unique ID for the redemption.
     */
    giftCardServiceRedemptionId?: string | null | undefined;
    /**
     * If this gift card redemption resulted in an error, this will
     *
     * @remarks
     * contain the internal code for the error.
     */
    errorCode?: ErrorCode | null | undefined;
    /**
     * If this gift card redemption resulted in an error, this will
     *
     * @remarks
     * contain the raw error code received from the gift card provider.
     */
    rawErrorCode?: string | null | undefined;
    /**
     * If this gift card redemption resulted in an error, this will
     *
     * @remarks
     * contain the raw error message received from the gift card provider.
     */
    rawErrorMessage?: string | null | undefined;
    /**
     * A snapshot of a gift card used in a transaction.
     */
    giftCard?: GiftCardSnapshot | undefined;
};

/** @internal */
export const GiftCardRedemptionType$inboundSchema: z.ZodNativeEnum<typeof GiftCardRedemptionType> =
    z.nativeEnum(GiftCardRedemptionType);

/** @internal */
export const GiftCardRedemptionType$outboundSchema: z.ZodNativeEnum<typeof GiftCardRedemptionType> =
    GiftCardRedemptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionType$ {
    /** @deprecated use `GiftCardRedemptionType$inboundSchema` instead. */
    export const inboundSchema = GiftCardRedemptionType$inboundSchema;
    /** @deprecated use `GiftCardRedemptionType$outboundSchema` instead. */
    export const outboundSchema = GiftCardRedemptionType$outboundSchema;
}

/** @internal */
export const GiftCardRedemptionStatus$inboundSchema: z.ZodNativeEnum<
    typeof GiftCardRedemptionStatus
> = z.nativeEnum(GiftCardRedemptionStatus);

/** @internal */
export const GiftCardRedemptionStatus$outboundSchema: z.ZodNativeEnum<
    typeof GiftCardRedemptionStatus
> = GiftCardRedemptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemptionStatus$ {
    /** @deprecated use `GiftCardRedemptionStatus$inboundSchema` instead. */
    export const inboundSchema = GiftCardRedemptionStatus$inboundSchema;
    /** @deprecated use `GiftCardRedemptionStatus$outboundSchema` instead. */
    export const outboundSchema = GiftCardRedemptionStatus$outboundSchema;
}

/** @internal */
export const ErrorCode$inboundSchema: z.ZodNativeEnum<typeof ErrorCode> = z.nativeEnum(ErrorCode);

/** @internal */
export const ErrorCode$outboundSchema: z.ZodNativeEnum<typeof ErrorCode> = ErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorCode$ {
    /** @deprecated use `ErrorCode$inboundSchema` instead. */
    export const inboundSchema = ErrorCode$inboundSchema;
    /** @deprecated use `ErrorCode$outboundSchema` instead. */
    export const outboundSchema = ErrorCode$outboundSchema;
}

/** @internal */
export const GiftCardRedemption$inboundSchema: z.ZodType<
    GiftCardRedemption,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: GiftCardRedemptionType$inboundSchema.optional(),
        id: z.nullable(z.string()).optional(),
        status: GiftCardRedemptionStatus$inboundSchema.optional(),
        amount: z.number().int().optional(),
        refunded_amount: z.number().int().optional(),
        gift_card_service_redemption_id: z.nullable(z.string()).optional(),
        error_code: z.nullable(ErrorCode$inboundSchema).optional(),
        raw_error_code: z.nullable(z.string()).optional(),
        raw_error_message: z.nullable(z.string()).optional(),
        gift_card: GiftCardSnapshot$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            refunded_amount: "refundedAmount",
            gift_card_service_redemption_id: "giftCardServiceRedemptionId",
            error_code: "errorCode",
            raw_error_code: "rawErrorCode",
            raw_error_message: "rawErrorMessage",
            gift_card: "giftCard",
        });
    });

/** @internal */
export type GiftCardRedemption$Outbound = {
    type?: string | undefined;
    id?: string | null | undefined;
    status?: string | undefined;
    amount?: number | undefined;
    refunded_amount?: number | undefined;
    gift_card_service_redemption_id?: string | null | undefined;
    error_code?: string | null | undefined;
    raw_error_code?: string | null | undefined;
    raw_error_message?: string | null | undefined;
    gift_card?: GiftCardSnapshot$Outbound | undefined;
};

/** @internal */
export const GiftCardRedemption$outboundSchema: z.ZodType<
    GiftCardRedemption$Outbound,
    z.ZodTypeDef,
    GiftCardRedemption
> = z
    .object({
        type: GiftCardRedemptionType$outboundSchema.optional(),
        id: z.nullable(z.string()).optional(),
        status: GiftCardRedemptionStatus$outboundSchema.optional(),
        amount: z.number().int().optional(),
        refundedAmount: z.number().int().optional(),
        giftCardServiceRedemptionId: z.nullable(z.string()).optional(),
        errorCode: z.nullable(ErrorCode$outboundSchema).optional(),
        rawErrorCode: z.nullable(z.string()).optional(),
        rawErrorMessage: z.nullable(z.string()).optional(),
        giftCard: GiftCardSnapshot$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            refundedAmount: "refunded_amount",
            giftCardServiceRedemptionId: "gift_card_service_redemption_id",
            errorCode: "error_code",
            rawErrorCode: "raw_error_code",
            rawErrorMessage: "raw_error_message",
            giftCard: "gift_card",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardRedemption$ {
    /** @deprecated use `GiftCardRedemption$inboundSchema` instead. */
    export const inboundSchema = GiftCardRedemption$inboundSchema;
    /** @deprecated use `GiftCardRedemption$outboundSchema` instead. */
    export const outboundSchema = GiftCardRedemption$outboundSchema;
    /** @deprecated use `GiftCardRedemption$Outbound` instead. */
    export type Outbound = GiftCardRedemption$Outbound;
}
