/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The billing address for the buyer.
 */
export type Address = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The kind of tax ID
 */
export const TaxIdKind = {
  AeTrn: "ae.trn",
  AuAbn: "au.abn",
  ArDni: "ar.dni",
  ArCuil: "ar.cuil",
  ArCuit: "ar.cuit",
  BrCnpj: "br.cnpj",
  BrCpf: "br.cpf",
  CaBn: "ca.bn",
  CaGstHst: "ca.gst_hst",
  CaPstBc: "ca.pst_bc",
  CaPstMb: "ca.pst_mb",
  CaPstSk: "ca.pst_sk",
  CaQst: "ca.qst",
  ChVat: "ch.vat",
  ClTin: "cl.tin",
  CoItin: "co.itin",
  CoNit: "co.nit",
  EsCif: "es.cif",
  EuVat: "eu.vat",
  GbVat: "gb.vat",
  HkBr: "hk.br",
  IdNik: "id.nik",
  IdNpwp: "id.npwp",
  InGst: "in.gst",
  JpCn: "jp.cn",
  JpRn: "jp.rn",
  KrBrn: "kr.brn",
  LiUid: "li.uid",
  MxCurp: "mx.curp",
  MxRfc: "mx.rfc",
  MyFrp: "my.frp",
  MyItn: "my.itn",
  MyNric: "my.nric",
  MySst: "my.sst",
  NoVat: "no.vat",
  NzGst: "nz.gst",
  PhTin: "ph.tin",
  RuInn: "ru.inn",
  RuKpp: "ru.kpp",
  SaVat: "sa.vat",
  SgGst: "sg.gst",
  SgUen: "sg.uen",
  ThId: "th.id",
  ThVat: "th.vat",
  TwVat: "tw.vat",
  UsEin: "us.ein",
  ZaVat: "za.vat",
  BoCi: "bo.ci",
} as const;
/**
 * The kind of tax ID
 */
export type TaxIdKind = ClosedEnum<typeof TaxIdKind>;

/**
 * The tax ID information associated with the billing details.
 */
export type TaxId = {
  /**
   * The tax ID for the buyer.
   */
  value: string;
  /**
   * The kind of tax ID
   */
  kind: TaxIdKind;
};

/**
 * Base model with JSON encoders.
 */
export type BillingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: Address | undefined;
  /**
   * The tax ID information associated with the billing details.
   */
  taxId?: TaxId | undefined;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    city: z.string().optional(),
    country: z.string().optional(),
    postal_code: z.string().optional(),
    state: z.string().optional(),
    state_code: z.string().optional(),
    house_number_or_name: z.string().optional(),
    line1: z.string().optional(),
    line2: z.string().optional(),
    organization: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "postal_code": "postalCode",
      "state_code": "stateCode",
      "house_number_or_name": "houseNumberOrName",
    });
  });

/** @internal */
export type Address$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}

/** @internal */
export const TaxIdKind$inboundSchema: z.ZodNativeEnum<typeof TaxIdKind> = z
  .nativeEnum(TaxIdKind);

/** @internal */
export const TaxIdKind$outboundSchema: z.ZodNativeEnum<typeof TaxIdKind> =
  TaxIdKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxIdKind$ {
  /** @deprecated use `TaxIdKind$inboundSchema` instead. */
  export const inboundSchema = TaxIdKind$inboundSchema;
  /** @deprecated use `TaxIdKind$outboundSchema` instead. */
  export const outboundSchema = TaxIdKind$outboundSchema;
}

/** @internal */
export const TaxId$inboundSchema: z.ZodType<TaxId, z.ZodTypeDef, unknown> = z
  .object({
    value: z.string(),
    kind: TaxIdKind$inboundSchema,
  });

/** @internal */
export type TaxId$Outbound = {
  value: string;
  kind: string;
};

/** @internal */
export const TaxId$outboundSchema: z.ZodType<
  TaxId$Outbound,
  z.ZodTypeDef,
  TaxId
> = z.object({
  value: z.string(),
  kind: TaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxId$ {
  /** @deprecated use `TaxId$inboundSchema` instead. */
  export const inboundSchema = TaxId$inboundSchema;
  /** @deprecated use `TaxId$outboundSchema` instead. */
  export const outboundSchema = TaxId$outboundSchema;
  /** @deprecated use `TaxId$Outbound` instead. */
  export type Outbound = TaxId$Outbound;
}

export function taxIdToJSON(taxId: TaxId): string {
  return JSON.stringify(TaxId$outboundSchema.parse(taxId));
}

export function taxIdFromJSON(
  jsonString: string,
): SafeParseResult<TaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxId' from JSON`,
  );
}

/** @internal */
export const BillingDetails$inboundSchema: z.ZodType<
  BillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => Address$inboundSchema).optional(),
  tax_id: z.lazy(() => TaxId$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "tax_id": "taxId",
  });
});

/** @internal */
export type BillingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: Address$Outbound | undefined;
  tax_id?: TaxId$Outbound | undefined;
};

/** @internal */
export const BillingDetails$outboundSchema: z.ZodType<
  BillingDetails$Outbound,
  z.ZodTypeDef,
  BillingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => Address$outboundSchema).optional(),
  taxId: z.lazy(() => TaxId$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetails$ {
  /** @deprecated use `BillingDetails$inboundSchema` instead. */
  export const inboundSchema = BillingDetails$inboundSchema;
  /** @deprecated use `BillingDetails$outboundSchema` instead. */
  export const outboundSchema = BillingDetails$outboundSchema;
  /** @deprecated use `BillingDetails$Outbound` instead. */
  export type Outbound = BillingDetails$Outbound;
}

export function billingDetailsToJSON(billingDetails: BillingDetails): string {
  return JSON.stringify(BillingDetails$outboundSchema.parse(billingDetails));
}

export function billingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<BillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingDetails' from JSON`,
  );
}
