/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { TaxIdKind, TaxIdKind$inboundSchema, TaxIdKind$outboundSchema } from "./taxidkind.js";
import * as z from "zod";

/**
 * The address for the person.
 */
export type BillingDetailsAddress = {
    /**
     * The city of the address
     */
    city?: string | null | undefined;
    /**
     * The country of the address
     */
    country?: string | null | undefined;
    /**
     * The postal code of the address
     */
    postalCode?: string | null | undefined;
    /**
     * The full state name of the address
     */
    state?: string | null | undefined;
    /**
     * The state code of the address
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name of the address.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The company or organization name of the address.
     */
    organization?: string | null | undefined;
};

/**
 * The tax ID for these buyer details.
 */
export type BillingDetailsTaxId = {
    /**
     * The regional tax identifier
     */
    value: string;
    /**
     * The kind of tax identifier in a format matching `country.name`, e.g. `gb.vat`.
     */
    kind: TaxIdKind;
};

/**
 * Base model with JSON encoders.
 */
export type BillingDetails = {
    /**
     * The first or given name for the person.
     */
    firstName?: string | null | undefined;
    /**
     * The last or family name for the person.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the person.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the person.
     */
    phoneNumber?: string | null | undefined;
    /**
     * The address for the person.
     */
    address?: BillingDetailsAddress | null | undefined;
    /**
     * The tax ID for these buyer details.
     */
    taxId?: BillingDetailsTaxId | null | undefined;
};

/** @internal */
export const BillingDetailsAddress$inboundSchema: z.ZodType<
    BillingDetailsAddress,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postal_code: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type BillingDetailsAddress$Outbound = {
    city?: string | null | undefined;
    country?: string | null | undefined;
    postal_code?: string | null | undefined;
    state?: string | null | undefined;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const BillingDetailsAddress$outboundSchema: z.ZodType<
    BillingDetailsAddress$Outbound,
    z.ZodTypeDef,
    BillingDetailsAddress
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postalCode: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsAddress$ {
    /** @deprecated use `BillingDetailsAddress$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsAddress$inboundSchema;
    /** @deprecated use `BillingDetailsAddress$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsAddress$outboundSchema;
    /** @deprecated use `BillingDetailsAddress$Outbound` instead. */
    export type Outbound = BillingDetailsAddress$Outbound;
}

/** @internal */
export const BillingDetailsTaxId$inboundSchema: z.ZodType<
    BillingDetailsTaxId,
    z.ZodTypeDef,
    unknown
> = z.object({
    value: z.string(),
    kind: TaxIdKind$inboundSchema,
});

/** @internal */
export type BillingDetailsTaxId$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const BillingDetailsTaxId$outboundSchema: z.ZodType<
    BillingDetailsTaxId$Outbound,
    z.ZodTypeDef,
    BillingDetailsTaxId
> = z.object({
    value: z.string(),
    kind: TaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetailsTaxId$ {
    /** @deprecated use `BillingDetailsTaxId$inboundSchema` instead. */
    export const inboundSchema = BillingDetailsTaxId$inboundSchema;
    /** @deprecated use `BillingDetailsTaxId$outboundSchema` instead. */
    export const outboundSchema = BillingDetailsTaxId$outboundSchema;
    /** @deprecated use `BillingDetailsTaxId$Outbound` instead. */
    export type Outbound = BillingDetailsTaxId$Outbound;
}

/** @internal */
export const BillingDetails$inboundSchema: z.ZodType<BillingDetails, z.ZodTypeDef, unknown> = z
    .object({
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BillingDetailsAddress$inboundSchema)).optional(),
        tax_id: z.nullable(z.lazy(() => BillingDetailsTaxId$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type BillingDetails$Outbound = {
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: BillingDetailsAddress$Outbound | null | undefined;
    tax_id?: BillingDetailsTaxId$Outbound | null | undefined;
};

/** @internal */
export const BillingDetails$outboundSchema: z.ZodType<
    BillingDetails$Outbound,
    z.ZodTypeDef,
    BillingDetails
> = z
    .object({
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BillingDetailsAddress$outboundSchema)).optional(),
        taxId: z.nullable(z.lazy(() => BillingDetailsTaxId$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetails$ {
    /** @deprecated use `BillingDetails$inboundSchema` instead. */
    export const inboundSchema = BillingDetails$inboundSchema;
    /** @deprecated use `BillingDetails$outboundSchema` instead. */
    export const outboundSchema = BillingDetails$outboundSchema;
    /** @deprecated use `BillingDetails$Outbound` instead. */
    export type Outbound = BillingDetails$Outbound;
}
