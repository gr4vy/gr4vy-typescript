/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `report-execution`.
 */
export enum ReportExecutionType {
    ReportExecution = "report-execution",
}

/**
 * The status of this report execution.
 */
export enum ReportExecutionStatus {
    Dispatched = "dispatched",
    Failed = "failed",
    Pending = "pending",
    Processing = "processing",
    Succeeded = "succeeded",
}

/**
 * Contains the context values used to compute the value of date-time
 *
 * @remarks
 * placeholders such as `month_start` and `month_end` if present in
 * the report's specification. Date-time placeholders are dynamic
 * timestamps that change with every report execution.
 */
export type ReportExecutionContext = {
    /**
     * The date and time used by the system as a reference point to
     *
     * @remarks
     * compute date-time placeholders.
     */
    referenceTimestamp?: Date | undefined;
    /**
     * The time zone used to compute date-time placeholders.
     */
    referenceTimezone?: string | undefined;
};

/**
 * The type of this resource. Is always `report`.
 */
export enum ReportExecutionReportType {
    Report = "report",
}

/**
 * The type of the creator of this report.
 */
export enum ReportExecutionCreatorType {
    User = "user",
    PrivateKey = "private_key",
}

/**
 * The report associated with this report execution.
 */
export type ReportSummary = {
    /**
     * The type of this resource. Is always `report`.
     */
    type?: ReportExecutionReportType | undefined;
    /**
     * The unique identifier for this report.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The name of this report.
     */
    name?: string | undefined;
    /**
     * The unique identifier for the creator of this report.
     */
    creatorId?: string | null | undefined;
    /**
     * The name of the creator of this report.
     */
    creatorDisplayName?: string | null | undefined;
    /**
     * The type of the creator of this report.
     */
    creatorType?: ReportExecutionCreatorType | null | undefined;
};

/**
 * A report execution.
 */
export type ReportExecution = {
    /**
     * The type of this resource. Is always `report-execution`.
     */
    type?: ReportExecutionType | undefined;
    /**
     * The unique identifier for this report execution.
     */
    id?: string | undefined;
    /**
     * The date and time this report execution was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time this report execution was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The status of this report execution.
     */
    status?: ReportExecutionStatus | undefined;
    /**
     * Contains the context values used to compute the value of date-time
     *
     * @remarks
     * placeholders such as `month_start` and `month_end` if present in
     * the report's specification. Date-time placeholders are dynamic
     * timestamps that change with every report execution.
     */
    context?: ReportExecutionContext | undefined;
    /**
     * The report associated with this report execution.
     */
    report?: ReportSummary | undefined;
};

/** @internal */
export const ReportExecutionType$ = z.nativeEnum(ReportExecutionType);

/** @internal */
export const ReportExecutionStatus$ = z.nativeEnum(ReportExecutionStatus);

/** @internal */
export namespace ReportExecutionContext$ {
    export type Inbound = {
        reference_timestamp?: string | undefined;
        reference_timezone?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ReportExecutionContext, z.ZodTypeDef, Inbound> = z
        .object({
            reference_timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            reference_timezone: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.reference_timestamp === undefined
                    ? null
                    : { referenceTimestamp: v.reference_timestamp }),
                ...(v.reference_timezone === undefined
                    ? null
                    : { referenceTimezone: v.reference_timezone }),
            };
        });

    export type Outbound = {
        reference_timestamp?: string | undefined;
        reference_timezone?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportExecutionContext> = z
        .object({
            referenceTimestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            referenceTimezone: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.referenceTimestamp === undefined
                    ? null
                    : { reference_timestamp: v.referenceTimestamp }),
                ...(v.referenceTimezone === undefined
                    ? null
                    : { reference_timezone: v.referenceTimezone }),
            };
        });
}

/** @internal */
export const ReportExecutionReportType$ = z.nativeEnum(ReportExecutionReportType);

/** @internal */
export const ReportExecutionCreatorType$ = z.nativeEnum(ReportExecutionCreatorType);

/** @internal */
export namespace ReportSummary$ {
    export type Inbound = {
        type?: ReportExecutionReportType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        name?: string | undefined;
        creator_id?: string | null | undefined;
        creator_display_name?: string | null | undefined;
        creator_type?: ReportExecutionCreatorType | null | undefined;
    };

    export const inboundSchema: z.ZodType<ReportSummary, z.ZodTypeDef, Inbound> = z
        .object({
            type: ReportExecutionReportType$.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            name: z.string().optional(),
            creator_id: z.nullable(z.string()).optional(),
            creator_display_name: z.nullable(z.string()).optional(),
            creator_type: z.nullable(ReportExecutionCreatorType$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.creator_id === undefined ? null : { creatorId: v.creator_id }),
                ...(v.creator_display_name === undefined
                    ? null
                    : { creatorDisplayName: v.creator_display_name }),
                ...(v.creator_type === undefined ? null : { creatorType: v.creator_type }),
            };
        });

    export type Outbound = {
        type?: ReportExecutionReportType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        name?: string | undefined;
        creator_id?: string | null | undefined;
        creator_display_name?: string | null | undefined;
        creator_type?: ReportExecutionCreatorType | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportSummary> = z
        .object({
            type: ReportExecutionReportType$.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            name: z.string().optional(),
            creatorId: z.nullable(z.string()).optional(),
            creatorDisplayName: z.nullable(z.string()).optional(),
            creatorType: z.nullable(ReportExecutionCreatorType$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.creatorId === undefined ? null : { creator_id: v.creatorId }),
                ...(v.creatorDisplayName === undefined
                    ? null
                    : { creator_display_name: v.creatorDisplayName }),
                ...(v.creatorType === undefined ? null : { creator_type: v.creatorType }),
            };
        });
}

/** @internal */
export namespace ReportExecution$ {
    export type Inbound = {
        type?: ReportExecutionType | undefined;
        id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        status?: ReportExecutionStatus | undefined;
        context?: ReportExecutionContext$.Inbound | undefined;
        report?: ReportSummary$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ReportExecution, z.ZodTypeDef, Inbound> = z
        .object({
            type: ReportExecutionType$.optional(),
            id: z.string().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: ReportExecutionStatus$.optional(),
            context: z.lazy(() => ReportExecutionContext$.inboundSchema).optional(),
            report: z.lazy(() => ReportSummary$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.context === undefined ? null : { context: v.context }),
                ...(v.report === undefined ? null : { report: v.report }),
            };
        });

    export type Outbound = {
        type?: ReportExecutionType | undefined;
        id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        status?: ReportExecutionStatus | undefined;
        context?: ReportExecutionContext$.Outbound | undefined;
        report?: ReportSummary$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportExecution> = z
        .object({
            type: ReportExecutionType$.optional(),
            id: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: ReportExecutionStatus$.optional(),
            context: z.lazy(() => ReportExecutionContext$.outboundSchema).optional(),
            report: z.lazy(() => ReportSummary$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.context === undefined ? null : { context: v.context }),
                ...(v.report === undefined ? null : { report: v.report }),
            };
        });
}
