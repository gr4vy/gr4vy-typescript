/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `report-execution`.
 */
export const ReportExecutionType = {
    ReportExecution: "report-execution",
} as const;
/**
 * The type of this resource. Is always `report-execution`.
 */
export type ReportExecutionType = ClosedEnum<typeof ReportExecutionType>;

/**
 * The status of this report execution.
 */
export const ReportExecutionStatus = {
    Dispatched: "dispatched",
    Failed: "failed",
    Pending: "pending",
    Processing: "processing",
    Succeeded: "succeeded",
} as const;
/**
 * The status of this report execution.
 */
export type ReportExecutionStatus = ClosedEnum<typeof ReportExecutionStatus>;

/**
 * Contains the context values used to compute the value of date-time
 *
 * @remarks
 * placeholders such as `month_start` and `month_end` if present in
 * the report's specification. Date-time placeholders are dynamic
 * timestamps that change with every report execution.
 */
export type ReportExecutionContext = {
    /**
     * The date and time used by the system as a reference point to
     *
     * @remarks
     * compute date-time placeholders.
     */
    referenceTimestamp?: Date | undefined;
    /**
     * The time zone used to compute date-time placeholders.
     */
    referenceTimezone?: string | undefined;
};

/**
 * The type of this resource. Is always `report`.
 */
export const ReportExecutionReportType = {
    Report: "report",
} as const;
/**
 * The type of this resource. Is always `report`.
 */
export type ReportExecutionReportType = ClosedEnum<typeof ReportExecutionReportType>;

/**
 * The type of the creator of this report.
 */
export const ReportExecutionCreatorType = {
    User: "user",
    PrivateKey: "private_key",
} as const;
/**
 * The type of the creator of this report.
 */
export type ReportExecutionCreatorType = ClosedEnum<typeof ReportExecutionCreatorType>;

/**
 * The report associated with this report execution.
 */
export type ReportSummary = {
    /**
     * The type of this resource. Is always `report`.
     */
    type?: ReportExecutionReportType | undefined;
    /**
     * The unique identifier for this report.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The name of this report.
     */
    name?: string | undefined;
    /**
     * The unique identifier for the creator of this report.
     */
    creatorId?: string | null | undefined;
    /**
     * The name of the creator of this report.
     */
    creatorDisplayName?: string | null | undefined;
    /**
     * The type of the creator of this report.
     */
    creatorType?: ReportExecutionCreatorType | null | undefined;
};

/**
 * A report execution.
 */
export type ReportExecution = {
    /**
     * The type of this resource. Is always `report-execution`.
     */
    type?: ReportExecutionType | undefined;
    /**
     * The unique identifier for this report execution.
     */
    id?: string | undefined;
    /**
     * The date and time this report execution was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time this report execution was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The status of this report execution.
     */
    status?: ReportExecutionStatus | undefined;
    /**
     * Contains the context values used to compute the value of date-time
     *
     * @remarks
     * placeholders such as `month_start` and `month_end` if present in
     * the report's specification. Date-time placeholders are dynamic
     * timestamps that change with every report execution.
     */
    context?: ReportExecutionContext | undefined;
    /**
     * The report associated with this report execution.
     */
    report?: ReportSummary | undefined;
};

/** @internal */
export const ReportExecutionType$inboundSchema: z.ZodNativeEnum<typeof ReportExecutionType> =
    z.nativeEnum(ReportExecutionType);

/** @internal */
export const ReportExecutionType$outboundSchema: z.ZodNativeEnum<typeof ReportExecutionType> =
    ReportExecutionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionType$ {
    /** @deprecated use `ReportExecutionType$inboundSchema` instead. */
    export const inboundSchema = ReportExecutionType$inboundSchema;
    /** @deprecated use `ReportExecutionType$outboundSchema` instead. */
    export const outboundSchema = ReportExecutionType$outboundSchema;
}

/** @internal */
export const ReportExecutionStatus$inboundSchema: z.ZodNativeEnum<typeof ReportExecutionStatus> =
    z.nativeEnum(ReportExecutionStatus);

/** @internal */
export const ReportExecutionStatus$outboundSchema: z.ZodNativeEnum<typeof ReportExecutionStatus> =
    ReportExecutionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionStatus$ {
    /** @deprecated use `ReportExecutionStatus$inboundSchema` instead. */
    export const inboundSchema = ReportExecutionStatus$inboundSchema;
    /** @deprecated use `ReportExecutionStatus$outboundSchema` instead. */
    export const outboundSchema = ReportExecutionStatus$outboundSchema;
}

/** @internal */
export const ReportExecutionContext$inboundSchema: z.ZodType<
    ReportExecutionContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        reference_timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        reference_timezone: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            reference_timestamp: "referenceTimestamp",
            reference_timezone: "referenceTimezone",
        });
    });

/** @internal */
export type ReportExecutionContext$Outbound = {
    reference_timestamp?: string | undefined;
    reference_timezone?: string | undefined;
};

/** @internal */
export const ReportExecutionContext$outboundSchema: z.ZodType<
    ReportExecutionContext$Outbound,
    z.ZodTypeDef,
    ReportExecutionContext
> = z
    .object({
        referenceTimestamp: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        referenceTimezone: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            referenceTimestamp: "reference_timestamp",
            referenceTimezone: "reference_timezone",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionContext$ {
    /** @deprecated use `ReportExecutionContext$inboundSchema` instead. */
    export const inboundSchema = ReportExecutionContext$inboundSchema;
    /** @deprecated use `ReportExecutionContext$outboundSchema` instead. */
    export const outboundSchema = ReportExecutionContext$outboundSchema;
    /** @deprecated use `ReportExecutionContext$Outbound` instead. */
    export type Outbound = ReportExecutionContext$Outbound;
}

/** @internal */
export const ReportExecutionReportType$inboundSchema: z.ZodNativeEnum<
    typeof ReportExecutionReportType
> = z.nativeEnum(ReportExecutionReportType);

/** @internal */
export const ReportExecutionReportType$outboundSchema: z.ZodNativeEnum<
    typeof ReportExecutionReportType
> = ReportExecutionReportType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionReportType$ {
    /** @deprecated use `ReportExecutionReportType$inboundSchema` instead. */
    export const inboundSchema = ReportExecutionReportType$inboundSchema;
    /** @deprecated use `ReportExecutionReportType$outboundSchema` instead. */
    export const outboundSchema = ReportExecutionReportType$outboundSchema;
}

/** @internal */
export const ReportExecutionCreatorType$inboundSchema: z.ZodNativeEnum<
    typeof ReportExecutionCreatorType
> = z.nativeEnum(ReportExecutionCreatorType);

/** @internal */
export const ReportExecutionCreatorType$outboundSchema: z.ZodNativeEnum<
    typeof ReportExecutionCreatorType
> = ReportExecutionCreatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionCreatorType$ {
    /** @deprecated use `ReportExecutionCreatorType$inboundSchema` instead. */
    export const inboundSchema = ReportExecutionCreatorType$inboundSchema;
    /** @deprecated use `ReportExecutionCreatorType$outboundSchema` instead. */
    export const outboundSchema = ReportExecutionCreatorType$outboundSchema;
}

/** @internal */
export const ReportSummary$inboundSchema: z.ZodType<ReportSummary, z.ZodTypeDef, unknown> = z
    .object({
        type: ReportExecutionReportType$inboundSchema.optional(),
        id: z.string().optional(),
        merchant_account_id: z.string().optional(),
        name: z.string().optional(),
        creator_id: z.nullable(z.string()).optional(),
        creator_display_name: z.nullable(z.string()).optional(),
        creator_type: z.nullable(ReportExecutionCreatorType$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            creator_id: "creatorId",
            creator_display_name: "creatorDisplayName",
            creator_type: "creatorType",
        });
    });

/** @internal */
export type ReportSummary$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    merchant_account_id?: string | undefined;
    name?: string | undefined;
    creator_id?: string | null | undefined;
    creator_display_name?: string | null | undefined;
    creator_type?: string | null | undefined;
};

/** @internal */
export const ReportSummary$outboundSchema: z.ZodType<
    ReportSummary$Outbound,
    z.ZodTypeDef,
    ReportSummary
> = z
    .object({
        type: ReportExecutionReportType$outboundSchema.optional(),
        id: z.string().optional(),
        merchantAccountId: z.string().optional(),
        name: z.string().optional(),
        creatorId: z.nullable(z.string()).optional(),
        creatorDisplayName: z.nullable(z.string()).optional(),
        creatorType: z.nullable(ReportExecutionCreatorType$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            creatorId: "creator_id",
            creatorDisplayName: "creator_display_name",
            creatorType: "creator_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportSummary$ {
    /** @deprecated use `ReportSummary$inboundSchema` instead. */
    export const inboundSchema = ReportSummary$inboundSchema;
    /** @deprecated use `ReportSummary$outboundSchema` instead. */
    export const outboundSchema = ReportSummary$outboundSchema;
    /** @deprecated use `ReportSummary$Outbound` instead. */
    export type Outbound = ReportSummary$Outbound;
}

/** @internal */
export const ReportExecution$inboundSchema: z.ZodType<ReportExecution, z.ZodTypeDef, unknown> = z
    .object({
        type: ReportExecutionType$inboundSchema.optional(),
        id: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        status: ReportExecutionStatus$inboundSchema.optional(),
        context: z.lazy(() => ReportExecutionContext$inboundSchema).optional(),
        report: z.lazy(() => ReportSummary$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type ReportExecution$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    status?: string | undefined;
    context?: ReportExecutionContext$Outbound | undefined;
    report?: ReportSummary$Outbound | undefined;
};

/** @internal */
export const ReportExecution$outboundSchema: z.ZodType<
    ReportExecution$Outbound,
    z.ZodTypeDef,
    ReportExecution
> = z
    .object({
        type: ReportExecutionType$outboundSchema.optional(),
        id: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        status: ReportExecutionStatus$outboundSchema.optional(),
        context: z.lazy(() => ReportExecutionContext$outboundSchema).optional(),
        report: z.lazy(() => ReportSummary$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecution$ {
    /** @deprecated use `ReportExecution$inboundSchema` instead. */
    export const inboundSchema = ReportExecution$inboundSchema;
    /** @deprecated use `ReportExecution$outboundSchema` instead. */
    export const outboundSchema = ReportExecution$outboundSchema;
    /** @deprecated use `ReportExecution$Outbound` instead. */
    export type Outbound = ReportExecution$Outbound;
}
