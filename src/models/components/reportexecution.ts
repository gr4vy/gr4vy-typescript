/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `report-execution`.
 */
export enum ReportExecutionType {
    ReportExecution = "report-execution",
}

/**
 * The status of this report execution.
 */
export enum ReportExecutionStatus {
    Dispatched = "dispatched",
    Failed = "failed",
    Pending = "pending",
    Processing = "processing",
    Succeeded = "succeeded",
}

/**
 * Contains the context values used to compute the value of date-time
 *
 * @remarks
 * placeholders such as `month_start` and `month_end` if present in
 * the report's specification. Date-time placeholders are dynamic
 * timestamps that change with every report execution.
 */
export type ReportExecutionContext = {
    /**
     * The date and time used by the system as a reference point to
     *
     * @remarks
     * compute date-time placeholders.
     */
    referenceTimestamp?: Date | undefined;
    /**
     * The time zone used to compute date-time placeholders.
     */
    referenceTimezone?: string | undefined;
};

/**
 * The type of this resource. Is always `report`.
 */
export enum ReportExecutionReportType {
    Report = "report",
}

/**
 * The type of the creator of this report.
 */
export enum ReportExecutionCreatorType {
    User = "user",
    PrivateKey = "private_key",
}

/**
 * The report associated with this report execution.
 */
export type ReportSummary = {
    /**
     * The type of this resource. Is always `report`.
     */
    type?: ReportExecutionReportType | undefined;
    /**
     * The unique identifier for this report.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The name of this report.
     */
    name?: string | undefined;
    /**
     * The unique identifier for the creator of this report.
     */
    creatorId?: string | null | undefined;
    /**
     * The name of the creator of this report.
     */
    creatorDisplayName?: string | null | undefined;
    /**
     * The type of the creator of this report.
     */
    creatorType?: ReportExecutionCreatorType | null | undefined;
};

/**
 * A report execution.
 */
export type ReportExecution = {
    /**
     * The type of this resource. Is always `report-execution`.
     */
    type?: ReportExecutionType | undefined;
    /**
     * The unique identifier for this report execution.
     */
    id?: string | undefined;
    /**
     * The date and time this report execution was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time this report execution was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The status of this report execution.
     */
    status?: ReportExecutionStatus | undefined;
    /**
     * Contains the context values used to compute the value of date-time
     *
     * @remarks
     * placeholders such as `month_start` and `month_end` if present in
     * the report's specification. Date-time placeholders are dynamic
     * timestamps that change with every report execution.
     */
    context?: ReportExecutionContext | undefined;
    /**
     * The report associated with this report execution.
     */
    report?: ReportSummary | undefined;
};

/** @internal */
export namespace ReportExecutionType$ {
    export const inboundSchema = z.nativeEnum(ReportExecutionType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ReportExecutionStatus$ {
    export const inboundSchema = z.nativeEnum(ReportExecutionStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ReportExecutionContext$ {
    export const inboundSchema: z.ZodType<ReportExecutionContext, z.ZodTypeDef, unknown> = z
        .object({
            reference_timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            reference_timezone: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                reference_timestamp: "referenceTimestamp",
                reference_timezone: "referenceTimezone",
            });
        });

    export type Outbound = {
        reference_timestamp?: string | undefined;
        reference_timezone?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportExecutionContext> = z
        .object({
            referenceTimestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            referenceTimezone: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                referenceTimestamp: "reference_timestamp",
                referenceTimezone: "reference_timezone",
            });
        });
}

/** @internal */
export namespace ReportExecutionReportType$ {
    export const inboundSchema = z.nativeEnum(ReportExecutionReportType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ReportExecutionCreatorType$ {
    export const inboundSchema = z.nativeEnum(ReportExecutionCreatorType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ReportSummary$ {
    export const inboundSchema: z.ZodType<ReportSummary, z.ZodTypeDef, unknown> = z
        .object({
            type: ReportExecutionReportType$.inboundSchema.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            name: z.string().optional(),
            creator_id: z.nullable(z.string()).optional(),
            creator_display_name: z.nullable(z.string()).optional(),
            creator_type: z.nullable(ReportExecutionCreatorType$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                merchant_account_id: "merchantAccountId",
                creator_id: "creatorId",
                creator_display_name: "creatorDisplayName",
                creator_type: "creatorType",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        name?: string | undefined;
        creator_id?: string | null | undefined;
        creator_display_name?: string | null | undefined;
        creator_type?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportSummary> = z
        .object({
            type: ReportExecutionReportType$.outboundSchema.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            name: z.string().optional(),
            creatorId: z.nullable(z.string()).optional(),
            creatorDisplayName: z.nullable(z.string()).optional(),
            creatorType: z.nullable(ReportExecutionCreatorType$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                merchantAccountId: "merchant_account_id",
                creatorId: "creator_id",
                creatorDisplayName: "creator_display_name",
                creatorType: "creator_type",
            });
        });
}

/** @internal */
export namespace ReportExecution$ {
    export const inboundSchema: z.ZodType<ReportExecution, z.ZodTypeDef, unknown> = z
        .object({
            type: ReportExecutionType$.inboundSchema.optional(),
            id: z.string().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: ReportExecutionStatus$.inboundSchema.optional(),
            context: z.lazy(() => ReportExecutionContext$.inboundSchema).optional(),
            report: z.lazy(() => ReportSummary$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        status?: string | undefined;
        context?: ReportExecutionContext$.Outbound | undefined;
        report?: ReportSummary$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportExecution> = z
        .object({
            type: ReportExecutionType$.outboundSchema.optional(),
            id: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: ReportExecutionStatus$.outboundSchema.optional(),
            context: z.lazy(() => ReportExecutionContext$.outboundSchema).optional(),
            report: z.lazy(() => ReportSummary$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                updatedAt: "updated_at",
            });
        });
}
