/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * `gift-card-service-definition`.
 */
export enum GiftCardServiceDefinitionType {
    GiftCardServiceDefinition = "gift-card-service-definition",
}

/**
 * Defines the type of input that needs to be rendered for this field.
 */
export enum GiftCardServiceDefinitionFormat {
    Text = "text",
    Multiline = "multiline",
    Number = "number",
}

/**
 * A single field that needs to be submitted for a payment service when it
 *
 * @remarks
 * is created.
 */
export type GiftCardServiceDefinitionFields = {
    /**
     * The key of a field that needs to be submitted.
     */
    key?: string | undefined;
    /**
     * The name to display for a field in the dashboard.
     */
    displayName?: string | undefined;
    /**
     * Defines if this field is required when the service is created.
     */
    required?: boolean | undefined;
    /**
     * Defines the type of input that needs to be rendered for this field.
     */
    format?: GiftCardServiceDefinitionFormat | undefined;
    /**
     * Defines if this field is secret. When `true` the field is not
     *
     * @remarks
     * returned when querying the payment service.
     */
    secret?: boolean | undefined;
};

/**
 * An available gift card service that can be configured.
 */
export type GiftCardServiceDefinition = {
    /**
     * The ID of the gift card service definition.
     */
    id?: string | undefined;
    /**
     * `gift-card-service-definition`.
     */
    type?: GiftCardServiceDefinitionType | undefined;
    /**
     * The display name of this service.
     */
    displayName?: string | undefined;
    /**
     * A list of fields that need to be submitted when activating the payment. service.
     */
    fields?: Array<GiftCardServiceDefinitionFields> | undefined;
    /**
     * An icon to display for the payment service.
     */
    iconUrl?: string | undefined;
};

/** @internal */
export const GiftCardServiceDefinitionType$: z.ZodNativeEnum<typeof GiftCardServiceDefinitionType> =
    z.nativeEnum(GiftCardServiceDefinitionType);

/** @internal */
export const GiftCardServiceDefinitionFormat$: z.ZodNativeEnum<
    typeof GiftCardServiceDefinitionFormat
> = z.nativeEnum(GiftCardServiceDefinitionFormat);

/** @internal */
export namespace GiftCardServiceDefinitionFields$ {
    export type Inbound = {
        key?: string | undefined;
        display_name?: string | undefined;
        required?: boolean | undefined;
        format?: GiftCardServiceDefinitionFormat | undefined;
        secret?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardServiceDefinitionFields, z.ZodTypeDef, Inbound> =
        z
            .object({
                key: z.string().optional(),
                display_name: z.string().optional(),
                required: z.boolean().optional(),
                format: GiftCardServiceDefinitionFormat$.optional(),
                secret: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                    ...(v.required === undefined ? null : { required: v.required }),
                    ...(v.format === undefined ? null : { format: v.format }),
                    ...(v.secret === undefined ? null : { secret: v.secret }),
                };
            });

    export type Outbound = {
        key?: string | undefined;
        display_name?: string | undefined;
        required?: boolean | undefined;
        format?: GiftCardServiceDefinitionFormat | undefined;
        secret?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GiftCardServiceDefinitionFields
    > = z
        .object({
            key: z.string().optional(),
            displayName: z.string().optional(),
            required: z.boolean().optional(),
            format: GiftCardServiceDefinitionFormat$.optional(),
            secret: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.format === undefined ? null : { format: v.format }),
                ...(v.secret === undefined ? null : { secret: v.secret }),
            };
        });
}

/** @internal */
export namespace GiftCardServiceDefinition$ {
    export type Inbound = {
        id?: string | undefined;
        type?: GiftCardServiceDefinitionType | undefined;
        display_name?: string | undefined;
        fields?: Array<GiftCardServiceDefinitionFields$.Inbound> | undefined;
        icon_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardServiceDefinition, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: GiftCardServiceDefinitionType$.default(
                GiftCardServiceDefinitionType.GiftCardServiceDefinition
            ),
            display_name: z.string().optional(),
            fields: z
                .array(z.lazy(() => GiftCardServiceDefinitionFields$.inboundSchema))
                .optional(),
            icon_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.icon_url === undefined ? null : { iconUrl: v.icon_url }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: GiftCardServiceDefinitionType;
        display_name?: string | undefined;
        fields?: Array<GiftCardServiceDefinitionFields$.Outbound> | undefined;
        icon_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardServiceDefinition> = z
        .object({
            id: z.string().optional(),
            type: GiftCardServiceDefinitionType$.default(
                GiftCardServiceDefinitionType.GiftCardServiceDefinition
            ),
            displayName: z.string().optional(),
            fields: z
                .array(z.lazy(() => GiftCardServiceDefinitionFields$.outboundSchema))
                .optional(),
            iconUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.iconUrl === undefined ? null : { icon_url: v.iconUrl }),
            };
        });
}
