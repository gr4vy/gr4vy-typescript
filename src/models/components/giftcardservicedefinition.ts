/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * `gift-card-service-definition`.
 */
export enum GiftCardServiceDefinitionType {
    GiftCardServiceDefinition = "gift-card-service-definition",
}

/**
 * Defines the type of input that needs to be rendered for this field.
 */
export enum GiftCardServiceDefinitionFormat {
    Text = "text",
    Multiline = "multiline",
    Number = "number",
}

/**
 * A single field that needs to be submitted for a payment service when it
 *
 * @remarks
 * is created.
 */
export type GiftCardServiceDefinitionFields = {
    /**
     * The key of a field that needs to be submitted.
     */
    key?: string | undefined;
    /**
     * The name to display for a field in the dashboard.
     */
    displayName?: string | undefined;
    /**
     * Defines if this field is required when the service is created.
     */
    required?: boolean | undefined;
    /**
     * Defines the type of input that needs to be rendered for this field.
     */
    format?: GiftCardServiceDefinitionFormat | undefined;
    /**
     * Defines if this field is secret. When `true` the field is not
     *
     * @remarks
     * returned when querying the payment service.
     */
    secret?: boolean | undefined;
};

/**
 * An available gift card service that can be configured.
 */
export type GiftCardServiceDefinition = {
    /**
     * The ID of the gift card service definition.
     */
    id?: string | undefined;
    /**
     * `gift-card-service-definition`.
     */
    type?: GiftCardServiceDefinitionType | undefined;
    /**
     * The display name of this service.
     */
    displayName?: string | undefined;
    /**
     * A list of fields that need to be submitted when activating the payment. service.
     */
    fields?: Array<GiftCardServiceDefinitionFields> | undefined;
    /**
     * An icon to display for the payment service.
     */
    iconUrl?: string | undefined;
};

/** @internal */
export namespace GiftCardServiceDefinitionType$ {
    export const inboundSchema = z.nativeEnum(GiftCardServiceDefinitionType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GiftCardServiceDefinitionFormat$ {
    export const inboundSchema = z.nativeEnum(GiftCardServiceDefinitionFormat);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GiftCardServiceDefinitionFields$ {
    export const inboundSchema: z.ZodType<GiftCardServiceDefinitionFields, z.ZodTypeDef, unknown> =
        z
            .object({
                key: z.string().optional(),
                display_name: z.string().optional(),
                required: z.boolean().optional(),
                format: GiftCardServiceDefinitionFormat$.inboundSchema.optional(),
                secret: z.boolean().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    display_name: "displayName",
                });
            });

    export type Outbound = {
        key?: string | undefined;
        display_name?: string | undefined;
        required?: boolean | undefined;
        format?: string | undefined;
        secret?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GiftCardServiceDefinitionFields
    > = z
        .object({
            key: z.string().optional(),
            displayName: z.string().optional(),
            required: z.boolean().optional(),
            format: GiftCardServiceDefinitionFormat$.outboundSchema.optional(),
            secret: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                displayName: "display_name",
            });
        });
}

/** @internal */
export namespace GiftCardServiceDefinition$ {
    export const inboundSchema: z.ZodType<GiftCardServiceDefinition, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            type: GiftCardServiceDefinitionType$.inboundSchema.default(
                GiftCardServiceDefinitionType.GiftCardServiceDefinition
            ),
            display_name: z.string().optional(),
            fields: z
                .array(z.lazy(() => GiftCardServiceDefinitionFields$.inboundSchema))
                .optional(),
            icon_url: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                display_name: "displayName",
                icon_url: "iconUrl",
            });
        });

    export type Outbound = {
        id?: string | undefined;
        type: string;
        display_name?: string | undefined;
        fields?: Array<GiftCardServiceDefinitionFields$.Outbound> | undefined;
        icon_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardServiceDefinition> = z
        .object({
            id: z.string().optional(),
            type: GiftCardServiceDefinitionType$.outboundSchema.default(
                GiftCardServiceDefinitionType.GiftCardServiceDefinition
            ),
            displayName: z.string().optional(),
            fields: z
                .array(z.lazy(() => GiftCardServiceDefinitionFields$.outboundSchema))
                .optional(),
            iconUrl: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                displayName: "display_name",
                iconUrl: "icon_url",
            });
        });
}
