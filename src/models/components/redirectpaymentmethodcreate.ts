/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const RedirectPaymentMethodCreateMethod = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Bacs: "bacs",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Cashapp: "cashapp",
    Clearpay: "clearpay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Gocardless: "gocardless",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Kcp: "kcp",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Sofort: "sofort",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Givingblock: "givingblock",
    Venmo: "venmo",
    Vipps: "vipps",
    Wechat: "wechat",
    Zippay: "zippay",
    Bancontact: "bancontact",
    Eps: "eps",
    Linepay: "linepay",
    Razorpay: "razorpay",
    Multipago: "multipago",
    Waave: "waave",
    Smartpay: "smartpay",
    Payid: "payid",
    Payto: "payto",
    Spei: "spei",
} as const;
export type RedirectPaymentMethodCreateMethod = ClosedEnum<
    typeof RedirectPaymentMethodCreateMethod
>;

/**
 * Base model with JSON encoders.
 */
export type RedirectPaymentMethodCreate = {
    method: RedirectPaymentMethodCreateMethod;
    country: string;
    currency: string;
    redirectUrl: string;
    buyerExternalIdentifier?: string | undefined;
    buyerId?: string | undefined;
    externalIdentifier?: string | undefined;
};

/** @internal */
export const RedirectPaymentMethodCreateMethod$inboundSchema: z.ZodNativeEnum<
    typeof RedirectPaymentMethodCreateMethod
> = z.nativeEnum(RedirectPaymentMethodCreateMethod);

/** @internal */
export const RedirectPaymentMethodCreateMethod$outboundSchema: z.ZodNativeEnum<
    typeof RedirectPaymentMethodCreateMethod
> = RedirectPaymentMethodCreateMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectPaymentMethodCreateMethod$ {
    /** @deprecated use `RedirectPaymentMethodCreateMethod$inboundSchema` instead. */
    export const inboundSchema = RedirectPaymentMethodCreateMethod$inboundSchema;
    /** @deprecated use `RedirectPaymentMethodCreateMethod$outboundSchema` instead. */
    export const outboundSchema = RedirectPaymentMethodCreateMethod$outboundSchema;
}

/** @internal */
export const RedirectPaymentMethodCreate$inboundSchema: z.ZodType<
    RedirectPaymentMethodCreate,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        method: RedirectPaymentMethodCreateMethod$inboundSchema,
        country: z.string(),
        currency: z.string(),
        redirect_url: z.string(),
        buyer_external_identifier: z.string().optional(),
        buyer_id: z.string().optional(),
        external_identifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            redirect_url: "redirectUrl",
            buyer_external_identifier: "buyerExternalIdentifier",
            buyer_id: "buyerId",
            external_identifier: "externalIdentifier",
        });
    });

/** @internal */
export type RedirectPaymentMethodCreate$Outbound = {
    method: string;
    country: string;
    currency: string;
    redirect_url: string;
    buyer_external_identifier?: string | undefined;
    buyer_id?: string | undefined;
    external_identifier?: string | undefined;
};

/** @internal */
export const RedirectPaymentMethodCreate$outboundSchema: z.ZodType<
    RedirectPaymentMethodCreate$Outbound,
    z.ZodTypeDef,
    RedirectPaymentMethodCreate
> = z
    .object({
        method: RedirectPaymentMethodCreateMethod$outboundSchema,
        country: z.string(),
        currency: z.string(),
        redirectUrl: z.string(),
        buyerExternalIdentifier: z.string().optional(),
        buyerId: z.string().optional(),
        externalIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            redirectUrl: "redirect_url",
            buyerExternalIdentifier: "buyer_external_identifier",
            buyerId: "buyer_id",
            externalIdentifier: "external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectPaymentMethodCreate$ {
    /** @deprecated use `RedirectPaymentMethodCreate$inboundSchema` instead. */
    export const inboundSchema = RedirectPaymentMethodCreate$inboundSchema;
    /** @deprecated use `RedirectPaymentMethodCreate$outboundSchema` instead. */
    export const outboundSchema = RedirectPaymentMethodCreate$outboundSchema;
    /** @deprecated use `RedirectPaymentMethodCreate$Outbound` instead. */
    export type Outbound = RedirectPaymentMethodCreate$Outbound;
}
