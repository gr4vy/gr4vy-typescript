/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The method to use, this can be any of the methods that support redirect requests.
 */
export const RedirectPaymentMethodCreateMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Blik: "blik",
  Boleto: "boleto",
  Boost: "boost",
  Cashapp: "cashapp",
  Clearpay: "clearpay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Netbanking: "netbanking",
  Nupay: "nupay",
  Nequi: "nequi",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Rapipago: "rapipago",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stitch: "stitch",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The method to use, this can be any of the methods that support redirect requests.
 */
export type RedirectPaymentMethodCreateMethod = OpenEnum<
  typeof RedirectPaymentMethodCreateMethod
>;

/**
 * Create a transaction for an APM/LPM that requires a redirect.
 */
export type RedirectPaymentMethodCreate = {
  /**
   * The method to use, this can be any of the methods that support redirect requests.
   */
  method: RedirectPaymentMethodCreateMethod;
  /**
   * The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`.
   */
  buyerId?: string | null | undefined;
  /**
   * The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`.
   */
  buyerExternalIdentifier?: string | null | undefined;
  /**
   * The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.
   */
  country: string;
  /**
   * The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.
   */
  currency: string;
  /**
   * The redirect URL to redirect a buyer to after they have authorized the payment method.
   */
  redirectUrl: string;
  /**
   * The merchant identifier for this payment method.
   */
  externalIdentifier?: string | null | undefined;
};

/** @internal */
export const RedirectPaymentMethodCreateMethod$inboundSchema: z.ZodType<
  RedirectPaymentMethodCreateMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RedirectPaymentMethodCreateMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RedirectPaymentMethodCreateMethod$outboundSchema: z.ZodType<
  RedirectPaymentMethodCreateMethod,
  z.ZodTypeDef,
  RedirectPaymentMethodCreateMethod
> = z.union([
  z.nativeEnum(RedirectPaymentMethodCreateMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectPaymentMethodCreateMethod$ {
  /** @deprecated use `RedirectPaymentMethodCreateMethod$inboundSchema` instead. */
  export const inboundSchema = RedirectPaymentMethodCreateMethod$inboundSchema;
  /** @deprecated use `RedirectPaymentMethodCreateMethod$outboundSchema` instead. */
  export const outboundSchema =
    RedirectPaymentMethodCreateMethod$outboundSchema;
}

/** @internal */
export const RedirectPaymentMethodCreate$inboundSchema: z.ZodType<
  RedirectPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: RedirectPaymentMethodCreateMethod$inboundSchema,
  buyer_id: z.nullable(z.string()).optional(),
  buyer_external_identifier: z.nullable(z.string()).optional(),
  country: z.string(),
  currency: z.string(),
  redirect_url: z.string(),
  external_identifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "buyer_id": "buyerId",
    "buyer_external_identifier": "buyerExternalIdentifier",
    "redirect_url": "redirectUrl",
    "external_identifier": "externalIdentifier",
  });
});

/** @internal */
export type RedirectPaymentMethodCreate$Outbound = {
  method: string;
  buyer_id?: string | null | undefined;
  buyer_external_identifier?: string | null | undefined;
  country: string;
  currency: string;
  redirect_url: string;
  external_identifier?: string | null | undefined;
};

/** @internal */
export const RedirectPaymentMethodCreate$outboundSchema: z.ZodType<
  RedirectPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  RedirectPaymentMethodCreate
> = z.object({
  method: RedirectPaymentMethodCreateMethod$outboundSchema,
  buyerId: z.nullable(z.string()).optional(),
  buyerExternalIdentifier: z.nullable(z.string()).optional(),
  country: z.string(),
  currency: z.string(),
  redirectUrl: z.string(),
  externalIdentifier: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    buyerId: "buyer_id",
    buyerExternalIdentifier: "buyer_external_identifier",
    redirectUrl: "redirect_url",
    externalIdentifier: "external_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectPaymentMethodCreate$ {
  /** @deprecated use `RedirectPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = RedirectPaymentMethodCreate$inboundSchema;
  /** @deprecated use `RedirectPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = RedirectPaymentMethodCreate$outboundSchema;
  /** @deprecated use `RedirectPaymentMethodCreate$Outbound` instead. */
  export type Outbound = RedirectPaymentMethodCreate$Outbound;
}

export function redirectPaymentMethodCreateToJSON(
  redirectPaymentMethodCreate: RedirectPaymentMethodCreate,
): string {
  return JSON.stringify(
    RedirectPaymentMethodCreate$outboundSchema.parse(
      redirectPaymentMethodCreate,
    ),
  );
}

export function redirectPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<RedirectPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectPaymentMethodCreate' from JSON`,
  );
}
