/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The temporary signed URL to download the result of a report execution
 *
 * @remarks
 * and its expiration date and time.
 */
export type ReportExecutionUrl = {
    /**
     * The URL to download the report execution.
     */
    url?: string | undefined;
    /**
     * The date and time when the download URL expires.
     */
    expiresAt?: Date | undefined;
};

/** @internal */
export const ReportExecutionUrl$inboundSchema: z.ZodType<
    ReportExecutionUrl,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        url: z.string().optional(),
        expires_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expires_at: "expiresAt",
        });
    });

/** @internal */
export type ReportExecutionUrl$Outbound = {
    url?: string | undefined;
    expires_at?: string | undefined;
};

/** @internal */
export const ReportExecutionUrl$outboundSchema: z.ZodType<
    ReportExecutionUrl$Outbound,
    z.ZodTypeDef,
    ReportExecutionUrl
> = z
    .object({
        url: z.string().optional(),
        expiresAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expiresAt: "expires_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionUrl$ {
    /** @deprecated use `ReportExecutionUrl$inboundSchema` instead. */
    export const inboundSchema = ReportExecutionUrl$inboundSchema;
    /** @deprecated use `ReportExecutionUrl$outboundSchema` instead. */
    export const outboundSchema = ReportExecutionUrl$outboundSchema;
    /** @deprecated use `ReportExecutionUrl$Outbound` instead. */
    export type Outbound = ReportExecutionUrl$Outbound;
}
