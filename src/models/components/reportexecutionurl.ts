/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The temporary signed URL to download the result of a report execution
 *
 * @remarks
 * and its expiration date and time.
 */
export type ReportExecutionUrl = {
    /**
     * The URL to download the report execution.
     */
    url?: string | undefined;
    /**
     * The date and time when the download URL expires.
     */
    expiresAt?: Date | undefined;
};

/** @internal */
export namespace ReportExecutionUrl$ {
    export const inboundSchema: z.ZodType<ReportExecutionUrl, z.ZodTypeDef, unknown> = z
        .object({
            url: z.string().optional(),
            expires_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expires_at: "expiresAt",
            });
        });

    export type Outbound = {
        url?: string | undefined;
        expires_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportExecutionUrl> = z
        .object({
            url: z.string().optional(),
            expiresAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                expiresAt: "expires_at",
            });
        });
}
