/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReportExecutionUrl = {
  /**
   * A signed URL to download the report execution file.
   */
  url: string;
  /**
   * The date and time when the download URL expires.
   */
  expiresAt: Date;
};

/** @internal */
export const ReportExecutionUrl$inboundSchema: z.ZodType<
  ReportExecutionUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type ReportExecutionUrl$Outbound = {
  url: string;
  expires_at: string;
};

/** @internal */
export const ReportExecutionUrl$outboundSchema: z.ZodType<
  ReportExecutionUrl$Outbound,
  z.ZodTypeDef,
  ReportExecutionUrl
> = z.object({
  url: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutionUrl$ {
  /** @deprecated use `ReportExecutionUrl$inboundSchema` instead. */
  export const inboundSchema = ReportExecutionUrl$inboundSchema;
  /** @deprecated use `ReportExecutionUrl$outboundSchema` instead. */
  export const outboundSchema = ReportExecutionUrl$outboundSchema;
  /** @deprecated use `ReportExecutionUrl$Outbound` instead. */
  export type Outbound = ReportExecutionUrl$Outbound;
}

export function reportExecutionUrlToJSON(
  reportExecutionUrl: ReportExecutionUrl,
): string {
  return JSON.stringify(
    ReportExecutionUrl$outboundSchema.parse(reportExecutionUrl),
  );
}

export function reportExecutionUrlFromJSON(
  jsonString: string,
): SafeParseResult<ReportExecutionUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportExecutionUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportExecutionUrl' from JSON`,
  );
}
