/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { TaxIdKind, TaxIdKind$inboundSchema, TaxIdKind$outboundSchema } from "./taxidkind.js";
import * as z from "zod";

/**
 * The address for the person.
 */
export type BuyerUpdateAddress = {
    /**
     * The city of the address
     */
    city?: string | null | undefined;
    /**
     * The country of the address
     */
    country?: string | null | undefined;
    /**
     * The postal code of the address
     */
    postalCode?: string | null | undefined;
    /**
     * The full state name of the address
     */
    state?: string | null | undefined;
    /**
     * The state code of the address
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name of the address.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The company or organization name of the address.
     */
    organization?: string | null | undefined;
};

/**
 * The tax ID for these buyer details.
 */
export type BuyerUpdateTaxId = {
    /**
     * The regional tax identifier
     */
    value: string;
    /**
     * The kind of tax identifier in a format matching `country.name`, e.g. `gb.vat`.
     */
    kind: TaxIdKind;
};

/**
 * The billing name, address, email, and other fields for this buyer.
 */
export type BuyerUpdateBillingDetails = {
    /**
     * The first or given name for the person.
     */
    firstName?: string | null | undefined;
    /**
     * The last or family name for the person.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the person.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the person.
     */
    phoneNumber?: string | null | undefined;
    /**
     * The address for the person.
     */
    address?: BuyerUpdateAddress | null | undefined;
    /**
     * The tax ID for these buyer details.
     */
    taxId?: BuyerUpdateTaxId | null | undefined;
};

/**
 * Request body for creating a new buyer
 */
export type BuyerUpdate = {
    /**
     * The display name for the buyer.
     */
    displayName?: string | undefined;
    /**
     * The merchant identifier for this buyer.
     */
    externalIdentifier?: string | undefined;
    /**
     * The billing name, address, email, and other fields for this buyer.
     */
    billingDetails?: BuyerUpdateBillingDetails | undefined;
};

/** @internal */
export const BuyerUpdateAddress$inboundSchema: z.ZodType<
    BuyerUpdateAddress,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postal_code: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type BuyerUpdateAddress$Outbound = {
    city?: string | null | undefined;
    country?: string | null | undefined;
    postal_code?: string | null | undefined;
    state?: string | null | undefined;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const BuyerUpdateAddress$outboundSchema: z.ZodType<
    BuyerUpdateAddress$Outbound,
    z.ZodTypeDef,
    BuyerUpdateAddress
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postalCode: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerUpdateAddress$ {
    /** @deprecated use `BuyerUpdateAddress$inboundSchema` instead. */
    export const inboundSchema = BuyerUpdateAddress$inboundSchema;
    /** @deprecated use `BuyerUpdateAddress$outboundSchema` instead. */
    export const outboundSchema = BuyerUpdateAddress$outboundSchema;
    /** @deprecated use `BuyerUpdateAddress$Outbound` instead. */
    export type Outbound = BuyerUpdateAddress$Outbound;
}

/** @internal */
export const BuyerUpdateTaxId$inboundSchema: z.ZodType<BuyerUpdateTaxId, z.ZodTypeDef, unknown> =
    z.object({
        value: z.string(),
        kind: TaxIdKind$inboundSchema,
    });

/** @internal */
export type BuyerUpdateTaxId$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const BuyerUpdateTaxId$outboundSchema: z.ZodType<
    BuyerUpdateTaxId$Outbound,
    z.ZodTypeDef,
    BuyerUpdateTaxId
> = z.object({
    value: z.string(),
    kind: TaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerUpdateTaxId$ {
    /** @deprecated use `BuyerUpdateTaxId$inboundSchema` instead. */
    export const inboundSchema = BuyerUpdateTaxId$inboundSchema;
    /** @deprecated use `BuyerUpdateTaxId$outboundSchema` instead. */
    export const outboundSchema = BuyerUpdateTaxId$outboundSchema;
    /** @deprecated use `BuyerUpdateTaxId$Outbound` instead. */
    export type Outbound = BuyerUpdateTaxId$Outbound;
}

/** @internal */
export const BuyerUpdateBillingDetails$inboundSchema: z.ZodType<
    BuyerUpdateBillingDetails,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BuyerUpdateAddress$inboundSchema)).optional(),
        tax_id: z.nullable(z.lazy(() => BuyerUpdateTaxId$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type BuyerUpdateBillingDetails$Outbound = {
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: BuyerUpdateAddress$Outbound | null | undefined;
    tax_id?: BuyerUpdateTaxId$Outbound | null | undefined;
};

/** @internal */
export const BuyerUpdateBillingDetails$outboundSchema: z.ZodType<
    BuyerUpdateBillingDetails$Outbound,
    z.ZodTypeDef,
    BuyerUpdateBillingDetails
> = z
    .object({
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => BuyerUpdateAddress$outboundSchema)).optional(),
        taxId: z.nullable(z.lazy(() => BuyerUpdateTaxId$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerUpdateBillingDetails$ {
    /** @deprecated use `BuyerUpdateBillingDetails$inboundSchema` instead. */
    export const inboundSchema = BuyerUpdateBillingDetails$inboundSchema;
    /** @deprecated use `BuyerUpdateBillingDetails$outboundSchema` instead. */
    export const outboundSchema = BuyerUpdateBillingDetails$outboundSchema;
    /** @deprecated use `BuyerUpdateBillingDetails$Outbound` instead. */
    export type Outbound = BuyerUpdateBillingDetails$Outbound;
}

/** @internal */
export const BuyerUpdate$inboundSchema: z.ZodType<BuyerUpdate, z.ZodTypeDef, unknown> = z
    .object({
        display_name: z.string().optional(),
        external_identifier: z.string().optional(),
        billing_details: z.lazy(() => BuyerUpdateBillingDetails$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            display_name: "displayName",
            external_identifier: "externalIdentifier",
            billing_details: "billingDetails",
        });
    });

/** @internal */
export type BuyerUpdate$Outbound = {
    display_name?: string | undefined;
    external_identifier?: string | undefined;
    billing_details?: BuyerUpdateBillingDetails$Outbound | undefined;
};

/** @internal */
export const BuyerUpdate$outboundSchema: z.ZodType<
    BuyerUpdate$Outbound,
    z.ZodTypeDef,
    BuyerUpdate
> = z
    .object({
        displayName: z.string().optional(),
        externalIdentifier: z.string().optional(),
        billingDetails: z.lazy(() => BuyerUpdateBillingDetails$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            displayName: "display_name",
            externalIdentifier: "external_identifier",
            billingDetails: "billing_details",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerUpdate$ {
    /** @deprecated use `BuyerUpdate$inboundSchema` instead. */
    export const inboundSchema = BuyerUpdate$inboundSchema;
    /** @deprecated use `BuyerUpdate$outboundSchema` instead. */
    export const outboundSchema = BuyerUpdate$outboundSchema;
    /** @deprecated use `BuyerUpdate$Outbound` instead. */
    export type Outbound = BuyerUpdate$Outbound;
}
