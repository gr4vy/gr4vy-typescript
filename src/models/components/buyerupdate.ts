/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The billing address for the buyer.
 */
export type BuyerUpdateAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export enum BuyerUpdateKind {
    AeTrn = "ae.trn",
    AuAbn = "au.abn",
    ArDni = "ar.dni",
    ArCuil = "ar.cuil",
    ArCuit = "ar.cuit",
    BrCnpj = "br.cnpj",
    BrCpf = "br.cpf",
    CaBn = "ca.bn",
    CaGstHst = "ca.gst_hst",
    CaPstBc = "ca.pst_bc",
    CaPstMb = "ca.pst_mb",
    CaPstSk = "ca.pst_sk",
    CaQst = "ca.qst",
    ChVat = "ch.vat",
    ClTin = "cl.tin",
    EsCif = "es.cif",
    EuVat = "eu.vat",
    GbVat = "gb.vat",
    HkBr = "hk.br",
    IdNik = "id.nik",
    IdNpwp = "id.npwp",
    InGst = "in.gst",
    JpCn = "jp.cn",
    JpRn = "jp.rn",
    KrBrn = "kr.brn",
    LiUid = "li.uid",
    MxCurp = "mx.curp",
    MyFrp = "my.frp",
    MyItn = "my.itn",
    MyNric = "my.nric",
    MySst = "my.sst",
    NoVat = "no.vat",
    NzGst = "nz.gst",
    PhTin = "ph.tin",
    RuInn = "ru.inn",
    RuKpp = "ru.kpp",
    SaVat = "sa.vat",
    SgGst = "sg.gst",
    SgUen = "sg.uen",
    ThId = "th.id",
    ThVat = "th.vat",
    TwVat = "tw.vat",
    UsEin = "us.ein",
    ZaVat = "za.vat",
}

/**
 * The tax ID information associated with the billing details.
 */
export type BuyerUpdateTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: BuyerUpdateKind;
};

/**
 * The billing details of the buyer.
 */
export type BillingDetailsUpdate = {
    /**
     * The first name(s) or given name for the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address for the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number for the buyer which should be formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address for the buyer.
     */
    address?: BuyerUpdateAddress | null | undefined;
    /**
     * The tax ID information associated with the billing details.
     */
    taxId?: BuyerUpdateTaxID | null | undefined;
};

/**
 * A request to update a buyer.
 */
export type BuyerUpdate = {
    /**
     * An external identifier that can be used to match the buyer against your own records. This value needs to be unique for all buyers.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * The billing details of the buyer.
     */
    billingDetails?: BillingDetailsUpdate | null | undefined;
};

/** @internal */
export namespace BuyerUpdateAddress$ {
    export const inboundSchema: z.ZodType<BuyerUpdateAddress, z.ZodTypeDef, unknown> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postal_code: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                postal_code: "postalCode",
                state_code: "stateCode",
                house_number_or_name: "houseNumberOrName",
            });
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerUpdateAddress> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postalCode: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                postalCode: "postal_code",
                stateCode: "state_code",
                houseNumberOrName: "house_number_or_name",
            });
        });
}

/** @internal */
export namespace BuyerUpdateKind$ {
    export const inboundSchema = z.nativeEnum(BuyerUpdateKind);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace BuyerUpdateTaxID$ {
    export const inboundSchema: z.ZodType<BuyerUpdateTaxID, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
        kind: BuyerUpdateKind$.inboundSchema,
    });

    export type Outbound = {
        value: string;
        kind: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerUpdateTaxID> = z.object({
        value: z.string(),
        kind: BuyerUpdateKind$.outboundSchema,
    });
}

/** @internal */
export namespace BillingDetailsUpdate$ {
    export const inboundSchema: z.ZodType<BillingDetailsUpdate, z.ZodTypeDef, unknown> = z
        .object({
            first_name: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            email_address: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => BuyerUpdateAddress$.inboundSchema)).optional(),
            tax_id: z.nullable(z.lazy(() => BuyerUpdateTaxID$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                first_name: "firstName",
                last_name: "lastName",
                email_address: "emailAddress",
                phone_number: "phoneNumber",
                tax_id: "taxId",
            });
        });

    export type Outbound = {
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: BuyerUpdateAddress$.Outbound | null | undefined;
        tax_id?: BuyerUpdateTaxID$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BillingDetailsUpdate> = z
        .object({
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => BuyerUpdateAddress$.outboundSchema)).optional(),
            taxId: z.nullable(z.lazy(() => BuyerUpdateTaxID$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                lastName: "last_name",
                emailAddress: "email_address",
                phoneNumber: "phone_number",
                taxId: "tax_id",
            });
        });
}

/** @internal */
export namespace BuyerUpdate$ {
    export const inboundSchema: z.ZodType<BuyerUpdate, z.ZodTypeDef, unknown> = z
        .object({
            external_identifier: z.nullable(z.string()).optional(),
            display_name: z.nullable(z.string()).optional(),
            billing_details: z
                .nullable(z.lazy(() => BillingDetailsUpdate$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                external_identifier: "externalIdentifier",
                display_name: "displayName",
                billing_details: "billingDetails",
            });
        });

    export type Outbound = {
        external_identifier?: string | null | undefined;
        display_name?: string | null | undefined;
        billing_details?: BillingDetailsUpdate$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuyerUpdate> = z
        .object({
            externalIdentifier: z.nullable(z.string()).optional(),
            displayName: z.nullable(z.string()).optional(),
            billingDetails: z
                .nullable(z.lazy(() => BillingDetailsUpdate$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                externalIdentifier: "external_identifier",
                displayName: "display_name",
                billingDetails: "billing_details",
            });
        });
}
