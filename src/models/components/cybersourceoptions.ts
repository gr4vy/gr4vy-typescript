/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CybersourceOptions = {
  /**
   * The merchant ID to use for this transaction. This requires a meta key to be set up for use with Cybersource, and this overrides the connector configuration.
   */
  metaKeyMerchantId?: string | null | undefined;
  /**
   * A list of merchant defined data to be passed to the Cybersource. Each key needs to be a numeric string.
   */
  merchantDefinedInformation?: { [k: string]: string } | null | undefined;
  /**
   * The shipping method for this transaction.
   */
  shipToMethod?: string | null | undefined;
};

/** @internal */
export const CybersourceOptions$inboundSchema: z.ZodType<
  CybersourceOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta_key_merchant_id: z.nullable(z.string()).optional(),
  merchant_defined_information: z.nullable(z.record(z.string())).optional(),
  ship_to_method: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "meta_key_merchant_id": "metaKeyMerchantId",
    "merchant_defined_information": "merchantDefinedInformation",
    "ship_to_method": "shipToMethod",
  });
});

/** @internal */
export type CybersourceOptions$Outbound = {
  meta_key_merchant_id?: string | null | undefined;
  merchant_defined_information?: { [k: string]: string } | null | undefined;
  ship_to_method?: string | null | undefined;
};

/** @internal */
export const CybersourceOptions$outboundSchema: z.ZodType<
  CybersourceOptions$Outbound,
  z.ZodTypeDef,
  CybersourceOptions
> = z.object({
  metaKeyMerchantId: z.nullable(z.string()).optional(),
  merchantDefinedInformation: z.nullable(z.record(z.string())).optional(),
  shipToMethod: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    metaKeyMerchantId: "meta_key_merchant_id",
    merchantDefinedInformation: "merchant_defined_information",
    shipToMethod: "ship_to_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CybersourceOptions$ {
  /** @deprecated use `CybersourceOptions$inboundSchema` instead. */
  export const inboundSchema = CybersourceOptions$inboundSchema;
  /** @deprecated use `CybersourceOptions$outboundSchema` instead. */
  export const outboundSchema = CybersourceOptions$outboundSchema;
  /** @deprecated use `CybersourceOptions$Outbound` instead. */
  export type Outbound = CybersourceOptions$Outbound;
}

export function cybersourceOptionsToJSON(
  cybersourceOptions: CybersourceOptions,
): string {
  return JSON.stringify(
    CybersourceOptions$outboundSchema.parse(cybersourceOptions),
  );
}

export function cybersourceOptionsFromJSON(
  jsonString: string,
): SafeParseResult<CybersourceOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CybersourceOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CybersourceOptions' from JSON`,
  );
}
