/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum PaymentConnectorResponseTransactionVoidFailedEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `payment-connector-response-transaction-void-failed`.
 */
export enum PaymentConnectorResponseTransactionVoidFailedEventName {
    PaymentConnectorResponseTransactionVoidFailed = "payment-connector-response-transaction-void-failed",
}

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionVoidFailedEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
};

/**
 * This event logs the exact details parsed details for a failed void
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionVoidFailedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionVoidFailedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-void-failed`.
     */
    name?: PaymentConnectorResponseTransactionVoidFailedEventName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionVoidFailedEventContext | undefined;
};

/** @internal */
export namespace PaymentConnectorResponseTransactionVoidFailedEventType$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionVoidFailedEventType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionVoidFailedEventName$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionVoidFailedEventName
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionVoidFailedEventContext$ {
    export const inboundSchema: z.ZodType<
        PaymentConnectorResponseTransactionVoidFailedEventContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            payment_service_id: z.string().optional(),
            payment_service_display_name: z.string().optional(),
            payment_service_definition_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_service_id: "paymentServiceId",
                payment_service_display_name: "paymentServiceDisplayName",
                payment_service_definition_id: "paymentServiceDefinitionId",
            });
        });

    export type Outbound = {
        payment_service_id?: string | undefined;
        payment_service_display_name?: string | undefined;
        payment_service_definition_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorResponseTransactionVoidFailedEventContext
    > = z
        .object({
            paymentServiceId: z.string().optional(),
            paymentServiceDisplayName: z.string().optional(),
            paymentServiceDefinitionId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                paymentServiceId: "payment_service_id",
                paymentServiceDisplayName: "payment_service_display_name",
                paymentServiceDefinitionId: "payment_service_definition_id",
            });
        });
}

/** @internal */
export namespace PaymentConnectorResponseTransactionVoidFailedEvent$ {
    export const inboundSchema: z.ZodType<
        PaymentConnectorResponseTransactionVoidFailedEvent,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: PaymentConnectorResponseTransactionVoidFailedEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: PaymentConnectorResponseTransactionVoidFailedEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(
                    () => PaymentConnectorResponseTransactionVoidFailedEventContext$.inboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: PaymentConnectorResponseTransactionVoidFailedEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorResponseTransactionVoidFailedEvent
    > = z
        .object({
            type: PaymentConnectorResponseTransactionVoidFailedEventType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: PaymentConnectorResponseTransactionVoidFailedEventName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(
                    () => PaymentConnectorResponseTransactionVoidFailedEventContext$.outboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
