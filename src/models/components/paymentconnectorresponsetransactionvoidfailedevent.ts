/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionVoidFailedEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionVoidFailedEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionVoidFailedEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-void-failed`.
 */
export const PaymentConnectorResponseTransactionVoidFailedEventName = {
    PaymentConnectorResponseTransactionVoidFailed:
        "payment-connector-response-transaction-void-failed",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-void-failed`.
 */
export type PaymentConnectorResponseTransactionVoidFailedEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionVoidFailedEventName
>;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionVoidFailedEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
};

/**
 * This event logs the exact details parsed details for a failed void
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionVoidFailedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionVoidFailedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-void-failed`.
     */
    name?: PaymentConnectorResponseTransactionVoidFailedEventName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionVoidFailedEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidFailedEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionVoidFailedEventType);

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidFailedEventType
> = PaymentConnectorResponseTransactionVoidFailedEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidFailedEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidFailedEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidFailedEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidFailedEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionVoidFailedEventName);

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionVoidFailedEventName
> = PaymentConnectorResponseTransactionVoidFailedEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidFailedEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventName$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidFailedEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidFailedEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidFailedEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionVoidFailedEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidFailedEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionVoidFailedEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidFailedEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionVoidFailedEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionVoidFailedEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEventContext$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionVoidFailedEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidFailedEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionVoidFailedEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionVoidFailedEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionVoidFailedEventContext$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionVoidFailedEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: PaymentConnectorResponseTransactionVoidFailedEventContext$Outbound | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionVoidFailedEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionVoidFailedEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionVoidFailedEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionVoidFailedEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionVoidFailedEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(() => PaymentConnectorResponseTransactionVoidFailedEventContext$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionVoidFailedEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEvent$inboundSchema` instead. */
    export const inboundSchema = PaymentConnectorResponseTransactionVoidFailedEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEvent$outboundSchema` instead. */
    export const outboundSchema = PaymentConnectorResponseTransactionVoidFailedEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionVoidFailedEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionVoidFailedEvent$Outbound;
}
