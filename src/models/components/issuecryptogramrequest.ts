/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Request body for issue a cryptogram for a network token.
 */
export type IssueCryptogramRequest = {
    /**
     * Defines if the request is merchant initiated or not.
     */
    merchantInitiated?: boolean | undefined;
};

/** @internal */
export namespace IssueCryptogramRequest$ {
    export type Inbound = {
        merchant_initiated?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<IssueCryptogramRequest, z.ZodTypeDef, Inbound> = z
        .object({
            merchant_initiated: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                merchantInitiated: v.merchant_initiated,
            };
        });

    export type Outbound = {
        merchant_initiated: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IssueCryptogramRequest> = z
        .object({
            merchantInitiated: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                merchant_initiated: v.merchantInitiated,
            };
        });
}
