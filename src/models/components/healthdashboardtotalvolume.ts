/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const HealthDashboardTotalVolumeType = {
    HealthDashboardTotalVolume: "health-dashboard.total-volume",
} as const;
/**
 * The type of this resource.
 */
export type HealthDashboardTotalVolumeType = ClosedEnum<typeof HealthDashboardTotalVolumeType>;

/**
 * Summary of the aggregated data.
 */
export type HealthDashboardTotalVolumeSummary = {
    /**
     * The volume of authorized transactions created during the current period.
     */
    transactionsAuthorized?: number | undefined;
    /**
     * The percentage difference between the volume of authorized transactions created during the current period and the previous period.
     */
    transactionsAuthorizedDeltaPct?: number | null | undefined;
    /**
     * The rate of authorized transactions created during the current period.
     */
    transactionsAuthorizedRate?: number | null | undefined;
    /**
     * The absolute difference between the rate of authorized transactions created during the current period and the previous period.
     */
    transactionsAuthorizedRateDelta?: number | null | undefined;
    /**
     * The volume of successful refunds from all sources created during the current period.
     */
    refunds?: number | undefined;
    /**
     * The percentage difference between the volume of successful refunds created during the current period and the previous period.
     */
    refundsDeltaPct?: number | null | undefined;
};

/**
 * Metrics for the transactions and refunds created during the current period aggregated by hour or day.
 */
export type HealthDashboardTotalVolumeCurrent = {
    /**
     * The date and time of the first data point, represented with an ISO 8601 interval value indicating whether it is aggregated by one hour (PT1H) or one day (P1D) periods.
     */
    firstInterval?: string | undefined;
    /**
     * The volume of authorized transactions created within the period that the data point corresponds to.
     */
    transactionsAuthorized?: Array<number> | undefined;
    /**
     * The rate of authorized transactions created within the period that the data point corresponds to.
     */
    transactionsAuthorizedRate?: Array<number> | null | undefined;
    /**
     * The volume of successful refunds created within the period that the data point corresponds to.
     */
    refunds?: Array<number> | undefined;
};

/**
 * Metrics for the transactions and refunds created during the previous period aggregated by hour or day.
 */
export type HealthDashboardTotalVolumePrevious = {
    /**
     * The date and time of the first data point, represented with an ISO 8601 interval value indicating whether it is aggregated by one hour (PT1H) or one day (P1D) periods.
     */
    firstInterval?: string | undefined;
    /**
     * The volume of authorized transactions created within the period that the data point corresponds to.
     */
    transactionsAuthorized?: Array<number> | undefined;
    /**
     * The rate of authorized transactions created within the period that the data point corresponds to.
     */
    transactionsAuthorizedRate?: Array<number> | null | undefined;
    /**
     * The volume of successful refunds created within the period that the data point corresponds to.
     */
    refunds?: Array<number> | undefined;
};

/**
 * Contains two series of data points used to build the line chart. The `current` series contains aggregations starting from the `first_interval` up to the specified period (e.g. `7-days`). The `previous` series contains aggregations from the period immediately preceding the `current` series.
 */
export type HealthDashboardTotalVolumeSeries = {
    /**
     * Metrics for the transactions and refunds created during the current period aggregated by hour or day.
     */
    current?: HealthDashboardTotalVolumeCurrent | undefined;
    /**
     * Metrics for the transactions and refunds created during the previous period aggregated by hour or day.
     */
    previous?: HealthDashboardTotalVolumePrevious | undefined;
};

/**
 * Health Dashboard transactions and refunds volume line chart data.
 */
export type HealthDashboardTotalVolume = {
    /**
     * The type of this resource.
     */
    type?: HealthDashboardTotalVolumeType | undefined;
    /**
     * Summary of the aggregated data.
     */
    summary?: HealthDashboardTotalVolumeSummary | undefined;
    /**
     * Contains two series of data points used to build the line chart. The `current` series contains aggregations starting from the `first_interval` up to the specified period (e.g. `7-days`). The `previous` series contains aggregations from the period immediately preceding the `current` series.
     */
    series?: HealthDashboardTotalVolumeSeries | undefined;
};

/** @internal */
export const HealthDashboardTotalVolumeType$inboundSchema: z.ZodNativeEnum<
    typeof HealthDashboardTotalVolumeType
> = z.nativeEnum(HealthDashboardTotalVolumeType);

/** @internal */
export const HealthDashboardTotalVolumeType$outboundSchema: z.ZodNativeEnum<
    typeof HealthDashboardTotalVolumeType
> = HealthDashboardTotalVolumeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalVolumeType$ {
    /** @deprecated use `HealthDashboardTotalVolumeType$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalVolumeType$inboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeType$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalVolumeType$outboundSchema;
}

/** @internal */
export const HealthDashboardTotalVolumeSummary$inboundSchema: z.ZodType<
    HealthDashboardTotalVolumeSummary,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        transactions_authorized: z.number().int().optional(),
        transactions_authorized_delta_pct: z.nullable(z.number().int()).optional(),
        transactions_authorized_rate: z.nullable(z.number().int()).optional(),
        transactions_authorized_rate_delta: z.nullable(z.number().int()).optional(),
        refunds: z.number().int().optional(),
        refunds_delta_pct: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            transactions_authorized: "transactionsAuthorized",
            transactions_authorized_delta_pct: "transactionsAuthorizedDeltaPct",
            transactions_authorized_rate: "transactionsAuthorizedRate",
            transactions_authorized_rate_delta: "transactionsAuthorizedRateDelta",
            refunds_delta_pct: "refundsDeltaPct",
        });
    });

/** @internal */
export type HealthDashboardTotalVolumeSummary$Outbound = {
    transactions_authorized?: number | undefined;
    transactions_authorized_delta_pct?: number | null | undefined;
    transactions_authorized_rate?: number | null | undefined;
    transactions_authorized_rate_delta?: number | null | undefined;
    refunds?: number | undefined;
    refunds_delta_pct?: number | null | undefined;
};

/** @internal */
export const HealthDashboardTotalVolumeSummary$outboundSchema: z.ZodType<
    HealthDashboardTotalVolumeSummary$Outbound,
    z.ZodTypeDef,
    HealthDashboardTotalVolumeSummary
> = z
    .object({
        transactionsAuthorized: z.number().int().optional(),
        transactionsAuthorizedDeltaPct: z.nullable(z.number().int()).optional(),
        transactionsAuthorizedRate: z.nullable(z.number().int()).optional(),
        transactionsAuthorizedRateDelta: z.nullable(z.number().int()).optional(),
        refunds: z.number().int().optional(),
        refundsDeltaPct: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            transactionsAuthorized: "transactions_authorized",
            transactionsAuthorizedDeltaPct: "transactions_authorized_delta_pct",
            transactionsAuthorizedRate: "transactions_authorized_rate",
            transactionsAuthorizedRateDelta: "transactions_authorized_rate_delta",
            refundsDeltaPct: "refunds_delta_pct",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalVolumeSummary$ {
    /** @deprecated use `HealthDashboardTotalVolumeSummary$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalVolumeSummary$inboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeSummary$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalVolumeSummary$outboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeSummary$Outbound` instead. */
    export type Outbound = HealthDashboardTotalVolumeSummary$Outbound;
}

/** @internal */
export const HealthDashboardTotalVolumeCurrent$inboundSchema: z.ZodType<
    HealthDashboardTotalVolumeCurrent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_interval: z.string().optional(),
        transactions_authorized: z.array(z.number().int()).optional(),
        transactions_authorized_rate: z.nullable(z.array(z.number().int())).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_interval: "firstInterval",
            transactions_authorized: "transactionsAuthorized",
            transactions_authorized_rate: "transactionsAuthorizedRate",
        });
    });

/** @internal */
export type HealthDashboardTotalVolumeCurrent$Outbound = {
    first_interval?: string | undefined;
    transactions_authorized?: Array<number> | undefined;
    transactions_authorized_rate?: Array<number> | null | undefined;
    refunds?: Array<number> | undefined;
};

/** @internal */
export const HealthDashboardTotalVolumeCurrent$outboundSchema: z.ZodType<
    HealthDashboardTotalVolumeCurrent$Outbound,
    z.ZodTypeDef,
    HealthDashboardTotalVolumeCurrent
> = z
    .object({
        firstInterval: z.string().optional(),
        transactionsAuthorized: z.array(z.number().int()).optional(),
        transactionsAuthorizedRate: z.nullable(z.array(z.number().int())).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstInterval: "first_interval",
            transactionsAuthorized: "transactions_authorized",
            transactionsAuthorizedRate: "transactions_authorized_rate",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalVolumeCurrent$ {
    /** @deprecated use `HealthDashboardTotalVolumeCurrent$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalVolumeCurrent$inboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeCurrent$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalVolumeCurrent$outboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeCurrent$Outbound` instead. */
    export type Outbound = HealthDashboardTotalVolumeCurrent$Outbound;
}

/** @internal */
export const HealthDashboardTotalVolumePrevious$inboundSchema: z.ZodType<
    HealthDashboardTotalVolumePrevious,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_interval: z.string().optional(),
        transactions_authorized: z.array(z.number().int()).optional(),
        transactions_authorized_rate: z.nullable(z.array(z.number().int())).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_interval: "firstInterval",
            transactions_authorized: "transactionsAuthorized",
            transactions_authorized_rate: "transactionsAuthorizedRate",
        });
    });

/** @internal */
export type HealthDashboardTotalVolumePrevious$Outbound = {
    first_interval?: string | undefined;
    transactions_authorized?: Array<number> | undefined;
    transactions_authorized_rate?: Array<number> | null | undefined;
    refunds?: Array<number> | undefined;
};

/** @internal */
export const HealthDashboardTotalVolumePrevious$outboundSchema: z.ZodType<
    HealthDashboardTotalVolumePrevious$Outbound,
    z.ZodTypeDef,
    HealthDashboardTotalVolumePrevious
> = z
    .object({
        firstInterval: z.string().optional(),
        transactionsAuthorized: z.array(z.number().int()).optional(),
        transactionsAuthorizedRate: z.nullable(z.array(z.number().int())).optional(),
        refunds: z.array(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstInterval: "first_interval",
            transactionsAuthorized: "transactions_authorized",
            transactionsAuthorizedRate: "transactions_authorized_rate",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalVolumePrevious$ {
    /** @deprecated use `HealthDashboardTotalVolumePrevious$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalVolumePrevious$inboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumePrevious$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalVolumePrevious$outboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumePrevious$Outbound` instead. */
    export type Outbound = HealthDashboardTotalVolumePrevious$Outbound;
}

/** @internal */
export const HealthDashboardTotalVolumeSeries$inboundSchema: z.ZodType<
    HealthDashboardTotalVolumeSeries,
    z.ZodTypeDef,
    unknown
> = z.object({
    current: z.lazy(() => HealthDashboardTotalVolumeCurrent$inboundSchema).optional(),
    previous: z.lazy(() => HealthDashboardTotalVolumePrevious$inboundSchema).optional(),
});

/** @internal */
export type HealthDashboardTotalVolumeSeries$Outbound = {
    current?: HealthDashboardTotalVolumeCurrent$Outbound | undefined;
    previous?: HealthDashboardTotalVolumePrevious$Outbound | undefined;
};

/** @internal */
export const HealthDashboardTotalVolumeSeries$outboundSchema: z.ZodType<
    HealthDashboardTotalVolumeSeries$Outbound,
    z.ZodTypeDef,
    HealthDashboardTotalVolumeSeries
> = z.object({
    current: z.lazy(() => HealthDashboardTotalVolumeCurrent$outboundSchema).optional(),
    previous: z.lazy(() => HealthDashboardTotalVolumePrevious$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalVolumeSeries$ {
    /** @deprecated use `HealthDashboardTotalVolumeSeries$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalVolumeSeries$inboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeSeries$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalVolumeSeries$outboundSchema;
    /** @deprecated use `HealthDashboardTotalVolumeSeries$Outbound` instead. */
    export type Outbound = HealthDashboardTotalVolumeSeries$Outbound;
}

/** @internal */
export const HealthDashboardTotalVolume$inboundSchema: z.ZodType<
    HealthDashboardTotalVolume,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: HealthDashboardTotalVolumeType$inboundSchema.optional(),
    summary: z.lazy(() => HealthDashboardTotalVolumeSummary$inboundSchema).optional(),
    series: z.lazy(() => HealthDashboardTotalVolumeSeries$inboundSchema).optional(),
});

/** @internal */
export type HealthDashboardTotalVolume$Outbound = {
    type?: string | undefined;
    summary?: HealthDashboardTotalVolumeSummary$Outbound | undefined;
    series?: HealthDashboardTotalVolumeSeries$Outbound | undefined;
};

/** @internal */
export const HealthDashboardTotalVolume$outboundSchema: z.ZodType<
    HealthDashboardTotalVolume$Outbound,
    z.ZodTypeDef,
    HealthDashboardTotalVolume
> = z.object({
    type: HealthDashboardTotalVolumeType$outboundSchema.optional(),
    summary: z.lazy(() => HealthDashboardTotalVolumeSummary$outboundSchema).optional(),
    series: z.lazy(() => HealthDashboardTotalVolumeSeries$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthDashboardTotalVolume$ {
    /** @deprecated use `HealthDashboardTotalVolume$inboundSchema` instead. */
    export const inboundSchema = HealthDashboardTotalVolume$inboundSchema;
    /** @deprecated use `HealthDashboardTotalVolume$outboundSchema` instead. */
    export const outboundSchema = HealthDashboardTotalVolume$outboundSchema;
    /** @deprecated use `HealthDashboardTotalVolume$Outbound` instead. */
    export type Outbound = HealthDashboardTotalVolume$Outbound;
}
