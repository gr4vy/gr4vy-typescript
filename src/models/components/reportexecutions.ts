/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReportExecution,
  ReportExecution$inboundSchema,
  ReportExecution$Outbound,
  ReportExecution$outboundSchema,
} from "./reportexecution.js";

export type ReportExecutions = {
  /**
   * A list of items returned for this request.
   */
  items: Array<ReportExecution>;
  /**
   * The number of items for this page.
   */
  limit?: number | undefined;
  /**
   * The cursor pointing at the next page of items.
   */
  nextCursor?: string | null | undefined;
  /**
   * The cursor pointing at the previous page of items.
   */
  previousCursor?: string | null | undefined;
};

/** @internal */
export const ReportExecutions$inboundSchema: z.ZodType<
  ReportExecutions,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ReportExecution$inboundSchema),
  limit: z.number().int().default(20),
  next_cursor: z.nullable(z.string()).optional(),
  previous_cursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
    "previous_cursor": "previousCursor",
  });
});

/** @internal */
export type ReportExecutions$Outbound = {
  items: Array<ReportExecution$Outbound>;
  limit: number;
  next_cursor?: string | null | undefined;
  previous_cursor?: string | null | undefined;
};

/** @internal */
export const ReportExecutions$outboundSchema: z.ZodType<
  ReportExecutions$Outbound,
  z.ZodTypeDef,
  ReportExecutions
> = z.object({
  items: z.array(ReportExecution$outboundSchema),
  limit: z.number().int().default(20),
  nextCursor: z.nullable(z.string()).optional(),
  previousCursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
    previousCursor: "previous_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportExecutions$ {
  /** @deprecated use `ReportExecutions$inboundSchema` instead. */
  export const inboundSchema = ReportExecutions$inboundSchema;
  /** @deprecated use `ReportExecutions$outboundSchema` instead. */
  export const outboundSchema = ReportExecutions$outboundSchema;
  /** @deprecated use `ReportExecutions$Outbound` instead. */
  export type Outbound = ReportExecutions$Outbound;
}

export function reportExecutionsToJSON(
  reportExecutions: ReportExecutions,
): string {
  return JSON.stringify(
    ReportExecutions$outboundSchema.parse(reportExecutions),
  );
}

export function reportExecutionsFromJSON(
  jsonString: string,
): SafeParseResult<ReportExecutions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportExecutions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportExecutions' from JSON`,
  );
}
