/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `action`.
 */
export const ActionType = {
    Action: "action",
} as const;
/**
 * The type of this resource. Is always `action`.
 */
export type ActionType = ClosedEnum<typeof ActionType>;

/**
 * The identifier for the action.
 */
export const Id = {
    DeclineEarly: "decline-early",
    RouteTransaction: "route-transaction",
    Skip3ds: "skip-3ds",
} as const;
/**
 * The identifier for the action.
 */
export type Id = ClosedEnum<typeof Id>;

/**
 * The name of the Flow.
 */
export const Flow = {
    Checkout: "checkout",
    CardTransaction: "card-transaction",
    NonCardTransaction: "non-card-transaction",
    RedirectTransaction: "redirect-transaction",
} as const;
/**
 * The name of the Flow.
 */
export type Flow = ClosedEnum<typeof Flow>;

/**
 * The type of action outcome for the given rule.
 */
export const FlowRuleUUIDsListOutcomeOutcomeType = {
    List: "list",
} as const;
/**
 * The type of action outcome for the given rule.
 */
export type FlowRuleUUIDsListOutcomeOutcomeType = ClosedEnum<
    typeof FlowRuleUUIDsListOutcomeOutcomeType
>;

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a list of UUIDs.
 *
 * Depending on the flow and action where this outcome is used, the UUIDs
 * may have an important meaning like the ID of a payment service to be
 * used (this is the case for `redirect-transaction` flow and
 * `route-transaction` action).
 */
export type UUIDsListOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleUUIDsListOutcomeOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: Array<string>;
};

/**
 * The type of action outcome for the given rule.
 */
export const FlowRuleServiceOutcomeOutcomeType = {
    CardRouting: "card-routing",
} as const;
/**
 * The type of action outcome for the given rule.
 */
export type FlowRuleServiceOutcomeOutcomeType = ClosedEnum<
    typeof FlowRuleServiceOutcomeOutcomeType
>;

/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export const OutcomeInstrument = {
    NetworkToken: "network_token",
    Pan: "pan",
} as const;
/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export type OutcomeInstrument = ClosedEnum<typeof OutcomeInstrument>;

/**
 * Name of the transformation.
 */
export const OutcomeName = {
    ForceMit: "force_mit",
    UseAdditionalScheme: "use_additional_scheme",
} as const;
/**
 * Name of the transformation.
 */
export type OutcomeName = ClosedEnum<typeof OutcomeName>;

export type OutcomeTransformations = {
    /**
     * Name of the transformation.
     */
    name?: OutcomeName | undefined;
};

export type OutcomeResult = {
    /**
     * ID of the payment service to be used when processing the transaction.
     */
    paymentServiceId?: string | undefined;
    /**
     * The name of the instrument to be used to process the transaction.
     *
     * @remarks
     * For `pan`, if a Payment Service token is available, the API will use that
     * for stored payment methods.
     *
     */
    instrument?: OutcomeInstrument | undefined;
    /**
     * List of transformations to apply when processing the transaction.
     */
    transformations?: Array<OutcomeTransformations> | undefined;
};

/**
 * Version of the rule outcome. Current version is `2`.
 */
export const OutcomeVersion = {
    Two: 2,
} as const;
/**
 * Version of the rule outcome. Current version is `2`.
 */
export type OutcomeVersion = ClosedEnum<typeof OutcomeVersion>;

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a list of dictionaries that define the payment service,
 * instrument and transformation to be used to process a
 * transaction.
 */
export type PaymentServiceOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleServiceOutcomeOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: Array<OutcomeResult>;
    /**
     * Version of the rule outcome. Current version is `2`.
     */
    version: OutcomeVersion;
};

/**
 * The type of action outcome for the given rule.
 */
export const FlowRuleMethodOutcomeOutcomeType = {
    List: "list",
} as const;
/**
 * The type of action outcome for the given rule.
 */
export type FlowRuleMethodOutcomeOutcomeType = ClosedEnum<typeof FlowRuleMethodOutcomeOutcomeType>;

export const FlowRuleMethodOutcomeOutcomeResult = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Kcp: "kcp",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Spei: "spei",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
export type FlowRuleMethodOutcomeOutcomeResult = ClosedEnum<
    typeof FlowRuleMethodOutcomeOutcomeResult
>;

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a list of payment types.
 */
export type PaymentMethodOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleMethodOutcomeOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: Array<FlowRuleMethodOutcomeOutcomeResult>;
};

/**
 * The type of action outcome for the given rule.
 */
export const OutcomeType = {
    Boolean: "boolean",
} as const;
/**
 * The type of action outcome for the given rule.
 */
export type OutcomeType = ClosedEnum<typeof OutcomeType>;

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a boolean.
 */
export type BooleanOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: OutcomeType;
    /**
     * Results for a given flow action.
     */
    result: boolean;
};

/**
 * The outcome of the action.
 */
export type Outcome =
    | BooleanOutcome
    | PaymentMethodOutcome
    | UUIDsListOutcome
    | PaymentServiceOutcome;

/**
 * An action taken for a transaction.
 */
export type Action = {
    /**
     * The type of this resource. Is always `action`.
     */
    type?: ActionType | undefined;
    /**
     * The identifier for the action.
     */
    id?: Id | undefined;
    /**
     * The name of the Flow.
     */
    flow?: Flow | undefined;
    /**
     * The unique ID of the rule triggered.
     */
    ruleId?: string | undefined;
    /**
     * The date and time when this action was created.
     */
    createdAt?: Date | undefined;
    /**
     * The outcome of the action.
     */
    outcome?:
        | BooleanOutcome
        | PaymentMethodOutcome
        | UUIDsListOutcome
        | PaymentServiceOutcome
        | null
        | undefined;
};

/** @internal */
export const ActionType$inboundSchema: z.ZodNativeEnum<typeof ActionType> =
    z.nativeEnum(ActionType);

/** @internal */
export const ActionType$outboundSchema: z.ZodNativeEnum<typeof ActionType> =
    ActionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionType$ {
    /** @deprecated use `ActionType$inboundSchema` instead. */
    export const inboundSchema = ActionType$inboundSchema;
    /** @deprecated use `ActionType$outboundSchema` instead. */
    export const outboundSchema = ActionType$outboundSchema;
}

/** @internal */
export const Id$inboundSchema: z.ZodNativeEnum<typeof Id> = z.nativeEnum(Id);

/** @internal */
export const Id$outboundSchema: z.ZodNativeEnum<typeof Id> = Id$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
    /** @deprecated use `Id$inboundSchema` instead. */
    export const inboundSchema = Id$inboundSchema;
    /** @deprecated use `Id$outboundSchema` instead. */
    export const outboundSchema = Id$outboundSchema;
}

/** @internal */
export const Flow$inboundSchema: z.ZodNativeEnum<typeof Flow> = z.nativeEnum(Flow);

/** @internal */
export const Flow$outboundSchema: z.ZodNativeEnum<typeof Flow> = Flow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Flow$ {
    /** @deprecated use `Flow$inboundSchema` instead. */
    export const inboundSchema = Flow$inboundSchema;
    /** @deprecated use `Flow$outboundSchema` instead. */
    export const outboundSchema = Flow$outboundSchema;
}

/** @internal */
export const FlowRuleUUIDsListOutcomeOutcomeType$inboundSchema: z.ZodNativeEnum<
    typeof FlowRuleUUIDsListOutcomeOutcomeType
> = z.nativeEnum(FlowRuleUUIDsListOutcomeOutcomeType);

/** @internal */
export const FlowRuleUUIDsListOutcomeOutcomeType$outboundSchema: z.ZodNativeEnum<
    typeof FlowRuleUUIDsListOutcomeOutcomeType
> = FlowRuleUUIDsListOutcomeOutcomeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleUUIDsListOutcomeOutcomeType$ {
    /** @deprecated use `FlowRuleUUIDsListOutcomeOutcomeType$inboundSchema` instead. */
    export const inboundSchema = FlowRuleUUIDsListOutcomeOutcomeType$inboundSchema;
    /** @deprecated use `FlowRuleUUIDsListOutcomeOutcomeType$outboundSchema` instead. */
    export const outboundSchema = FlowRuleUUIDsListOutcomeOutcomeType$outboundSchema;
}

/** @internal */
export const UUIDsListOutcome$inboundSchema: z.ZodType<UUIDsListOutcome, z.ZodTypeDef, unknown> =
    z.object({
        type: FlowRuleUUIDsListOutcomeOutcomeType$inboundSchema,
        result: z.array(z.string()),
    });

/** @internal */
export type UUIDsListOutcome$Outbound = {
    type: string;
    result: Array<string>;
};

/** @internal */
export const UUIDsListOutcome$outboundSchema: z.ZodType<
    UUIDsListOutcome$Outbound,
    z.ZodTypeDef,
    UUIDsListOutcome
> = z.object({
    type: FlowRuleUUIDsListOutcomeOutcomeType$outboundSchema,
    result: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UUIDsListOutcome$ {
    /** @deprecated use `UUIDsListOutcome$inboundSchema` instead. */
    export const inboundSchema = UUIDsListOutcome$inboundSchema;
    /** @deprecated use `UUIDsListOutcome$outboundSchema` instead. */
    export const outboundSchema = UUIDsListOutcome$outboundSchema;
    /** @deprecated use `UUIDsListOutcome$Outbound` instead. */
    export type Outbound = UUIDsListOutcome$Outbound;
}

/** @internal */
export const FlowRuleServiceOutcomeOutcomeType$inboundSchema: z.ZodNativeEnum<
    typeof FlowRuleServiceOutcomeOutcomeType
> = z.nativeEnum(FlowRuleServiceOutcomeOutcomeType);

/** @internal */
export const FlowRuleServiceOutcomeOutcomeType$outboundSchema: z.ZodNativeEnum<
    typeof FlowRuleServiceOutcomeOutcomeType
> = FlowRuleServiceOutcomeOutcomeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleServiceOutcomeOutcomeType$ {
    /** @deprecated use `FlowRuleServiceOutcomeOutcomeType$inboundSchema` instead. */
    export const inboundSchema = FlowRuleServiceOutcomeOutcomeType$inboundSchema;
    /** @deprecated use `FlowRuleServiceOutcomeOutcomeType$outboundSchema` instead. */
    export const outboundSchema = FlowRuleServiceOutcomeOutcomeType$outboundSchema;
}

/** @internal */
export const OutcomeInstrument$inboundSchema: z.ZodNativeEnum<typeof OutcomeInstrument> =
    z.nativeEnum(OutcomeInstrument);

/** @internal */
export const OutcomeInstrument$outboundSchema: z.ZodNativeEnum<typeof OutcomeInstrument> =
    OutcomeInstrument$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeInstrument$ {
    /** @deprecated use `OutcomeInstrument$inboundSchema` instead. */
    export const inboundSchema = OutcomeInstrument$inboundSchema;
    /** @deprecated use `OutcomeInstrument$outboundSchema` instead. */
    export const outboundSchema = OutcomeInstrument$outboundSchema;
}

/** @internal */
export const OutcomeName$inboundSchema: z.ZodNativeEnum<typeof OutcomeName> =
    z.nativeEnum(OutcomeName);

/** @internal */
export const OutcomeName$outboundSchema: z.ZodNativeEnum<typeof OutcomeName> =
    OutcomeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeName$ {
    /** @deprecated use `OutcomeName$inboundSchema` instead. */
    export const inboundSchema = OutcomeName$inboundSchema;
    /** @deprecated use `OutcomeName$outboundSchema` instead. */
    export const outboundSchema = OutcomeName$outboundSchema;
}

/** @internal */
export const OutcomeTransformations$inboundSchema: z.ZodType<
    OutcomeTransformations,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: OutcomeName$inboundSchema.optional(),
});

/** @internal */
export type OutcomeTransformations$Outbound = {
    name?: string | undefined;
};

/** @internal */
export const OutcomeTransformations$outboundSchema: z.ZodType<
    OutcomeTransformations$Outbound,
    z.ZodTypeDef,
    OutcomeTransformations
> = z.object({
    name: OutcomeName$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeTransformations$ {
    /** @deprecated use `OutcomeTransformations$inboundSchema` instead. */
    export const inboundSchema = OutcomeTransformations$inboundSchema;
    /** @deprecated use `OutcomeTransformations$outboundSchema` instead. */
    export const outboundSchema = OutcomeTransformations$outboundSchema;
    /** @deprecated use `OutcomeTransformations$Outbound` instead. */
    export type Outbound = OutcomeTransformations$Outbound;
}

/** @internal */
export const OutcomeResult$inboundSchema: z.ZodType<OutcomeResult, z.ZodTypeDef, unknown> = z
    .object({
        payment_service_id: z.string().optional(),
        instrument: OutcomeInstrument$inboundSchema.optional(),
        transformations: z.array(z.lazy(() => OutcomeTransformations$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
        });
    });

/** @internal */
export type OutcomeResult$Outbound = {
    payment_service_id?: string | undefined;
    instrument?: string | undefined;
    transformations?: Array<OutcomeTransformations$Outbound> | undefined;
};

/** @internal */
export const OutcomeResult$outboundSchema: z.ZodType<
    OutcomeResult$Outbound,
    z.ZodTypeDef,
    OutcomeResult
> = z
    .object({
        paymentServiceId: z.string().optional(),
        instrument: OutcomeInstrument$outboundSchema.optional(),
        transformations: z.array(z.lazy(() => OutcomeTransformations$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeResult$ {
    /** @deprecated use `OutcomeResult$inboundSchema` instead. */
    export const inboundSchema = OutcomeResult$inboundSchema;
    /** @deprecated use `OutcomeResult$outboundSchema` instead. */
    export const outboundSchema = OutcomeResult$outboundSchema;
    /** @deprecated use `OutcomeResult$Outbound` instead. */
    export type Outbound = OutcomeResult$Outbound;
}

/** @internal */
export const OutcomeVersion$inboundSchema: z.ZodNativeEnum<typeof OutcomeVersion> =
    z.nativeEnum(OutcomeVersion);

/** @internal */
export const OutcomeVersion$outboundSchema: z.ZodNativeEnum<typeof OutcomeVersion> =
    OutcomeVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeVersion$ {
    /** @deprecated use `OutcomeVersion$inboundSchema` instead. */
    export const inboundSchema = OutcomeVersion$inboundSchema;
    /** @deprecated use `OutcomeVersion$outboundSchema` instead. */
    export const outboundSchema = OutcomeVersion$outboundSchema;
}

/** @internal */
export const PaymentServiceOutcome$inboundSchema: z.ZodType<
    PaymentServiceOutcome,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FlowRuleServiceOutcomeOutcomeType$inboundSchema,
    result: z.array(z.lazy(() => OutcomeResult$inboundSchema)),
    version: OutcomeVersion$inboundSchema,
});

/** @internal */
export type PaymentServiceOutcome$Outbound = {
    type: string;
    result: Array<OutcomeResult$Outbound>;
    version: number;
};

/** @internal */
export const PaymentServiceOutcome$outboundSchema: z.ZodType<
    PaymentServiceOutcome$Outbound,
    z.ZodTypeDef,
    PaymentServiceOutcome
> = z.object({
    type: FlowRuleServiceOutcomeOutcomeType$outboundSchema,
    result: z.array(z.lazy(() => OutcomeResult$outboundSchema)),
    version: OutcomeVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceOutcome$ {
    /** @deprecated use `PaymentServiceOutcome$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceOutcome$inboundSchema;
    /** @deprecated use `PaymentServiceOutcome$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceOutcome$outboundSchema;
    /** @deprecated use `PaymentServiceOutcome$Outbound` instead. */
    export type Outbound = PaymentServiceOutcome$Outbound;
}

/** @internal */
export const FlowRuleMethodOutcomeOutcomeType$inboundSchema: z.ZodNativeEnum<
    typeof FlowRuleMethodOutcomeOutcomeType
> = z.nativeEnum(FlowRuleMethodOutcomeOutcomeType);

/** @internal */
export const FlowRuleMethodOutcomeOutcomeType$outboundSchema: z.ZodNativeEnum<
    typeof FlowRuleMethodOutcomeOutcomeType
> = FlowRuleMethodOutcomeOutcomeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleMethodOutcomeOutcomeType$ {
    /** @deprecated use `FlowRuleMethodOutcomeOutcomeType$inboundSchema` instead. */
    export const inboundSchema = FlowRuleMethodOutcomeOutcomeType$inboundSchema;
    /** @deprecated use `FlowRuleMethodOutcomeOutcomeType$outboundSchema` instead. */
    export const outboundSchema = FlowRuleMethodOutcomeOutcomeType$outboundSchema;
}

/** @internal */
export const FlowRuleMethodOutcomeOutcomeResult$inboundSchema: z.ZodNativeEnum<
    typeof FlowRuleMethodOutcomeOutcomeResult
> = z.nativeEnum(FlowRuleMethodOutcomeOutcomeResult);

/** @internal */
export const FlowRuleMethodOutcomeOutcomeResult$outboundSchema: z.ZodNativeEnum<
    typeof FlowRuleMethodOutcomeOutcomeResult
> = FlowRuleMethodOutcomeOutcomeResult$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowRuleMethodOutcomeOutcomeResult$ {
    /** @deprecated use `FlowRuleMethodOutcomeOutcomeResult$inboundSchema` instead. */
    export const inboundSchema = FlowRuleMethodOutcomeOutcomeResult$inboundSchema;
    /** @deprecated use `FlowRuleMethodOutcomeOutcomeResult$outboundSchema` instead. */
    export const outboundSchema = FlowRuleMethodOutcomeOutcomeResult$outboundSchema;
}

/** @internal */
export const PaymentMethodOutcome$inboundSchema: z.ZodType<
    PaymentMethodOutcome,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FlowRuleMethodOutcomeOutcomeType$inboundSchema,
    result: z.array(FlowRuleMethodOutcomeOutcomeResult$inboundSchema),
});

/** @internal */
export type PaymentMethodOutcome$Outbound = {
    type: string;
    result: Array<string>;
};

/** @internal */
export const PaymentMethodOutcome$outboundSchema: z.ZodType<
    PaymentMethodOutcome$Outbound,
    z.ZodTypeDef,
    PaymentMethodOutcome
> = z.object({
    type: FlowRuleMethodOutcomeOutcomeType$outboundSchema,
    result: z.array(FlowRuleMethodOutcomeOutcomeResult$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodOutcome$ {
    /** @deprecated use `PaymentMethodOutcome$inboundSchema` instead. */
    export const inboundSchema = PaymentMethodOutcome$inboundSchema;
    /** @deprecated use `PaymentMethodOutcome$outboundSchema` instead. */
    export const outboundSchema = PaymentMethodOutcome$outboundSchema;
    /** @deprecated use `PaymentMethodOutcome$Outbound` instead. */
    export type Outbound = PaymentMethodOutcome$Outbound;
}

/** @internal */
export const OutcomeType$inboundSchema: z.ZodNativeEnum<typeof OutcomeType> =
    z.nativeEnum(OutcomeType);

/** @internal */
export const OutcomeType$outboundSchema: z.ZodNativeEnum<typeof OutcomeType> =
    OutcomeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutcomeType$ {
    /** @deprecated use `OutcomeType$inboundSchema` instead. */
    export const inboundSchema = OutcomeType$inboundSchema;
    /** @deprecated use `OutcomeType$outboundSchema` instead. */
    export const outboundSchema = OutcomeType$outboundSchema;
}

/** @internal */
export const BooleanOutcome$inboundSchema: z.ZodType<BooleanOutcome, z.ZodTypeDef, unknown> =
    z.object({
        type: OutcomeType$inboundSchema,
        result: z.boolean(),
    });

/** @internal */
export type BooleanOutcome$Outbound = {
    type: string;
    result: boolean;
};

/** @internal */
export const BooleanOutcome$outboundSchema: z.ZodType<
    BooleanOutcome$Outbound,
    z.ZodTypeDef,
    BooleanOutcome
> = z.object({
    type: OutcomeType$outboundSchema,
    result: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BooleanOutcome$ {
    /** @deprecated use `BooleanOutcome$inboundSchema` instead. */
    export const inboundSchema = BooleanOutcome$inboundSchema;
    /** @deprecated use `BooleanOutcome$outboundSchema` instead. */
    export const outboundSchema = BooleanOutcome$outboundSchema;
    /** @deprecated use `BooleanOutcome$Outbound` instead. */
    export type Outbound = BooleanOutcome$Outbound;
}

/** @internal */
export const Outcome$inboundSchema: z.ZodType<Outcome, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => BooleanOutcome$inboundSchema),
    z.lazy(() => PaymentMethodOutcome$inboundSchema),
    z.lazy(() => UUIDsListOutcome$inboundSchema),
    z.lazy(() => PaymentServiceOutcome$inboundSchema),
]);

/** @internal */
export type Outcome$Outbound =
    | BooleanOutcome$Outbound
    | PaymentMethodOutcome$Outbound
    | UUIDsListOutcome$Outbound
    | PaymentServiceOutcome$Outbound;

/** @internal */
export const Outcome$outboundSchema: z.ZodType<Outcome$Outbound, z.ZodTypeDef, Outcome> = z.union([
    z.lazy(() => BooleanOutcome$outboundSchema),
    z.lazy(() => PaymentMethodOutcome$outboundSchema),
    z.lazy(() => UUIDsListOutcome$outboundSchema),
    z.lazy(() => PaymentServiceOutcome$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Outcome$ {
    /** @deprecated use `Outcome$inboundSchema` instead. */
    export const inboundSchema = Outcome$inboundSchema;
    /** @deprecated use `Outcome$outboundSchema` instead. */
    export const outboundSchema = Outcome$outboundSchema;
    /** @deprecated use `Outcome$Outbound` instead. */
    export type Outbound = Outcome$Outbound;
}

/** @internal */
export const Action$inboundSchema: z.ZodType<Action, z.ZodTypeDef, unknown> = z
    .object({
        type: ActionType$inboundSchema.optional(),
        id: Id$inboundSchema.optional(),
        flow: Flow$inboundSchema.optional(),
        rule_id: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        outcome: z
            .nullable(
                z.union([
                    z.lazy(() => BooleanOutcome$inboundSchema),
                    z.lazy(() => PaymentMethodOutcome$inboundSchema),
                    z.lazy(() => UUIDsListOutcome$inboundSchema),
                    z.lazy(() => PaymentServiceOutcome$inboundSchema),
                ])
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            rule_id: "ruleId",
            created_at: "createdAt",
        });
    });

/** @internal */
export type Action$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    flow?: string | undefined;
    rule_id?: string | undefined;
    created_at?: string | undefined;
    outcome?:
        | BooleanOutcome$Outbound
        | PaymentMethodOutcome$Outbound
        | UUIDsListOutcome$Outbound
        | PaymentServiceOutcome$Outbound
        | null
        | undefined;
};

/** @internal */
export const Action$outboundSchema: z.ZodType<Action$Outbound, z.ZodTypeDef, Action> = z
    .object({
        type: ActionType$outboundSchema.optional(),
        id: Id$outboundSchema.optional(),
        flow: Flow$outboundSchema.optional(),
        ruleId: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        outcome: z
            .nullable(
                z.union([
                    z.lazy(() => BooleanOutcome$outboundSchema),
                    z.lazy(() => PaymentMethodOutcome$outboundSchema),
                    z.lazy(() => UUIDsListOutcome$outboundSchema),
                    z.lazy(() => PaymentServiceOutcome$outboundSchema),
                ])
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ruleId: "rule_id",
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
    /** @deprecated use `Action$inboundSchema` instead. */
    export const inboundSchema = Action$inboundSchema;
    /** @deprecated use `Action$outboundSchema` instead. */
    export const outboundSchema = Action$outboundSchema;
    /** @deprecated use `Action$Outbound` instead. */
    export type Outbound = Action$Outbound;
}
