/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowIsSubsequentPaymentConditionName {
    IsSubsequentPayment = "is_subsequent_payment",
}

/**
 * The comparison to make on the `is_subsequent_payment` flag `value`.
 */
export enum FlowIsSubsequentPaymentConditionOperator {
    EqualTo = "equal_to",
}

/**
 * `is_subsequent_payment` flag conditions with a name, operator, and value.
 */
export type FlowIsSubsequentPaymentCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowIsSubsequentPaymentConditionName;
    /**
     * The comparison to make on the `is_subsequent_payment` flag `value`.
     */
    operator: FlowIsSubsequentPaymentConditionOperator;
    /**
     * `is_subsequent_payment` flag value to compare the transaction to.
     */
    value: boolean;
};

/** @internal */
export const FlowIsSubsequentPaymentConditionName$ = z.nativeEnum(
    FlowIsSubsequentPaymentConditionName
);

/** @internal */
export const FlowIsSubsequentPaymentConditionOperator$ = z.nativeEnum(
    FlowIsSubsequentPaymentConditionOperator
);

/** @internal */
export namespace FlowIsSubsequentPaymentCondition$ {
    export type Inbound = {
        name: FlowIsSubsequentPaymentConditionName;
        operator: FlowIsSubsequentPaymentConditionOperator;
        value: boolean;
    };

    export const inboundSchema: z.ZodType<FlowIsSubsequentPaymentCondition, z.ZodTypeDef, Inbound> =
        z
            .object({
                name: FlowIsSubsequentPaymentConditionName$,
                operator: FlowIsSubsequentPaymentConditionOperator$,
                value: z.boolean(),
            })
            .transform((v) => {
                return {
                    name: v.name,
                    operator: v.operator,
                    value: v.value,
                };
            });

    export type Outbound = {
        name: FlowIsSubsequentPaymentConditionName;
        operator: FlowIsSubsequentPaymentConditionOperator;
        value: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowIsSubsequentPaymentCondition
    > = z
        .object({
            name: FlowIsSubsequentPaymentConditionName$,
            operator: FlowIsSubsequentPaymentConditionOperator$,
            value: z.boolean(),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
