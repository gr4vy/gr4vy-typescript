/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowIsSubsequentPaymentConditionName = {
    IsSubsequentPayment: "is_subsequent_payment",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowIsSubsequentPaymentConditionName = ClosedEnum<
    typeof FlowIsSubsequentPaymentConditionName
>;

/**
 * The comparison to make on the `is_subsequent_payment` flag `value`.
 */
export const FlowIsSubsequentPaymentConditionOperator = {
    EqualTo: "equal_to",
} as const;
/**
 * The comparison to make on the `is_subsequent_payment` flag `value`.
 */
export type FlowIsSubsequentPaymentConditionOperator = ClosedEnum<
    typeof FlowIsSubsequentPaymentConditionOperator
>;

/**
 * `is_subsequent_payment` flag conditions with a name, operator, and value.
 */
export type FlowIsSubsequentPaymentCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowIsSubsequentPaymentConditionName;
    /**
     * The comparison to make on the `is_subsequent_payment` flag `value`.
     */
    operator: FlowIsSubsequentPaymentConditionOperator;
    /**
     * `is_subsequent_payment` flag value to compare the transaction to.
     */
    value: boolean;
};

/** @internal */
export const FlowIsSubsequentPaymentConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowIsSubsequentPaymentConditionName
> = z.nativeEnum(FlowIsSubsequentPaymentConditionName);

/** @internal */
export const FlowIsSubsequentPaymentConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowIsSubsequentPaymentConditionName
> = FlowIsSubsequentPaymentConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowIsSubsequentPaymentConditionName$ {
    /** @deprecated use `FlowIsSubsequentPaymentConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowIsSubsequentPaymentConditionName$inboundSchema;
    /** @deprecated use `FlowIsSubsequentPaymentConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowIsSubsequentPaymentConditionName$outboundSchema;
}

/** @internal */
export const FlowIsSubsequentPaymentConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowIsSubsequentPaymentConditionOperator
> = z.nativeEnum(FlowIsSubsequentPaymentConditionOperator);

/** @internal */
export const FlowIsSubsequentPaymentConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowIsSubsequentPaymentConditionOperator
> = FlowIsSubsequentPaymentConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowIsSubsequentPaymentConditionOperator$ {
    /** @deprecated use `FlowIsSubsequentPaymentConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowIsSubsequentPaymentConditionOperator$inboundSchema;
    /** @deprecated use `FlowIsSubsequentPaymentConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowIsSubsequentPaymentConditionOperator$outboundSchema;
}

/** @internal */
export const FlowIsSubsequentPaymentCondition$inboundSchema: z.ZodType<
    FlowIsSubsequentPaymentCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowIsSubsequentPaymentConditionName$inboundSchema,
    operator: FlowIsSubsequentPaymentConditionOperator$inboundSchema,
    value: z.boolean(),
});

/** @internal */
export type FlowIsSubsequentPaymentCondition$Outbound = {
    name: string;
    operator: string;
    value: boolean;
};

/** @internal */
export const FlowIsSubsequentPaymentCondition$outboundSchema: z.ZodType<
    FlowIsSubsequentPaymentCondition$Outbound,
    z.ZodTypeDef,
    FlowIsSubsequentPaymentCondition
> = z.object({
    name: FlowIsSubsequentPaymentConditionName$outboundSchema,
    operator: FlowIsSubsequentPaymentConditionOperator$outboundSchema,
    value: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowIsSubsequentPaymentCondition$ {
    /** @deprecated use `FlowIsSubsequentPaymentCondition$inboundSchema` instead. */
    export const inboundSchema = FlowIsSubsequentPaymentCondition$inboundSchema;
    /** @deprecated use `FlowIsSubsequentPaymentCondition$outboundSchema` instead. */
    export const outboundSchema = FlowIsSubsequentPaymentCondition$outboundSchema;
    /** @deprecated use `FlowIsSubsequentPaymentCondition$Outbound` instead. */
    export type Outbound = FlowIsSubsequentPaymentCondition$Outbound;
}
