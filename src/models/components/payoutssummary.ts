/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CardType,
  CardType$inboundSchema,
  CardType$outboundSchema,
} from "./cardtype.js";

/**
 * Always `payout`.
 */
export const PayoutsSummaryType = {
  Payout: "payout",
} as const;
/**
 * Always `payout`.
 */
export type PayoutsSummaryType = ClosedEnum<typeof PayoutsSummaryType>;

/**
 * Always `buyer`.
 */
export const PayoutsSummaryBuyerType = {
  Buyer: "buyer",
} as const;
/**
 * Always `buyer`.
 */
export type PayoutsSummaryBuyerType = ClosedEnum<
  typeof PayoutsSummaryBuyerType
>;

/**
 * The billing address for the buyer.
 */
export type PayoutsSummaryBuyerAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The kind of tax ID
 */
export const PayoutsSummaryTaxIdKind = {
  AeTrn: "ae.trn",
  AuAbn: "au.abn",
  ArDni: "ar.dni",
  ArCuil: "ar.cuil",
  ArCuit: "ar.cuit",
  BrCnpj: "br.cnpj",
  BrCpf: "br.cpf",
  CaBn: "ca.bn",
  CaGstHst: "ca.gst_hst",
  CaPstBc: "ca.pst_bc",
  CaPstMb: "ca.pst_mb",
  CaPstSk: "ca.pst_sk",
  CaQst: "ca.qst",
  ChVat: "ch.vat",
  ClTin: "cl.tin",
  CoItin: "co.itin",
  CoNit: "co.nit",
  EsCif: "es.cif",
  EuVat: "eu.vat",
  GbVat: "gb.vat",
  HkBr: "hk.br",
  IdNik: "id.nik",
  IdNpwp: "id.npwp",
  InGst: "in.gst",
  JpCn: "jp.cn",
  JpRn: "jp.rn",
  KrBrn: "kr.brn",
  LiUid: "li.uid",
  MxCurp: "mx.curp",
  MxRfc: "mx.rfc",
  MyFrp: "my.frp",
  MyItn: "my.itn",
  MyNric: "my.nric",
  MySst: "my.sst",
  NoVat: "no.vat",
  NzGst: "nz.gst",
  PhTin: "ph.tin",
  RuInn: "ru.inn",
  RuKpp: "ru.kpp",
  SaVat: "sa.vat",
  SgGst: "sg.gst",
  SgUen: "sg.uen",
  ThId: "th.id",
  ThVat: "th.vat",
  TwVat: "tw.vat",
  UsEin: "us.ein",
  ZaVat: "za.vat",
  BoCi: "bo.ci",
} as const;
/**
 * The kind of tax ID
 */
export type PayoutsSummaryTaxIdKind = ClosedEnum<
  typeof PayoutsSummaryTaxIdKind
>;

/**
 * The tax ID information associated with the billing details.
 */
export type PayoutsSummaryTaxId = {
  /**
   * The tax ID for the buyer.
   */
  value: string;
  /**
   * The kind of tax ID
   */
  kind: PayoutsSummaryTaxIdKind;
};

/**
 * The billing name, address, email, and other fields for this buyer.
 */
export type PayoutsSummaryBillingDetails = {
  /**
   * The first name(s) or given name for the buyer.
   */
  firstName?: string | undefined;
  /**
   * The last name, or family name, of the buyer.
   */
  lastName?: string | undefined;
  /**
   * The email address for the buyer.
   */
  emailAddress?: string | undefined;
  /**
   * The phone number for the buyer which should be formatted according to the E164 number standard.
   */
  phoneNumber?: string | undefined;
  /**
   * The billing address for the buyer.
   */
  address?: PayoutsSummaryBuyerAddress | undefined;
  /**
   * The tax ID information associated with the billing details.
   */
  taxId?: PayoutsSummaryTaxId | undefined;
};

/**
 * The buyer used for this payout.
 */
export type PayoutsSummaryBuyer = {
  /**
   * Always `buyer`.
   */
  type?: PayoutsSummaryBuyerType | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | undefined;
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * The billing name, address, email, and other fields for this buyer.
   */
  billingDetails?: PayoutsSummaryBillingDetails | undefined;
};

/**
 * The type of payout to process.
 */
export const PayoutCategory = {
  OnlineGambling: "online_gambling",
} as const;
/**
 * The type of payout to process.
 */
export type PayoutCategory = ClosedEnum<typeof PayoutCategory>;

/**
 * Always `merchant`.
 */
export const PayoutsSummaryMerchantType = {
  Merchant: "merchant",
} as const;
/**
 * Always `merchant`.
 */
export type PayoutsSummaryMerchantType = ClosedEnum<
  typeof PayoutsSummaryMerchantType
>;

/**
 * The address for the merchant.
 */
export type PayoutsSummaryAddress = {
  /**
   * The city for the address.
   */
  city?: string | undefined;
  /**
   * The country for the address in ISO 3166 format.
   */
  country?: string | undefined;
  /**
   * The postal code or zip code for the address.
   */
  postalCode?: string | undefined;
  /**
   * The state, county, or province for the address.
   */
  state?: string | undefined;
  /**
   * The code of state, county, or province for the address in ISO 3166-2 format.
   */
  stateCode?: string | undefined;
  /**
   * The house number or name for the address. Not all payment services use this field but some do.
   */
  houseNumberOrName?: string | undefined;
  /**
   * The first line of the address.
   */
  line1?: string | undefined;
  /**
   * The second line of the address.
   */
  line2?: string | undefined;
  /**
   * The optional name of the company or organisation to add to the address.
   */
  organization?: string | undefined;
};

/**
 * The merchant details associated to this payout.
 */
export type Merchant = {
  /**
   * Always `merchant`.
   */
  type?: PayoutsSummaryMerchantType | undefined;
  /**
   * The name of the merchant.
   */
  name: string;
  /**
   * Unique value which identifies a merchant for processing transactions, also known as a MID.
   */
  identificationNumber: string;
  /**
   * The phone number for the merchant which should be formatted according to the E164 number standard.
   */
  phoneNumber: string;
  /**
   * Merchant website URL.
   */
  url: string;
  /**
   * Value to explain charges or payments on bank statements.
   */
  statementDescriptor?: string | undefined;
  /**
   * Merchant classification for the type of goods or services it provides.
   */
  merchantCategoryCode: string;
  /**
   * The address for the merchant.
   */
  address?: PayoutsSummaryAddress | undefined;
};

/**
 * Always `payment-method`.
 */
export const PayoutsSummaryPaymentMethodType = {
  PaymentMethod: "payment-method",
} as const;
/**
 * Always `payment-method`.
 */
export type PayoutsSummaryPaymentMethodType = ClosedEnum<
  typeof PayoutsSummaryPaymentMethodType
>;

/**
 * Details for credit or debit card payment method.
 */
export type PayoutsSummaryDetails = {
  bin?: string | undefined;
  /**
   * An enumeration.
   */
  cardType?: CardType | undefined;
};

/**
 * The type of this payment method.
 */
export const PayoutsSummaryPaymentMethodPaymentMethod = {
  Abitab: "abitab",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The type of this payment method.
 */
export type PayoutsSummaryPaymentMethodPaymentMethod = ClosedEnum<
  typeof PayoutsSummaryPaymentMethodPaymentMethod
>;

/**
 * The mode to use with this payment method.
 */
export const PayoutsSummaryMode = {
  Card: "card",
  Redirect: "redirect",
  Applepay: "applepay",
  Googlepay: "googlepay",
  CheckoutSession: "checkout-session",
  ClickToPay: "click-to-pay",
  GiftCard: "gift-card",
} as const;
/**
 * The mode to use with this payment method.
 */
export type PayoutsSummaryMode = ClosedEnum<typeof PayoutsSummaryMode>;

/**
 * The scheme of the card. Only applies to card payments.
 */
export const PayoutsSummaryCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme of the card. Only applies to card payments.
 */
export type PayoutsSummaryCardScheme = ClosedEnum<
  typeof PayoutsSummaryCardScheme
>;

/**
 * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
 */
export const ApprovalTarget = {
  NewWindow: "new_window",
  Any: "any",
} as const;
/**
 * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
 */
export type ApprovalTarget = ClosedEnum<typeof ApprovalTarget>;

/**
 * The payment method used for this payout.
 */
export type PayoutsSummaryPaymentMethod = {
  /**
   * Always `payment-method`.
   */
  type?: PayoutsSummaryPaymentMethodType | undefined;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize their payment.
   */
  approvalUrl?: string | undefined;
  /**
   * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
   */
  country?: string | undefined;
  /**
   * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
   */
  currency?: string | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: PayoutsSummaryDetails | undefined;
  /**
   * The expiration date for the payment method.
   */
  expirationDate?: string | undefined;
  /**
   * The unique hash derived from the payment method identifier (e.g. card number).
   */
  fingerprint?: string | undefined;
  /**
   * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
   */
  label?: string | undefined;
  /**
   * The date and time when this card was last replaced by the account updater.
   */
  lastReplacedAt?: Date | undefined;
  /**
   * The type of this payment method.
   */
  method: PayoutsSummaryPaymentMethodPaymentMethod;
  /**
   * The mode to use with this payment method.
   */
  mode?: PayoutsSummaryMode | undefined;
  /**
   * The scheme of the card. Only applies to card payments.
   */
  scheme?: PayoutsSummaryCardScheme | undefined;
  /**
   * The ID of the payment method.
   */
  id?: string | undefined;
  /**
   * The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
   */
  approvalTarget?: ApprovalTarget | undefined;
  /**
   * An external identifier that can be used to match the payment method against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
   */
  paymentAccountReference?: string | undefined;
};

/**
 * Always `payment-service`.
 */
export const PayoutsSummaryPaymentServiceType = {
  PaymentService: "payment-service",
} as const;
/**
 * Always `payment-service`.
 */
export type PayoutsSummaryPaymentServiceType = ClosedEnum<
  typeof PayoutsSummaryPaymentServiceType
>;

/**
 * Always `card`.
 */
export const PayoutsSummaryMethod = {
  Card: "card",
} as const;
/**
 * Always `card`.
 */
export type PayoutsSummaryMethod = ClosedEnum<typeof PayoutsSummaryMethod>;

/**
 * The payment service used for this payout.
 */
export type PaymentService = {
  /**
   * Always `payment-service`.
   */
  type?: PayoutsSummaryPaymentServiceType | undefined;
  /**
   * The ID for the payout service.
   */
  id?: string | undefined;
  /**
   * Always `card`.
   */
  method?: PayoutsSummaryMethod | undefined;
  /**
   * The ID of the connection used for this payout.
   */
  paymentServiceDefinitionId: string;
  /**
   * The display name of the connection used for this payout.
   */
  displayName?: string | undefined;
};

/**
 * The status of the payout.
 */
export const PayoutStatus = {
  Declined: "declined",
  Failed: "failed",
  Pending: "pending",
  Succeeded: "succeeded",
} as const;
/**
 * The status of the payout.
 */
export type PayoutStatus = ClosedEnum<typeof PayoutStatus>;

/**
 * PayoutsSummary
 *
 * @remarks
 *
 * Represents a summary of a payout.
 */
export type PayoutsSummary = {
  /**
   * Always `payout`.
   */
  type?: PayoutsSummaryType | undefined;
  /**
   * The ID for the payout.
   */
  id?: string | undefined;
  /**
   * The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
   */
  amount: number;
  /**
   * The buyer used for this payout.
   */
  buyer?: PayoutsSummaryBuyer | undefined;
  /**
   * The type of payout to process.
   */
  category?: PayoutCategory | undefined;
  /**
   * The date this payout was created at.
   */
  createdAt: Date;
  /**
   * A supported ISO-4217 currency code.
   */
  currency: string;
  /**
   * The merchant identifier for this payout.
   */
  externalIdentifier?: string | undefined;
  /**
   * The merchant details associated to this payout.
   */
  merchant?: Merchant | undefined;
  /**
   * The ID of the merchant account this payout was created for.
   */
  merchantAccountId?: string | undefined;
  /**
   * The payment method used for this payout.
   */
  paymentMethod: PayoutsSummaryPaymentMethod;
  /**
   * The payment service used for this payout.
   */
  paymentService: PaymentService;
  /**
   * The ID of the payout in the underlying payment service.
   */
  paymentServicePayoutId?: string | undefined;
  /**
   * The status of the payout.
   */
  status: PayoutStatus;
  /**
   * The date this payout was last updated at.
   */
  updatedAt: Date;
};

/** @internal */
export const PayoutsSummaryType$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryType
> = z.nativeEnum(PayoutsSummaryType);

/** @internal */
export const PayoutsSummaryType$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryType
> = PayoutsSummaryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryType$ {
  /** @deprecated use `PayoutsSummaryType$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryType$inboundSchema;
  /** @deprecated use `PayoutsSummaryType$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryType$outboundSchema;
}

/** @internal */
export const PayoutsSummaryBuyerType$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryBuyerType
> = z.nativeEnum(PayoutsSummaryBuyerType);

/** @internal */
export const PayoutsSummaryBuyerType$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryBuyerType
> = PayoutsSummaryBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryBuyerType$ {
  /** @deprecated use `PayoutsSummaryBuyerType$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryBuyerType$inboundSchema;
  /** @deprecated use `PayoutsSummaryBuyerType$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryBuyerType$outboundSchema;
}

/** @internal */
export const PayoutsSummaryBuyerAddress$inboundSchema: z.ZodType<
  PayoutsSummaryBuyerAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type PayoutsSummaryBuyerAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const PayoutsSummaryBuyerAddress$outboundSchema: z.ZodType<
  PayoutsSummaryBuyerAddress$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryBuyerAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryBuyerAddress$ {
  /** @deprecated use `PayoutsSummaryBuyerAddress$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryBuyerAddress$inboundSchema;
  /** @deprecated use `PayoutsSummaryBuyerAddress$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryBuyerAddress$outboundSchema;
  /** @deprecated use `PayoutsSummaryBuyerAddress$Outbound` instead. */
  export type Outbound = PayoutsSummaryBuyerAddress$Outbound;
}

export function payoutsSummaryBuyerAddressToJSON(
  payoutsSummaryBuyerAddress: PayoutsSummaryBuyerAddress,
): string {
  return JSON.stringify(
    PayoutsSummaryBuyerAddress$outboundSchema.parse(payoutsSummaryBuyerAddress),
  );
}

export function payoutsSummaryBuyerAddressFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryBuyerAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryBuyerAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryBuyerAddress' from JSON`,
  );
}

/** @internal */
export const PayoutsSummaryTaxIdKind$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryTaxIdKind
> = z.nativeEnum(PayoutsSummaryTaxIdKind);

/** @internal */
export const PayoutsSummaryTaxIdKind$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryTaxIdKind
> = PayoutsSummaryTaxIdKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryTaxIdKind$ {
  /** @deprecated use `PayoutsSummaryTaxIdKind$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryTaxIdKind$inboundSchema;
  /** @deprecated use `PayoutsSummaryTaxIdKind$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryTaxIdKind$outboundSchema;
}

/** @internal */
export const PayoutsSummaryTaxId$inboundSchema: z.ZodType<
  PayoutsSummaryTaxId,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  kind: PayoutsSummaryTaxIdKind$inboundSchema,
});

/** @internal */
export type PayoutsSummaryTaxId$Outbound = {
  value: string;
  kind: string;
};

/** @internal */
export const PayoutsSummaryTaxId$outboundSchema: z.ZodType<
  PayoutsSummaryTaxId$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryTaxId
> = z.object({
  value: z.string(),
  kind: PayoutsSummaryTaxIdKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryTaxId$ {
  /** @deprecated use `PayoutsSummaryTaxId$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryTaxId$inboundSchema;
  /** @deprecated use `PayoutsSummaryTaxId$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryTaxId$outboundSchema;
  /** @deprecated use `PayoutsSummaryTaxId$Outbound` instead. */
  export type Outbound = PayoutsSummaryTaxId$Outbound;
}

export function payoutsSummaryTaxIdToJSON(
  payoutsSummaryTaxId: PayoutsSummaryTaxId,
): string {
  return JSON.stringify(
    PayoutsSummaryTaxId$outboundSchema.parse(payoutsSummaryTaxId),
  );
}

export function payoutsSummaryTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryTaxId' from JSON`,
  );
}

/** @internal */
export const PayoutsSummaryBillingDetails$inboundSchema: z.ZodType<
  PayoutsSummaryBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email_address: z.string().optional(),
  phone_number: z.string().optional(),
  address: z.lazy(() => PayoutsSummaryBuyerAddress$inboundSchema).optional(),
  tax_id: z.lazy(() => PayoutsSummaryTaxId$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "phone_number": "phoneNumber",
    "tax_id": "taxId",
  });
});

/** @internal */
export type PayoutsSummaryBillingDetails$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email_address?: string | undefined;
  phone_number?: string | undefined;
  address?: PayoutsSummaryBuyerAddress$Outbound | undefined;
  tax_id?: PayoutsSummaryTaxId$Outbound | undefined;
};

/** @internal */
export const PayoutsSummaryBillingDetails$outboundSchema: z.ZodType<
  PayoutsSummaryBillingDetails$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryBillingDetails
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  address: z.lazy(() => PayoutsSummaryBuyerAddress$outboundSchema).optional(),
  taxId: z.lazy(() => PayoutsSummaryTaxId$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddress: "email_address",
    phoneNumber: "phone_number",
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryBillingDetails$ {
  /** @deprecated use `PayoutsSummaryBillingDetails$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryBillingDetails$inboundSchema;
  /** @deprecated use `PayoutsSummaryBillingDetails$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryBillingDetails$outboundSchema;
  /** @deprecated use `PayoutsSummaryBillingDetails$Outbound` instead. */
  export type Outbound = PayoutsSummaryBillingDetails$Outbound;
}

export function payoutsSummaryBillingDetailsToJSON(
  payoutsSummaryBillingDetails: PayoutsSummaryBillingDetails,
): string {
  return JSON.stringify(
    PayoutsSummaryBillingDetails$outboundSchema.parse(
      payoutsSummaryBillingDetails,
    ),
  );
}

export function payoutsSummaryBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryBillingDetails' from JSON`,
  );
}

/** @internal */
export const PayoutsSummaryBuyer$inboundSchema: z.ZodType<
  PayoutsSummaryBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PayoutsSummaryBuyerType$inboundSchema.default("buyer"),
  id: z.string().optional(),
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: z.lazy(() => PayoutsSummaryBillingDetails$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
  });
});

/** @internal */
export type PayoutsSummaryBuyer$Outbound = {
  type: string;
  id?: string | undefined;
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: PayoutsSummaryBillingDetails$Outbound | undefined;
};

/** @internal */
export const PayoutsSummaryBuyer$outboundSchema: z.ZodType<
  PayoutsSummaryBuyer$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryBuyer
> = z.object({
  type: PayoutsSummaryBuyerType$outboundSchema.default("buyer"),
  id: z.string().optional(),
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: z.lazy(() => PayoutsSummaryBillingDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryBuyer$ {
  /** @deprecated use `PayoutsSummaryBuyer$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryBuyer$inboundSchema;
  /** @deprecated use `PayoutsSummaryBuyer$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryBuyer$outboundSchema;
  /** @deprecated use `PayoutsSummaryBuyer$Outbound` instead. */
  export type Outbound = PayoutsSummaryBuyer$Outbound;
}

export function payoutsSummaryBuyerToJSON(
  payoutsSummaryBuyer: PayoutsSummaryBuyer,
): string {
  return JSON.stringify(
    PayoutsSummaryBuyer$outboundSchema.parse(payoutsSummaryBuyer),
  );
}

export function payoutsSummaryBuyerFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryBuyer' from JSON`,
  );
}

/** @internal */
export const PayoutCategory$inboundSchema: z.ZodNativeEnum<
  typeof PayoutCategory
> = z.nativeEnum(PayoutCategory);

/** @internal */
export const PayoutCategory$outboundSchema: z.ZodNativeEnum<
  typeof PayoutCategory
> = PayoutCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutCategory$ {
  /** @deprecated use `PayoutCategory$inboundSchema` instead. */
  export const inboundSchema = PayoutCategory$inboundSchema;
  /** @deprecated use `PayoutCategory$outboundSchema` instead. */
  export const outboundSchema = PayoutCategory$outboundSchema;
}

/** @internal */
export const PayoutsSummaryMerchantType$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryMerchantType
> = z.nativeEnum(PayoutsSummaryMerchantType);

/** @internal */
export const PayoutsSummaryMerchantType$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryMerchantType
> = PayoutsSummaryMerchantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryMerchantType$ {
  /** @deprecated use `PayoutsSummaryMerchantType$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryMerchantType$inboundSchema;
  /** @deprecated use `PayoutsSummaryMerchantType$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryMerchantType$outboundSchema;
}

/** @internal */
export const PayoutsSummaryAddress$inboundSchema: z.ZodType<
  PayoutsSummaryAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  state_code: z.string().optional(),
  house_number_or_name: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "state_code": "stateCode",
    "house_number_or_name": "houseNumberOrName",
  });
});

/** @internal */
export type PayoutsSummaryAddress$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  state_code?: string | undefined;
  house_number_or_name?: string | undefined;
  line1?: string | undefined;
  line2?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const PayoutsSummaryAddress$outboundSchema: z.ZodType<
  PayoutsSummaryAddress$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryAddress
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  stateCode: z.string().optional(),
  houseNumberOrName: z.string().optional(),
  line1: z.string().optional(),
  line2: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    stateCode: "state_code",
    houseNumberOrName: "house_number_or_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryAddress$ {
  /** @deprecated use `PayoutsSummaryAddress$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryAddress$inboundSchema;
  /** @deprecated use `PayoutsSummaryAddress$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryAddress$outboundSchema;
  /** @deprecated use `PayoutsSummaryAddress$Outbound` instead. */
  export type Outbound = PayoutsSummaryAddress$Outbound;
}

export function payoutsSummaryAddressToJSON(
  payoutsSummaryAddress: PayoutsSummaryAddress,
): string {
  return JSON.stringify(
    PayoutsSummaryAddress$outboundSchema.parse(payoutsSummaryAddress),
  );
}

export function payoutsSummaryAddressFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryAddress' from JSON`,
  );
}

/** @internal */
export const Merchant$inboundSchema: z.ZodType<
  Merchant,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PayoutsSummaryMerchantType$inboundSchema.default("merchant"),
  name: z.string(),
  identification_number: z.string(),
  phone_number: z.string(),
  url: z.string(),
  statement_descriptor: z.string().optional(),
  merchant_category_code: z.string(),
  address: z.lazy(() => PayoutsSummaryAddress$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "identification_number": "identificationNumber",
    "phone_number": "phoneNumber",
    "statement_descriptor": "statementDescriptor",
    "merchant_category_code": "merchantCategoryCode",
  });
});

/** @internal */
export type Merchant$Outbound = {
  type: string;
  name: string;
  identification_number: string;
  phone_number: string;
  url: string;
  statement_descriptor?: string | undefined;
  merchant_category_code: string;
  address?: PayoutsSummaryAddress$Outbound | undefined;
};

/** @internal */
export const Merchant$outboundSchema: z.ZodType<
  Merchant$Outbound,
  z.ZodTypeDef,
  Merchant
> = z.object({
  type: PayoutsSummaryMerchantType$outboundSchema.default("merchant"),
  name: z.string(),
  identificationNumber: z.string(),
  phoneNumber: z.string(),
  url: z.string(),
  statementDescriptor: z.string().optional(),
  merchantCategoryCode: z.string(),
  address: z.lazy(() => PayoutsSummaryAddress$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    identificationNumber: "identification_number",
    phoneNumber: "phone_number",
    statementDescriptor: "statement_descriptor",
    merchantCategoryCode: "merchant_category_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Merchant$ {
  /** @deprecated use `Merchant$inboundSchema` instead. */
  export const inboundSchema = Merchant$inboundSchema;
  /** @deprecated use `Merchant$outboundSchema` instead. */
  export const outboundSchema = Merchant$outboundSchema;
  /** @deprecated use `Merchant$Outbound` instead. */
  export type Outbound = Merchant$Outbound;
}

export function merchantToJSON(merchant: Merchant): string {
  return JSON.stringify(Merchant$outboundSchema.parse(merchant));
}

export function merchantFromJSON(
  jsonString: string,
): SafeParseResult<Merchant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Merchant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Merchant' from JSON`,
  );
}

/** @internal */
export const PayoutsSummaryPaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryPaymentMethodType
> = z.nativeEnum(PayoutsSummaryPaymentMethodType);

/** @internal */
export const PayoutsSummaryPaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryPaymentMethodType
> = PayoutsSummaryPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryPaymentMethodType$ {
  /** @deprecated use `PayoutsSummaryPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryPaymentMethodType$inboundSchema;
  /** @deprecated use `PayoutsSummaryPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryPaymentMethodType$outboundSchema;
}

/** @internal */
export const PayoutsSummaryDetails$inboundSchema: z.ZodType<
  PayoutsSummaryDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.string().optional(),
  card_type: CardType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "card_type": "cardType",
  });
});

/** @internal */
export type PayoutsSummaryDetails$Outbound = {
  bin?: string | undefined;
  card_type?: string | undefined;
};

/** @internal */
export const PayoutsSummaryDetails$outboundSchema: z.ZodType<
  PayoutsSummaryDetails$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryDetails
> = z.object({
  bin: z.string().optional(),
  cardType: CardType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cardType: "card_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryDetails$ {
  /** @deprecated use `PayoutsSummaryDetails$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryDetails$inboundSchema;
  /** @deprecated use `PayoutsSummaryDetails$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryDetails$outboundSchema;
  /** @deprecated use `PayoutsSummaryDetails$Outbound` instead. */
  export type Outbound = PayoutsSummaryDetails$Outbound;
}

export function payoutsSummaryDetailsToJSON(
  payoutsSummaryDetails: PayoutsSummaryDetails,
): string {
  return JSON.stringify(
    PayoutsSummaryDetails$outboundSchema.parse(payoutsSummaryDetails),
  );
}

export function payoutsSummaryDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryDetails' from JSON`,
  );
}

/** @internal */
export const PayoutsSummaryPaymentMethodPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof PayoutsSummaryPaymentMethodPaymentMethod> = z
    .nativeEnum(PayoutsSummaryPaymentMethodPaymentMethod);

/** @internal */
export const PayoutsSummaryPaymentMethodPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof PayoutsSummaryPaymentMethodPaymentMethod> =
    PayoutsSummaryPaymentMethodPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryPaymentMethodPaymentMethod$ {
  /** @deprecated use `PayoutsSummaryPaymentMethodPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PayoutsSummaryPaymentMethodPaymentMethod$inboundSchema;
  /** @deprecated use `PayoutsSummaryPaymentMethodPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PayoutsSummaryPaymentMethodPaymentMethod$outboundSchema;
}

/** @internal */
export const PayoutsSummaryMode$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryMode
> = z.nativeEnum(PayoutsSummaryMode);

/** @internal */
export const PayoutsSummaryMode$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryMode
> = PayoutsSummaryMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryMode$ {
  /** @deprecated use `PayoutsSummaryMode$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryMode$inboundSchema;
  /** @deprecated use `PayoutsSummaryMode$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryMode$outboundSchema;
}

/** @internal */
export const PayoutsSummaryCardScheme$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryCardScheme
> = z.nativeEnum(PayoutsSummaryCardScheme);

/** @internal */
export const PayoutsSummaryCardScheme$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryCardScheme
> = PayoutsSummaryCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryCardScheme$ {
  /** @deprecated use `PayoutsSummaryCardScheme$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryCardScheme$inboundSchema;
  /** @deprecated use `PayoutsSummaryCardScheme$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryCardScheme$outboundSchema;
}

/** @internal */
export const ApprovalTarget$inboundSchema: z.ZodNativeEnum<
  typeof ApprovalTarget
> = z.nativeEnum(ApprovalTarget);

/** @internal */
export const ApprovalTarget$outboundSchema: z.ZodNativeEnum<
  typeof ApprovalTarget
> = ApprovalTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalTarget$ {
  /** @deprecated use `ApprovalTarget$inboundSchema` instead. */
  export const inboundSchema = ApprovalTarget$inboundSchema;
  /** @deprecated use `ApprovalTarget$outboundSchema` instead. */
  export const outboundSchema = ApprovalTarget$outboundSchema;
}

/** @internal */
export const PayoutsSummaryPaymentMethod$inboundSchema: z.ZodType<
  PayoutsSummaryPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PayoutsSummaryPaymentMethodType$inboundSchema.default("payment-method"),
  approval_url: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => PayoutsSummaryDetails$inboundSchema).optional(),
  expiration_date: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  last_replaced_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  method: PayoutsSummaryPaymentMethodPaymentMethod$inboundSchema,
  mode: PayoutsSummaryMode$inboundSchema.optional(),
  scheme: PayoutsSummaryCardScheme$inboundSchema.optional(),
  id: z.string().optional(),
  approval_target: ApprovalTarget$inboundSchema.optional(),
  external_identifier: z.string().optional(),
  payment_account_reference: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "approval_url": "approvalUrl",
    "expiration_date": "expirationDate",
    "last_replaced_at": "lastReplacedAt",
    "approval_target": "approvalTarget",
    "external_identifier": "externalIdentifier",
    "payment_account_reference": "paymentAccountReference",
  });
});

/** @internal */
export type PayoutsSummaryPaymentMethod$Outbound = {
  type: string;
  approval_url?: string | undefined;
  country?: string | undefined;
  currency?: string | undefined;
  details?: PayoutsSummaryDetails$Outbound | undefined;
  expiration_date?: string | undefined;
  fingerprint?: string | undefined;
  label?: string | undefined;
  last_replaced_at?: string | undefined;
  method: string;
  mode?: string | undefined;
  scheme?: string | undefined;
  id?: string | undefined;
  approval_target?: string | undefined;
  external_identifier?: string | undefined;
  payment_account_reference?: string | undefined;
};

/** @internal */
export const PayoutsSummaryPaymentMethod$outboundSchema: z.ZodType<
  PayoutsSummaryPaymentMethod$Outbound,
  z.ZodTypeDef,
  PayoutsSummaryPaymentMethod
> = z.object({
  type: PayoutsSummaryPaymentMethodType$outboundSchema.default(
    "payment-method",
  ),
  approvalUrl: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => PayoutsSummaryDetails$outboundSchema).optional(),
  expirationDate: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  lastReplacedAt: z.date().transform(v => v.toISOString()).optional(),
  method: PayoutsSummaryPaymentMethodPaymentMethod$outboundSchema,
  mode: PayoutsSummaryMode$outboundSchema.optional(),
  scheme: PayoutsSummaryCardScheme$outboundSchema.optional(),
  id: z.string().optional(),
  approvalTarget: ApprovalTarget$outboundSchema.optional(),
  externalIdentifier: z.string().optional(),
  paymentAccountReference: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    approvalUrl: "approval_url",
    expirationDate: "expiration_date",
    lastReplacedAt: "last_replaced_at",
    approvalTarget: "approval_target",
    externalIdentifier: "external_identifier",
    paymentAccountReference: "payment_account_reference",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryPaymentMethod$ {
  /** @deprecated use `PayoutsSummaryPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryPaymentMethod$inboundSchema;
  /** @deprecated use `PayoutsSummaryPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryPaymentMethod$outboundSchema;
  /** @deprecated use `PayoutsSummaryPaymentMethod$Outbound` instead. */
  export type Outbound = PayoutsSummaryPaymentMethod$Outbound;
}

export function payoutsSummaryPaymentMethodToJSON(
  payoutsSummaryPaymentMethod: PayoutsSummaryPaymentMethod,
): string {
  return JSON.stringify(
    PayoutsSummaryPaymentMethod$outboundSchema.parse(
      payoutsSummaryPaymentMethod,
    ),
  );
}

export function payoutsSummaryPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummaryPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummaryPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummaryPaymentMethod' from JSON`,
  );
}

/** @internal */
export const PayoutsSummaryPaymentServiceType$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryPaymentServiceType
> = z.nativeEnum(PayoutsSummaryPaymentServiceType);

/** @internal */
export const PayoutsSummaryPaymentServiceType$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryPaymentServiceType
> = PayoutsSummaryPaymentServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryPaymentServiceType$ {
  /** @deprecated use `PayoutsSummaryPaymentServiceType$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryPaymentServiceType$inboundSchema;
  /** @deprecated use `PayoutsSummaryPaymentServiceType$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryPaymentServiceType$outboundSchema;
}

/** @internal */
export const PayoutsSummaryMethod$inboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryMethod
> = z.nativeEnum(PayoutsSummaryMethod);

/** @internal */
export const PayoutsSummaryMethod$outboundSchema: z.ZodNativeEnum<
  typeof PayoutsSummaryMethod
> = PayoutsSummaryMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummaryMethod$ {
  /** @deprecated use `PayoutsSummaryMethod$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummaryMethod$inboundSchema;
  /** @deprecated use `PayoutsSummaryMethod$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummaryMethod$outboundSchema;
}

/** @internal */
export const PaymentService$inboundSchema: z.ZodType<
  PaymentService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PayoutsSummaryPaymentServiceType$inboundSchema.default(
    "payment-service",
  ),
  id: z.string().optional(),
  method: PayoutsSummaryMethod$inboundSchema.default("card"),
  payment_service_definition_id: z.string(),
  display_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_service_definition_id": "paymentServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type PaymentService$Outbound = {
  type: string;
  id?: string | undefined;
  method: string;
  payment_service_definition_id: string;
  display_name?: string | undefined;
};

/** @internal */
export const PaymentService$outboundSchema: z.ZodType<
  PaymentService$Outbound,
  z.ZodTypeDef,
  PaymentService
> = z.object({
  type: PayoutsSummaryPaymentServiceType$outboundSchema.default(
    "payment-service",
  ),
  id: z.string().optional(),
  method: PayoutsSummaryMethod$outboundSchema.default("card"),
  paymentServiceDefinitionId: z.string(),
  displayName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    paymentServiceDefinitionId: "payment_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentService$ {
  /** @deprecated use `PaymentService$inboundSchema` instead. */
  export const inboundSchema = PaymentService$inboundSchema;
  /** @deprecated use `PaymentService$outboundSchema` instead. */
  export const outboundSchema = PaymentService$outboundSchema;
  /** @deprecated use `PaymentService$Outbound` instead. */
  export type Outbound = PaymentService$Outbound;
}

export function paymentServiceToJSON(paymentService: PaymentService): string {
  return JSON.stringify(PaymentService$outboundSchema.parse(paymentService));
}

export function paymentServiceFromJSON(
  jsonString: string,
): SafeParseResult<PaymentService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentService' from JSON`,
  );
}

/** @internal */
export const PayoutStatus$inboundSchema: z.ZodNativeEnum<typeof PayoutStatus> =
  z.nativeEnum(PayoutStatus);

/** @internal */
export const PayoutStatus$outboundSchema: z.ZodNativeEnum<typeof PayoutStatus> =
  PayoutStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutStatus$ {
  /** @deprecated use `PayoutStatus$inboundSchema` instead. */
  export const inboundSchema = PayoutStatus$inboundSchema;
  /** @deprecated use `PayoutStatus$outboundSchema` instead. */
  export const outboundSchema = PayoutStatus$outboundSchema;
}

/** @internal */
export const PayoutsSummary$inboundSchema: z.ZodType<
  PayoutsSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PayoutsSummaryType$inboundSchema.default("payout"),
  id: z.string().optional(),
  amount: z.number().int(),
  buyer: z.lazy(() => PayoutsSummaryBuyer$inboundSchema).optional(),
  category: PayoutCategory$inboundSchema.optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  currency: z.string(),
  external_identifier: z.string().optional(),
  merchant: z.lazy(() => Merchant$inboundSchema).optional(),
  merchant_account_id: z.string().optional(),
  payment_method: z.lazy(() => PayoutsSummaryPaymentMethod$inboundSchema),
  payment_service: z.lazy(() => PaymentService$inboundSchema),
  payment_service_payout_id: z.string().optional(),
  status: PayoutStatus$inboundSchema,
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "external_identifier": "externalIdentifier",
    "merchant_account_id": "merchantAccountId",
    "payment_method": "paymentMethod",
    "payment_service": "paymentService",
    "payment_service_payout_id": "paymentServicePayoutId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PayoutsSummary$Outbound = {
  type: string;
  id?: string | undefined;
  amount: number;
  buyer?: PayoutsSummaryBuyer$Outbound | undefined;
  category?: string | undefined;
  created_at: string;
  currency: string;
  external_identifier?: string | undefined;
  merchant?: Merchant$Outbound | undefined;
  merchant_account_id?: string | undefined;
  payment_method: PayoutsSummaryPaymentMethod$Outbound;
  payment_service: PaymentService$Outbound;
  payment_service_payout_id?: string | undefined;
  status: string;
  updated_at: string;
};

/** @internal */
export const PayoutsSummary$outboundSchema: z.ZodType<
  PayoutsSummary$Outbound,
  z.ZodTypeDef,
  PayoutsSummary
> = z.object({
  type: PayoutsSummaryType$outboundSchema.default("payout"),
  id: z.string().optional(),
  amount: z.number().int(),
  buyer: z.lazy(() => PayoutsSummaryBuyer$outboundSchema).optional(),
  category: PayoutCategory$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  currency: z.string(),
  externalIdentifier: z.string().optional(),
  merchant: z.lazy(() => Merchant$outboundSchema).optional(),
  merchantAccountId: z.string().optional(),
  paymentMethod: z.lazy(() => PayoutsSummaryPaymentMethod$outboundSchema),
  paymentService: z.lazy(() => PaymentService$outboundSchema),
  paymentServicePayoutId: z.string().optional(),
  status: PayoutStatus$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    externalIdentifier: "external_identifier",
    merchantAccountId: "merchant_account_id",
    paymentMethod: "payment_method",
    paymentService: "payment_service",
    paymentServicePayoutId: "payment_service_payout_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutsSummary$ {
  /** @deprecated use `PayoutsSummary$inboundSchema` instead. */
  export const inboundSchema = PayoutsSummary$inboundSchema;
  /** @deprecated use `PayoutsSummary$outboundSchema` instead. */
  export const outboundSchema = PayoutsSummary$outboundSchema;
  /** @deprecated use `PayoutsSummary$Outbound` instead. */
  export type Outbound = PayoutsSummary$Outbound;
}

export function payoutsSummaryToJSON(payoutsSummary: PayoutsSummary): string {
  return JSON.stringify(PayoutsSummary$outboundSchema.parse(payoutsSummary));
}

export function payoutsSummaryFromJSON(
  jsonString: string,
): SafeParseResult<PayoutsSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutsSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutsSummary' from JSON`,
  );
}
