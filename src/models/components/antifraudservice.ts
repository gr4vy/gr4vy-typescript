/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `anti-fraud-service`.
 */
export enum AntiFraudServiceType {
    AntiFraudService = "anti-fraud-service",
}

/**
 * The name of the Anti-Fraud service provider.
 *
 * @remarks
 * During update request, this value is used for validation only but
 * the underlying service can not be changed for an existing service.
 */
export enum AntiFraudServiceAntiFraudServiceDefinitionId {
    CybersourceAntiFraud = "cybersource-anti-fraud",
    ForterAntiFraud = "forter-anti-fraud",
    SiftAntiFraud = "sift-anti-fraud",
}

/**
 * A key-value pair that represents a field defined in the definition for this anti-fraud service.
 */
export type AntiFraudServiceFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set.
     */
    value: string;
};

export type AntiFraudService = {
    /**
     * The type of this resource. Is always `anti-fraud-service`.
     */
    type?: AntiFraudServiceType | undefined;
    /**
     * The unique Gr4vy ID for this anti-fraud service.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The name of the Anti-Fraud service provider.
     *
     * @remarks
     * During update request, this value is used for validation only but
     * the underlying service can not be changed for an existing service.
     */
    antiFraudServiceDefinitionId?: AntiFraudServiceAntiFraudServiceDefinitionId | undefined;
    /**
     * A unique name for this anti-fraud service which is used in the Gr4vy admin panel to give a anti-fraud service a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * Defines if this service needs to handle the review status with a proper
     *
     * @remarks
     * review workflow. If not, the review status will be treated as any other
     * one.
     */
    reviewsEnabled?: boolean | undefined;
    /**
     * A list of fields, each containing a key-value pair for anti-fraud service decision mapping e.g. for Sift `approve_decision` will be in the response.
     */
    fields?: Array<AntiFraudServiceFields> | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this anti-fraud service was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this anti-fraud service was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const AntiFraudServiceType$ = z.nativeEnum(AntiFraudServiceType);

/** @internal */
export const AntiFraudServiceAntiFraudServiceDefinitionId$ = z.nativeEnum(
    AntiFraudServiceAntiFraudServiceDefinitionId
);

/** @internal */
export namespace AntiFraudServiceFields$ {
    export type Inbound = {
        key: string;
        value: string;
    };

    export const inboundSchema: z.ZodType<AntiFraudServiceFields, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });

    export type Outbound = {
        key: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudServiceFields> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });
}

/** @internal */
export namespace AntiFraudService$ {
    export type Inbound = {
        type?: AntiFraudServiceType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        anti_fraud_service_definition_id?: AntiFraudServiceAntiFraudServiceDefinitionId | undefined;
        display_name?: string | null | undefined;
        active?: boolean | undefined;
        reviews_enabled?: boolean | undefined;
        fields?: Array<AntiFraudServiceFields$.Inbound> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AntiFraudService, z.ZodTypeDef, Inbound> = z
        .object({
            type: AntiFraudServiceType$.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            anti_fraud_service_definition_id:
                AntiFraudServiceAntiFraudServiceDefinitionId$.optional(),
            display_name: z.nullable(z.string()).optional(),
            active: z.boolean().default(true),
            reviews_enabled: z.boolean().default(false),
            fields: z.array(z.lazy(() => AntiFraudServiceFields$.inboundSchema)).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.anti_fraud_service_definition_id === undefined
                    ? null
                    : { antiFraudServiceDefinitionId: v.anti_fraud_service_definition_id }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                active: v.active,
                reviewsEnabled: v.reviews_enabled,
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: AntiFraudServiceType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        anti_fraud_service_definition_id?: AntiFraudServiceAntiFraudServiceDefinitionId | undefined;
        display_name?: string | null | undefined;
        active: boolean;
        reviews_enabled: boolean;
        fields?: Array<AntiFraudServiceFields$.Outbound> | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AntiFraudService> = z
        .object({
            type: AntiFraudServiceType$.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            antiFraudServiceDefinitionId: AntiFraudServiceAntiFraudServiceDefinitionId$.optional(),
            displayName: z.nullable(z.string()).optional(),
            active: z.boolean().default(true),
            reviewsEnabled: z.boolean().default(false),
            fields: z.array(z.lazy(() => AntiFraudServiceFields$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.antiFraudServiceDefinitionId === undefined
                    ? null
                    : { anti_fraud_service_definition_id: v.antiFraudServiceDefinitionId }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                active: v.active,
                reviews_enabled: v.reviewsEnabled,
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
