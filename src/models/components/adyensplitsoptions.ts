/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AdyenSplitsOptions = {
  /**
   * Split payment values to pass to the Adyen API on payment authorization. See [the Adyen docs](https://docs.adyen.com/platforms/online-payments/split-transactions/split-payments-at-authorization/) for details on the format and contents of the list.
   */
  authorization?: Array<{ [k: string]: any }> | null | undefined;
  /**
   * Split payment values to pass to the Adyen API on payment capture. See [the Adyen docs](https://docs.adyen.com/platforms/online-payments/split-transactions/split-payments-at-capture/) for details on the format and contents of the list.
   */
  capture?: Array<{ [k: string]: any }> | null | undefined;
  /**
   * Split payment values to pass to the Adyen API on payment refund. See [the Adyen docs](https://docs.adyen.com/platforms/online-payments/split-transactions/split-refunds/) for details on the format and contents of the list.
   */
  refund?: Array<{ [k: string]: any }> | null | undefined;
};

/** @internal */
export const AdyenSplitsOptions$inboundSchema: z.ZodType<
  AdyenSplitsOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  authorization: z.nullable(z.array(z.record(z.any()))).optional(),
  capture: z.nullable(z.array(z.record(z.any()))).optional(),
  refund: z.nullable(z.array(z.record(z.any()))).optional(),
});

/** @internal */
export type AdyenSplitsOptions$Outbound = {
  authorization?: Array<{ [k: string]: any }> | null | undefined;
  capture?: Array<{ [k: string]: any }> | null | undefined;
  refund?: Array<{ [k: string]: any }> | null | undefined;
};

/** @internal */
export const AdyenSplitsOptions$outboundSchema: z.ZodType<
  AdyenSplitsOptions$Outbound,
  z.ZodTypeDef,
  AdyenSplitsOptions
> = z.object({
  authorization: z.nullable(z.array(z.record(z.any()))).optional(),
  capture: z.nullable(z.array(z.record(z.any()))).optional(),
  refund: z.nullable(z.array(z.record(z.any()))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdyenSplitsOptions$ {
  /** @deprecated use `AdyenSplitsOptions$inboundSchema` instead. */
  export const inboundSchema = AdyenSplitsOptions$inboundSchema;
  /** @deprecated use `AdyenSplitsOptions$outboundSchema` instead. */
  export const outboundSchema = AdyenSplitsOptions$outboundSchema;
  /** @deprecated use `AdyenSplitsOptions$Outbound` instead. */
  export type Outbound = AdyenSplitsOptions$Outbound;
}

export function adyenSplitsOptionsToJSON(
  adyenSplitsOptions: AdyenSplitsOptions,
): string {
  return JSON.stringify(
    AdyenSplitsOptions$outboundSchema.parse(adyenSplitsOptions),
  );
}

export function adyenSplitsOptionsFromJSON(
  jsonString: string,
): SafeParseResult<AdyenSplitsOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdyenSplitsOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdyenSplitsOptions' from JSON`,
  );
}
