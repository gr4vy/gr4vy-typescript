/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * `api-log`.
 */
export const ApiLogType = {
    ApiLog: "api-log",
} as const;
/**
 * `api-log`.
 */
export type ApiLogType = ClosedEnum<typeof ApiLogType>;

/**
 * Details of the log entry, stack trace and endpoint.
 */
export type Details = {
    /**
     * Log's pointer.
     */
    pointer?: string | undefined;
    /**
     * Detailed message on the log entry.
     */
    message?: string | undefined;
    /**
     * Location on where the error happened.
     */
    location?: string | undefined;
    /**
     * Detailed error type that is specified in the log entry.
     */
    type?: string | undefined;
};

/**
 * The JSON response body for the log entry.
 */
export type ResponseBody = {
    /**
     * The error code.
     */
    code?: string | undefined;
    /**
     * The error message.
     */
    message?: string | undefined;
    /**
     * The HTTP error code.
     */
    status?: number | undefined;
    /**
     * Type of the log entry.
     */
    type?: string | undefined;
    /**
     * Details of the log entry, stack trace and endpoint.
     */
    details?: Details | undefined;
};

/**
 * A log of an error that happened in the API call.
 */
export type ApiLog = {
    /**
     * `api-log`.
     */
    type?: ApiLogType | undefined;
    /**
     * The ID of the API log entry.
     */
    id?: string | undefined;
    /**
     * The http request method that generated the log entry.
     */
    requestMethod?: string | undefined;
    /**
     * The http request URL which trigged the error log.
     */
    requestUrl?: string | undefined;
    /**
     * The date and time that the request was received.
     */
    requestReceivedAt?: Date | undefined;
    /**
     * The http request status code.
     */
    responseStatusCode?: number | undefined;
    /**
     * The JSON response body for the log entry.
     */
    responseBody?: ResponseBody | undefined;
    /**
     * date-time of when the response was sent.
     */
    responseSentAt?: Date | undefined;
};

/** @internal */
export const ApiLogType$inboundSchema: z.ZodNativeEnum<typeof ApiLogType> =
    z.nativeEnum(ApiLogType);

/** @internal */
export const ApiLogType$outboundSchema: z.ZodNativeEnum<typeof ApiLogType> =
    ApiLogType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiLogType$ {
    /** @deprecated use `ApiLogType$inboundSchema` instead. */
    export const inboundSchema = ApiLogType$inboundSchema;
    /** @deprecated use `ApiLogType$outboundSchema` instead. */
    export const outboundSchema = ApiLogType$outboundSchema;
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> = z.object({
    pointer: z.string().optional(),
    message: z.string().optional(),
    location: z.string().optional(),
    type: z.string().optional(),
});

/** @internal */
export type Details$Outbound = {
    pointer?: string | undefined;
    message?: string | undefined;
    location?: string | undefined;
    type?: string | undefined;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<Details$Outbound, z.ZodTypeDef, Details> = z.object({
    pointer: z.string().optional(),
    message: z.string().optional(),
    location: z.string().optional(),
    type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
    /** @deprecated use `Details$inboundSchema` instead. */
    export const inboundSchema = Details$inboundSchema;
    /** @deprecated use `Details$outboundSchema` instead. */
    export const outboundSchema = Details$outboundSchema;
    /** @deprecated use `Details$Outbound` instead. */
    export type Outbound = Details$Outbound;
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
    type: z.string().optional(),
    details: z.lazy(() => Details$inboundSchema).optional(),
});

/** @internal */
export type ResponseBody$Outbound = {
    code?: string | undefined;
    message?: string | undefined;
    status?: number | undefined;
    type?: string | undefined;
    details?: Details$Outbound | undefined;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
    ResponseBody$Outbound,
    z.ZodTypeDef,
    ResponseBody
> = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    status: z.number().optional(),
    type: z.string().optional(),
    details: z.lazy(() => Details$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
    /** @deprecated use `ResponseBody$inboundSchema` instead. */
    export const inboundSchema = ResponseBody$inboundSchema;
    /** @deprecated use `ResponseBody$outboundSchema` instead. */
    export const outboundSchema = ResponseBody$outboundSchema;
    /** @deprecated use `ResponseBody$Outbound` instead. */
    export type Outbound = ResponseBody$Outbound;
}

/** @internal */
export const ApiLog$inboundSchema: z.ZodType<ApiLog, z.ZodTypeDef, unknown> = z
    .object({
        type: ApiLogType$inboundSchema.optional(),
        id: z.string().optional(),
        request_method: z.string().optional(),
        request_url: z.string().optional(),
        request_received_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        response_status_code: z.number().optional(),
        response_body: z.lazy(() => ResponseBody$inboundSchema).optional(),
        response_sent_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            request_method: "requestMethod",
            request_url: "requestUrl",
            request_received_at: "requestReceivedAt",
            response_status_code: "responseStatusCode",
            response_body: "responseBody",
            response_sent_at: "responseSentAt",
        });
    });

/** @internal */
export type ApiLog$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    request_method?: string | undefined;
    request_url?: string | undefined;
    request_received_at?: string | undefined;
    response_status_code?: number | undefined;
    response_body?: ResponseBody$Outbound | undefined;
    response_sent_at?: string | undefined;
};

/** @internal */
export const ApiLog$outboundSchema: z.ZodType<ApiLog$Outbound, z.ZodTypeDef, ApiLog> = z
    .object({
        type: ApiLogType$outboundSchema.optional(),
        id: z.string().optional(),
        requestMethod: z.string().optional(),
        requestUrl: z.string().optional(),
        requestReceivedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        responseStatusCode: z.number().optional(),
        responseBody: z.lazy(() => ResponseBody$outboundSchema).optional(),
        responseSentAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            requestMethod: "request_method",
            requestUrl: "request_url",
            requestReceivedAt: "request_received_at",
            responseStatusCode: "response_status_code",
            responseBody: "response_body",
            responseSentAt: "response_sent_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiLog$ {
    /** @deprecated use `ApiLog$inboundSchema` instead. */
    export const inboundSchema = ApiLog$inboundSchema;
    /** @deprecated use `ApiLog$outboundSchema` instead. */
    export const outboundSchema = ApiLog$outboundSchema;
    /** @deprecated use `ApiLog$Outbound` instead. */
    export type Outbound = ApiLog$Outbound;
}
