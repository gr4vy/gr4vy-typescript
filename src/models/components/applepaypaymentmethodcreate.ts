/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create an Apple Pay transaction with a device or merchant token.
 */
export type ApplePayPaymentMethodCreate = {
  /**
   * The external identifier of the buyer to create a payment for.
   */
  buyerExternalIdentifier?: string | null | undefined;
  /**
   * The ID of the buyer to retrieve billing details for.
   */
  buyerId?: string | null | undefined;
  /**
   * The card holder name associated to the original card for the token.
   */
  cardholderName?: string | null | undefined;
  /**
   * The URL to redirect a user back to after the complete 3DS in browser.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The last 4 digits of the original card used to generate the token.
   */
  cardSuffix?: string | null | undefined;
  /**
   * The original card scheme for which the token was generated.
   */
  cardScheme?: string | null | undefined;
  /**
   * The payment scheme of the card.
   */
  cardType?: string | null | undefined;
  /**
   * Always `applepay`
   */
  method?: "applepay" | undefined;
  /**
   * The opaque token as received from the Apple Pay JS library. This format may change between JS library versions.
   */
  token: { [k: string]: any };
};

/** @internal */
export const ApplePayPaymentMethodCreate$inboundSchema: z.ZodType<
  ApplePayPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  buyer_external_identifier: z.nullable(z.string()).optional(),
  buyer_id: z.nullable(z.string()).optional(),
  cardholder_name: z.nullable(z.string()).optional(),
  redirect_url: z.nullable(z.string()).optional(),
  card_suffix: z.nullable(z.string()).optional(),
  card_scheme: z.nullable(z.string()).optional(),
  card_type: z.nullable(z.string()).optional(),
  method: z.literal("applepay").default("applepay").optional(),
  token: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "buyer_external_identifier": "buyerExternalIdentifier",
    "buyer_id": "buyerId",
    "cardholder_name": "cardholderName",
    "redirect_url": "redirectUrl",
    "card_suffix": "cardSuffix",
    "card_scheme": "cardScheme",
    "card_type": "cardType",
  });
});

/** @internal */
export type ApplePayPaymentMethodCreate$Outbound = {
  buyer_external_identifier?: string | null | undefined;
  buyer_id?: string | null | undefined;
  cardholder_name?: string | null | undefined;
  redirect_url?: string | null | undefined;
  card_suffix?: string | null | undefined;
  card_scheme?: string | null | undefined;
  card_type?: string | null | undefined;
  method: "applepay";
  token: { [k: string]: any };
};

/** @internal */
export const ApplePayPaymentMethodCreate$outboundSchema: z.ZodType<
  ApplePayPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  ApplePayPaymentMethodCreate
> = z.object({
  buyerExternalIdentifier: z.nullable(z.string()).optional(),
  buyerId: z.nullable(z.string()).optional(),
  cardholderName: z.nullable(z.string()).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cardSuffix: z.nullable(z.string()).optional(),
  cardScheme: z.nullable(z.string()).optional(),
  cardType: z.nullable(z.string()).optional(),
  method: z.literal("applepay"),
  token: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    buyerExternalIdentifier: "buyer_external_identifier",
    buyerId: "buyer_id",
    cardholderName: "cardholder_name",
    redirectUrl: "redirect_url",
    cardSuffix: "card_suffix",
    cardScheme: "card_scheme",
    cardType: "card_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplePayPaymentMethodCreate$ {
  /** @deprecated use `ApplePayPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = ApplePayPaymentMethodCreate$inboundSchema;
  /** @deprecated use `ApplePayPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = ApplePayPaymentMethodCreate$outboundSchema;
  /** @deprecated use `ApplePayPaymentMethodCreate$Outbound` instead. */
  export type Outbound = ApplePayPaymentMethodCreate$Outbound;
}

export function applePayPaymentMethodCreateToJSON(
  applePayPaymentMethodCreate: ApplePayPaymentMethodCreate,
): string {
  return JSON.stringify(
    ApplePayPaymentMethodCreate$outboundSchema.parse(
      applePayPaymentMethodCreate,
    ),
  );
}

export function applePayPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<ApplePayPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplePayPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplePayPaymentMethodCreate' from JSON`,
  );
}
