/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentMethodDetailsCard, PaymentMethodDetailsCard$ } from "./paymentmethoddetailscard";
import * as z from "zod";

/**
 * `payment-method`.
 */
export enum PaymentMethodSnapshotType {
    PaymentMethod = "payment-method",
}

/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export enum PaymentMethodSnapshotApprovalTarget {
    Any = "any",
    NewWindow = "new_window",
}

/**
 * The type of this payment method.
 */
export enum PaymentMethodSnapshotMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Bancontact = "bancontact",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    CheckoutSession = "checkout-session",
    ClickToPay = "click-to-pay",
    Clearpay = "clearpay",
    Dana = "dana",
    Dcb = "dcb",
    Eps = "eps",
    Fortumo = "fortumo",
    Gcash = "gcash",
    Giropay = "giropay",
    Givingblock = "givingblock",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Id = "id",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linepay = "linepay",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Razorpay = "razorpay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Venmo = "venmo",
    Waave = "waave",
    Wechat = "wechat",
    Zippay = "zippay",
}

/**
 * An additional label used to differentiate different sub-types of a payment
 *
 * @remarks
 * method. Most notably this can include the type of card used in a
 * transaction. This field is `null` for the non-card payment methods.
 * This represents the card scheme sent to the connector and it could be different from the
 * actual card scheme that is being used by the PSP to process the transaction
 * in the following situations: 1. `use_additional_scheme` transformation is used
 * with the `PAN` instrument but we already have a PSP token for the card.
 * 2. `use_additional_scheme` transformation is used but PSP has fallen back to the
 * main card scheme internally.
 */
export enum PaymentMethodSnapshotScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * Snapshot of a payment method, as used when embedded inside other
 *
 * @remarks
 * resources.
 */
export type PaymentMethodSnapshot = {
    /**
     * `payment-method`.
     */
    type?: PaymentMethodSnapshotType | undefined;
    /**
     * The unique ID of the payment method.
     */
    id?: string | null | undefined;
    /**
     * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
     */
    approvalTarget?: PaymentMethodSnapshotApprovalTarget | null | undefined;
    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    approvalUrl?: string | null | undefined;
    /**
     * The 2-letter ISO code of the country this payment method can
     *
     * @remarks
     * be used for. If this value is `null` the payment method may be
     * used in multiple countries.
     */
    country?: string | null | undefined;
    /**
     * The ISO-4217 currency code that this payment method can be
     *
     * @remarks
     * used for. If this value is `null` the payment method may be
     * used for multiple currencies.
     */
    currency?: string | null | undefined;
    /**
     * A credit or debit card payment method.
     */
    details?: PaymentMethodDetailsCard | undefined;
    /**
     * The expiration date for this payment method. This is mostly used by cards
     *
     * @remarks
     * where the card might have an expiration date.
     */
    expirationDate?: string | null | undefined;
    /**
     * An external identifier that can be used to match the payment method
     *
     * @remarks
     * against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * A label for the payment method. This can be the last 4 digits for a card,
     *
     * @remarks
     * or the email address for an alternative payment method.
     */
    label?: string | undefined;
    /**
     * The date and time when this card was last replaced.
     *
     * @remarks
     *
     * When the Account Updater determines that new card details are available, existing details are not
     * changed immediately. There are three scenarios in which the actual replacement occurs:
     *
     * 1. When this card has expired.
     * 2. When only the expiration date changed.
     * 3. When a transaction using this card is declined with any of the following codes:
     *     * `canceled_payment_method`
     *     * `expired_payment_method`
     *     * `unavailable_payment_method`
     *     * `unknown_payment_method`
     *
     * When the replacement is applied, this field is updated.
     * For non-card payment methods, the value of this field is always set to `null`.
     */
    lastReplacedAt?: Date | null | undefined;
    /**
     * The type of this payment method.
     */
    method?: PaymentMethodSnapshotMethod | undefined;
    /**
     * The payment account reference (PAR) returned by the card scheme. This is a unique
     *
     * @remarks
     * reference to the underlying account that has been used to fund this payment method.
     * This value will be unique if the same underlying account was used, regardless of
     * the actual payment method used. For example, a network token or an Apple Pay device
     * token will return the same PAR when possible.
     *
     * The uniqueness of this value will depend on the card scheme, please refer to their documentation
     * for further details. The availability of the PAR in our API depends on the availability
     * of its value in the API of the payment service used for the transaction.
     */
    paymentAccountReference?: string | null | undefined;
    /**
     * An additional label used to differentiate different sub-types of a payment
     *
     * @remarks
     * method. Most notably this can include the type of card used in a
     * transaction. This field is `null` for the non-card payment methods.
     * This represents the card scheme sent to the connector and it could be different from the
     * actual card scheme that is being used by the PSP to process the transaction
     * in the following situations: 1. `use_additional_scheme` transformation is used
     * with the `PAN` instrument but we already have a PSP token for the card.
     * 2. `use_additional_scheme` transformation is used but PSP has fallen back to the
     * main card scheme internally.
     */
    scheme?: PaymentMethodSnapshotScheme | null | undefined;
    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    fingerprint?: string | null | undefined;
};

/** @internal */
export const PaymentMethodSnapshotType$ = z.nativeEnum(PaymentMethodSnapshotType);

/** @internal */
export const PaymentMethodSnapshotApprovalTarget$ = z.nativeEnum(
    PaymentMethodSnapshotApprovalTarget
);

/** @internal */
export const PaymentMethodSnapshotMethod$ = z.nativeEnum(PaymentMethodSnapshotMethod);

/** @internal */
export const PaymentMethodSnapshotScheme$ = z.nativeEnum(PaymentMethodSnapshotScheme);

/** @internal */
export namespace PaymentMethodSnapshot$ {
    export type Inbound = {
        type?: PaymentMethodSnapshotType | undefined;
        id?: string | null | undefined;
        approval_target?: PaymentMethodSnapshotApprovalTarget | null | undefined;
        approval_url?: string | null | undefined;
        country?: string | null | undefined;
        currency?: string | null | undefined;
        details?: PaymentMethodDetailsCard$.Inbound | undefined;
        expiration_date?: string | null | undefined;
        external_identifier?: string | null | undefined;
        label?: string | undefined;
        last_replaced_at?: string | null | undefined;
        method?: PaymentMethodSnapshotMethod | undefined;
        payment_account_reference?: string | null | undefined;
        scheme?: PaymentMethodSnapshotScheme | null | undefined;
        fingerprint?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentMethodSnapshot, z.ZodTypeDef, Inbound> = z
        .object({
            type: PaymentMethodSnapshotType$.optional(),
            id: z.nullable(z.string()).optional(),
            approval_target: z.nullable(PaymentMethodSnapshotApprovalTarget$).optional(),
            approval_url: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            currency: z.nullable(z.string()).optional(),
            details: PaymentMethodDetailsCard$.inboundSchema.optional(),
            expiration_date: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
            label: z.string().optional(),
            last_replaced_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            method: PaymentMethodSnapshotMethod$.optional(),
            payment_account_reference: z.nullable(z.string()).optional(),
            scheme: z.nullable(PaymentMethodSnapshotScheme$).optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.approval_target === undefined ? null : { approvalTarget: v.approval_target }),
                ...(v.approval_url === undefined ? null : { approvalUrl: v.approval_url }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.expiration_date === undefined ? null : { expirationDate: v.expiration_date }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.last_replaced_at === undefined
                    ? null
                    : { lastReplacedAt: v.last_replaced_at }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.payment_account_reference === undefined
                    ? null
                    : { paymentAccountReference: v.payment_account_reference }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.fingerprint === undefined ? null : { fingerprint: v.fingerprint }),
            };
        });

    export type Outbound = {
        type?: PaymentMethodSnapshotType | undefined;
        id?: string | null | undefined;
        approval_target?: PaymentMethodSnapshotApprovalTarget | null | undefined;
        approval_url?: string | null | undefined;
        country?: string | null | undefined;
        currency?: string | null | undefined;
        details?: PaymentMethodDetailsCard$.Outbound | undefined;
        expiration_date?: string | null | undefined;
        external_identifier?: string | null | undefined;
        label?: string | undefined;
        last_replaced_at?: string | null | undefined;
        method?: PaymentMethodSnapshotMethod | undefined;
        payment_account_reference?: string | null | undefined;
        scheme?: PaymentMethodSnapshotScheme | null | undefined;
        fingerprint?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodSnapshot> = z
        .object({
            type: PaymentMethodSnapshotType$.optional(),
            id: z.nullable(z.string()).optional(),
            approvalTarget: z.nullable(PaymentMethodSnapshotApprovalTarget$).optional(),
            approvalUrl: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            currency: z.nullable(z.string()).optional(),
            details: PaymentMethodDetailsCard$.outboundSchema.optional(),
            expirationDate: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            label: z.string().optional(),
            lastReplacedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            method: PaymentMethodSnapshotMethod$.optional(),
            paymentAccountReference: z.nullable(z.string()).optional(),
            scheme: z.nullable(PaymentMethodSnapshotScheme$).optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.approvalTarget === undefined ? null : { approval_target: v.approvalTarget }),
                ...(v.approvalUrl === undefined ? null : { approval_url: v.approvalUrl }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.expirationDate === undefined ? null : { expiration_date: v.expirationDate }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.lastReplacedAt === undefined ? null : { last_replaced_at: v.lastReplacedAt }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.paymentAccountReference === undefined
                    ? null
                    : { payment_account_reference: v.paymentAccountReference }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.fingerprint === undefined ? null : { fingerprint: v.fingerprint }),
            };
        });
}
