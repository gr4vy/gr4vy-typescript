/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Cryptogram = {
  /**
   * Always `network-token-cryptogram`.
   */
  type?: "network-token-cryptogram" | undefined;
  /**
   * The cryptogram of the network token.
   */
  cryptogram: string;
};

/** @internal */
export const Cryptogram$inboundSchema: z.ZodType<
  Cryptogram,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("network-token-cryptogram").default(
    "network-token-cryptogram",
  ),
  cryptogram: z.string(),
});

/** @internal */
export type Cryptogram$Outbound = {
  type: "network-token-cryptogram";
  cryptogram: string;
};

/** @internal */
export const Cryptogram$outboundSchema: z.ZodType<
  Cryptogram$Outbound,
  z.ZodTypeDef,
  Cryptogram
> = z.object({
  type: z.literal("network-token-cryptogram").default(
    "network-token-cryptogram" as const,
  ),
  cryptogram: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cryptogram$ {
  /** @deprecated use `Cryptogram$inboundSchema` instead. */
  export const inboundSchema = Cryptogram$inboundSchema;
  /** @deprecated use `Cryptogram$outboundSchema` instead. */
  export const outboundSchema = Cryptogram$outboundSchema;
  /** @deprecated use `Cryptogram$Outbound` instead. */
  export type Outbound = Cryptogram$Outbound;
}

export function cryptogramToJSON(cryptogram: Cryptogram): string {
  return JSON.stringify(Cryptogram$outboundSchema.parse(cryptogram));
}

export function cryptogramFromJSON(
  jsonString: string,
): SafeParseResult<Cryptogram, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cryptogram$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cryptogram' from JSON`,
  );
}
