/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Group {
    AntiFraudService = "anti-fraud-service",
    DigitalWallet = "digital-wallet",
    GiftCardService = "gift-card-service",
    PaymentService = "payment-service",
}

export enum Category {
    AntiFraud = "anti-fraud",
    Bank = "bank",
    Bnpl = "bnpl",
    Card = "card",
    Cash = "cash",
    StoredCredit = "stored-credit",
    Wallet = "wallet",
}

/**
 * A connection that can be configured.
 */
export type ConnectionDefinition = {
    /**
     * The ID of the connection.
     */
    id?: string | undefined;
    /**
     * `connection-definition`.
     */
    type?: string | undefined;
    /**
     * The name of this connection.
     */
    name?: string | undefined;
    /**
     * The number of configured connections.
     */
    count?: number | undefined;
    group?: Group | undefined;
    category?: Category | undefined;
    /**
     * An icon to display for the connection.
     */
    iconUrl?: string | null | undefined;
    /**
     * The provider for this connection.
     */
    provider?: string | null | undefined;
};

/** @internal */
export const Group$: z.ZodNativeEnum<typeof Group> = z.nativeEnum(Group);

/** @internal */
export const Category$: z.ZodNativeEnum<typeof Category> = z.nativeEnum(Category);

/** @internal */
export namespace ConnectionDefinition$ {
    export type Inbound = {
        id?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        count?: number | undefined;
        group?: Group | undefined;
        category?: Category | undefined;
        icon_url?: string | null | undefined;
        provider?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConnectionDefinition, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("connection-definition"),
            name: z.string().optional(),
            count: z.number().optional(),
            group: Group$.optional(),
            category: Category$.optional(),
            icon_url: z.nullable(z.string()).optional(),
            provider: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.icon_url === undefined ? null : { iconUrl: v.icon_url }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: string;
        name?: string | undefined;
        count?: number | undefined;
        group?: Group | undefined;
        category?: Category | undefined;
        icon_url?: string | null | undefined;
        provider?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectionDefinition> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("connection-definition"),
            name: z.string().optional(),
            count: z.number().optional(),
            group: Group$.optional(),
            category: Category$.optional(),
            iconUrl: z.nullable(z.string()).optional(),
            provider: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.iconUrl === undefined ? null : { icon_url: v.iconUrl }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
            };
        });
}
