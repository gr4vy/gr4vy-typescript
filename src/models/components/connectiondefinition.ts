/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export enum Group {
    AntiFraudService = "anti-fraud-service",
    DigitalWallet = "digital-wallet",
    GiftCardService = "gift-card-service",
    PaymentService = "payment-service",
}

export enum Category {
    AntiFraud = "anti-fraud",
    Bank = "bank",
    Bnpl = "bnpl",
    Card = "card",
    Cash = "cash",
    StoredCredit = "stored-credit",
    Wallet = "wallet",
}

/**
 * A connection that can be configured.
 */
export type ConnectionDefinition = {
    /**
     * The ID of the connection.
     */
    id?: string | undefined;
    /**
     * `connection-definition`.
     */
    type?: string | undefined;
    /**
     * The name of this connection.
     */
    name?: string | undefined;
    /**
     * The number of configured connections.
     */
    count?: number | undefined;
    group?: Group | undefined;
    category?: Category | undefined;
    /**
     * An icon to display for the connection.
     */
    iconUrl?: string | null | undefined;
    /**
     * The provider for this connection.
     */
    provider?: string | null | undefined;
};

/** @internal */
export namespace Group$ {
    export const inboundSchema = z.nativeEnum(Group);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Category$ {
    export const inboundSchema = z.nativeEnum(Category);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ConnectionDefinition$ {
    export const inboundSchema: z.ZodType<ConnectionDefinition, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("connection-definition"),
            name: z.string().optional(),
            count: z.number().optional(),
            group: Group$.inboundSchema.optional(),
            category: Category$.inboundSchema.optional(),
            icon_url: z.nullable(z.string()).optional(),
            provider: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                icon_url: "iconUrl",
            });
        });

    export type Outbound = {
        id?: string | undefined;
        type: string;
        name?: string | undefined;
        count?: number | undefined;
        group?: string | undefined;
        category?: string | undefined;
        icon_url?: string | null | undefined;
        provider?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectionDefinition> = z
        .object({
            id: z.string().optional(),
            type: z.string().default("connection-definition"),
            name: z.string().optional(),
            count: z.number().optional(),
            group: Group$.outboundSchema.optional(),
            category: Category$.outboundSchema.optional(),
            iconUrl: z.nullable(z.string()).optional(),
            provider: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                iconUrl: "icon_url",
            });
        });
}
