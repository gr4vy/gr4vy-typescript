/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Group = {
    AntiFraudService: "anti-fraud-service",
    DigitalWallet: "digital-wallet",
    GiftCardService: "gift-card-service",
    PaymentService: "payment-service",
} as const;
export type Group = ClosedEnum<typeof Group>;

export const Category = {
    AntiFraud: "anti-fraud",
    Bank: "bank",
    Bnpl: "bnpl",
    Card: "card",
    Cash: "cash",
    StoredCredit: "stored-credit",
    Wallet: "wallet",
} as const;
export type Category = ClosedEnum<typeof Category>;

/**
 * A connection that can be configured.
 */
export type ConnectionDefinition = {
    /**
     * The ID of the connection.
     */
    id?: string | undefined;
    /**
     * `connection-definition`.
     */
    type?: string | undefined;
    /**
     * The name of this connection.
     */
    name?: string | undefined;
    /**
     * The number of configured connections.
     */
    count?: number | undefined;
    group?: Group | undefined;
    category?: Category | undefined;
    /**
     * An icon to display for the connection.
     */
    iconUrl?: string | null | undefined;
    /**
     * The provider for this connection.
     */
    provider?: string | null | undefined;
};

/** @internal */
export const Group$inboundSchema: z.ZodNativeEnum<typeof Group> = z.nativeEnum(Group);

/** @internal */
export const Group$outboundSchema: z.ZodNativeEnum<typeof Group> = Group$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
    /** @deprecated use `Group$inboundSchema` instead. */
    export const inboundSchema = Group$inboundSchema;
    /** @deprecated use `Group$outboundSchema` instead. */
    export const outboundSchema = Group$outboundSchema;
}

/** @internal */
export const Category$inboundSchema: z.ZodNativeEnum<typeof Category> = z.nativeEnum(Category);

/** @internal */
export const Category$outboundSchema: z.ZodNativeEnum<typeof Category> = Category$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
    /** @deprecated use `Category$inboundSchema` instead. */
    export const inboundSchema = Category$inboundSchema;
    /** @deprecated use `Category$outboundSchema` instead. */
    export const outboundSchema = Category$outboundSchema;
}

/** @internal */
export const ConnectionDefinition$inboundSchema: z.ZodType<
    ConnectionDefinition,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string().optional(),
        type: z.string().default("connection-definition"),
        name: z.string().optional(),
        count: z.number().optional(),
        group: Group$inboundSchema.optional(),
        category: Category$inboundSchema.optional(),
        icon_url: z.nullable(z.string()).optional(),
        provider: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            icon_url: "iconUrl",
        });
    });

/** @internal */
export type ConnectionDefinition$Outbound = {
    id?: string | undefined;
    type: string;
    name?: string | undefined;
    count?: number | undefined;
    group?: string | undefined;
    category?: string | undefined;
    icon_url?: string | null | undefined;
    provider?: string | null | undefined;
};

/** @internal */
export const ConnectionDefinition$outboundSchema: z.ZodType<
    ConnectionDefinition$Outbound,
    z.ZodTypeDef,
    ConnectionDefinition
> = z
    .object({
        id: z.string().optional(),
        type: z.string().default("connection-definition"),
        name: z.string().optional(),
        count: z.number().optional(),
        group: Group$outboundSchema.optional(),
        category: Category$outboundSchema.optional(),
        iconUrl: z.nullable(z.string()).optional(),
        provider: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            iconUrl: "icon_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionDefinition$ {
    /** @deprecated use `ConnectionDefinition$inboundSchema` instead. */
    export const inboundSchema = ConnectionDefinition$inboundSchema;
    /** @deprecated use `ConnectionDefinition$outboundSchema` instead. */
    export const outboundSchema = ConnectionDefinition$outboundSchema;
    /** @deprecated use `ConnectionDefinition$Outbound` instead. */
    export type Outbound = ConnectionDefinition$Outbound;
}
