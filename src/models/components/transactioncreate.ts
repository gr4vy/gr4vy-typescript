/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    ApiRoutersTransactionsSchemasCardPaymentMethodCreate,
    ApiRoutersTransactionsSchemasCardPaymentMethodCreate$inboundSchema,
    ApiRoutersTransactionsSchemasCardPaymentMethodCreate$Outbound,
    ApiRoutersTransactionsSchemasCardPaymentMethodCreate$outboundSchema,
} from "./apirouterstransactionsschemascardpaymentmethodcreate.js";
import {
    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate,
    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$inboundSchema,
    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$Outbound,
    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$outboundSchema,
} from "./apirouterstransactionsschemascheckoutsessionpaymentmethodcreate.js";
import {
    BrowserInfoWithDevice,
    BrowserInfoWithDevice$inboundSchema,
    BrowserInfoWithDevice$Outbound,
    BrowserInfoWithDevice$outboundSchema,
} from "./browserinfowithdevice.js";
import {
    CartItem,
    CartItem$inboundSchema,
    CartItem$Outbound,
    CartItem$outboundSchema,
} from "./cartitem.js";
import {
    DigitalWalletPANPaymentMethodCreate,
    DigitalWalletPANPaymentMethodCreate$inboundSchema,
    DigitalWalletPANPaymentMethodCreate$Outbound,
    DigitalWalletPANPaymentMethodCreate$outboundSchema,
} from "./digitalwalletpanpaymentmethodcreate.js";
import {
    DigitalWalletPaymentMethodCreate,
    DigitalWalletPaymentMethodCreate$inboundSchema,
    DigitalWalletPaymentMethodCreate$Outbound,
    DigitalWalletPaymentMethodCreate$outboundSchema,
} from "./digitalwalletpaymentmethodcreate.js";
import {
    DigitalWalletTokenPaymentMethodCreate,
    DigitalWalletTokenPaymentMethodCreate$inboundSchema,
    DigitalWalletTokenPaymentMethodCreate$Outbound,
    DigitalWalletTokenPaymentMethodCreate$outboundSchema,
} from "./digitalwallettokenpaymentmethodcreate.js";
import {
    GiftCardTokenTransactionCreate,
    GiftCardTokenTransactionCreate$inboundSchema,
    GiftCardTokenTransactionCreate$Outbound,
    GiftCardTokenTransactionCreate$outboundSchema,
} from "./giftcardtokentransactioncreate.js";
import {
    GiftCardTransactionCreate,
    GiftCardTransactionCreate$inboundSchema,
    GiftCardTransactionCreate$Outbound,
    GiftCardTransactionCreate$outboundSchema,
} from "./giftcardtransactioncreate.js";
import {
    GuestBuyer,
    GuestBuyer$inboundSchema,
    GuestBuyer$Outbound,
    GuestBuyer$outboundSchema,
} from "./guestbuyer.js";
import {
    NetworkTokenPaymentMethodCreate,
    NetworkTokenPaymentMethodCreate$inboundSchema,
    NetworkTokenPaymentMethodCreate$Outbound,
    NetworkTokenPaymentMethodCreate$outboundSchema,
} from "./networktokenpaymentmethodcreate.js";
import {
    RedirectPaymentMethodCreate,
    RedirectPaymentMethodCreate$inboundSchema,
    RedirectPaymentMethodCreate$Outbound,
    RedirectPaymentMethodCreate$outboundSchema,
} from "./redirectpaymentmethodcreate.js";
import {
    StatementDescriptor,
    StatementDescriptor$inboundSchema,
    StatementDescriptor$Outbound,
    StatementDescriptor$outboundSchema,
} from "./statementdescriptor.js";
import {
    ThreeDSecureDataV1,
    ThreeDSecureDataV1$inboundSchema,
    ThreeDSecureDataV1$Outbound,
    ThreeDSecureDataV1$outboundSchema,
} from "./threedsecuredatav1.js";
import {
    ThreeDSecureDataV2,
    ThreeDSecureDataV2$inboundSchema,
    ThreeDSecureDataV2$Outbound,
    ThreeDSecureDataV2$outboundSchema,
} from "./threedsecuredatav2.js";
import {
    TokenPaymentMethodCreate,
    TokenPaymentMethodCreate$inboundSchema,
    TokenPaymentMethodCreate$Outbound,
    TokenPaymentMethodCreate$outboundSchema,
} from "./tokenpaymentmethodcreate.js";
import * as z from "zod";

export type TransactionCreatePaymentMethod =
    | TokenPaymentMethodCreate
    | ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate
    | RedirectPaymentMethodCreate
    | DigitalWalletTokenPaymentMethodCreate
    | ApiRoutersTransactionsSchemasCardPaymentMethodCreate
    | DigitalWalletPANPaymentMethodCreate
    | NetworkTokenPaymentMethodCreate
    | DigitalWalletPaymentMethodCreate;

export type GiftCards = GiftCardTokenTransactionCreate | GiftCardTransactionCreate;

/**
 * An enumeration.
 */
export const TransactionIntent = {
    Authorize: "authorize",
    Capture: "capture",
} as const;
/**
 * An enumeration.
 */
export type TransactionIntent = ClosedEnum<typeof TransactionIntent>;

export type ThreeDSecureData = ThreeDSecureDataV2 | ThreeDSecureDataV1;

export type Metadata = {};

/**
 * The way payment method information made it to this transaction.
 */
export const TransactionPaymentSource = {
    Ecommerce: "ecommerce",
    Moto: "moto",
    Recurring: "recurring",
    Installment: "installment",
    CardOnFile: "card_on_file",
} as const;
/**
 * The way payment method information made it to this transaction.
 */
export type TransactionPaymentSource = ClosedEnum<typeof TransactionPaymentSource>;

export type ConnectionOptions = {};

/**
 * Base model with JSON encoders.
 */
export type TransactionCreate = {
    amount: number;
    currency: string;
    country?: string | undefined;
    paymentMethod?:
        | TokenPaymentMethodCreate
        | ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate
        | RedirectPaymentMethodCreate
        | DigitalWalletTokenPaymentMethodCreate
        | ApiRoutersTransactionsSchemasCardPaymentMethodCreate
        | DigitalWalletPANPaymentMethodCreate
        | NetworkTokenPaymentMethodCreate
        | DigitalWalletPaymentMethodCreate
        | undefined;
    /**
     * Request body for creating a new buyer
     */
    buyer?: GuestBuyer | undefined;
    buyerId?: string | undefined;
    buyerExternalIdentifier?: string | undefined;
    giftCards?: Array<GiftCardTokenTransactionCreate | GiftCardTransactionCreate> | undefined;
    externalIdentifier?: string | undefined;
    intent?: TransactionIntent | undefined;
    store?: boolean | undefined;
    threeDSecureData?: ThreeDSecureDataV2 | ThreeDSecureDataV1 | undefined;
    metadata?: Metadata | undefined;
    isSubsequentPayment?: boolean | undefined;
    merchantInitiated?: boolean | undefined;
    paymentSource?: TransactionPaymentSource | undefined;
    cartItems?: Array<CartItem> | undefined;
    /**
     * Information to show the user on their payments statement
     */
    statementDescriptor?: StatementDescriptor | undefined;
    previousSchemeTransactionId?: string | undefined;
    /**
     * Base model with JSON encoders.
     */
    browserInfo?: BrowserInfoWithDevice | undefined;
    shippingDetailsId?: string | undefined;
    connectionOptions?: { [k: string]: ConnectionOptions } | undefined;
    asyncCapture?: boolean | undefined;
    antiFraudFingerprint?: string | undefined;
    paymentServiceId?: string | undefined;
};

/** @internal */
export const TransactionCreatePaymentMethod$inboundSchema: z.ZodType<
    TransactionCreatePaymentMethod,
    z.ZodTypeDef,
    unknown
> = z.union([
    TokenPaymentMethodCreate$inboundSchema,
    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$inboundSchema,
    RedirectPaymentMethodCreate$inboundSchema,
    DigitalWalletTokenPaymentMethodCreate$inboundSchema,
    ApiRoutersTransactionsSchemasCardPaymentMethodCreate$inboundSchema,
    DigitalWalletPANPaymentMethodCreate$inboundSchema,
    NetworkTokenPaymentMethodCreate$inboundSchema,
    DigitalWalletPaymentMethodCreate$inboundSchema,
]);

/** @internal */
export type TransactionCreatePaymentMethod$Outbound =
    | TokenPaymentMethodCreate$Outbound
    | ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$Outbound
    | RedirectPaymentMethodCreate$Outbound
    | DigitalWalletTokenPaymentMethodCreate$Outbound
    | ApiRoutersTransactionsSchemasCardPaymentMethodCreate$Outbound
    | DigitalWalletPANPaymentMethodCreate$Outbound
    | NetworkTokenPaymentMethodCreate$Outbound
    | DigitalWalletPaymentMethodCreate$Outbound;

/** @internal */
export const TransactionCreatePaymentMethod$outboundSchema: z.ZodType<
    TransactionCreatePaymentMethod$Outbound,
    z.ZodTypeDef,
    TransactionCreatePaymentMethod
> = z.union([
    TokenPaymentMethodCreate$outboundSchema,
    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$outboundSchema,
    RedirectPaymentMethodCreate$outboundSchema,
    DigitalWalletTokenPaymentMethodCreate$outboundSchema,
    ApiRoutersTransactionsSchemasCardPaymentMethodCreate$outboundSchema,
    DigitalWalletPANPaymentMethodCreate$outboundSchema,
    NetworkTokenPaymentMethodCreate$outboundSchema,
    DigitalWalletPaymentMethodCreate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreatePaymentMethod$ {
    /** @deprecated use `TransactionCreatePaymentMethod$inboundSchema` instead. */
    export const inboundSchema = TransactionCreatePaymentMethod$inboundSchema;
    /** @deprecated use `TransactionCreatePaymentMethod$outboundSchema` instead. */
    export const outboundSchema = TransactionCreatePaymentMethod$outboundSchema;
    /** @deprecated use `TransactionCreatePaymentMethod$Outbound` instead. */
    export type Outbound = TransactionCreatePaymentMethod$Outbound;
}

/** @internal */
export const GiftCards$inboundSchema: z.ZodType<GiftCards, z.ZodTypeDef, unknown> = z.union([
    GiftCardTokenTransactionCreate$inboundSchema,
    GiftCardTransactionCreate$inboundSchema,
]);

/** @internal */
export type GiftCards$Outbound =
    | GiftCardTokenTransactionCreate$Outbound
    | GiftCardTransactionCreate$Outbound;

/** @internal */
export const GiftCards$outboundSchema: z.ZodType<GiftCards$Outbound, z.ZodTypeDef, GiftCards> =
    z.union([
        GiftCardTokenTransactionCreate$outboundSchema,
        GiftCardTransactionCreate$outboundSchema,
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCards$ {
    /** @deprecated use `GiftCards$inboundSchema` instead. */
    export const inboundSchema = GiftCards$inboundSchema;
    /** @deprecated use `GiftCards$outboundSchema` instead. */
    export const outboundSchema = GiftCards$outboundSchema;
    /** @deprecated use `GiftCards$Outbound` instead. */
    export type Outbound = GiftCards$Outbound;
}

/** @internal */
export const TransactionIntent$inboundSchema: z.ZodNativeEnum<typeof TransactionIntent> =
    z.nativeEnum(TransactionIntent);

/** @internal */
export const TransactionIntent$outboundSchema: z.ZodNativeEnum<typeof TransactionIntent> =
    TransactionIntent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionIntent$ {
    /** @deprecated use `TransactionIntent$inboundSchema` instead. */
    export const inboundSchema = TransactionIntent$inboundSchema;
    /** @deprecated use `TransactionIntent$outboundSchema` instead. */
    export const outboundSchema = TransactionIntent$outboundSchema;
}

/** @internal */
export const ThreeDSecureData$inboundSchema: z.ZodType<ThreeDSecureData, z.ZodTypeDef, unknown> =
    z.union([ThreeDSecureDataV2$inboundSchema, ThreeDSecureDataV1$inboundSchema]);

/** @internal */
export type ThreeDSecureData$Outbound = ThreeDSecureDataV2$Outbound | ThreeDSecureDataV1$Outbound;

/** @internal */
export const ThreeDSecureData$outboundSchema: z.ZodType<
    ThreeDSecureData$Outbound,
    z.ZodTypeDef,
    ThreeDSecureData
> = z.union([ThreeDSecureDataV2$outboundSchema, ThreeDSecureDataV1$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureData$ {
    /** @deprecated use `ThreeDSecureData$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureData$inboundSchema;
    /** @deprecated use `ThreeDSecureData$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureData$outboundSchema;
    /** @deprecated use `ThreeDSecureData$Outbound` instead. */
    export type Outbound = ThreeDSecureData$Outbound;
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    export const inboundSchema = Metadata$inboundSchema;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    export const outboundSchema = Metadata$outboundSchema;
    /** @deprecated use `Metadata$Outbound` instead. */
    export type Outbound = Metadata$Outbound;
}

/** @internal */
export const TransactionPaymentSource$inboundSchema: z.ZodNativeEnum<
    typeof TransactionPaymentSource
> = z.nativeEnum(TransactionPaymentSource);

/** @internal */
export const TransactionPaymentSource$outboundSchema: z.ZodNativeEnum<
    typeof TransactionPaymentSource
> = TransactionPaymentSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionPaymentSource$ {
    /** @deprecated use `TransactionPaymentSource$inboundSchema` instead. */
    export const inboundSchema = TransactionPaymentSource$inboundSchema;
    /** @deprecated use `TransactionPaymentSource$outboundSchema` instead. */
    export const outboundSchema = TransactionPaymentSource$outboundSchema;
}

/** @internal */
export const ConnectionOptions$inboundSchema: z.ZodType<ConnectionOptions, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type ConnectionOptions$Outbound = {};

/** @internal */
export const ConnectionOptions$outboundSchema: z.ZodType<
    ConnectionOptions$Outbound,
    z.ZodTypeDef,
    ConnectionOptions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionOptions$ {
    /** @deprecated use `ConnectionOptions$inboundSchema` instead. */
    export const inboundSchema = ConnectionOptions$inboundSchema;
    /** @deprecated use `ConnectionOptions$outboundSchema` instead. */
    export const outboundSchema = ConnectionOptions$outboundSchema;
    /** @deprecated use `ConnectionOptions$Outbound` instead. */
    export type Outbound = ConnectionOptions$Outbound;
}

/** @internal */
export const TransactionCreate$inboundSchema: z.ZodType<TransactionCreate, z.ZodTypeDef, unknown> =
    z
        .object({
            amount: z.number().int(),
            currency: z.string(),
            country: z.string().optional(),
            payment_method: z
                .union([
                    TokenPaymentMethodCreate$inboundSchema,
                    ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$inboundSchema,
                    RedirectPaymentMethodCreate$inboundSchema,
                    DigitalWalletTokenPaymentMethodCreate$inboundSchema,
                    ApiRoutersTransactionsSchemasCardPaymentMethodCreate$inboundSchema,
                    DigitalWalletPANPaymentMethodCreate$inboundSchema,
                    NetworkTokenPaymentMethodCreate$inboundSchema,
                    DigitalWalletPaymentMethodCreate$inboundSchema,
                ])
                .optional(),
            buyer: GuestBuyer$inboundSchema.optional(),
            buyer_id: z.string().optional(),
            buyer_external_identifier: z.string().optional(),
            gift_cards: z
                .array(
                    z.union([
                        GiftCardTokenTransactionCreate$inboundSchema,
                        GiftCardTransactionCreate$inboundSchema,
                    ])
                )
                .optional(),
            external_identifier: z.string().optional(),
            intent: TransactionIntent$inboundSchema.default("authorize"),
            store: z.boolean().default(false),
            three_d_secure_data: z
                .union([ThreeDSecureDataV2$inboundSchema, ThreeDSecureDataV1$inboundSchema])
                .optional(),
            metadata: z.lazy(() => Metadata$inboundSchema).optional(),
            is_subsequent_payment: z.boolean().default(false),
            merchant_initiated: z.boolean().default(false),
            payment_source: TransactionPaymentSource$inboundSchema.default("ecommerce"),
            cart_items: z.array(CartItem$inboundSchema).optional(),
            statement_descriptor: StatementDescriptor$inboundSchema.optional(),
            previous_scheme_transaction_id: z.string().optional(),
            browser_info: BrowserInfoWithDevice$inboundSchema.optional(),
            shipping_details_id: z.string().optional(),
            connection_options: z.record(z.lazy(() => ConnectionOptions$inboundSchema)).optional(),
            async_capture: z.boolean().default(false),
            anti_fraud_fingerprint: z.string().optional(),
            payment_service_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_method: "paymentMethod",
                buyer_id: "buyerId",
                buyer_external_identifier: "buyerExternalIdentifier",
                gift_cards: "giftCards",
                external_identifier: "externalIdentifier",
                three_d_secure_data: "threeDSecureData",
                is_subsequent_payment: "isSubsequentPayment",
                merchant_initiated: "merchantInitiated",
                payment_source: "paymentSource",
                cart_items: "cartItems",
                statement_descriptor: "statementDescriptor",
                previous_scheme_transaction_id: "previousSchemeTransactionId",
                browser_info: "browserInfo",
                shipping_details_id: "shippingDetailsId",
                connection_options: "connectionOptions",
                async_capture: "asyncCapture",
                anti_fraud_fingerprint: "antiFraudFingerprint",
                payment_service_id: "paymentServiceId",
            });
        });

/** @internal */
export type TransactionCreate$Outbound = {
    amount: number;
    currency: string;
    country?: string | undefined;
    payment_method?:
        | TokenPaymentMethodCreate$Outbound
        | ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$Outbound
        | RedirectPaymentMethodCreate$Outbound
        | DigitalWalletTokenPaymentMethodCreate$Outbound
        | ApiRoutersTransactionsSchemasCardPaymentMethodCreate$Outbound
        | DigitalWalletPANPaymentMethodCreate$Outbound
        | NetworkTokenPaymentMethodCreate$Outbound
        | DigitalWalletPaymentMethodCreate$Outbound
        | undefined;
    buyer?: GuestBuyer$Outbound | undefined;
    buyer_id?: string | undefined;
    buyer_external_identifier?: string | undefined;
    gift_cards?:
        | Array<GiftCardTokenTransactionCreate$Outbound | GiftCardTransactionCreate$Outbound>
        | undefined;
    external_identifier?: string | undefined;
    intent: string;
    store: boolean;
    three_d_secure_data?: ThreeDSecureDataV2$Outbound | ThreeDSecureDataV1$Outbound | undefined;
    metadata?: Metadata$Outbound | undefined;
    is_subsequent_payment: boolean;
    merchant_initiated: boolean;
    payment_source: string;
    cart_items?: Array<CartItem$Outbound> | undefined;
    statement_descriptor?: StatementDescriptor$Outbound | undefined;
    previous_scheme_transaction_id?: string | undefined;
    browser_info?: BrowserInfoWithDevice$Outbound | undefined;
    shipping_details_id?: string | undefined;
    connection_options?: { [k: string]: ConnectionOptions$Outbound } | undefined;
    async_capture: boolean;
    anti_fraud_fingerprint?: string | undefined;
    payment_service_id?: string | undefined;
};

/** @internal */
export const TransactionCreate$outboundSchema: z.ZodType<
    TransactionCreate$Outbound,
    z.ZodTypeDef,
    TransactionCreate
> = z
    .object({
        amount: z.number().int(),
        currency: z.string(),
        country: z.string().optional(),
        paymentMethod: z
            .union([
                TokenPaymentMethodCreate$outboundSchema,
                ApiRoutersTransactionsSchemasCheckoutSessionPaymentMethodCreate$outboundSchema,
                RedirectPaymentMethodCreate$outboundSchema,
                DigitalWalletTokenPaymentMethodCreate$outboundSchema,
                ApiRoutersTransactionsSchemasCardPaymentMethodCreate$outboundSchema,
                DigitalWalletPANPaymentMethodCreate$outboundSchema,
                NetworkTokenPaymentMethodCreate$outboundSchema,
                DigitalWalletPaymentMethodCreate$outboundSchema,
            ])
            .optional(),
        buyer: GuestBuyer$outboundSchema.optional(),
        buyerId: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
        giftCards: z
            .array(
                z.union([
                    GiftCardTokenTransactionCreate$outboundSchema,
                    GiftCardTransactionCreate$outboundSchema,
                ])
            )
            .optional(),
        externalIdentifier: z.string().optional(),
        intent: TransactionIntent$outboundSchema.default("authorize"),
        store: z.boolean().default(false),
        threeDSecureData: z
            .union([ThreeDSecureDataV2$outboundSchema, ThreeDSecureDataV1$outboundSchema])
            .optional(),
        metadata: z.lazy(() => Metadata$outboundSchema).optional(),
        isSubsequentPayment: z.boolean().default(false),
        merchantInitiated: z.boolean().default(false),
        paymentSource: TransactionPaymentSource$outboundSchema.default("ecommerce"),
        cartItems: z.array(CartItem$outboundSchema).optional(),
        statementDescriptor: StatementDescriptor$outboundSchema.optional(),
        previousSchemeTransactionId: z.string().optional(),
        browserInfo: BrowserInfoWithDevice$outboundSchema.optional(),
        shippingDetailsId: z.string().optional(),
        connectionOptions: z.record(z.lazy(() => ConnectionOptions$outboundSchema)).optional(),
        asyncCapture: z.boolean().default(false),
        antiFraudFingerprint: z.string().optional(),
        paymentServiceId: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentMethod: "payment_method",
            buyerId: "buyer_id",
            buyerExternalIdentifier: "buyer_external_identifier",
            giftCards: "gift_cards",
            externalIdentifier: "external_identifier",
            threeDSecureData: "three_d_secure_data",
            isSubsequentPayment: "is_subsequent_payment",
            merchantInitiated: "merchant_initiated",
            paymentSource: "payment_source",
            cartItems: "cart_items",
            statementDescriptor: "statement_descriptor",
            previousSchemeTransactionId: "previous_scheme_transaction_id",
            browserInfo: "browser_info",
            shippingDetailsId: "shipping_details_id",
            connectionOptions: "connection_options",
            asyncCapture: "async_capture",
            antiFraudFingerprint: "anti_fraud_fingerprint",
            paymentServiceId: "payment_service_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreate$ {
    /** @deprecated use `TransactionCreate$inboundSchema` instead. */
    export const inboundSchema = TransactionCreate$inboundSchema;
    /** @deprecated use `TransactionCreate$outboundSchema` instead. */
    export const outboundSchema = TransactionCreate$outboundSchema;
    /** @deprecated use `TransactionCreate$Outbound` instead. */
    export type Outbound = TransactionCreate$Outbound;
}
