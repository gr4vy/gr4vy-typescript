/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a transaction with the ID (token) of a stored payment method (and an optional URL for approval)
 */
export type TokenPaymentMethodCreate = {
  /**
   * The ID for the payment method.
   */
  id: string;
  /**
   * Always `id`.
   */
  method?: "id" | undefined;
  /**
   * The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
   */
  securityCode?: string | null | undefined;
  /**
   * The URL to redirect a user back to after they approve the transaction in the browser.
   */
  redirectUrl?: string | null | undefined;
};

/** @internal */
export const TokenPaymentMethodCreate$inboundSchema: z.ZodType<
  TokenPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  method: z.literal("id").default("id"),
  security_code: z.nullable(z.string()).optional(),
  redirect_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "security_code": "securityCode",
    "redirect_url": "redirectUrl",
  });
});

/** @internal */
export type TokenPaymentMethodCreate$Outbound = {
  id: string;
  method: "id";
  security_code?: string | null | undefined;
  redirect_url?: string | null | undefined;
};

/** @internal */
export const TokenPaymentMethodCreate$outboundSchema: z.ZodType<
  TokenPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  TokenPaymentMethodCreate
> = z.object({
  id: z.string(),
  method: z.literal("id").default("id" as const),
  securityCode: z.nullable(z.string()).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    securityCode: "security_code",
    redirectUrl: "redirect_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenPaymentMethodCreate$ {
  /** @deprecated use `TokenPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = TokenPaymentMethodCreate$inboundSchema;
  /** @deprecated use `TokenPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = TokenPaymentMethodCreate$outboundSchema;
  /** @deprecated use `TokenPaymentMethodCreate$Outbound` instead. */
  export type Outbound = TokenPaymentMethodCreate$Outbound;
}

export function tokenPaymentMethodCreateToJSON(
  tokenPaymentMethodCreate: TokenPaymentMethodCreate,
): string {
  return JSON.stringify(
    TokenPaymentMethodCreate$outboundSchema.parse(tokenPaymentMethodCreate),
  );
}

export function tokenPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<TokenPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenPaymentMethodCreate' from JSON`,
  );
}
