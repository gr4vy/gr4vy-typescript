/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A key-value pair that represents a field defined in the definition for this payment service.
 */
export type PaymentServiceRequestFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set; you can unset optional fields by setting this to an empty string `""`.
     */
    value: string;
};

/**
 * Merchant profile for Amex.
 */
export type PaymentServiceRequestMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Dankort.
 */
export type PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Discover.
 */
export type PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for JCB.
 */
export type PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Mastercard.
 */
export type PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for UnionPay.
 */
export type PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Visa.
 */
export type PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Configuration for each supported card scheme.
 */
export type PaymentServiceRequestMerchantProfile = {
    /**
     * Merchant profile for Amex.
     */
    amex?: PaymentServiceRequestMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Dankort.
     */
    dankort?: PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Discover.
     */
    discover?:
        | PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for JCB.
     */
    jcb?: PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Mastercard.
     */
    mastercard?:
        | PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for UnionPay.
     */
    unionpay?:
        | PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for Visa.
     */
    visa?: PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme | null | undefined;
};

/**
 * Request body for activating a payment service.
 */
export type PaymentServiceRequest = {
    /**
     * The ID of the payment service to use.
     */
    paymentServiceDefinitionId: string;
    /**
     * A custom name for the payment service. This will be shown in the Admin UI.
     */
    displayName: string;
    /**
     * A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent within this field.
     */
    fields: Array<PaymentServiceRequestFields>;
    /**
     * A list of countries that this payment service needs to support in ISO two-letter code format.
     */
    acceptedCountries: Array<string>;
    /**
     * A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.
     */
    acceptedCurrencies: Array<string>;
    /**
     * Defines if 3-D Secure is enabled for the service (can only be
     *
     * @remarks
     * enabled if the payment service definition supports
     * the `three_d_secure_hosted` feature).
     * This does not affect pass through 3-D Secure data.
     */
    threeDSecureEnabled?: boolean | undefined;
    /**
     * Configuration for each supported card scheme.
     */
    merchantProfile?: PaymentServiceRequestMerchantProfile | null | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * Defines if the service works as an open-loop service. This feature
     *
     * @remarks
     * can only be enabled if the PSP is set up to accept previous scheme
     * transaction IDs.
     *
     * If this value is not provided or is set to `null`, it will be set
     * to the value of `open_loop` in the payment service definition.
     *
     * If `open_loop_toggle` is `false` in the payment service definition,
     * `open_loop` should either not be provided or set to `null`, or it
     * will fail with a validation error.
     */
    openLoop?: boolean | null | undefined;
    /**
     * Defines if tokenization is enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is NOT set as `open_loop`
     * and the PSP is set up to tokenize.
     */
    paymentMethodTokenizationEnabled?: boolean | undefined;
    /**
     * Defines if network tokens are enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is set as `open_loop` and
     * the PSP is set up to accept network tokens.
     *
     * If this value is not provided or is set to `null`, it will be set
     * to the value of `network_tokens_default` in the payment service
     * definition.
     *
     * If `network_tokens_toggle` is `false` in the payment service definition,
     * `network_tokens_enabled` should either not be provided or set to `null`,
     * or it will fail with a validation error.
     */
    networkTokensEnabled?: boolean | null | undefined;
};

/** @internal */
export namespace PaymentServiceRequestFields$ {
    export type Inbound = {
        key: string;
        value: string;
    };

    export const inboundSchema: z.ZodType<PaymentServiceRequestFields, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });

    export type Outbound = {
        key: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceRequestFields> = z
        .object({
            key: z.string(),
            value: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                value: v.value,
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$ {
    export type Inbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            merchant_acquirer_bin: z.string().optional(),
            merchant_url: z.string().optional(),
            merchant_acquirer_id: z.string().optional(),
            merchant_name: z.string().optional(),
            merchant_country_code: z.string().optional(),
            merchant_category_code: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchant_acquirer_bin === undefined
                    ? null
                    : { merchantAcquirerBin: v.merchant_acquirer_bin }),
                ...(v.merchant_url === undefined ? null : { merchantUrl: v.merchant_url }),
                ...(v.merchant_acquirer_id === undefined
                    ? null
                    : { merchantAcquirerId: v.merchant_acquirer_id }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.merchant_category_code === undefined
                    ? null
                    : { merchantCategoryCode: v.merchant_category_code }),
            };
        });

    export type Outbound = {
        merchant_acquirer_bin?: string | undefined;
        merchant_url?: string | undefined;
        merchant_acquirer_id?: string | undefined;
        merchant_name?: string | undefined;
        merchant_country_code?: string | undefined;
        merchant_category_code?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme
    > = z
        .object({
            merchantAcquirerBin: z.string().optional(),
            merchantUrl: z.string().optional(),
            merchantAcquirerId: z.string().optional(),
            merchantName: z.string().optional(),
            merchantCountryCode: z.string().optional(),
            merchantCategoryCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.merchantAcquirerBin === undefined
                    ? null
                    : { merchant_acquirer_bin: v.merchantAcquirerBin }),
                ...(v.merchantUrl === undefined ? null : { merchant_url: v.merchantUrl }),
                ...(v.merchantAcquirerId === undefined
                    ? null
                    : { merchant_acquirer_id: v.merchantAcquirerId }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.merchantCategoryCode === undefined
                    ? null
                    : { merchant_category_code: v.merchantCategoryCode }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequestMerchantProfile$ {
    export type Inbound = {
        amex?: PaymentServiceRequestMerchantProfileSingleScheme$.Inbound | null | undefined;
        dankort?:
            | PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$.Inbound
            | null
            | undefined;
        discover?:
            | PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$.Inbound
            | null
            | undefined;
        jcb?:
            | PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$.Inbound
            | null
            | undefined;
        mastercard?:
            | PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$.Inbound
            | null
            | undefined;
        unionpay?:
            | PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$.Inbound
            | null
            | undefined;
        visa?:
            | PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$.Inbound
            | null
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaymentServiceRequestMerchantProfile,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            amex: z
                .nullable(
                    z.lazy(() => PaymentServiceRequestMerchantProfileSingleScheme$.inboundSchema)
                )
                .optional(),
            dankort: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$.inboundSchema
                    )
                )
                .optional(),
            discover: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$.inboundSchema
                    )
                )
                .optional(),
            jcb: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$.inboundSchema
                    )
                )
                .optional(),
            mastercard: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$.inboundSchema
                    )
                )
                .optional(),
            unionpay: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$.inboundSchema
                    )
                )
                .optional(),
            visa: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$.inboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amex === undefined ? null : { amex: v.amex }),
                ...(v.dankort === undefined ? null : { dankort: v.dankort }),
                ...(v.discover === undefined ? null : { discover: v.discover }),
                ...(v.jcb === undefined ? null : { jcb: v.jcb }),
                ...(v.mastercard === undefined ? null : { mastercard: v.mastercard }),
                ...(v.unionpay === undefined ? null : { unionpay: v.unionpay }),
                ...(v.visa === undefined ? null : { visa: v.visa }),
            };
        });

    export type Outbound = {
        amex?: PaymentServiceRequestMerchantProfileSingleScheme$.Outbound | null | undefined;
        dankort?:
            | PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$.Outbound
            | null
            | undefined;
        discover?:
            | PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$.Outbound
            | null
            | undefined;
        jcb?:
            | PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$.Outbound
            | null
            | undefined;
        mastercard?:
            | PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$.Outbound
            | null
            | undefined;
        unionpay?:
            | PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$.Outbound
            | null
            | undefined;
        visa?:
            | PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$.Outbound
            | null
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentServiceRequestMerchantProfile
    > = z
        .object({
            amex: z
                .nullable(
                    z.lazy(() => PaymentServiceRequestMerchantProfileSingleScheme$.outboundSchema)
                )
                .optional(),
            dankort: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$.outboundSchema
                    )
                )
                .optional(),
            discover: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$.outboundSchema
                    )
                )
                .optional(),
            jcb: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$.outboundSchema
                    )
                )
                .optional(),
            mastercard: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$.outboundSchema
                    )
                )
                .optional(),
            unionpay: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$.outboundSchema
                    )
                )
                .optional(),
            visa: z
                .nullable(
                    z.lazy(
                        () =>
                            PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$.outboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amex === undefined ? null : { amex: v.amex }),
                ...(v.dankort === undefined ? null : { dankort: v.dankort }),
                ...(v.discover === undefined ? null : { discover: v.discover }),
                ...(v.jcb === undefined ? null : { jcb: v.jcb }),
                ...(v.mastercard === undefined ? null : { mastercard: v.mastercard }),
                ...(v.unionpay === undefined ? null : { unionpay: v.unionpay }),
                ...(v.visa === undefined ? null : { visa: v.visa }),
            };
        });
}

/** @internal */
export namespace PaymentServiceRequest$ {
    export type Inbound = {
        payment_service_definition_id: string;
        display_name: string;
        fields: Array<PaymentServiceRequestFields$.Inbound>;
        accepted_countries: Array<string>;
        accepted_currencies: Array<string>;
        three_d_secure_enabled?: boolean | undefined;
        merchant_profile?: PaymentServiceRequestMerchantProfile$.Inbound | null | undefined;
        active?: boolean | undefined;
        open_loop?: boolean | null | undefined;
        payment_method_tokenization_enabled?: boolean | undefined;
        network_tokens_enabled?: boolean | null | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentServiceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            payment_service_definition_id: z.string(),
            display_name: z.string(),
            fields: z.array(z.lazy(() => PaymentServiceRequestFields$.inboundSchema)),
            accepted_countries: z.array(z.string()),
            accepted_currencies: z.array(z.string()),
            three_d_secure_enabled: z.boolean().default(false),
            merchant_profile: z
                .nullable(z.lazy(() => PaymentServiceRequestMerchantProfile$.inboundSchema))
                .optional(),
            active: z.boolean().default(true),
            open_loop: z.nullable(z.boolean()).optional(),
            payment_method_tokenization_enabled: z.boolean().default(false),
            network_tokens_enabled: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                paymentServiceDefinitionId: v.payment_service_definition_id,
                displayName: v.display_name,
                fields: v.fields,
                acceptedCountries: v.accepted_countries,
                acceptedCurrencies: v.accepted_currencies,
                threeDSecureEnabled: v.three_d_secure_enabled,
                ...(v.merchant_profile === undefined
                    ? null
                    : { merchantProfile: v.merchant_profile }),
                active: v.active,
                ...(v.open_loop === undefined ? null : { openLoop: v.open_loop }),
                paymentMethodTokenizationEnabled: v.payment_method_tokenization_enabled,
                ...(v.network_tokens_enabled === undefined
                    ? null
                    : { networkTokensEnabled: v.network_tokens_enabled }),
            };
        });

    export type Outbound = {
        payment_service_definition_id: string;
        display_name: string;
        fields: Array<PaymentServiceRequestFields$.Outbound>;
        accepted_countries: Array<string>;
        accepted_currencies: Array<string>;
        three_d_secure_enabled: boolean;
        merchant_profile?: PaymentServiceRequestMerchantProfile$.Outbound | null | undefined;
        active: boolean;
        open_loop?: boolean | null | undefined;
        payment_method_tokenization_enabled: boolean;
        network_tokens_enabled?: boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceRequest> = z
        .object({
            paymentServiceDefinitionId: z.string(),
            displayName: z.string(),
            fields: z.array(z.lazy(() => PaymentServiceRequestFields$.outboundSchema)),
            acceptedCountries: z.array(z.string()),
            acceptedCurrencies: z.array(z.string()),
            threeDSecureEnabled: z.boolean().default(false),
            merchantProfile: z
                .nullable(z.lazy(() => PaymentServiceRequestMerchantProfile$.outboundSchema))
                .optional(),
            active: z.boolean().default(true),
            openLoop: z.nullable(z.boolean()).optional(),
            paymentMethodTokenizationEnabled: z.boolean().default(false),
            networkTokensEnabled: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                payment_service_definition_id: v.paymentServiceDefinitionId,
                display_name: v.displayName,
                fields: v.fields,
                accepted_countries: v.acceptedCountries,
                accepted_currencies: v.acceptedCurrencies,
                three_d_secure_enabled: v.threeDSecureEnabled,
                ...(v.merchantProfile === undefined
                    ? null
                    : { merchant_profile: v.merchantProfile }),
                active: v.active,
                ...(v.openLoop === undefined ? null : { open_loop: v.openLoop }),
                payment_method_tokenization_enabled: v.paymentMethodTokenizationEnabled,
                ...(v.networkTokensEnabled === undefined
                    ? null
                    : { network_tokens_enabled: v.networkTokensEnabled }),
            };
        });
}
