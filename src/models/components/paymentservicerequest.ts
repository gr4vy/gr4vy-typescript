/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * A key-value pair that represents a field defined in the definition for this payment service.
 */
export type PaymentServiceRequestFields = {
    /**
     * The key of the field to set a value for.
     */
    key: string;
    /**
     * The value of a field to set; you can unset optional fields by setting this to an empty string `""`.
     */
    value: string;
};

/**
 * Merchant profile for Amex.
 */
export type PaymentServiceRequestMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Dankort.
 */
export type PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Discover.
 */
export type PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for JCB.
 */
export type PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Mastercard.
 */
export type PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for UnionPay.
 */
export type PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Merchant profile for Visa.
 */
export type PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme = {
    /**
     * Acquirer bin to use when calling 3DS through this scheme.
     */
    merchantAcquirerBin?: string | undefined;
    /**
     * URL to send when calling 3DS through this scheme.
     */
    merchantUrl?: string | undefined;
    /**
     * Merchant ID to use when calling 3DS through this scheme.
     */
    merchantAcquirerId?: string | undefined;
    /**
     * Merchant name to use when calling 3DS through this scheme.
     */
    merchantName?: string | undefined;
    /**
     * Merchant country code to use when calling 3DS through this scheme.
     */
    merchantCountryCode?: string | undefined;
    /**
     * Merchant category code to use when calling 3DS through this scheme.
     */
    merchantCategoryCode?: string | undefined;
};

/**
 * Configuration for each supported card scheme.
 */
export type PaymentServiceRequestMerchantProfile = {
    /**
     * Merchant profile for Amex.
     */
    amex?: PaymentServiceRequestMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Dankort.
     */
    dankort?: PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Discover.
     */
    discover?:
        | PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for JCB.
     */
    jcb?: PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme | null | undefined;
    /**
     * Merchant profile for Mastercard.
     */
    mastercard?:
        | PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for UnionPay.
     */
    unionpay?:
        | PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme
        | null
        | undefined;
    /**
     * Merchant profile for Visa.
     */
    visa?: PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme | null | undefined;
};

/**
 * Request body for activating a payment service.
 */
export type PaymentServiceRequest = {
    /**
     * The ID of the payment service to use.
     */
    paymentServiceDefinitionId: string;
    /**
     * A custom name for the payment service. This will be shown in the Admin UI.
     */
    displayName: string;
    /**
     * A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent within this field.
     */
    fields: Array<PaymentServiceRequestFields>;
    /**
     * A list of countries that this payment service needs to support in ISO two-letter code format.
     */
    acceptedCountries: Array<string>;
    /**
     * A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.
     */
    acceptedCurrencies: Array<string>;
    /**
     * Defines if 3-D Secure is enabled for the service (can only be
     *
     * @remarks
     * enabled if the payment service definition supports
     * the `three_d_secure_hosted` feature).
     * This does not affect pass through 3-D Secure data.
     */
    threeDSecureEnabled?: boolean | undefined;
    /**
     * Configuration for each supported card scheme.
     */
    merchantProfile?: PaymentServiceRequestMerchantProfile | null | undefined;
    /**
     * Defines if this service is currently active or not.
     */
    active?: boolean | undefined;
    /**
     * Defines if the service works as an open-loop service. This feature
     *
     * @remarks
     * can only be enabled if the PSP is set up to accept previous scheme
     * transaction IDs.
     *
     * If this value is not provided or is set to `null`, it will be set
     * to the value of `open_loop` in the payment service definition.
     *
     * If `open_loop_toggle` is `false` in the payment service definition,
     * `open_loop` should either not be provided or set to `null`, or it
     * will fail with a validation error.
     */
    openLoop?: boolean | null | undefined;
    /**
     * Defines if tokenization is enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is NOT set as `open_loop`
     * and the PSP is set up to tokenize.
     */
    paymentMethodTokenizationEnabled?: boolean | null | undefined;
    /**
     * Defines if network tokens are enabled for the service. This feature
     *
     * @remarks
     * can only be enabled if the payment service is set as `open_loop` and
     * the PSP is set up to accept network tokens.
     *
     * If this value is not provided or is set to `null`, it will be set
     * to the value of `network_tokens_default` in the payment service
     * definition.
     *
     * If `network_tokens_toggle` is `false` in the payment service definition,
     * `network_tokens_enabled` should either not be provided or set to `null`,
     * or it will fail with a validation error.
     */
    networkTokensEnabled?: boolean | null | undefined;
};

/** @internal */
export const PaymentServiceRequestFields$inboundSchema: z.ZodType<
    PaymentServiceRequestFields,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string(),
    value: z.string(),
});

/** @internal */
export type PaymentServiceRequestFields$Outbound = {
    key: string;
    value: string;
};

/** @internal */
export const PaymentServiceRequestFields$outboundSchema: z.ZodType<
    PaymentServiceRequestFields$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestFields
> = z.object({
    key: z.string(),
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestFields$ {
    /** @deprecated use `PaymentServiceRequestFields$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceRequestFields$inboundSchema;
    /** @deprecated use `PaymentServiceRequestFields$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceRequestFields$outboundSchema;
    /** @deprecated use `PaymentServiceRequestFields$Outbound` instead. */
    export type Outbound = PaymentServiceRequestFields$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceRequestMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceRequestMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceRequestMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound = PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        merchant_acquirer_bin: z.string().optional(),
        merchant_url: z.string().optional(),
        merchant_acquirer_id: z.string().optional(),
        merchant_name: z.string().optional(),
        merchant_country_code: z.string().optional(),
        merchant_category_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_acquirer_bin: "merchantAcquirerBin",
            merchant_url: "merchantUrl",
            merchant_acquirer_id: "merchantAcquirerId",
            merchant_name: "merchantName",
            merchant_country_code: "merchantCountryCode",
            merchant_category_code: "merchantCategoryCode",
        });
    });

/** @internal */
export type PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$Outbound = {
    merchant_acquirer_bin?: string | undefined;
    merchant_url?: string | undefined;
    merchant_acquirer_id?: string | undefined;
    merchant_name?: string | undefined;
    merchant_country_code?: string | undefined;
    merchant_category_code?: string | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme
> = z
    .object({
        merchantAcquirerBin: z.string().optional(),
        merchantUrl: z.string().optional(),
        merchantAcquirerId: z.string().optional(),
        merchantName: z.string().optional(),
        merchantCountryCode: z.string().optional(),
        merchantCategoryCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAcquirerBin: "merchant_acquirer_bin",
            merchantUrl: "merchant_url",
            merchantAcquirerId: "merchant_acquirer_id",
            merchantName: "merchant_name",
            merchantCountryCode: "merchant_country_code",
            merchantCategoryCode: "merchant_category_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$Outbound` instead. */
    export type Outbound =
        PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$Outbound;
}

/** @internal */
export const PaymentServiceRequestMerchantProfile$inboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfile,
    z.ZodTypeDef,
    unknown
> = z.object({
    amex: z
        .nullable(z.lazy(() => PaymentServiceRequestMerchantProfileSingleScheme$inboundSchema))
        .optional(),
    dankort: z
        .nullable(
            z.lazy(
                () => PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    discover: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    jcb: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    mastercard: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    unionpay: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
    visa: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$inboundSchema
            )
        )
        .optional(),
});

/** @internal */
export type PaymentServiceRequestMerchantProfile$Outbound = {
    amex?: PaymentServiceRequestMerchantProfileSingleScheme$Outbound | null | undefined;
    dankort?:
        | PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    discover?:
        | PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    jcb?:
        | PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    mastercard?:
        | PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    unionpay?:
        | PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
    visa?:
        | PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$Outbound
        | null
        | undefined;
};

/** @internal */
export const PaymentServiceRequestMerchantProfile$outboundSchema: z.ZodType<
    PaymentServiceRequestMerchantProfile$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequestMerchantProfile
> = z.object({
    amex: z
        .nullable(z.lazy(() => PaymentServiceRequestMerchantProfileSingleScheme$outboundSchema))
        .optional(),
    dankort: z
        .nullable(
            z.lazy(
                () => PaymentServiceRequestMerchantProfileMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    discover: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileDiscoverMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    jcb: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileJcbMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    mastercard: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileMastercardMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    unionpay: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileUnionpayMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
    visa: z
        .nullable(
            z.lazy(
                () =>
                    PaymentServiceRequestMerchantProfileVisaMerchantProfileSingleScheme$outboundSchema
            )
        )
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequestMerchantProfile$ {
    /** @deprecated use `PaymentServiceRequestMerchantProfile$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceRequestMerchantProfile$inboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfile$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceRequestMerchantProfile$outboundSchema;
    /** @deprecated use `PaymentServiceRequestMerchantProfile$Outbound` instead. */
    export type Outbound = PaymentServiceRequestMerchantProfile$Outbound;
}

/** @internal */
export const PaymentServiceRequest$inboundSchema: z.ZodType<
    PaymentServiceRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_definition_id: z.string(),
        display_name: z.string(),
        fields: z.array(z.lazy(() => PaymentServiceRequestFields$inboundSchema)),
        accepted_countries: z.array(z.string()),
        accepted_currencies: z.array(z.string()),
        three_d_secure_enabled: z.boolean().default(false),
        merchant_profile: z
            .nullable(z.lazy(() => PaymentServiceRequestMerchantProfile$inboundSchema))
            .optional(),
        active: z.boolean().default(true),
        open_loop: z.nullable(z.boolean()).optional(),
        payment_method_tokenization_enabled: z.nullable(z.boolean()).optional(),
        network_tokens_enabled: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_definition_id: "paymentServiceDefinitionId",
            display_name: "displayName",
            accepted_countries: "acceptedCountries",
            accepted_currencies: "acceptedCurrencies",
            three_d_secure_enabled: "threeDSecureEnabled",
            merchant_profile: "merchantProfile",
            open_loop: "openLoop",
            payment_method_tokenization_enabled: "paymentMethodTokenizationEnabled",
            network_tokens_enabled: "networkTokensEnabled",
        });
    });

/** @internal */
export type PaymentServiceRequest$Outbound = {
    payment_service_definition_id: string;
    display_name: string;
    fields: Array<PaymentServiceRequestFields$Outbound>;
    accepted_countries: Array<string>;
    accepted_currencies: Array<string>;
    three_d_secure_enabled: boolean;
    merchant_profile?: PaymentServiceRequestMerchantProfile$Outbound | null | undefined;
    active: boolean;
    open_loop?: boolean | null | undefined;
    payment_method_tokenization_enabled?: boolean | null | undefined;
    network_tokens_enabled?: boolean | null | undefined;
};

/** @internal */
export const PaymentServiceRequest$outboundSchema: z.ZodType<
    PaymentServiceRequest$Outbound,
    z.ZodTypeDef,
    PaymentServiceRequest
> = z
    .object({
        paymentServiceDefinitionId: z.string(),
        displayName: z.string(),
        fields: z.array(z.lazy(() => PaymentServiceRequestFields$outboundSchema)),
        acceptedCountries: z.array(z.string()),
        acceptedCurrencies: z.array(z.string()),
        threeDSecureEnabled: z.boolean().default(false),
        merchantProfile: z
            .nullable(z.lazy(() => PaymentServiceRequestMerchantProfile$outboundSchema))
            .optional(),
        active: z.boolean().default(true),
        openLoop: z.nullable(z.boolean()).optional(),
        paymentMethodTokenizationEnabled: z.nullable(z.boolean()).optional(),
        networkTokensEnabled: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceDefinitionId: "payment_service_definition_id",
            displayName: "display_name",
            acceptedCountries: "accepted_countries",
            acceptedCurrencies: "accepted_currencies",
            threeDSecureEnabled: "three_d_secure_enabled",
            merchantProfile: "merchant_profile",
            openLoop: "open_loop",
            paymentMethodTokenizationEnabled: "payment_method_tokenization_enabled",
            networkTokensEnabled: "network_tokens_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceRequest$ {
    /** @deprecated use `PaymentServiceRequest$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceRequest$inboundSchema;
    /** @deprecated use `PaymentServiceRequest$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceRequest$outboundSchema;
    /** @deprecated use `PaymentServiceRequest$Outbound` instead. */
    export type Outbound = PaymentServiceRequest$Outbound;
}
