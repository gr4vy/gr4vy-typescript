/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Base model with JSON encoders.
 */
export type Address = {
    city?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    stateCode?: string | undefined;
    houseNumberOrName?: string | undefined;
    line1?: string | undefined;
    line2?: string | undefined;
    organization?: string | undefined;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> = z
    .object({
        city: z.string().optional(),
        country: z.string().optional(),
        postal_code: z.string().optional(),
        state: z.string().optional(),
        state_code: z.string().optional(),
        house_number_or_name: z.string().optional(),
        line1: z.string().optional(),
        line2: z.string().optional(),
        organization: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type Address$Outbound = {
    city?: string | undefined;
    country?: string | undefined;
    postal_code?: string | undefined;
    state?: string | undefined;
    state_code?: string | undefined;
    house_number_or_name?: string | undefined;
    line1?: string | undefined;
    line2?: string | undefined;
    organization?: string | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<Address$Outbound, z.ZodTypeDef, Address> = z
    .object({
        city: z.string().optional(),
        country: z.string().optional(),
        postalCode: z.string().optional(),
        state: z.string().optional(),
        stateCode: z.string().optional(),
        houseNumberOrName: z.string().optional(),
        line1: z.string().optional(),
        line2: z.string().optional(),
        organization: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
    /** @deprecated use `Address$inboundSchema` instead. */
    export const inboundSchema = Address$inboundSchema;
    /** @deprecated use `Address$outboundSchema` instead. */
    export const outboundSchema = Address$outboundSchema;
    /** @deprecated use `Address$Outbound` instead. */
    export type Outbound = Address$Outbound;
}
