/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountsReceivablesReportSpec = {
  /**
   * The report model type.
   */
  model?: "accounts_receivables" | undefined;
  /**
   * The parameters for the accounts receivables report model.
   */
  params: { [k: string]: any };
};

/** @internal */
export const AccountsReceivablesReportSpec$inboundSchema: z.ZodType<
  AccountsReceivablesReportSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.literal("accounts_receivables").default("accounts_receivables"),
  params: z.record(z.any()),
});

/** @internal */
export type AccountsReceivablesReportSpec$Outbound = {
  model: "accounts_receivables";
  params: { [k: string]: any };
};

/** @internal */
export const AccountsReceivablesReportSpec$outboundSchema: z.ZodType<
  AccountsReceivablesReportSpec$Outbound,
  z.ZodTypeDef,
  AccountsReceivablesReportSpec
> = z.object({
  model: z.literal("accounts_receivables").default(
    "accounts_receivables" as const,
  ),
  params: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsReceivablesReportSpec$ {
  /** @deprecated use `AccountsReceivablesReportSpec$inboundSchema` instead. */
  export const inboundSchema = AccountsReceivablesReportSpec$inboundSchema;
  /** @deprecated use `AccountsReceivablesReportSpec$outboundSchema` instead. */
  export const outboundSchema = AccountsReceivablesReportSpec$outboundSchema;
  /** @deprecated use `AccountsReceivablesReportSpec$Outbound` instead. */
  export type Outbound = AccountsReceivablesReportSpec$Outbound;
}

export function accountsReceivablesReportSpecToJSON(
  accountsReceivablesReportSpec: AccountsReceivablesReportSpec,
): string {
  return JSON.stringify(
    AccountsReceivablesReportSpec$outboundSchema.parse(
      accountsReceivablesReportSpec,
    ),
  );
}

export function accountsReceivablesReportSpecFromJSON(
  jsonString: string,
): SafeParseResult<AccountsReceivablesReportSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsReceivablesReportSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsReceivablesReportSpec' from JSON`,
  );
}
