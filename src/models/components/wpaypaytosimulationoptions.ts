/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WpayPaytoSimulationOptions = {
  /**
   * The simulation being requested. Please refer to the developer guide for a list of all available simulations.
   */
  simulate?: string | null | undefined;
  /**
   * The delay in seconds before the requested simulation is executed.
   */
  delay?: number | null | undefined;
};

/** @internal */
export const WpayPaytoSimulationOptions$inboundSchema: z.ZodType<
  WpayPaytoSimulationOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  simulate: z.nullable(z.string()).optional(),
  delay: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type WpayPaytoSimulationOptions$Outbound = {
  simulate?: string | null | undefined;
  delay?: number | null | undefined;
};

/** @internal */
export const WpayPaytoSimulationOptions$outboundSchema: z.ZodType<
  WpayPaytoSimulationOptions$Outbound,
  z.ZodTypeDef,
  WpayPaytoSimulationOptions
> = z.object({
  simulate: z.nullable(z.string()).optional(),
  delay: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WpayPaytoSimulationOptions$ {
  /** @deprecated use `WpayPaytoSimulationOptions$inboundSchema` instead. */
  export const inboundSchema = WpayPaytoSimulationOptions$inboundSchema;
  /** @deprecated use `WpayPaytoSimulationOptions$outboundSchema` instead. */
  export const outboundSchema = WpayPaytoSimulationOptions$outboundSchema;
  /** @deprecated use `WpayPaytoSimulationOptions$Outbound` instead. */
  export type Outbound = WpayPaytoSimulationOptions$Outbound;
}

export function wpayPaytoSimulationOptionsToJSON(
  wpayPaytoSimulationOptions: WpayPaytoSimulationOptions,
): string {
  return JSON.stringify(
    WpayPaytoSimulationOptions$outboundSchema.parse(wpayPaytoSimulationOptions),
  );
}

export function wpayPaytoSimulationOptionsFromJSON(
  jsonString: string,
): SafeParseResult<WpayPaytoSimulationOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WpayPaytoSimulationOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WpayPaytoSimulationOptions' from JSON`,
  );
}
