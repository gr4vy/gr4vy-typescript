/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The name of the transformation. This will always be `use_additional_scheme`.
 */
export enum UseAdditionalSchemeTransformationOutcomeName {
    UseAdditionalScheme = "use_additional_scheme",
}

/**
 * Transformation to be applied when for card transaction
 *
 * @remarks
 * flow/routing action outcome.
 *
 * This transformation forces the processing of a
 * transaction to use the first additional scheme
 * of the card instead of it's main scheme.
 *
 * If the card doesn't have any additional schemes,
 * this outcome would be skipped.
 */
export type UseAdditionalSchemeTransformationOutcome = {
    /**
     * The name of the transformation. This will always be `use_additional_scheme`.
     */
    name?: UseAdditionalSchemeTransformationOutcomeName | undefined;
};

/** @internal */
export const UseAdditionalSchemeTransformationOutcomeName$: z.ZodNativeEnum<
    typeof UseAdditionalSchemeTransformationOutcomeName
> = z.nativeEnum(UseAdditionalSchemeTransformationOutcomeName);

/** @internal */
export namespace UseAdditionalSchemeTransformationOutcome$ {
    export type Inbound = {
        name?: UseAdditionalSchemeTransformationOutcomeName | undefined;
    };

    export const inboundSchema: z.ZodType<
        UseAdditionalSchemeTransformationOutcome,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            name: UseAdditionalSchemeTransformationOutcomeName$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        name?: UseAdditionalSchemeTransformationOutcomeName | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UseAdditionalSchemeTransformationOutcome
    > = z
        .object({
            name: UseAdditionalSchemeTransformationOutcomeName$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
