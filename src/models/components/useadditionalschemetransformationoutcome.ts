/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The name of the transformation. This will always be `use_additional_scheme`.
 */
export const UseAdditionalSchemeTransformationOutcomeName = {
    UseAdditionalScheme: "use_additional_scheme",
} as const;
/**
 * The name of the transformation. This will always be `use_additional_scheme`.
 */
export type UseAdditionalSchemeTransformationOutcomeName = ClosedEnum<
    typeof UseAdditionalSchemeTransformationOutcomeName
>;

/**
 * Transformation to be applied when for card transaction
 *
 * @remarks
 * flow/routing action outcome.
 *
 * This transformation forces the processing of a
 * transaction to use the first additional scheme
 * of the card instead of it's main scheme.
 *
 * If the card doesn't have any additional schemes,
 * this outcome would be skipped.
 */
export type UseAdditionalSchemeTransformationOutcome = {
    /**
     * The name of the transformation. This will always be `use_additional_scheme`.
     */
    name?: UseAdditionalSchemeTransformationOutcomeName | undefined;
};

/** @internal */
export const UseAdditionalSchemeTransformationOutcomeName$inboundSchema: z.ZodNativeEnum<
    typeof UseAdditionalSchemeTransformationOutcomeName
> = z.nativeEnum(UseAdditionalSchemeTransformationOutcomeName);

/** @internal */
export const UseAdditionalSchemeTransformationOutcomeName$outboundSchema: z.ZodNativeEnum<
    typeof UseAdditionalSchemeTransformationOutcomeName
> = UseAdditionalSchemeTransformationOutcomeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UseAdditionalSchemeTransformationOutcomeName$ {
    /** @deprecated use `UseAdditionalSchemeTransformationOutcomeName$inboundSchema` instead. */
    export const inboundSchema = UseAdditionalSchemeTransformationOutcomeName$inboundSchema;
    /** @deprecated use `UseAdditionalSchemeTransformationOutcomeName$outboundSchema` instead. */
    export const outboundSchema = UseAdditionalSchemeTransformationOutcomeName$outboundSchema;
}

/** @internal */
export const UseAdditionalSchemeTransformationOutcome$inboundSchema: z.ZodType<
    UseAdditionalSchemeTransformationOutcome,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: UseAdditionalSchemeTransformationOutcomeName$inboundSchema.optional(),
});

/** @internal */
export type UseAdditionalSchemeTransformationOutcome$Outbound = {
    name?: string | undefined;
};

/** @internal */
export const UseAdditionalSchemeTransformationOutcome$outboundSchema: z.ZodType<
    UseAdditionalSchemeTransformationOutcome$Outbound,
    z.ZodTypeDef,
    UseAdditionalSchemeTransformationOutcome
> = z.object({
    name: UseAdditionalSchemeTransformationOutcomeName$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UseAdditionalSchemeTransformationOutcome$ {
    /** @deprecated use `UseAdditionalSchemeTransformationOutcome$inboundSchema` instead. */
    export const inboundSchema = UseAdditionalSchemeTransformationOutcome$inboundSchema;
    /** @deprecated use `UseAdditionalSchemeTransformationOutcome$outboundSchema` instead. */
    export const outboundSchema = UseAdditionalSchemeTransformationOutcome$outboundSchema;
    /** @deprecated use `UseAdditionalSchemeTransformationOutcome$Outbound` instead. */
    export type Outbound = UseAdditionalSchemeTransformationOutcome$Outbound;
}
