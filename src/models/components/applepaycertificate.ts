/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `apple-pay-certificate`.
 */
export enum ApplePayCertificateType {
    ApplePayCertificate = "apple-pay-certificate",
}

/**
 * The status of this Apple Pay certificate.
 */
export enum ApplePayCertificateStatus {
    Active = "active",
    Expired = "expired",
    Incomplete = "incomplete",
}

/**
 * An Apple Pay certificate record.
 */
export type ApplePayCertificate = {
    /**
     * The type of this resource. Is always `apple-pay-certificate`.
     */
    type?: ApplePayCertificateType | undefined;
    /**
     * The unique identifier for this Apple Pay certificate record.
     */
    id?: string | undefined;
    /**
     * The name for this Apple Pay certificate which is used in the Gr4vy admin
     *
     * @remarks
     * panel to give the Apple Pay certificate a human readable name.
     */
    displayName?: string | undefined;
    /**
     * The status of this Apple Pay certificate.
     */
    status?: ApplePayCertificateStatus | undefined;
    /**
     * The unique identifier representing a merchant for Apple Pay. This value is
     *
     * @remarks
     * populated after the Apple Pay certificate record has been updated with
     * the payment processing certificate received from Apple.
     */
    appleMerchantId?: string | null | undefined;
    /**
     * The hash value of the public key associated with this Apple Pay
     *
     * @remarks
     * certificate. This value is populated after the Apple Pay certificate
     * record has been updated with the payment processing certificate
     * received from Apple.
     */
    publicKeyHash?: string | null | undefined;
    /**
     * The Certificate Signing Request to upload to the Apple Developer console
     *
     * @remarks
     * when creating a new payment processing certificate.
     */
    certificateSigningRequest?: string | null | undefined;
    /**
     * The date and time this Apple Pay certificate expires. This value is
     *
     * @remarks
     * populated after the Apple Pay certificate record has been updated
     * with the payment processing certificate received from Apple.
     */
    expiresAt?: Date | null | undefined;
    /**
     * The date and time this Apple Pay certificate record was created in our
     *
     * @remarks
     * system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time this Apple Pay certificate record was last updated.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const ApplePayCertificateType$ = z.nativeEnum(ApplePayCertificateType);

/** @internal */
export const ApplePayCertificateStatus$ = z.nativeEnum(ApplePayCertificateStatus);

/** @internal */
export namespace ApplePayCertificate$ {
    export type Inbound = {
        type?: ApplePayCertificateType | undefined;
        id?: string | undefined;
        display_name?: string | undefined;
        status?: ApplePayCertificateStatus | undefined;
        apple_merchant_id?: string | null | undefined;
        public_key_hash?: string | null | undefined;
        certificate_signing_request?: string | null | undefined;
        expires_at?: string | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ApplePayCertificate, z.ZodTypeDef, Inbound> = z
        .object({
            type: ApplePayCertificateType$.optional(),
            id: z.string().optional(),
            display_name: z.string().optional(),
            status: ApplePayCertificateStatus$.optional(),
            apple_merchant_id: z.nullable(z.string()).optional(),
            public_key_hash: z.nullable(z.string()).optional(),
            certificate_signing_request: z.nullable(z.string()).optional(),
            expires_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.apple_merchant_id === undefined
                    ? null
                    : { appleMerchantId: v.apple_merchant_id }),
                ...(v.public_key_hash === undefined ? null : { publicKeyHash: v.public_key_hash }),
                ...(v.certificate_signing_request === undefined
                    ? null
                    : { certificateSigningRequest: v.certificate_signing_request }),
                ...(v.expires_at === undefined ? null : { expiresAt: v.expires_at }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: ApplePayCertificateType | undefined;
        id?: string | undefined;
        display_name?: string | undefined;
        status?: ApplePayCertificateStatus | undefined;
        apple_merchant_id?: string | null | undefined;
        public_key_hash?: string | null | undefined;
        certificate_signing_request?: string | null | undefined;
        expires_at?: string | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApplePayCertificate> = z
        .object({
            type: ApplePayCertificateType$.optional(),
            id: z.string().optional(),
            displayName: z.string().optional(),
            status: ApplePayCertificateStatus$.optional(),
            appleMerchantId: z.nullable(z.string()).optional(),
            publicKeyHash: z.nullable(z.string()).optional(),
            certificateSigningRequest: z.nullable(z.string()).optional(),
            expiresAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.appleMerchantId === undefined
                    ? null
                    : { apple_merchant_id: v.appleMerchantId }),
                ...(v.publicKeyHash === undefined ? null : { public_key_hash: v.publicKeyHash }),
                ...(v.certificateSigningRequest === undefined
                    ? null
                    : { certificate_signing_request: v.certificateSigningRequest }),
                ...(v.expiresAt === undefined ? null : { expires_at: v.expiresAt }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
