/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a Click to Pay payment with a decrypted token and cryptogram. This
 *
 * @remarks
 * is mainly used internally but can be used by anyone with their own C2P
 * integration.
 */
export type ClickToPayPaymentMethodCreate = {
  /**
   * Aways `click-to-pay`.
   */
  method?: "click-to-pay" | undefined;
  /**
   * The device token.
   */
  token: string;
  /**
   * The payment cryptogram for the device token.
   */
  cryptogram: string;
  /**
   * The expiration date of the device token.
   */
  expirationDate: string;
  /**
   *  The ID of the buyer to associate this transaction to.
   */
  buyerId?: string | null | undefined;
  /**
   * The external identifier of the buyer to create a transaction for.
   */
  buyerExternalIdentifier?: string | null | undefined;
  /**
   * The external identifier of the payment method to filter by.
   */
  externalIdentifier?: string | null | undefined;
  /**
   * The URL to redirect a user back to after the complete 3DS in browser.
   */
  redirectUrl?: string | null | undefined;
};

/** @internal */
export const ClickToPayPaymentMethodCreate$inboundSchema: z.ZodType<
  ClickToPayPaymentMethodCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: z.literal("click-to-pay").default("click-to-pay").optional(),
  token: z.string(),
  cryptogram: z.string(),
  expiration_date: z.string(),
  buyer_id: z.nullable(z.string()).optional(),
  buyer_external_identifier: z.nullable(z.string()).optional(),
  external_identifier: z.nullable(z.string()).optional(),
  redirect_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "expiration_date": "expirationDate",
    "buyer_id": "buyerId",
    "buyer_external_identifier": "buyerExternalIdentifier",
    "external_identifier": "externalIdentifier",
    "redirect_url": "redirectUrl",
  });
});

/** @internal */
export type ClickToPayPaymentMethodCreate$Outbound = {
  method: "click-to-pay";
  token: string;
  cryptogram: string;
  expiration_date: string;
  buyer_id?: string | null | undefined;
  buyer_external_identifier?: string | null | undefined;
  external_identifier?: string | null | undefined;
  redirect_url?: string | null | undefined;
};

/** @internal */
export const ClickToPayPaymentMethodCreate$outboundSchema: z.ZodType<
  ClickToPayPaymentMethodCreate$Outbound,
  z.ZodTypeDef,
  ClickToPayPaymentMethodCreate
> = z.object({
  method: z.literal("click-to-pay"),
  token: z.string(),
  cryptogram: z.string(),
  expirationDate: z.string(),
  buyerId: z.nullable(z.string()).optional(),
  buyerExternalIdentifier: z.nullable(z.string()).optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expirationDate: "expiration_date",
    buyerId: "buyer_id",
    buyerExternalIdentifier: "buyer_external_identifier",
    externalIdentifier: "external_identifier",
    redirectUrl: "redirect_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClickToPayPaymentMethodCreate$ {
  /** @deprecated use `ClickToPayPaymentMethodCreate$inboundSchema` instead. */
  export const inboundSchema = ClickToPayPaymentMethodCreate$inboundSchema;
  /** @deprecated use `ClickToPayPaymentMethodCreate$outboundSchema` instead. */
  export const outboundSchema = ClickToPayPaymentMethodCreate$outboundSchema;
  /** @deprecated use `ClickToPayPaymentMethodCreate$Outbound` instead. */
  export type Outbound = ClickToPayPaymentMethodCreate$Outbound;
}

export function clickToPayPaymentMethodCreateToJSON(
  clickToPayPaymentMethodCreate: ClickToPayPaymentMethodCreate,
): string {
  return JSON.stringify(
    ClickToPayPaymentMethodCreate$outboundSchema.parse(
      clickToPayPaymentMethodCreate,
    ),
  );
}

export function clickToPayPaymentMethodCreateFromJSON(
  jsonString: string,
): SafeParseResult<ClickToPayPaymentMethodCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClickToPayPaymentMethodCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClickToPayPaymentMethodCreate' from JSON`,
  );
}
