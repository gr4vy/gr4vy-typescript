/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AffirmItineraryOptions = {
  /**
   * The type of itinerary object.
   */
  type?: string | null | undefined;
  /**
   * The booking/itinerary number (if applicable).
   */
  sku?: string | null | undefined;
  /**
   * Readable description of the itinerary item.
   */
  displayName?: string | null | undefined;
  /**
   * The name of the venue where the event is hosted.
   */
  venue?: string | null | undefined;
  /**
   * The address object that can be parsed.
   */
  location?: string | null | undefined;
  /**
   * The start date of this itinerary item.
   */
  dateStart?: string | null | undefined;
  /**
   * The corporation.
   */
  management?: string | null | undefined;
};

/** @internal */
export const AffirmItineraryOptions$inboundSchema: z.ZodType<
  AffirmItineraryOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(z.string()).optional(),
  sku: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  venue: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  date_start: z.nullable(z.string()).optional(),
  management: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "date_start": "dateStart",
  });
});

/** @internal */
export type AffirmItineraryOptions$Outbound = {
  type?: string | null | undefined;
  sku?: string | null | undefined;
  display_name?: string | null | undefined;
  venue?: string | null | undefined;
  location?: string | null | undefined;
  date_start?: string | null | undefined;
  management?: string | null | undefined;
};

/** @internal */
export const AffirmItineraryOptions$outboundSchema: z.ZodType<
  AffirmItineraryOptions$Outbound,
  z.ZodTypeDef,
  AffirmItineraryOptions
> = z.object({
  type: z.nullable(z.string()).optional(),
  sku: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  venue: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  dateStart: z.nullable(z.string()).optional(),
  management: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    dateStart: "date_start",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AffirmItineraryOptions$ {
  /** @deprecated use `AffirmItineraryOptions$inboundSchema` instead. */
  export const inboundSchema = AffirmItineraryOptions$inboundSchema;
  /** @deprecated use `AffirmItineraryOptions$outboundSchema` instead. */
  export const outboundSchema = AffirmItineraryOptions$outboundSchema;
  /** @deprecated use `AffirmItineraryOptions$Outbound` instead. */
  export type Outbound = AffirmItineraryOptions$Outbound;
}

export function affirmItineraryOptionsToJSON(
  affirmItineraryOptions: AffirmItineraryOptions,
): string {
  return JSON.stringify(
    AffirmItineraryOptions$outboundSchema.parse(affirmItineraryOptions),
  );
}

export function affirmItineraryOptionsFromJSON(
  jsonString: string,
): SafeParseResult<AffirmItineraryOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AffirmItineraryOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AffirmItineraryOptions' from JSON`,
  );
}
