/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowMetadataConditionName = {
    Metadata: "metadata",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowMetadataConditionName = ClosedEnum<typeof FlowMetadataConditionName>;

/**
 * The comparison to make on the currency code `value`.
 */
export const FlowMetadataConditionOperator = {
    Includes: "includes",
    Excludes: "excludes",
} as const;
/**
 * The comparison to make on the currency code `value`.
 */
export type FlowMetadataConditionOperator = ClosedEnum<typeof FlowMetadataConditionOperator>;

export type FlowMetadataConditionValueValue = Array<string> | string;

/**
 * The metadata to compare the transaction to.
 */
export type FlowMetadataConditionValue = {
    /**
     * Key to metadata value to compare transaction to.
     */
    key?: string | undefined;
    value?: Array<string> | string | undefined;
};

/**
 * Metadata conditions with a name, operator, and value.
 */
export type FlowMetadataCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowMetadataConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowMetadataConditionOperator;
    /**
     * The metadata to compare the transaction to.
     */
    value: FlowMetadataConditionValue;
};

/** @internal */
export const FlowMetadataConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowMetadataConditionName
> = z.nativeEnum(FlowMetadataConditionName);

/** @internal */
export const FlowMetadataConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowMetadataConditionName
> = FlowMetadataConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowMetadataConditionName$ {
    /** @deprecated use `FlowMetadataConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowMetadataConditionName$inboundSchema;
    /** @deprecated use `FlowMetadataConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowMetadataConditionName$outboundSchema;
}

/** @internal */
export const FlowMetadataConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowMetadataConditionOperator
> = z.nativeEnum(FlowMetadataConditionOperator);

/** @internal */
export const FlowMetadataConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowMetadataConditionOperator
> = FlowMetadataConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowMetadataConditionOperator$ {
    /** @deprecated use `FlowMetadataConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowMetadataConditionOperator$inboundSchema;
    /** @deprecated use `FlowMetadataConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowMetadataConditionOperator$outboundSchema;
}

/** @internal */
export const FlowMetadataConditionValueValue$inboundSchema: z.ZodType<
    FlowMetadataConditionValueValue,
    z.ZodTypeDef,
    unknown
> = z.union([z.array(z.string()), z.string()]);

/** @internal */
export type FlowMetadataConditionValueValue$Outbound = Array<string> | string;

/** @internal */
export const FlowMetadataConditionValueValue$outboundSchema: z.ZodType<
    FlowMetadataConditionValueValue$Outbound,
    z.ZodTypeDef,
    FlowMetadataConditionValueValue
> = z.union([z.array(z.string()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowMetadataConditionValueValue$ {
    /** @deprecated use `FlowMetadataConditionValueValue$inboundSchema` instead. */
    export const inboundSchema = FlowMetadataConditionValueValue$inboundSchema;
    /** @deprecated use `FlowMetadataConditionValueValue$outboundSchema` instead. */
    export const outboundSchema = FlowMetadataConditionValueValue$outboundSchema;
    /** @deprecated use `FlowMetadataConditionValueValue$Outbound` instead. */
    export type Outbound = FlowMetadataConditionValueValue$Outbound;
}

/** @internal */
export const FlowMetadataConditionValue$inboundSchema: z.ZodType<
    FlowMetadataConditionValue,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string().optional(),
    value: z.union([z.array(z.string()), z.string()]).optional(),
});

/** @internal */
export type FlowMetadataConditionValue$Outbound = {
    key?: string | undefined;
    value?: Array<string> | string | undefined;
};

/** @internal */
export const FlowMetadataConditionValue$outboundSchema: z.ZodType<
    FlowMetadataConditionValue$Outbound,
    z.ZodTypeDef,
    FlowMetadataConditionValue
> = z.object({
    key: z.string().optional(),
    value: z.union([z.array(z.string()), z.string()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowMetadataConditionValue$ {
    /** @deprecated use `FlowMetadataConditionValue$inboundSchema` instead. */
    export const inboundSchema = FlowMetadataConditionValue$inboundSchema;
    /** @deprecated use `FlowMetadataConditionValue$outboundSchema` instead. */
    export const outboundSchema = FlowMetadataConditionValue$outboundSchema;
    /** @deprecated use `FlowMetadataConditionValue$Outbound` instead. */
    export type Outbound = FlowMetadataConditionValue$Outbound;
}

/** @internal */
export const FlowMetadataCondition$inboundSchema: z.ZodType<
    FlowMetadataCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowMetadataConditionName$inboundSchema,
    operator: FlowMetadataConditionOperator$inboundSchema,
    value: z.lazy(() => FlowMetadataConditionValue$inboundSchema),
});

/** @internal */
export type FlowMetadataCondition$Outbound = {
    name: string;
    operator: string;
    value: FlowMetadataConditionValue$Outbound;
};

/** @internal */
export const FlowMetadataCondition$outboundSchema: z.ZodType<
    FlowMetadataCondition$Outbound,
    z.ZodTypeDef,
    FlowMetadataCondition
> = z.object({
    name: FlowMetadataConditionName$outboundSchema,
    operator: FlowMetadataConditionOperator$outboundSchema,
    value: z.lazy(() => FlowMetadataConditionValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowMetadataCondition$ {
    /** @deprecated use `FlowMetadataCondition$inboundSchema` instead. */
    export const inboundSchema = FlowMetadataCondition$inboundSchema;
    /** @deprecated use `FlowMetadataCondition$outboundSchema` instead. */
    export const outboundSchema = FlowMetadataCondition$outboundSchema;
    /** @deprecated use `FlowMetadataCondition$Outbound` instead. */
    export type Outbound = FlowMetadataCondition$Outbound;
}
