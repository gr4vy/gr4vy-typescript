/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowMetadataConditionName {
    Metadata = "metadata",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum FlowMetadataConditionOperator {
    Includes = "includes",
    Excludes = "excludes",
}

export type FlowMetadataConditionValueValue = Array<string> | string;

/**
 * The metadata to compare the transaction to.
 */
export type FlowMetadataConditionValue = {
    /**
     * Key to metadata value to compare transaction to.
     */
    key?: string | undefined;
    value?: Array<string> | string | undefined;
};

/**
 * Metadata conditions with a name, operator, and value.
 */
export type FlowMetadataCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowMetadataConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowMetadataConditionOperator;
    /**
     * The metadata to compare the transaction to.
     */
    value: FlowMetadataConditionValue;
};

/** @internal */
export const FlowMetadataConditionName$: z.ZodNativeEnum<typeof FlowMetadataConditionName> =
    z.nativeEnum(FlowMetadataConditionName);

/** @internal */
export const FlowMetadataConditionOperator$: z.ZodNativeEnum<typeof FlowMetadataConditionOperator> =
    z.nativeEnum(FlowMetadataConditionOperator);

/** @internal */
export namespace FlowMetadataConditionValueValue$ {
    export type Inbound = Array<string> | string;

    export type Outbound = Array<string> | string;
    export const inboundSchema: z.ZodType<FlowMetadataConditionValueValue, z.ZodTypeDef, Inbound> =
        z.union([z.array(z.string()), z.string()]);
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowMetadataConditionValueValue
    > = z.union([z.array(z.string()), z.string()]);
}

/** @internal */
export namespace FlowMetadataConditionValue$ {
    export type Inbound = {
        key?: string | undefined;
        value?: Array<string> | string | undefined;
    };

    export const inboundSchema: z.ZodType<FlowMetadataConditionValue, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string().optional(),
            value: z.union([z.array(z.string()), z.string()]).optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        key?: string | undefined;
        value?: Array<string> | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowMetadataConditionValue> = z
        .object({
            key: z.string().optional(),
            value: z.union([z.array(z.string()), z.string()]).optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace FlowMetadataCondition$ {
    export type Inbound = {
        name: FlowMetadataConditionName;
        operator: FlowMetadataConditionOperator;
        value: FlowMetadataConditionValue$.Inbound;
    };

    export const inboundSchema: z.ZodType<FlowMetadataCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowMetadataConditionName$,
            operator: FlowMetadataConditionOperator$,
            value: z.lazy(() => FlowMetadataConditionValue$.inboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowMetadataConditionName;
        operator: FlowMetadataConditionOperator;
        value: FlowMetadataConditionValue$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowMetadataCondition> = z
        .object({
            name: FlowMetadataConditionName$,
            operator: FlowMetadataConditionOperator$,
            value: z.lazy(() => FlowMetadataConditionValue$.outboundSchema),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
