/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowMetadataConditionName {
    Metadata = "metadata",
}

/**
 * The comparison to make on the currency code `value`.
 */
export enum FlowMetadataConditionOperator {
    Includes = "includes",
    Excludes = "excludes",
}

export type FlowMetadataConditionValueValue = Array<string> | string;

/**
 * The metadata to compare the transaction to.
 */
export type FlowMetadataConditionValue = {
    /**
     * Key to metadata value to compare transaction to.
     */
    key?: string | undefined;
    value?: Array<string> | string | undefined;
};

/**
 * Metadata conditions with a name, operator, and value.
 */
export type FlowMetadataCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowMetadataConditionName;
    /**
     * The comparison to make on the currency code `value`.
     */
    operator: FlowMetadataConditionOperator;
    /**
     * The metadata to compare the transaction to.
     */
    value: FlowMetadataConditionValue;
};

/** @internal */
export namespace FlowMetadataConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowMetadataConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowMetadataConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowMetadataConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowMetadataConditionValueValue$ {
    export const inboundSchema: z.ZodType<FlowMetadataConditionValueValue, z.ZodTypeDef, unknown> =
        z.union([z.array(z.string()), z.string()]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowMetadataConditionValueValue
    > = z.union([z.array(z.string()), z.string()]);
}

/** @internal */
export namespace FlowMetadataConditionValue$ {
    export const inboundSchema: z.ZodType<FlowMetadataConditionValue, z.ZodTypeDef, unknown> =
        z.object({
            key: z.string().optional(),
            value: z.union([z.array(z.string()), z.string()]).optional(),
        });

    export type Outbound = {
        key?: string | undefined;
        value?: Array<string> | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowMetadataConditionValue> =
        z.object({
            key: z.string().optional(),
            value: z.union([z.array(z.string()), z.string()]).optional(),
        });
}

/** @internal */
export namespace FlowMetadataCondition$ {
    export const inboundSchema: z.ZodType<FlowMetadataCondition, z.ZodTypeDef, unknown> = z.object({
        name: FlowMetadataConditionName$.inboundSchema,
        operator: FlowMetadataConditionOperator$.inboundSchema,
        value: z.lazy(() => FlowMetadataConditionValue$.inboundSchema),
    });

    export type Outbound = {
        name: string;
        operator: string;
        value: FlowMetadataConditionValue$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowMetadataCondition> =
        z.object({
            name: FlowMetadataConditionName$.outboundSchema,
            operator: FlowMetadataConditionOperator$.outboundSchema,
            value: z.lazy(() => FlowMetadataConditionValue$.outboundSchema),
        });
}
