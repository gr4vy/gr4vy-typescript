/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GiftCardService, GiftCardService$ } from "./giftcardservice";
import * as z from "zod";

/**
 * The type of this resource.
 */
export enum GiftCardType {
    GiftCard = "gift-card",
}

/**
 * The type of this resource. Is always `buyer`.
 */
export enum GiftCardBuyerType {
    Buyer = "buyer",
}

/**
 * The type of this resource. Is always `billing-details`.
 */
export enum GiftCardBuyerBillingDetailsType {
    BillingDetails = "billing-details",
}

/**
 * The billing address of the buyer.
 */
export type GiftCardAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export enum GiftCardKind {
    AeTrn = "ae.trn",
    AuAbn = "au.abn",
    ArDni = "ar.dni",
    ArCuil = "ar.cuil",
    ArCuit = "ar.cuit",
    BrCnpj = "br.cnpj",
    BrCpf = "br.cpf",
    CaBn = "ca.bn",
    CaGstHst = "ca.gst_hst",
    CaPstBc = "ca.pst_bc",
    CaPstMb = "ca.pst_mb",
    CaPstSk = "ca.pst_sk",
    CaQst = "ca.qst",
    ChVat = "ch.vat",
    ClTin = "cl.tin",
    EsCif = "es.cif",
    EuVat = "eu.vat",
    GbVat = "gb.vat",
    HkBr = "hk.br",
    IdNik = "id.nik",
    IdNpwp = "id.npwp",
    InGst = "in.gst",
    JpCn = "jp.cn",
    JpRn = "jp.rn",
    KrBrn = "kr.brn",
    LiUid = "li.uid",
    MxCurp = "mx.curp",
    MyFrp = "my.frp",
    MyItn = "my.itn",
    MyNric = "my.nric",
    MySst = "my.sst",
    NoVat = "no.vat",
    NzGst = "nz.gst",
    PhTin = "ph.tin",
    RuInn = "ru.inn",
    RuKpp = "ru.kpp",
    SaVat = "sa.vat",
    SgGst = "sg.gst",
    SgUen = "sg.uen",
    ThId = "th.id",
    ThVat = "th.vat",
    TwVat = "tw.vat",
    UsEin = "us.ein",
    ZaVat = "za.vat",
}

/**
 * The tax information associated with the billing details.
 */
export type GiftCardTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: GiftCardKind;
};

/**
 * The billing details associated with a buyer.
 */
export type GiftCardBillingDetails = {
    /**
     * The type of this resource. Is always `billing-details`.
     */
    type?: GiftCardBuyerBillingDetailsType | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: GiftCardAddress | null | undefined;
    /**
     * The tax information associated with the billing details.
     */
    taxId?: GiftCardTaxID | null | undefined;
};

/**
 * The optional buyer for which this payment method has been stored.
 */
export type GiftCardBuyer = {
    /**
     * The type of this resource. Is always `buyer`.
     */
    type?: GiftCardBuyerType | undefined;
    /**
     * The unique Gr4vy ID for this buyer.
     */
    id?: string | undefined;
    /**
     * The billing details associated with a buyer.
     */
    billingDetails?: GiftCardBillingDetails | null | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * An external identifier that can be used to match the buyer against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/**
 * A gift card stored for a buyer, or used in a transaction.
 */
export type GiftCard = {
    /**
     * The type of this resource.
     */
    type?: GiftCardType | undefined;
    /**
     * The ID of this gift card.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * An configured gift card service.
     */
    service?: GiftCardService | undefined;
    /**
     * The first 6 digits of the full gift card number.
     */
    bin?: string | undefined;
    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    subBin?: string | undefined;
    /**
     * The last 4 digits for the gift card.
     */
    last4?: string | undefined;
    /**
     * The date and time when this gift card expires. This is a full
     *
     * @remarks
     * date/time and may be more accurate than the actual expiry date
     * received by the gift card service.
     */
    expirationDate?: Date | null | undefined;
    /**
     * The optional buyer for which this payment method has been stored.
     */
    buyer?: GiftCardBuyer | null | undefined;
    /**
     * The date and time when this gift card was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this gift card was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const GiftCardType$: z.ZodNativeEnum<typeof GiftCardType> = z.nativeEnum(GiftCardType);

/** @internal */
export const GiftCardBuyerType$: z.ZodNativeEnum<typeof GiftCardBuyerType> =
    z.nativeEnum(GiftCardBuyerType);

/** @internal */
export const GiftCardBuyerBillingDetailsType$: z.ZodNativeEnum<
    typeof GiftCardBuyerBillingDetailsType
> = z.nativeEnum(GiftCardBuyerBillingDetailsType);

/** @internal */
export namespace GiftCardAddress$ {
    export type Inbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardAddress, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postal_code: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postal_code === undefined ? null : { postalCode: v.postal_code }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.state_code === undefined ? null : { stateCode: v.state_code }),
                ...(v.house_number_or_name === undefined
                    ? null
                    : { houseNumberOrName: v.house_number_or_name }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardAddress> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postalCode: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postalCode === undefined ? null : { postal_code: v.postalCode }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.stateCode === undefined ? null : { state_code: v.stateCode }),
                ...(v.houseNumberOrName === undefined
                    ? null
                    : { house_number_or_name: v.houseNumberOrName }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });
}

/** @internal */
export const GiftCardKind$: z.ZodNativeEnum<typeof GiftCardKind> = z.nativeEnum(GiftCardKind);

/** @internal */
export namespace GiftCardTaxID$ {
    export type Inbound = {
        value: string;
        kind: GiftCardKind;
    };

    export const inboundSchema: z.ZodType<GiftCardTaxID, z.ZodTypeDef, Inbound> = z
        .object({
            value: z.string(),
            kind: GiftCardKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });

    export type Outbound = {
        value: string;
        kind: GiftCardKind;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardTaxID> = z
        .object({
            value: z.string(),
            kind: GiftCardKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });
}

/** @internal */
export namespace GiftCardBillingDetails$ {
    export type Inbound = {
        type?: GiftCardBuyerBillingDetailsType | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: GiftCardAddress$.Inbound | null | undefined;
        tax_id?: GiftCardTaxID$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardBillingDetails, z.ZodTypeDef, Inbound> = z
        .object({
            type: GiftCardBuyerBillingDetailsType$.optional(),
            first_name: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            email_address: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => GiftCardAddress$.inboundSchema)).optional(),
            tax_id: z.nullable(z.lazy(() => GiftCardTaxID$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.tax_id === undefined ? null : { taxId: v.tax_id }),
            };
        });

    export type Outbound = {
        type?: GiftCardBuyerBillingDetailsType | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: GiftCardAddress$.Outbound | null | undefined;
        tax_id?: GiftCardTaxID$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardBillingDetails> = z
        .object({
            type: GiftCardBuyerBillingDetailsType$.optional(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => GiftCardAddress$.outboundSchema)).optional(),
            taxId: z.nullable(z.lazy(() => GiftCardTaxID$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.taxId === undefined ? null : { tax_id: v.taxId }),
            };
        });
}

/** @internal */
export namespace GiftCardBuyer$ {
    export type Inbound = {
        type?: GiftCardBuyerType | undefined;
        id?: string | undefined;
        billing_details?: GiftCardBillingDetails$.Inbound | null | undefined;
        created_at?: string | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
        merchant_account_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCardBuyer, z.ZodTypeDef, Inbound> = z
        .object({
            type: GiftCardBuyerType$.optional(),
            id: z.string().optional(),
            billing_details: z
                .nullable(z.lazy(() => GiftCardBillingDetails$.inboundSchema))
                .optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            display_name: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
            merchant_account_id: z.string().optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: GiftCardBuyerType | undefined;
        id?: string | undefined;
        billing_details?: GiftCardBillingDetails$.Outbound | null | undefined;
        created_at?: string | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
        merchant_account_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCardBuyer> = z
        .object({
            type: GiftCardBuyerType$.optional(),
            id: z.string().optional(),
            billingDetails: z
                .nullable(z.lazy(() => GiftCardBillingDetails$.outboundSchema))
                .optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            displayName: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            merchantAccountId: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace GiftCard$ {
    export type Inbound = {
        type?: GiftCardType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        service?: GiftCardService$.Inbound | undefined;
        bin?: string | undefined;
        sub_bin?: string | undefined;
        last4?: string | undefined;
        expiration_date?: string | null | undefined;
        buyer?: GiftCardBuyer$.Inbound | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GiftCard, z.ZodTypeDef, Inbound> = z
        .object({
            type: GiftCardType$.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            service: GiftCardService$.inboundSchema.optional(),
            bin: z.string().optional(),
            sub_bin: z.string().optional(),
            last4: z.string().optional(),
            expiration_date: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            buyer: z.nullable(z.lazy(() => GiftCardBuyer$.inboundSchema)).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.service === undefined ? null : { service: v.service }),
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.sub_bin === undefined ? null : { subBin: v.sub_bin }),
                ...(v.last4 === undefined ? null : { last4: v.last4 }),
                ...(v.expiration_date === undefined ? null : { expirationDate: v.expiration_date }),
                ...(v.buyer === undefined ? null : { buyer: v.buyer }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: GiftCardType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        service?: GiftCardService$.Outbound | undefined;
        bin?: string | undefined;
        sub_bin?: string | undefined;
        last4?: string | undefined;
        expiration_date?: string | null | undefined;
        buyer?: GiftCardBuyer$.Outbound | null | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GiftCard> = z
        .object({
            type: GiftCardType$.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            service: GiftCardService$.outboundSchema.optional(),
            bin: z.string().optional(),
            subBin: z.string().optional(),
            last4: z.string().optional(),
            expirationDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            buyer: z.nullable(z.lazy(() => GiftCardBuyer$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.service === undefined ? null : { service: v.service }),
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.subBin === undefined ? null : { sub_bin: v.subBin }),
                ...(v.last4 === undefined ? null : { last4: v.last4 }),
                ...(v.expirationDate === undefined ? null : { expiration_date: v.expirationDate }),
                ...(v.buyer === undefined ? null : { buyer: v.buyer }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
