/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    GiftCardService,
    GiftCardService$inboundSchema,
    GiftCardService$Outbound,
    GiftCardService$outboundSchema,
} from "./giftcardservice.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const GiftCardType = {
    GiftCard: "gift-card",
} as const;
/**
 * The type of this resource.
 */
export type GiftCardType = ClosedEnum<typeof GiftCardType>;

/**
 * The type of this resource. Is always `buyer`.
 */
export const GiftCardBuyerType = {
    Buyer: "buyer",
} as const;
/**
 * The type of this resource. Is always `buyer`.
 */
export type GiftCardBuyerType = ClosedEnum<typeof GiftCardBuyerType>;

/**
 * The type of this resource. Is always `billing-details`.
 */
export const GiftCardBuyerBillingDetailsType = {
    BillingDetails: "billing-details",
} as const;
/**
 * The type of this resource. Is always `billing-details`.
 */
export type GiftCardBuyerBillingDetailsType = ClosedEnum<typeof GiftCardBuyerBillingDetailsType>;

/**
 * The billing address of the buyer.
 */
export type GiftCardAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export const GiftCardKind = {
    AeTrn: "ae.trn",
    AuAbn: "au.abn",
    ArDni: "ar.dni",
    ArCuil: "ar.cuil",
    ArCuit: "ar.cuit",
    BrCnpj: "br.cnpj",
    BrCpf: "br.cpf",
    CaBn: "ca.bn",
    CaGstHst: "ca.gst_hst",
    CaPstBc: "ca.pst_bc",
    CaPstMb: "ca.pst_mb",
    CaPstSk: "ca.pst_sk",
    CaQst: "ca.qst",
    ChVat: "ch.vat",
    ClTin: "cl.tin",
    EsCif: "es.cif",
    EuVat: "eu.vat",
    GbVat: "gb.vat",
    HkBr: "hk.br",
    IdNik: "id.nik",
    IdNpwp: "id.npwp",
    InGst: "in.gst",
    JpCn: "jp.cn",
    JpRn: "jp.rn",
    KrBrn: "kr.brn",
    LiUid: "li.uid",
    MxCurp: "mx.curp",
    MyFrp: "my.frp",
    MyItn: "my.itn",
    MyNric: "my.nric",
    MySst: "my.sst",
    NoVat: "no.vat",
    NzGst: "nz.gst",
    PhTin: "ph.tin",
    RuInn: "ru.inn",
    RuKpp: "ru.kpp",
    SaVat: "sa.vat",
    SgGst: "sg.gst",
    SgUen: "sg.uen",
    ThId: "th.id",
    ThVat: "th.vat",
    TwVat: "tw.vat",
    UsEin: "us.ein",
    ZaVat: "za.vat",
} as const;
/**
 * The kind of tax ID.
 */
export type GiftCardKind = ClosedEnum<typeof GiftCardKind>;

/**
 * The tax information associated with the billing details.
 */
export type GiftCardTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: GiftCardKind;
};

/**
 * The billing details associated with a buyer.
 */
export type GiftCardBillingDetails = {
    /**
     * The type of this resource. Is always `billing-details`.
     */
    type?: GiftCardBuyerBillingDetailsType | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: GiftCardAddress | null | undefined;
    /**
     * The tax information associated with the billing details.
     */
    taxId?: GiftCardTaxID | null | undefined;
};

/**
 * The optional buyer for which this payment method has been stored.
 */
export type GiftCardBuyer = {
    /**
     * The type of this resource. Is always `buyer`.
     */
    type?: GiftCardBuyerType | undefined;
    /**
     * The unique Gr4vy ID for this buyer.
     */
    id?: string | undefined;
    /**
     * The billing details associated with a buyer.
     */
    billingDetails?: GiftCardBillingDetails | null | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * An external identifier that can be used to match the buyer against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/**
 * A gift card stored for a buyer, or used in a transaction.
 */
export type GiftCard = {
    /**
     * The type of this resource.
     */
    type?: GiftCardType | undefined;
    /**
     * The ID of this gift card.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * An configured gift card service.
     */
    service?: GiftCardService | undefined;
    /**
     * The first 6 digits of the full gift card number.
     */
    bin?: string | undefined;
    /**
     * The 3 digits after the `bin` of the full gift card number.
     */
    subBin?: string | undefined;
    /**
     * The last 4 digits for the gift card.
     */
    last4?: string | undefined;
    /**
     * The date and time when this gift card expires. This is a full
     *
     * @remarks
     * date/time and may be more accurate than the actual expiry date
     * received by the gift card service.
     */
    expirationDate?: Date | null | undefined;
    /**
     * The optional buyer for which this payment method has been stored.
     */
    buyer?: GiftCardBuyer | null | undefined;
    /**
     * The date and time when this gift card was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this gift card was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const GiftCardType$inboundSchema: z.ZodNativeEnum<typeof GiftCardType> =
    z.nativeEnum(GiftCardType);

/** @internal */
export const GiftCardType$outboundSchema: z.ZodNativeEnum<typeof GiftCardType> =
    GiftCardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardType$ {
    /** @deprecated use `GiftCardType$inboundSchema` instead. */
    export const inboundSchema = GiftCardType$inboundSchema;
    /** @deprecated use `GiftCardType$outboundSchema` instead. */
    export const outboundSchema = GiftCardType$outboundSchema;
}

/** @internal */
export const GiftCardBuyerType$inboundSchema: z.ZodNativeEnum<typeof GiftCardBuyerType> =
    z.nativeEnum(GiftCardBuyerType);

/** @internal */
export const GiftCardBuyerType$outboundSchema: z.ZodNativeEnum<typeof GiftCardBuyerType> =
    GiftCardBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardBuyerType$ {
    /** @deprecated use `GiftCardBuyerType$inboundSchema` instead. */
    export const inboundSchema = GiftCardBuyerType$inboundSchema;
    /** @deprecated use `GiftCardBuyerType$outboundSchema` instead. */
    export const outboundSchema = GiftCardBuyerType$outboundSchema;
}

/** @internal */
export const GiftCardBuyerBillingDetailsType$inboundSchema: z.ZodNativeEnum<
    typeof GiftCardBuyerBillingDetailsType
> = z.nativeEnum(GiftCardBuyerBillingDetailsType);

/** @internal */
export const GiftCardBuyerBillingDetailsType$outboundSchema: z.ZodNativeEnum<
    typeof GiftCardBuyerBillingDetailsType
> = GiftCardBuyerBillingDetailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardBuyerBillingDetailsType$ {
    /** @deprecated use `GiftCardBuyerBillingDetailsType$inboundSchema` instead. */
    export const inboundSchema = GiftCardBuyerBillingDetailsType$inboundSchema;
    /** @deprecated use `GiftCardBuyerBillingDetailsType$outboundSchema` instead. */
    export const outboundSchema = GiftCardBuyerBillingDetailsType$outboundSchema;
}

/** @internal */
export const GiftCardAddress$inboundSchema: z.ZodType<GiftCardAddress, z.ZodTypeDef, unknown> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postal_code: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        state_code: z.nullable(z.string()).optional(),
        house_number_or_name: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postal_code: "postalCode",
            state_code: "stateCode",
            house_number_or_name: "houseNumberOrName",
        });
    });

/** @internal */
export type GiftCardAddress$Outbound = {
    city?: string | null | undefined;
    country?: string | null | undefined;
    postal_code?: string | null | undefined;
    state?: string | null | undefined;
    state_code?: string | null | undefined;
    house_number_or_name?: string | null | undefined;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    organization?: string | null | undefined;
};

/** @internal */
export const GiftCardAddress$outboundSchema: z.ZodType<
    GiftCardAddress$Outbound,
    z.ZodTypeDef,
    GiftCardAddress
> = z
    .object({
        city: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        postalCode: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        stateCode: z.nullable(z.string()).optional(),
        houseNumberOrName: z.nullable(z.string()).optional(),
        line1: z.nullable(z.string()).optional(),
        line2: z.nullable(z.string()).optional(),
        organization: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            postalCode: "postal_code",
            stateCode: "state_code",
            houseNumberOrName: "house_number_or_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardAddress$ {
    /** @deprecated use `GiftCardAddress$inboundSchema` instead. */
    export const inboundSchema = GiftCardAddress$inboundSchema;
    /** @deprecated use `GiftCardAddress$outboundSchema` instead. */
    export const outboundSchema = GiftCardAddress$outboundSchema;
    /** @deprecated use `GiftCardAddress$Outbound` instead. */
    export type Outbound = GiftCardAddress$Outbound;
}

/** @internal */
export const GiftCardKind$inboundSchema: z.ZodNativeEnum<typeof GiftCardKind> =
    z.nativeEnum(GiftCardKind);

/** @internal */
export const GiftCardKind$outboundSchema: z.ZodNativeEnum<typeof GiftCardKind> =
    GiftCardKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardKind$ {
    /** @deprecated use `GiftCardKind$inboundSchema` instead. */
    export const inboundSchema = GiftCardKind$inboundSchema;
    /** @deprecated use `GiftCardKind$outboundSchema` instead. */
    export const outboundSchema = GiftCardKind$outboundSchema;
}

/** @internal */
export const GiftCardTaxID$inboundSchema: z.ZodType<GiftCardTaxID, z.ZodTypeDef, unknown> =
    z.object({
        value: z.string(),
        kind: GiftCardKind$inboundSchema,
    });

/** @internal */
export type GiftCardTaxID$Outbound = {
    value: string;
    kind: string;
};

/** @internal */
export const GiftCardTaxID$outboundSchema: z.ZodType<
    GiftCardTaxID$Outbound,
    z.ZodTypeDef,
    GiftCardTaxID
> = z.object({
    value: z.string(),
    kind: GiftCardKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardTaxID$ {
    /** @deprecated use `GiftCardTaxID$inboundSchema` instead. */
    export const inboundSchema = GiftCardTaxID$inboundSchema;
    /** @deprecated use `GiftCardTaxID$outboundSchema` instead. */
    export const outboundSchema = GiftCardTaxID$outboundSchema;
    /** @deprecated use `GiftCardTaxID$Outbound` instead. */
    export type Outbound = GiftCardTaxID$Outbound;
}

/** @internal */
export const GiftCardBillingDetails$inboundSchema: z.ZodType<
    GiftCardBillingDetails,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: GiftCardBuyerBillingDetailsType$inboundSchema.optional(),
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email_address: z.nullable(z.string()).optional(),
        phone_number: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => GiftCardAddress$inboundSchema)).optional(),
        tax_id: z.nullable(z.lazy(() => GiftCardTaxID$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            email_address: "emailAddress",
            phone_number: "phoneNumber",
            tax_id: "taxId",
        });
    });

/** @internal */
export type GiftCardBillingDetails$Outbound = {
    type?: string | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email_address?: string | null | undefined;
    phone_number?: string | null | undefined;
    address?: GiftCardAddress$Outbound | null | undefined;
    tax_id?: GiftCardTaxID$Outbound | null | undefined;
};

/** @internal */
export const GiftCardBillingDetails$outboundSchema: z.ZodType<
    GiftCardBillingDetails$Outbound,
    z.ZodTypeDef,
    GiftCardBillingDetails
> = z
    .object({
        type: GiftCardBuyerBillingDetailsType$outboundSchema.optional(),
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        phoneNumber: z.nullable(z.string()).optional(),
        address: z.nullable(z.lazy(() => GiftCardAddress$outboundSchema)).optional(),
        taxId: z.nullable(z.lazy(() => GiftCardTaxID$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            emailAddress: "email_address",
            phoneNumber: "phone_number",
            taxId: "tax_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardBillingDetails$ {
    /** @deprecated use `GiftCardBillingDetails$inboundSchema` instead. */
    export const inboundSchema = GiftCardBillingDetails$inboundSchema;
    /** @deprecated use `GiftCardBillingDetails$outboundSchema` instead. */
    export const outboundSchema = GiftCardBillingDetails$outboundSchema;
    /** @deprecated use `GiftCardBillingDetails$Outbound` instead. */
    export type Outbound = GiftCardBillingDetails$Outbound;
}

/** @internal */
export const GiftCardBuyer$inboundSchema: z.ZodType<GiftCardBuyer, z.ZodTypeDef, unknown> = z
    .object({
        type: GiftCardBuyerType$inboundSchema.optional(),
        id: z.string().optional(),
        billing_details: z.nullable(z.lazy(() => GiftCardBillingDetails$inboundSchema)).optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        display_name: z.nullable(z.string()).optional(),
        external_identifier: z.nullable(z.string()).optional(),
        merchant_account_id: z.string().optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            billing_details: "billingDetails",
            created_at: "createdAt",
            display_name: "displayName",
            external_identifier: "externalIdentifier",
            merchant_account_id: "merchantAccountId",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type GiftCardBuyer$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    billing_details?: GiftCardBillingDetails$Outbound | null | undefined;
    created_at?: string | undefined;
    display_name?: string | null | undefined;
    external_identifier?: string | null | undefined;
    merchant_account_id?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const GiftCardBuyer$outboundSchema: z.ZodType<
    GiftCardBuyer$Outbound,
    z.ZodTypeDef,
    GiftCardBuyer
> = z
    .object({
        type: GiftCardBuyerType$outboundSchema.optional(),
        id: z.string().optional(),
        billingDetails: z.nullable(z.lazy(() => GiftCardBillingDetails$outboundSchema)).optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        displayName: z.nullable(z.string()).optional(),
        externalIdentifier: z.nullable(z.string()).optional(),
        merchantAccountId: z.string().optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            billingDetails: "billing_details",
            createdAt: "created_at",
            displayName: "display_name",
            externalIdentifier: "external_identifier",
            merchantAccountId: "merchant_account_id",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardBuyer$ {
    /** @deprecated use `GiftCardBuyer$inboundSchema` instead. */
    export const inboundSchema = GiftCardBuyer$inboundSchema;
    /** @deprecated use `GiftCardBuyer$outboundSchema` instead. */
    export const outboundSchema = GiftCardBuyer$outboundSchema;
    /** @deprecated use `GiftCardBuyer$Outbound` instead. */
    export type Outbound = GiftCardBuyer$Outbound;
}

/** @internal */
export const GiftCard$inboundSchema: z.ZodType<GiftCard, z.ZodTypeDef, unknown> = z
    .object({
        type: GiftCardType$inboundSchema.optional(),
        id: z.string().optional(),
        merchant_account_id: z.string().optional(),
        service: GiftCardService$inboundSchema.optional(),
        bin: z.string().optional(),
        sub_bin: z.string().optional(),
        last4: z.string().optional(),
        expiration_date: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        buyer: z.nullable(z.lazy(() => GiftCardBuyer$inboundSchema)).optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            sub_bin: "subBin",
            expiration_date: "expirationDate",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type GiftCard$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    merchant_account_id?: string | undefined;
    service?: GiftCardService$Outbound | undefined;
    bin?: string | undefined;
    sub_bin?: string | undefined;
    last4?: string | undefined;
    expiration_date?: string | null | undefined;
    buyer?: GiftCardBuyer$Outbound | null | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const GiftCard$outboundSchema: z.ZodType<GiftCard$Outbound, z.ZodTypeDef, GiftCard> = z
    .object({
        type: GiftCardType$outboundSchema.optional(),
        id: z.string().optional(),
        merchantAccountId: z.string().optional(),
        service: GiftCardService$outboundSchema.optional(),
        bin: z.string().optional(),
        subBin: z.string().optional(),
        last4: z.string().optional(),
        expirationDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        buyer: z.nullable(z.lazy(() => GiftCardBuyer$outboundSchema)).optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            subBin: "sub_bin",
            expirationDate: "expiration_date",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCard$ {
    /** @deprecated use `GiftCard$inboundSchema` instead. */
    export const inboundSchema = GiftCard$inboundSchema;
    /** @deprecated use `GiftCard$outboundSchema` instead. */
    export const outboundSchema = GiftCard$outboundSchema;
    /** @deprecated use `GiftCard$Outbound` instead. */
    export type Outbound = GiftCard$Outbound;
}
