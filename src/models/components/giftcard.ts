/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Buyer,
  Buyer$inboundSchema,
  Buyer$Outbound,
  Buyer$outboundSchema,
} from "./buyer.js";
import {
  GiftCardService,
  GiftCardService$inboundSchema,
  GiftCardService$Outbound,
  GiftCardService$outboundSchema,
} from "./giftcardservice.js";

export type GiftCard = {
  /**
   * Always `gift-card`.
   */
  type?: "gift-card" | undefined;
  /**
   * The ID for the gift card.
   */
  id: string;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  giftCardService: GiftCardService;
  /**
   * The first 6 digits of the full gift card number.
   */
  bin: string;
  /**
   * The 3 digits after the `bin` of the full gift card number.
   */
  subBin: string;
  /**
   * The last 4 digits for the gift card.
   */
  last4: string;
  /**
   *  The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
   */
  expirationDate?: Date | null | undefined;
  /**
   * The buyer for which this gift card is stored.
   */
  buyer?: Buyer | null | undefined;
  /**
   * The date this gift card record was created at.
   */
  createdAt: Date;
  /**
   * The date this gift card record was last updated at.
   */
  updatedAt: Date;
};

/** @internal */
export const GiftCard$inboundSchema: z.ZodType<
  GiftCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("gift-card").default("gift-card"),
  id: z.string(),
  merchant_account_id: z.string(),
  gift_card_service: GiftCardService$inboundSchema,
  bin: z.string(),
  sub_bin: z.string(),
  last4: z.string(),
  expiration_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  buyer: z.nullable(Buyer$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "gift_card_service": "giftCardService",
    "sub_bin": "subBin",
    "expiration_date": "expirationDate",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GiftCard$Outbound = {
  type: "gift-card";
  id: string;
  merchant_account_id: string;
  gift_card_service: GiftCardService$Outbound;
  bin: string;
  sub_bin: string;
  last4: string;
  expiration_date?: string | null | undefined;
  buyer?: Buyer$Outbound | null | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GiftCard$outboundSchema: z.ZodType<
  GiftCard$Outbound,
  z.ZodTypeDef,
  GiftCard
> = z.object({
  type: z.literal("gift-card").default("gift-card" as const),
  id: z.string(),
  merchantAccountId: z.string(),
  giftCardService: GiftCardService$outboundSchema,
  bin: z.string(),
  subBin: z.string(),
  last4: z.string(),
  expirationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  buyer: z.nullable(Buyer$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    giftCardService: "gift_card_service",
    subBin: "sub_bin",
    expirationDate: "expiration_date",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCard$ {
  /** @deprecated use `GiftCard$inboundSchema` instead. */
  export const inboundSchema = GiftCard$inboundSchema;
  /** @deprecated use `GiftCard$outboundSchema` instead. */
  export const outboundSchema = GiftCard$outboundSchema;
  /** @deprecated use `GiftCard$Outbound` instead. */
  export type Outbound = GiftCard$Outbound;
}

export function giftCardToJSON(giftCard: GiftCard): string {
  return JSON.stringify(GiftCard$outboundSchema.parse(giftCard));
}

export function giftCardFromJSON(
  jsonString: string,
): SafeParseResult<GiftCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCard' from JSON`,
  );
}
