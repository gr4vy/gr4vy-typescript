/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingDetails,
  BillingDetails$inboundSchema,
  BillingDetails$Outbound,
  BillingDetails$outboundSchema,
} from "./billingdetails.js";

/**
 * Always `gift-card`.
 */
export const GiftCardType = {
  GiftCard: "gift-card",
} as const;
/**
 * Always `gift-card`.
 */
export type GiftCardType = ClosedEnum<typeof GiftCardType>;

/**
 * Always `gift-card-service`.
 */
export const GiftCardGiftCardServiceType = {
  GiftCardService: "gift-card-service",
} as const;
/**
 * Always `gift-card-service`.
 */
export type GiftCardGiftCardServiceType = ClosedEnum<
  typeof GiftCardGiftCardServiceType
>;

/**
 * The ID of the definition for this service.
 */
export const GiftCardServiceProvider = {
  MockGiftCard: "mock-gift-card",
  QwikcilverGiftCard: "qwikcilver-gift-card",
} as const;
/**
 * The ID of the definition for this service.
 */
export type GiftCardServiceProvider = ClosedEnum<
  typeof GiftCardServiceProvider
>;

/**
 * The service this gift card belongs to.
 */
export type GiftCardService = {
  /**
   * Always `gift-card-service`.
   */
  type?: GiftCardGiftCardServiceType | undefined;
  /**
   * The ID for the gift card service.
   */
  id: string;
  /**
   * The ID of the definition for this service.
   */
  giftCardServiceDefinitionId: GiftCardServiceProvider;
  /**
   * The display name for the gift card service.
   */
  displayName: string;
};

/**
 * Always `buyer`.
 */
export const GiftCardBuyerType = {
  Buyer: "buyer",
} as const;
/**
 * Always `buyer`.
 */
export type GiftCardBuyerType = ClosedEnum<typeof GiftCardBuyerType>;

/**
 * The buyer for which this gift card is stored.
 */
export type GiftCardBuyer = {
  /**
   * Always `buyer`.
   */
  type?: GiftCardBuyerType | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | undefined;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * Base model with JSON encoders.
   */
  billingDetails?: BillingDetails | undefined;
  /**
   * The buyer account number
   */
  accountNumber?: string | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
};

/**
 * Base model with JSON encoders.
 */
export type GiftCard = {
  /**
   * Always `gift-card`.
   */
  type?: GiftCardType | undefined;
  /**
   * The ID for the gift card.
   */
  id: string;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * The service this gift card belongs to.
   */
  giftCardService: GiftCardService;
  /**
   * The first 6 digits of the full gift card number.
   */
  bin: string;
  /**
   * The 3 digits after the `bin` of the full gift card number.
   */
  subBin: string;
  /**
   * The last 4 digits for the gift card.
   */
  last4: string;
  /**
   *  The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
   */
  expirationDate?: Date | undefined;
  /**
   * The buyer for which this gift card is stored.
   */
  buyer?: GiftCardBuyer | undefined;
  /**
   * The date this gift card record was created at.
   */
  createdAt: Date;
  /**
   * The date this gift card record was last updated at.
   */
  updatedAt: Date;
};

/** @internal */
export const GiftCardType$inboundSchema: z.ZodNativeEnum<typeof GiftCardType> =
  z.nativeEnum(GiftCardType);

/** @internal */
export const GiftCardType$outboundSchema: z.ZodNativeEnum<typeof GiftCardType> =
  GiftCardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardType$ {
  /** @deprecated use `GiftCardType$inboundSchema` instead. */
  export const inboundSchema = GiftCardType$inboundSchema;
  /** @deprecated use `GiftCardType$outboundSchema` instead. */
  export const outboundSchema = GiftCardType$outboundSchema;
}

/** @internal */
export const GiftCardGiftCardServiceType$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardGiftCardServiceType
> = z.nativeEnum(GiftCardGiftCardServiceType);

/** @internal */
export const GiftCardGiftCardServiceType$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardGiftCardServiceType
> = GiftCardGiftCardServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardGiftCardServiceType$ {
  /** @deprecated use `GiftCardGiftCardServiceType$inboundSchema` instead. */
  export const inboundSchema = GiftCardGiftCardServiceType$inboundSchema;
  /** @deprecated use `GiftCardGiftCardServiceType$outboundSchema` instead. */
  export const outboundSchema = GiftCardGiftCardServiceType$outboundSchema;
}

/** @internal */
export const GiftCardServiceProvider$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardServiceProvider
> = z.nativeEnum(GiftCardServiceProvider);

/** @internal */
export const GiftCardServiceProvider$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardServiceProvider
> = GiftCardServiceProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardServiceProvider$ {
  /** @deprecated use `GiftCardServiceProvider$inboundSchema` instead. */
  export const inboundSchema = GiftCardServiceProvider$inboundSchema;
  /** @deprecated use `GiftCardServiceProvider$outboundSchema` instead. */
  export const outboundSchema = GiftCardServiceProvider$outboundSchema;
}

/** @internal */
export const GiftCardService$inboundSchema: z.ZodType<
  GiftCardService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GiftCardGiftCardServiceType$inboundSchema.default("gift-card-service"),
  id: z.string(),
  gift_card_service_definition_id: GiftCardServiceProvider$inboundSchema,
  display_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "gift_card_service_definition_id": "giftCardServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type GiftCardService$Outbound = {
  type: string;
  id: string;
  gift_card_service_definition_id: string;
  display_name: string;
};

/** @internal */
export const GiftCardService$outboundSchema: z.ZodType<
  GiftCardService$Outbound,
  z.ZodTypeDef,
  GiftCardService
> = z.object({
  type: GiftCardGiftCardServiceType$outboundSchema.default("gift-card-service"),
  id: z.string(),
  giftCardServiceDefinitionId: GiftCardServiceProvider$outboundSchema,
  displayName: z.string(),
}).transform((v) => {
  return remap$(v, {
    giftCardServiceDefinitionId: "gift_card_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardService$ {
  /** @deprecated use `GiftCardService$inboundSchema` instead. */
  export const inboundSchema = GiftCardService$inboundSchema;
  /** @deprecated use `GiftCardService$outboundSchema` instead. */
  export const outboundSchema = GiftCardService$outboundSchema;
  /** @deprecated use `GiftCardService$Outbound` instead. */
  export type Outbound = GiftCardService$Outbound;
}

export function giftCardServiceToJSON(
  giftCardService: GiftCardService,
): string {
  return JSON.stringify(GiftCardService$outboundSchema.parse(giftCardService));
}

export function giftCardServiceFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardService' from JSON`,
  );
}

/** @internal */
export const GiftCardBuyerType$inboundSchema: z.ZodNativeEnum<
  typeof GiftCardBuyerType
> = z.nativeEnum(GiftCardBuyerType);

/** @internal */
export const GiftCardBuyerType$outboundSchema: z.ZodNativeEnum<
  typeof GiftCardBuyerType
> = GiftCardBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardBuyerType$ {
  /** @deprecated use `GiftCardBuyerType$inboundSchema` instead. */
  export const inboundSchema = GiftCardBuyerType$inboundSchema;
  /** @deprecated use `GiftCardBuyerType$outboundSchema` instead. */
  export const outboundSchema = GiftCardBuyerType$outboundSchema;
}

/** @internal */
export const GiftCardBuyer$inboundSchema: z.ZodType<
  GiftCardBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GiftCardBuyerType$inboundSchema.default("buyer"),
  id: z.string().optional(),
  merchant_account_id: z.string(),
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: BillingDetails$inboundSchema.optional(),
  account_number: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
    "account_number": "accountNumber",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GiftCardBuyer$Outbound = {
  type: string;
  id?: string | undefined;
  merchant_account_id: string;
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: BillingDetails$Outbound | undefined;
  account_number?: string | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GiftCardBuyer$outboundSchema: z.ZodType<
  GiftCardBuyer$Outbound,
  z.ZodTypeDef,
  GiftCardBuyer
> = z.object({
  type: GiftCardBuyerType$outboundSchema.default("buyer"),
  id: z.string().optional(),
  merchantAccountId: z.string(),
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: BillingDetails$outboundSchema.optional(),
  accountNumber: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    accountNumber: "account_number",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCardBuyer$ {
  /** @deprecated use `GiftCardBuyer$inboundSchema` instead. */
  export const inboundSchema = GiftCardBuyer$inboundSchema;
  /** @deprecated use `GiftCardBuyer$outboundSchema` instead. */
  export const outboundSchema = GiftCardBuyer$outboundSchema;
  /** @deprecated use `GiftCardBuyer$Outbound` instead. */
  export type Outbound = GiftCardBuyer$Outbound;
}

export function giftCardBuyerToJSON(giftCardBuyer: GiftCardBuyer): string {
  return JSON.stringify(GiftCardBuyer$outboundSchema.parse(giftCardBuyer));
}

export function giftCardBuyerFromJSON(
  jsonString: string,
): SafeParseResult<GiftCardBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCardBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCardBuyer' from JSON`,
  );
}

/** @internal */
export const GiftCard$inboundSchema: z.ZodType<
  GiftCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GiftCardType$inboundSchema.default("gift-card"),
  id: z.string(),
  merchant_account_id: z.string(),
  gift_card_service: z.lazy(() => GiftCardService$inboundSchema),
  bin: z.string(),
  sub_bin: z.string(),
  last4: z.string(),
  expiration_date: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  buyer: z.lazy(() => GiftCardBuyer$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "gift_card_service": "giftCardService",
    "sub_bin": "subBin",
    "expiration_date": "expirationDate",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GiftCard$Outbound = {
  type: string;
  id: string;
  merchant_account_id: string;
  gift_card_service: GiftCardService$Outbound;
  bin: string;
  sub_bin: string;
  last4: string;
  expiration_date?: string | undefined;
  buyer?: GiftCardBuyer$Outbound | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GiftCard$outboundSchema: z.ZodType<
  GiftCard$Outbound,
  z.ZodTypeDef,
  GiftCard
> = z.object({
  type: GiftCardType$outboundSchema.default("gift-card"),
  id: z.string(),
  merchantAccountId: z.string(),
  giftCardService: z.lazy(() => GiftCardService$outboundSchema),
  bin: z.string(),
  subBin: z.string(),
  last4: z.string(),
  expirationDate: z.date().transform(v => v.toISOString()).optional(),
  buyer: z.lazy(() => GiftCardBuyer$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    giftCardService: "gift_card_service",
    subBin: "sub_bin",
    expirationDate: "expiration_date",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiftCard$ {
  /** @deprecated use `GiftCard$inboundSchema` instead. */
  export const inboundSchema = GiftCard$inboundSchema;
  /** @deprecated use `GiftCard$outboundSchema` instead. */
  export const outboundSchema = GiftCard$outboundSchema;
  /** @deprecated use `GiftCard$Outbound` instead. */
  export type Outbound = GiftCard$Outbound;
}

export function giftCardToJSON(giftCard: GiftCard): string {
  return JSON.stringify(GiftCard$outboundSchema.parse(giftCard));
}

export function giftCardFromJSON(
  jsonString: string,
): SafeParseResult<GiftCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiftCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiftCard' from JSON`,
  );
}
