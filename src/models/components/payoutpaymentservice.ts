/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PayoutPaymentService = {
  /**
   * Always `payment-service`.
   */
  type?: "payment-service" | undefined;
  /**
   * The ID for the payout service.
   */
  id?: string | null | undefined;
  /**
   * Always `card`.
   */
  method?: "card" | undefined;
  /**
   * The ID of the connection used for this payout.
   */
  paymentServiceDefinitionId: string;
  /**
   * The display name of the connection used for this payout.
   */
  displayName?: string | null | undefined;
};

/** @internal */
export const PayoutPaymentService$inboundSchema: z.ZodType<
  PayoutPaymentService,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("payment-service").default("payment-service"),
  id: z.nullable(z.string()).optional(),
  method: z.literal("card").default("card"),
  payment_service_definition_id: z.string(),
  display_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_service_definition_id": "paymentServiceDefinitionId",
    "display_name": "displayName",
  });
});

/** @internal */
export type PayoutPaymentService$Outbound = {
  type: "payment-service";
  id?: string | null | undefined;
  method: "card";
  payment_service_definition_id: string;
  display_name?: string | null | undefined;
};

/** @internal */
export const PayoutPaymentService$outboundSchema: z.ZodType<
  PayoutPaymentService$Outbound,
  z.ZodTypeDef,
  PayoutPaymentService
> = z.object({
  type: z.literal("payment-service").default("payment-service" as const),
  id: z.nullable(z.string()).optional(),
  method: z.literal("card").default("card" as const),
  paymentServiceDefinitionId: z.string(),
  displayName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentServiceDefinitionId: "payment_service_definition_id",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayoutPaymentService$ {
  /** @deprecated use `PayoutPaymentService$inboundSchema` instead. */
  export const inboundSchema = PayoutPaymentService$inboundSchema;
  /** @deprecated use `PayoutPaymentService$outboundSchema` instead. */
  export const outboundSchema = PayoutPaymentService$outboundSchema;
  /** @deprecated use `PayoutPaymentService$Outbound` instead. */
  export type Outbound = PayoutPaymentService$Outbound;
}

export function payoutPaymentServiceToJSON(
  payoutPaymentService: PayoutPaymentService,
): string {
  return JSON.stringify(
    PayoutPaymentService$outboundSchema.parse(payoutPaymentService),
  );
}

export function payoutPaymentServiceFromJSON(
  jsonString: string,
): SafeParseResult<PayoutPaymentService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayoutPaymentService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayoutPaymentService' from JSON`,
  );
}
