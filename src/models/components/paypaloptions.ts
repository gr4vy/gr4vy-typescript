/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaypalOptions = {
  /**
   * Additional Set Transaction Context Values (STC) to be sent to PayPal as part of the transaction.
   */
  additionalData?: Array<{ [k: string]: string }> | null | undefined;
};

/** @internal */
export const PaypalOptions$inboundSchema: z.ZodType<
  PaypalOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  additional_data: z.nullable(z.array(z.record(z.string()))).optional(),
}).transform((v) => {
  return remap$(v, {
    "additional_data": "additionalData",
  });
});

/** @internal */
export type PaypalOptions$Outbound = {
  additional_data?: Array<{ [k: string]: string }> | null | undefined;
};

/** @internal */
export const PaypalOptions$outboundSchema: z.ZodType<
  PaypalOptions$Outbound,
  z.ZodTypeDef,
  PaypalOptions
> = z.object({
  additionalData: z.nullable(z.array(z.record(z.string()))).optional(),
}).transform((v) => {
  return remap$(v, {
    additionalData: "additional_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaypalOptions$ {
  /** @deprecated use `PaypalOptions$inboundSchema` instead. */
  export const inboundSchema = PaypalOptions$inboundSchema;
  /** @deprecated use `PaypalOptions$outboundSchema` instead. */
  export const outboundSchema = PaypalOptions$outboundSchema;
  /** @deprecated use `PaypalOptions$Outbound` instead. */
  export type Outbound = PaypalOptions$Outbound;
}

export function paypalOptionsToJSON(paypalOptions: PaypalOptions): string {
  return JSON.stringify(PaypalOptions$outboundSchema.parse(paypalOptions));
}

export function paypalOptionsFromJSON(
  jsonString: string,
): SafeParseResult<PaypalOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaypalOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaypalOptions' from JSON`,
  );
}
