/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    ForceMITTransformationOutcome,
    ForceMITTransformationOutcome$inboundSchema,
    ForceMITTransformationOutcome$Outbound,
    ForceMITTransformationOutcome$outboundSchema,
} from "./forcemittransformationoutcome.js";
import {
    UseAdditionalSchemeTransformationOutcome,
    UseAdditionalSchemeTransformationOutcome$inboundSchema,
    UseAdditionalSchemeTransformationOutcome$Outbound,
    UseAdditionalSchemeTransformationOutcome$outboundSchema,
} from "./useadditionalschemetransformationoutcome.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-route`.
 */
export const FlowCardTransactionRoutingOutcomeType = {
    TransactionRoute: "transaction-route",
} as const;
/**
 * The type of this resource. Is always `transaction-route`.
 */
export type FlowCardTransactionRoutingOutcomeType = ClosedEnum<
    typeof FlowCardTransactionRoutingOutcomeType
>;

/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export const Instruments = {
    NetworkToken: "network_token",
    Pan: "pan",
} as const;
/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export type Instruments = ClosedEnum<typeof Instruments>;

export type Transformations =
    | ForceMITTransformationOutcome
    | UseAdditionalSchemeTransformationOutcome;

/**
 * Outcome for card transactions flow/routing action.
 *
 * @remarks
 * Each option is a Gr4vy payment service object.
 */
export type FlowCardTransactionRoutingOutcome = {
    /**
     * The type of this resource. Is always `transaction-route`.
     */
    type?: FlowCardTransactionRoutingOutcomeType | undefined;
    /**
     * Payment service identifier.
     */
    id?: string | undefined;
    /**
     * The display name of the payment service.
     */
    label?: string | undefined;
    /**
     * The status of the payment service.
     */
    active?: boolean | undefined;
    /**
     * Payment service icon URL.
     */
    iconUrl?: string | null | undefined;
    /**
     * Accepted currency ISO codes for the payment service.
     */
    countries?: Array<string> | undefined;
    /**
     * Accepted country ISO codes for the payment service.
     */
    currencies?: Array<string> | undefined;
    /**
     * Valid instruments that can be used for the payment service.
     *
     * @remarks
     *
     * Only instruments supported by the payment service will appear in the list.
     */
    instruments?: Array<Instruments> | undefined;
    /**
     * Valid transformations that can be used for the payment service.
     */
    transformations?:
        | Array<ForceMITTransformationOutcome | UseAdditionalSchemeTransformationOutcome>
        | undefined;
    /**
     * Indicates if Network Tokens are enabled for the payment service.
     */
    networkTokensEnabled?: boolean | undefined;
    /**
     * Indicates if Network Tokens feature is enabled for at least one scheme for the merchant account.
     */
    networkTokensSetupForMerchant?: boolean | undefined;
    /**
     * Indicates if the payment service is open loop or not.
     */
    openLoop?: boolean | undefined;
};

/** @internal */
export const FlowCardTransactionRoutingOutcomeType$inboundSchema: z.ZodNativeEnum<
    typeof FlowCardTransactionRoutingOutcomeType
> = z.nativeEnum(FlowCardTransactionRoutingOutcomeType);

/** @internal */
export const FlowCardTransactionRoutingOutcomeType$outboundSchema: z.ZodNativeEnum<
    typeof FlowCardTransactionRoutingOutcomeType
> = FlowCardTransactionRoutingOutcomeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCardTransactionRoutingOutcomeType$ {
    /** @deprecated use `FlowCardTransactionRoutingOutcomeType$inboundSchema` instead. */
    export const inboundSchema = FlowCardTransactionRoutingOutcomeType$inboundSchema;
    /** @deprecated use `FlowCardTransactionRoutingOutcomeType$outboundSchema` instead. */
    export const outboundSchema = FlowCardTransactionRoutingOutcomeType$outboundSchema;
}

/** @internal */
export const Instruments$inboundSchema: z.ZodNativeEnum<typeof Instruments> =
    z.nativeEnum(Instruments);

/** @internal */
export const Instruments$outboundSchema: z.ZodNativeEnum<typeof Instruments> =
    Instruments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Instruments$ {
    /** @deprecated use `Instruments$inboundSchema` instead. */
    export const inboundSchema = Instruments$inboundSchema;
    /** @deprecated use `Instruments$outboundSchema` instead. */
    export const outboundSchema = Instruments$outboundSchema;
}

/** @internal */
export const Transformations$inboundSchema: z.ZodType<Transformations, z.ZodTypeDef, unknown> =
    z.union([
        ForceMITTransformationOutcome$inboundSchema,
        UseAdditionalSchemeTransformationOutcome$inboundSchema,
    ]);

/** @internal */
export type Transformations$Outbound =
    | ForceMITTransformationOutcome$Outbound
    | UseAdditionalSchemeTransformationOutcome$Outbound;

/** @internal */
export const Transformations$outboundSchema: z.ZodType<
    Transformations$Outbound,
    z.ZodTypeDef,
    Transformations
> = z.union([
    ForceMITTransformationOutcome$outboundSchema,
    UseAdditionalSchemeTransformationOutcome$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transformations$ {
    /** @deprecated use `Transformations$inboundSchema` instead. */
    export const inboundSchema = Transformations$inboundSchema;
    /** @deprecated use `Transformations$outboundSchema` instead. */
    export const outboundSchema = Transformations$outboundSchema;
    /** @deprecated use `Transformations$Outbound` instead. */
    export type Outbound = Transformations$Outbound;
}

/** @internal */
export const FlowCardTransactionRoutingOutcome$inboundSchema: z.ZodType<
    FlowCardTransactionRoutingOutcome,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: FlowCardTransactionRoutingOutcomeType$inboundSchema.optional(),
        id: z.string().optional(),
        label: z.string().optional(),
        active: z.boolean().optional(),
        icon_url: z.nullable(z.string()).optional(),
        countries: z.array(z.string()).optional(),
        currencies: z.array(z.string()).optional(),
        instruments: z.array(Instruments$inboundSchema).optional(),
        transformations: z
            .array(
                z.union([
                    ForceMITTransformationOutcome$inboundSchema,
                    UseAdditionalSchemeTransformationOutcome$inboundSchema,
                ])
            )
            .optional(),
        network_tokens_enabled: z.boolean().optional(),
        network_tokens_setup_for_merchant: z.boolean().optional(),
        open_loop: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            icon_url: "iconUrl",
            network_tokens_enabled: "networkTokensEnabled",
            network_tokens_setup_for_merchant: "networkTokensSetupForMerchant",
            open_loop: "openLoop",
        });
    });

/** @internal */
export type FlowCardTransactionRoutingOutcome$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    label?: string | undefined;
    active?: boolean | undefined;
    icon_url?: string | null | undefined;
    countries?: Array<string> | undefined;
    currencies?: Array<string> | undefined;
    instruments?: Array<string> | undefined;
    transformations?:
        | Array<
              | ForceMITTransformationOutcome$Outbound
              | UseAdditionalSchemeTransformationOutcome$Outbound
          >
        | undefined;
    network_tokens_enabled?: boolean | undefined;
    network_tokens_setup_for_merchant?: boolean | undefined;
    open_loop?: boolean | undefined;
};

/** @internal */
export const FlowCardTransactionRoutingOutcome$outboundSchema: z.ZodType<
    FlowCardTransactionRoutingOutcome$Outbound,
    z.ZodTypeDef,
    FlowCardTransactionRoutingOutcome
> = z
    .object({
        type: FlowCardTransactionRoutingOutcomeType$outboundSchema.optional(),
        id: z.string().optional(),
        label: z.string().optional(),
        active: z.boolean().optional(),
        iconUrl: z.nullable(z.string()).optional(),
        countries: z.array(z.string()).optional(),
        currencies: z.array(z.string()).optional(),
        instruments: z.array(Instruments$outboundSchema).optional(),
        transformations: z
            .array(
                z.union([
                    ForceMITTransformationOutcome$outboundSchema,
                    UseAdditionalSchemeTransformationOutcome$outboundSchema,
                ])
            )
            .optional(),
        networkTokensEnabled: z.boolean().optional(),
        networkTokensSetupForMerchant: z.boolean().optional(),
        openLoop: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            iconUrl: "icon_url",
            networkTokensEnabled: "network_tokens_enabled",
            networkTokensSetupForMerchant: "network_tokens_setup_for_merchant",
            openLoop: "open_loop",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowCardTransactionRoutingOutcome$ {
    /** @deprecated use `FlowCardTransactionRoutingOutcome$inboundSchema` instead. */
    export const inboundSchema = FlowCardTransactionRoutingOutcome$inboundSchema;
    /** @deprecated use `FlowCardTransactionRoutingOutcome$outboundSchema` instead. */
    export const outboundSchema = FlowCardTransactionRoutingOutcome$outboundSchema;
    /** @deprecated use `FlowCardTransactionRoutingOutcome$Outbound` instead. */
    export type Outbound = FlowCardTransactionRoutingOutcome$Outbound;
}
