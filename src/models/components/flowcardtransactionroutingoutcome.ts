/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import {
    ForceMITTransformationOutcome,
    ForceMITTransformationOutcome$,
} from "./forcemittransformationoutcome";
import {
    UseAdditionalSchemeTransformationOutcome,
    UseAdditionalSchemeTransformationOutcome$,
} from "./useadditionalschemetransformationoutcome";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-route`.
 */
export enum FlowCardTransactionRoutingOutcomeType {
    TransactionRoute = "transaction-route",
}

/**
 * The name of the instrument to be used to process the transaction.
 *
 * @remarks
 * For `pan`, if a Payment Service token is available, the API will use that
 * for stored payment methods.
 *
 */
export enum Instruments {
    NetworkToken = "network_token",
    Pan = "pan",
}

export type Transformations =
    | ForceMITTransformationOutcome
    | UseAdditionalSchemeTransformationOutcome;

/**
 * Outcome for card transactions flow/routing action.
 *
 * @remarks
 * Each option is a Gr4vy payment service object.
 */
export type FlowCardTransactionRoutingOutcome = {
    /**
     * The type of this resource. Is always `transaction-route`.
     */
    type?: FlowCardTransactionRoutingOutcomeType | undefined;
    /**
     * Payment service identifier.
     */
    id?: string | undefined;
    /**
     * The display name of the payment service.
     */
    label?: string | undefined;
    /**
     * The status of the payment service.
     */
    active?: boolean | undefined;
    /**
     * Payment service icon URL.
     */
    iconUrl?: string | null | undefined;
    /**
     * Accepted currency ISO codes for the payment service.
     */
    countries?: Array<string> | undefined;
    /**
     * Accepted country ISO codes for the payment service.
     */
    currencies?: Array<string> | undefined;
    /**
     * Valid instruments that can be used for the payment service.
     *
     * @remarks
     *
     * Only instruments supported by the payment service will appear in the list.
     */
    instruments?: Array<Instruments> | undefined;
    /**
     * Valid transformations that can be used for the payment service.
     */
    transformations?:
        | Array<ForceMITTransformationOutcome | UseAdditionalSchemeTransformationOutcome>
        | undefined;
    /**
     * Indicates if Network Tokens are enabled for the payment service.
     */
    networkTokensEnabled?: boolean | undefined;
    /**
     * Indicates if Network Tokens feature is enabled for at least one scheme for the merchant account.
     */
    networkTokensSetupForMerchant?: boolean | undefined;
    /**
     * Indicates if the payment service is open loop or not.
     */
    openLoop?: boolean | undefined;
};

/** @internal */
export namespace FlowCardTransactionRoutingOutcomeType$ {
    export const inboundSchema = z.nativeEnum(FlowCardTransactionRoutingOutcomeType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Instruments$ {
    export const inboundSchema = z.nativeEnum(Instruments);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Transformations$ {
    export const inboundSchema: z.ZodType<Transformations, z.ZodTypeDef, unknown> = z.union([
        ForceMITTransformationOutcome$.inboundSchema,
        UseAdditionalSchemeTransformationOutcome$.inboundSchema,
    ]);

    export type Outbound =
        | ForceMITTransformationOutcome$.Outbound
        | UseAdditionalSchemeTransformationOutcome$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transformations> = z.union([
        ForceMITTransformationOutcome$.outboundSchema,
        UseAdditionalSchemeTransformationOutcome$.outboundSchema,
    ]);
}

/** @internal */
export namespace FlowCardTransactionRoutingOutcome$ {
    export const inboundSchema: z.ZodType<
        FlowCardTransactionRoutingOutcome,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FlowCardTransactionRoutingOutcomeType$.inboundSchema.optional(),
            id: z.string().optional(),
            label: z.string().optional(),
            active: z.boolean().optional(),
            icon_url: z.nullable(z.string()).optional(),
            countries: z.array(z.string()).optional(),
            currencies: z.array(z.string()).optional(),
            instruments: z.array(Instruments$.inboundSchema).optional(),
            transformations: z
                .array(
                    z.union([
                        ForceMITTransformationOutcome$.inboundSchema,
                        UseAdditionalSchemeTransformationOutcome$.inboundSchema,
                    ])
                )
                .optional(),
            network_tokens_enabled: z.boolean().optional(),
            network_tokens_setup_for_merchant: z.boolean().optional(),
            open_loop: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                icon_url: "iconUrl",
                network_tokens_enabled: "networkTokensEnabled",
                network_tokens_setup_for_merchant: "networkTokensSetupForMerchant",
                open_loop: "openLoop",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        label?: string | undefined;
        active?: boolean | undefined;
        icon_url?: string | null | undefined;
        countries?: Array<string> | undefined;
        currencies?: Array<string> | undefined;
        instruments?: Array<string> | undefined;
        transformations?:
            | Array<
                  | ForceMITTransformationOutcome$.Outbound
                  | UseAdditionalSchemeTransformationOutcome$.Outbound
              >
            | undefined;
        network_tokens_enabled?: boolean | undefined;
        network_tokens_setup_for_merchant?: boolean | undefined;
        open_loop?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowCardTransactionRoutingOutcome
    > = z
        .object({
            type: FlowCardTransactionRoutingOutcomeType$.outboundSchema.optional(),
            id: z.string().optional(),
            label: z.string().optional(),
            active: z.boolean().optional(),
            iconUrl: z.nullable(z.string()).optional(),
            countries: z.array(z.string()).optional(),
            currencies: z.array(z.string()).optional(),
            instruments: z.array(Instruments$.outboundSchema).optional(),
            transformations: z
                .array(
                    z.union([
                        ForceMITTransformationOutcome$.outboundSchema,
                        UseAdditionalSchemeTransformationOutcome$.outboundSchema,
                    ])
                )
                .optional(),
            networkTokensEnabled: z.boolean().optional(),
            networkTokensSetupForMerchant: z.boolean().optional(),
            openLoop: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                iconUrl: "icon_url",
                networkTokensEnabled: "network_tokens_enabled",
                networkTokensSetupForMerchant: "network_tokens_setup_for_merchant",
                openLoop: "open_loop",
            });
        });
}
