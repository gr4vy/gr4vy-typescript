/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The method to use, this can be any of the methods that
 *
 * @remarks
 * support redirect requests.
 *
 * When storing a new payment method, only `gocardless` and `stripedd`
 * are currently supported.
 */
export enum RedirectRequestMethod {
    Paypal = "paypal",
    Banked = "banked",
    Bitpay = "bitpay",
    Gocardless = "gocardless",
    Stripedd = "stripedd",
}

/**
 * Details to register a new redirect payment method.
 */
export type RedirectRequest = {
    /**
     * The method to use, this can be any of the methods that
     *
     * @remarks
     * support redirect requests.
     *
     * When storing a new payment method, only `gocardless` and `stripedd`
     * are currently supported.
     */
    method: RedirectRequestMethod;
    /**
     * The redirect URL to redirect a buyer to after they have authorized their
     *
     * @remarks
     * transaction.
     */
    redirectUrl: string;
    /**
     * The ISO-4217 currency code to use this payment method for. This is
     *
     * @remarks
     * used to select the payment service to use.
     */
    currency: string;
    /**
     * The 2-letter ISO code of the country to use this payment method for.
     *
     * @remarks
     * This is used to select the payment service to use.
     */
    country: string;
    /**
     * An external identifier that can be used to match the account against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The ID of the buyer to associate this payment method to. If this field is
     *
     * @remarks
     * provided then the `buyer_external_identifier` field needs to be unset.
     */
    buyerId?: string | undefined;
    /**
     * The `external_identifier` of the buyer to associate this payment method
     *
     * @remarks
     * to. If this field is provided then the `buyer_id` field
     * needs to be unset.
     */
    buyerExternalIdentifier?: string | undefined;
};

/** @internal */
export const RedirectRequestMethod$: z.ZodNativeEnum<typeof RedirectRequestMethod> =
    z.nativeEnum(RedirectRequestMethod);

/** @internal */
export namespace RedirectRequest$ {
    export type Inbound = {
        method: RedirectRequestMethod;
        redirect_url: string;
        currency: string;
        country: string;
        external_identifier?: string | null | undefined;
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RedirectRequest, z.ZodTypeDef, Inbound> = z
        .object({
            method: RedirectRequestMethod$,
            redirect_url: z.string(),
            currency: z.string(),
            country: z.string(),
            external_identifier: z.nullable(z.string()).optional(),
            buyer_id: z.string().optional(),
            buyer_external_identifier: z.string().optional(),
        })
        .transform((v) => {
            return {
                method: v.method,
                redirectUrl: v.redirect_url,
                currency: v.currency,
                country: v.country,
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.buyer_id === undefined ? null : { buyerId: v.buyer_id }),
                ...(v.buyer_external_identifier === undefined
                    ? null
                    : { buyerExternalIdentifier: v.buyer_external_identifier }),
            };
        });

    export type Outbound = {
        method: RedirectRequestMethod;
        redirect_url: string;
        currency: string;
        country: string;
        external_identifier?: string | null | undefined;
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RedirectRequest> = z
        .object({
            method: RedirectRequestMethod$,
            redirectUrl: z.string(),
            currency: z.string(),
            country: z.string(),
            externalIdentifier: z.nullable(z.string()).optional(),
            buyerId: z.string().optional(),
            buyerExternalIdentifier: z.string().optional(),
        })
        .transform((v) => {
            return {
                method: v.method,
                redirect_url: v.redirectUrl,
                currency: v.currency,
                country: v.country,
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.buyerId === undefined ? null : { buyer_id: v.buyerId }),
                ...(v.buyerExternalIdentifier === undefined
                    ? null
                    : { buyer_external_identifier: v.buyerExternalIdentifier }),
            };
        });
}
