/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The method to use, this can be any of the methods that
 *
 * @remarks
 * support redirect requests.
 */
export const RedirectRequestMethod = {
    Paypal: "paypal",
    Banked: "banked",
    Bitpay: "bitpay",
    Gocardless: "gocardless",
    Stripedd: "stripedd",
} as const;
/**
 * The method to use, this can be any of the methods that
 *
 * @remarks
 * support redirect requests.
 */
export type RedirectRequestMethod = ClosedEnum<typeof RedirectRequestMethod>;

/**
 * Details to register a new redirect payment method.
 */
export type RedirectRequest = {
    /**
     * The method to use, this can be any of the methods that
     *
     * @remarks
     * support redirect requests.
     */
    method: RedirectRequestMethod;
    /**
     * The redirect URL to redirect a buyer to after they have authorized their
     *
     * @remarks
     * transaction.
     */
    redirectUrl: string;
    /**
     * The ISO-4217 currency code to use this payment method for. This is
     *
     * @remarks
     * used to select the payment service to use.
     */
    currency: string;
    /**
     * The 2-letter ISO code of the country to use this payment method for.
     *
     * @remarks
     * This is used to select the payment service to use.
     */
    country: string;
    /**
     * An external identifier that can be used to match the account against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The ID of the buyer to associate this payment method to. If this field is
     *
     * @remarks
     * provided then the `buyer_external_identifier` field needs to be unset.
     */
    buyerId?: string | undefined;
    /**
     * The `external_identifier` of the buyer to associate this payment method
     *
     * @remarks
     * to. If this field is provided then the `buyer_id` field
     * needs to be unset.
     */
    buyerExternalIdentifier?: string | undefined;
};

/** @internal */
export const RedirectRequestMethod$inboundSchema: z.ZodNativeEnum<typeof RedirectRequestMethod> =
    z.nativeEnum(RedirectRequestMethod);

/** @internal */
export const RedirectRequestMethod$outboundSchema: z.ZodNativeEnum<typeof RedirectRequestMethod> =
    RedirectRequestMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectRequestMethod$ {
    /** @deprecated use `RedirectRequestMethod$inboundSchema` instead. */
    export const inboundSchema = RedirectRequestMethod$inboundSchema;
    /** @deprecated use `RedirectRequestMethod$outboundSchema` instead. */
    export const outboundSchema = RedirectRequestMethod$outboundSchema;
}

/** @internal */
export const RedirectRequest$inboundSchema: z.ZodType<RedirectRequest, z.ZodTypeDef, unknown> = z
    .object({
        method: RedirectRequestMethod$inboundSchema,
        redirect_url: z.string(),
        currency: z.string(),
        country: z.string(),
        external_identifier: z.nullable(z.string()).optional(),
        buyer_id: z.string().optional(),
        buyer_external_identifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            redirect_url: "redirectUrl",
            external_identifier: "externalIdentifier",
            buyer_id: "buyerId",
            buyer_external_identifier: "buyerExternalIdentifier",
        });
    });

/** @internal */
export type RedirectRequest$Outbound = {
    method: string;
    redirect_url: string;
    currency: string;
    country: string;
    external_identifier?: string | null | undefined;
    buyer_id?: string | undefined;
    buyer_external_identifier?: string | undefined;
};

/** @internal */
export const RedirectRequest$outboundSchema: z.ZodType<
    RedirectRequest$Outbound,
    z.ZodTypeDef,
    RedirectRequest
> = z
    .object({
        method: RedirectRequestMethod$outboundSchema,
        redirectUrl: z.string(),
        currency: z.string(),
        country: z.string(),
        externalIdentifier: z.nullable(z.string()).optional(),
        buyerId: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            redirectUrl: "redirect_url",
            externalIdentifier: "external_identifier",
            buyerId: "buyer_id",
            buyerExternalIdentifier: "buyer_external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectRequest$ {
    /** @deprecated use `RedirectRequest$inboundSchema` instead. */
    export const inboundSchema = RedirectRequest$inboundSchema;
    /** @deprecated use `RedirectRequest$outboundSchema` instead. */
    export const outboundSchema = RedirectRequest$outboundSchema;
    /** @deprecated use `RedirectRequest$Outbound` instead. */
    export type Outbound = RedirectRequest$Outbound;
}
