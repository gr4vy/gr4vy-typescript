/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates the frequency unit for the subscription. Allowed values are: `DAY`, `WEEK`, `MONTH`, `BI_MONTHLY`, `QUARTER`, `SEMI_ANNUALLY`, `YEAR`, `ONDEMAND`.
 */
export const SubscriptionFrequencyUnit = {
  Month: "MONTH",
  Week: "WEEK",
  BiMonthly: "BI_MONTHLY",
  Ondemand: "ONDEMAND",
  Quarter: "QUARTER",
  Year: "YEAR",
  SemiAnnually: "SEMI_ANNUALLY",
  Day: "DAY",
} as const;
/**
 * Indicates the frequency unit for the subscription. Allowed values are: `DAY`, `WEEK`, `MONTH`, `BI_MONTHLY`, `QUARTER`, `SEMI_ANNUALLY`, `YEAR`, `ONDEMAND`.
 */
export type SubscriptionFrequencyUnit = OpenEnum<
  typeof SubscriptionFrequencyUnit
>;

export type DlocalUPIRecurringInfoOptions = {
  /**
   * Indicates the frequency unit for the subscription. Allowed values are: `DAY`, `WEEK`, `MONTH`, `BI_MONTHLY`, `QUARTER`, `SEMI_ANNUALLY`, `YEAR`, `ONDEMAND`.
   */
  subscriptionFrequencyUnit: SubscriptionFrequencyUnit;
  /**
   * Indicates the frequency for the subscription.
   */
  subscriptionFrequency: number;
  /**
   * Indicates the start date for the subscription in format `YYYYMMDD`.
   */
  subscriptionStartAt: string;
  /**
   * Indicates the end date for the subscription in format `YYYYMMDD`.
   */
  subscriptionEndAt: string;
};

/** @internal */
export const SubscriptionFrequencyUnit$inboundSchema: z.ZodType<
  SubscriptionFrequencyUnit,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SubscriptionFrequencyUnit),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SubscriptionFrequencyUnit$outboundSchema: z.ZodType<
  SubscriptionFrequencyUnit,
  z.ZodTypeDef,
  SubscriptionFrequencyUnit
> = z.union([
  z.nativeEnum(SubscriptionFrequencyUnit),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionFrequencyUnit$ {
  /** @deprecated use `SubscriptionFrequencyUnit$inboundSchema` instead. */
  export const inboundSchema = SubscriptionFrequencyUnit$inboundSchema;
  /** @deprecated use `SubscriptionFrequencyUnit$outboundSchema` instead. */
  export const outboundSchema = SubscriptionFrequencyUnit$outboundSchema;
}

/** @internal */
export const DlocalUPIRecurringInfoOptions$inboundSchema: z.ZodType<
  DlocalUPIRecurringInfoOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_frequency_unit: SubscriptionFrequencyUnit$inboundSchema,
  subscription_frequency: z.number().int(),
  subscription_start_at: z.string(),
  subscription_end_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "subscription_frequency_unit": "subscriptionFrequencyUnit",
    "subscription_frequency": "subscriptionFrequency",
    "subscription_start_at": "subscriptionStartAt",
    "subscription_end_at": "subscriptionEndAt",
  });
});

/** @internal */
export type DlocalUPIRecurringInfoOptions$Outbound = {
  subscription_frequency_unit: string;
  subscription_frequency: number;
  subscription_start_at: string;
  subscription_end_at: string;
};

/** @internal */
export const DlocalUPIRecurringInfoOptions$outboundSchema: z.ZodType<
  DlocalUPIRecurringInfoOptions$Outbound,
  z.ZodTypeDef,
  DlocalUPIRecurringInfoOptions
> = z.object({
  subscriptionFrequencyUnit: SubscriptionFrequencyUnit$outboundSchema,
  subscriptionFrequency: z.number().int(),
  subscriptionStartAt: z.string(),
  subscriptionEndAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    subscriptionFrequencyUnit: "subscription_frequency_unit",
    subscriptionFrequency: "subscription_frequency",
    subscriptionStartAt: "subscription_start_at",
    subscriptionEndAt: "subscription_end_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DlocalUPIRecurringInfoOptions$ {
  /** @deprecated use `DlocalUPIRecurringInfoOptions$inboundSchema` instead. */
  export const inboundSchema = DlocalUPIRecurringInfoOptions$inboundSchema;
  /** @deprecated use `DlocalUPIRecurringInfoOptions$outboundSchema` instead. */
  export const outboundSchema = DlocalUPIRecurringInfoOptions$outboundSchema;
  /** @deprecated use `DlocalUPIRecurringInfoOptions$Outbound` instead. */
  export type Outbound = DlocalUPIRecurringInfoOptions$Outbound;
}

export function dlocalUPIRecurringInfoOptionsToJSON(
  dlocalUPIRecurringInfoOptions: DlocalUPIRecurringInfoOptions,
): string {
  return JSON.stringify(
    DlocalUPIRecurringInfoOptions$outboundSchema.parse(
      dlocalUPIRecurringInfoOptions,
    ),
  );
}

export function dlocalUPIRecurringInfoOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DlocalUPIRecurringInfoOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DlocalUPIRecurringInfoOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DlocalUPIRecurringInfoOptions' from JSON`,
  );
}
