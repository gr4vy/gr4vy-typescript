/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const NetworkTokenProvisionFailedType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type NetworkTokenProvisionFailedType = ClosedEnum<typeof NetworkTokenProvisionFailedType>;

/**
 * The name of this resource. Is always `network-token-provision-failed`.
 */
export const NetworkTokenProvisionFailedName = {
    NetworkTokenProvisionFailed: "network-token-provision-failed",
} as const;
/**
 * The name of this resource. Is always `network-token-provision-failed`.
 */
export type NetworkTokenProvisionFailedName = ClosedEnum<typeof NetworkTokenProvisionFailedName>;

/**
 * Additional context for this event.
 */
export type NetworkTokenProvisionFailedContext = {
    /**
     * The endpoint for the request, if performed.
     */
    url?: string | null | undefined;
    /**
     * The HTTP body sent to the Network Token provider, if performed.
     */
    request?: string | null | undefined;
    /**
     * The HTTP body received from the Network Token provider, if any.
     */
    response?: string | null | undefined;
    /**
     * The HTTP response status code from the Network Token provider, if any.
     */
    responseStatusCode?: number | null | undefined;
    /**
     * The reason we could not provision the network token.
     */
    reason?: string | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to provision a network token, in case the call failed.
 */
export type NetworkTokenProvisionFailed = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: NetworkTokenProvisionFailedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `network-token-provision-failed`.
     */
    name?: NetworkTokenProvisionFailedName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: NetworkTokenProvisionFailedContext | undefined;
};

/** @internal */
export const NetworkTokenProvisionFailedType$inboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionFailedType
> = z.nativeEnum(NetworkTokenProvisionFailedType);

/** @internal */
export const NetworkTokenProvisionFailedType$outboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionFailedType
> = NetworkTokenProvisionFailedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionFailedType$ {
    /** @deprecated use `NetworkTokenProvisionFailedType$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionFailedType$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionFailedType$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionFailedType$outboundSchema;
}

/** @internal */
export const NetworkTokenProvisionFailedName$inboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionFailedName
> = z.nativeEnum(NetworkTokenProvisionFailedName);

/** @internal */
export const NetworkTokenProvisionFailedName$outboundSchema: z.ZodNativeEnum<
    typeof NetworkTokenProvisionFailedName
> = NetworkTokenProvisionFailedName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionFailedName$ {
    /** @deprecated use `NetworkTokenProvisionFailedName$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionFailedName$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionFailedName$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionFailedName$outboundSchema;
}

/** @internal */
export const NetworkTokenProvisionFailedContext$inboundSchema: z.ZodType<
    NetworkTokenProvisionFailedContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        url: z.nullable(z.string()).optional(),
        request: z.nullable(z.string()).optional(),
        response: z.nullable(z.string()).optional(),
        response_status_code: z.nullable(z.number()).optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            response_status_code: "responseStatusCode",
        });
    });

/** @internal */
export type NetworkTokenProvisionFailedContext$Outbound = {
    url?: string | null | undefined;
    request?: string | null | undefined;
    response?: string | null | undefined;
    response_status_code?: number | null | undefined;
    reason?: string | undefined;
};

/** @internal */
export const NetworkTokenProvisionFailedContext$outboundSchema: z.ZodType<
    NetworkTokenProvisionFailedContext$Outbound,
    z.ZodTypeDef,
    NetworkTokenProvisionFailedContext
> = z
    .object({
        url: z.nullable(z.string()).optional(),
        request: z.nullable(z.string()).optional(),
        response: z.nullable(z.string()).optional(),
        responseStatusCode: z.nullable(z.number()).optional(),
        reason: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            responseStatusCode: "response_status_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionFailedContext$ {
    /** @deprecated use `NetworkTokenProvisionFailedContext$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionFailedContext$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionFailedContext$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionFailedContext$outboundSchema;
    /** @deprecated use `NetworkTokenProvisionFailedContext$Outbound` instead. */
    export type Outbound = NetworkTokenProvisionFailedContext$Outbound;
}

/** @internal */
export const NetworkTokenProvisionFailed$inboundSchema: z.ZodType<
    NetworkTokenProvisionFailed,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: NetworkTokenProvisionFailedType$inboundSchema.optional(),
        id: z.string().optional(),
        name: NetworkTokenProvisionFailedName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => NetworkTokenProvisionFailedContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type NetworkTokenProvisionFailed$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: NetworkTokenProvisionFailedContext$Outbound | undefined;
};

/** @internal */
export const NetworkTokenProvisionFailed$outboundSchema: z.ZodType<
    NetworkTokenProvisionFailed$Outbound,
    z.ZodTypeDef,
    NetworkTokenProvisionFailed
> = z
    .object({
        type: NetworkTokenProvisionFailedType$outboundSchema.optional(),
        id: z.string().optional(),
        name: NetworkTokenProvisionFailedName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => NetworkTokenProvisionFailedContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenProvisionFailed$ {
    /** @deprecated use `NetworkTokenProvisionFailed$inboundSchema` instead. */
    export const inboundSchema = NetworkTokenProvisionFailed$inboundSchema;
    /** @deprecated use `NetworkTokenProvisionFailed$outboundSchema` instead. */
    export const outboundSchema = NetworkTokenProvisionFailed$outboundSchema;
    /** @deprecated use `NetworkTokenProvisionFailed$Outbound` instead. */
    export type Outbound = NetworkTokenProvisionFailed$Outbound;
}
