/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum NetworkTokenProvisionFailedType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `network-token-provision-failed`.
 */
export enum NetworkTokenProvisionFailedName {
    NetworkTokenProvisionFailed = "network-token-provision-failed",
}

/**
 * Additional context for this event.
 */
export type NetworkTokenProvisionFailedContext = {
    /**
     * The endpoint for the request, if performed.
     */
    url?: string | null | undefined;
    /**
     * The HTTP body sent to the Network Token provider, if performed.
     */
    request?: string | null | undefined;
    /**
     * The HTTP body received from the Network Token provider, if any.
     */
    response?: string | null | undefined;
    /**
     * The HTTP response status code from the Network Token provider, if any.
     */
    responseStatusCode?: number | null | undefined;
    /**
     * The reason we could not provision the network token.
     */
    reason?: string | undefined;
};

/**
 * This event logs the request and response details of HTTP calls made to provision a network token, in case the call failed.
 */
export type NetworkTokenProvisionFailed = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: NetworkTokenProvisionFailedType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `network-token-provision-failed`.
     */
    name?: NetworkTokenProvisionFailedName | undefined;
    /**
     * The date and time when this event was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: NetworkTokenProvisionFailedContext | undefined;
};

/** @internal */
export namespace NetworkTokenProvisionFailedType$ {
    export const inboundSchema = z.nativeEnum(NetworkTokenProvisionFailedType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace NetworkTokenProvisionFailedName$ {
    export const inboundSchema = z.nativeEnum(NetworkTokenProvisionFailedName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace NetworkTokenProvisionFailedContext$ {
    export const inboundSchema: z.ZodType<
        NetworkTokenProvisionFailedContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            url: z.nullable(z.string()).optional(),
            request: z.nullable(z.string()).optional(),
            response: z.nullable(z.string()).optional(),
            response_status_code: z.nullable(z.number()).optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                response_status_code: "responseStatusCode",
            });
        });

    export type Outbound = {
        url?: string | null | undefined;
        request?: string | null | undefined;
        response?: string | null | undefined;
        response_status_code?: number | null | undefined;
        reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NetworkTokenProvisionFailedContext
    > = z
        .object({
            url: z.nullable(z.string()).optional(),
            request: z.nullable(z.string()).optional(),
            response: z.nullable(z.string()).optional(),
            responseStatusCode: z.nullable(z.number()).optional(),
            reason: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                responseStatusCode: "response_status_code",
            });
        });
}

/** @internal */
export namespace NetworkTokenProvisionFailed$ {
    export const inboundSchema: z.ZodType<NetworkTokenProvisionFailed, z.ZodTypeDef, unknown> = z
        .object({
            type: NetworkTokenProvisionFailedType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: NetworkTokenProvisionFailedName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => NetworkTokenProvisionFailedContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: NetworkTokenProvisionFailedContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NetworkTokenProvisionFailed> = z
        .object({
            type: NetworkTokenProvisionFailedType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: NetworkTokenProvisionFailedName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => NetworkTokenProvisionFailedContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
