/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowProductCategoriesConditionName {
    ProductCategories = "product_categories",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowProductCategoriesConditionOperator {
    IncludesAll = "includes_all",
    IncludesAtLeastOne = "includes_at_least_one",
    IncludesNone = "includes_none",
}

/**
 * Cart items' product categories conditions with a name, operator, and value.
 */
export type FlowProductCategoriesCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowProductCategoriesConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowProductCategoriesConditionOperator;
    /**
     * Cart items' product categories to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export namespace FlowProductCategoriesConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowProductCategoriesConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowProductCategoriesConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowProductCategoriesConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowProductCategoriesCondition$ {
    export const inboundSchema: z.ZodType<FlowProductCategoriesCondition, z.ZodTypeDef, unknown> =
        z.object({
            name: FlowProductCategoriesConditionName$.inboundSchema,
            operator: FlowProductCategoriesConditionOperator$.inboundSchema,
            value: z.array(z.string()),
        });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowProductCategoriesCondition> =
        z.object({
            name: FlowProductCategoriesConditionName$.outboundSchema,
            operator: FlowProductCategoriesConditionOperator$.outboundSchema,
            value: z.array(z.string()),
        });
}
