/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowProductCategoriesConditionName {
    ProductCategories = "product_categories",
}

/**
 * The comparison to make on the `value`.
 */
export enum FlowProductCategoriesConditionOperator {
    IncludesAll = "includes_all",
    IncludesAtLeastOne = "includes_at_least_one",
    IncludesNone = "includes_none",
}

/**
 * Cart items' product categories conditions with a name, operator, and value.
 */
export type FlowProductCategoriesCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowProductCategoriesConditionName;
    /**
     * The comparison to make on the `value`.
     */
    operator: FlowProductCategoriesConditionOperator;
    /**
     * Cart items' product categories to compare the transaction to.
     */
    value: Array<string>;
};

/** @internal */
export const FlowProductCategoriesConditionName$ = z.nativeEnum(FlowProductCategoriesConditionName);

/** @internal */
export const FlowProductCategoriesConditionOperator$ = z.nativeEnum(
    FlowProductCategoriesConditionOperator
);

/** @internal */
export namespace FlowProductCategoriesCondition$ {
    export type Inbound = {
        name: FlowProductCategoriesConditionName;
        operator: FlowProductCategoriesConditionOperator;
        value: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowProductCategoriesCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowProductCategoriesConditionName$,
            operator: FlowProductCategoriesConditionOperator$,
            value: z.array(z.string()),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowProductCategoriesConditionName;
        operator: FlowProductCategoriesConditionOperator;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowProductCategoriesCondition> =
        z
            .object({
                name: FlowProductCategoriesConditionName$,
                operator: FlowProductCategoriesConditionOperator$,
                value: z.array(z.string()),
            })
            .transform((v) => {
                return {
                    name: v.name,
                    operator: v.operator,
                    value: v.value,
                };
            });
}
