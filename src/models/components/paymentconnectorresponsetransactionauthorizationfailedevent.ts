/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `payment-connector-response-transaction-authorization-failed`.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventName {
    PaymentConnectorResponseTransactionAuthorizationFailed = "payment-connector-response-transaction-authorization-failed",
}

/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_failed`.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventStatus {
    AuthorizationFailed = "authorization_failed",
}

/**
 * The type of instrument used for this transaction.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType {
    Pan = "pan",
    CardToken = "card_token",
    Redirect = "redirect",
    RedirectToken = "redirect_token",
    Googlepay = "googlepay",
    Applepay = "applepay",
    NetworkToken = "network_token",
}

/**
 * Defines why the transaction might be retried. A retry is not guaranteed because
 *
 * @remarks
 * the maximum number of retries might already have been attempted.
 *
 * * `failure` - the transaction will be retried because of a failure calling
 *   the payment service.
 * * `retriable_decline` - the transaction will be retried because a decline code
 *   was received that can be retried.
 * * `payment_method_replacement` - the transaction will be retried because a
 *   decline code was received that triggered a payment method replacement.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule {
    Failure = "failure",
    RetriableDecline = "retriable_decline",
    PaymentMethodReplacement = "payment_method_replacement",
}

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode {
    NoMatch = "no_match",
    Match = "match",
    PartialMatchAddress = "partial_match_address",
    PartialMatchPostcode = "partial_match_postcode",
    Unavailable = "unavailable",
}

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode {
    NoMatch = "no_match",
    Match = "match",
    Unavailable = "unavailable",
}

/**
 * The card scheme sent to the connector.
 */
export enum PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The new status code for the transaction. This is always
     *
     * @remarks
     * set to `authorization_failed`.
     */
    status?: PaymentConnectorResponseTransactionAuthorizationFailedEventStatus | undefined;
    /**
     * A raw response code returned for the failure.
     */
    code?: string | null | undefined;
    /**
     * The type of instrument used for this transaction.
     */
    instrumentType?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType
        | undefined;
    /**
     * Defines why the transaction might be retried. A retry is not guaranteed because
     *
     * @remarks
     * the maximum number of retries might already have been attempted.
     *
     * * `failure` - the transaction will be retried because of a failure calling
     *   the payment service.
     * * `retriable_decline` - the transaction will be retried because a decline code
     *   was received that can be retried.
     * * `payment_method_replacement` - the transaction will be retried because a
     *   decline code was received that triggered a payment method replacement.
     */
    retryRule?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule
        | null
        | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a failed authorization
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionAuthorizationFailedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-authorization-failed`.
     */
    name?: PaymentConnectorResponseTransactionAuthorizationFailedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionAuthorizationFailedEventContext | undefined;
};

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventType$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventName$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventName
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventStatus
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$ {
    export const inboundSchema = z.nativeEnum(
        PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventContext$ {
    export const inboundSchema: z.ZodType<
        PaymentConnectorResponseTransactionAuthorizationFailedEventContext,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            payment_service_id: z.string().optional(),
            payment_service_display_name: z.string().optional(),
            payment_service_definition_id: z.string().optional(),
            payment_service_transaction_id: z.nullable(z.string()).optional(),
            status: PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$.inboundSchema.optional(),
            code: z.nullable(z.string()).optional(),
            instrument_type:
                PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$.inboundSchema.optional(),
            retry_rule: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$.inboundSchema
                )
                .optional(),
            raw_response_code: z.nullable(z.string()).optional(),
            raw_response_description: z.nullable(z.string()).optional(),
            avs_response_code: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$.inboundSchema
                )
                .optional(),
            cvv_response_code: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$.inboundSchema
                )
                .optional(),
            payment_method_scheme: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$.inboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_service_id: "paymentServiceId",
                payment_service_display_name: "paymentServiceDisplayName",
                payment_service_definition_id: "paymentServiceDefinitionId",
                payment_service_transaction_id: "paymentServiceTransactionId",
                instrument_type: "instrumentType",
                retry_rule: "retryRule",
                raw_response_code: "rawResponseCode",
                raw_response_description: "rawResponseDescription",
                avs_response_code: "avsResponseCode",
                cvv_response_code: "cvvResponseCode",
                payment_method_scheme: "paymentMethodScheme",
            });
        });

    export type Outbound = {
        payment_service_id?: string | undefined;
        payment_service_display_name?: string | undefined;
        payment_service_definition_id?: string | undefined;
        payment_service_transaction_id?: string | null | undefined;
        status?: string | undefined;
        code?: string | null | undefined;
        instrument_type?: string | undefined;
        retry_rule?: string | null | undefined;
        raw_response_code?: string | null | undefined;
        raw_response_description?: string | null | undefined;
        avs_response_code?: string | null | undefined;
        cvv_response_code?: string | null | undefined;
        payment_method_scheme?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorResponseTransactionAuthorizationFailedEventContext
    > = z
        .object({
            paymentServiceId: z.string().optional(),
            paymentServiceDisplayName: z.string().optional(),
            paymentServiceDefinitionId: z.string().optional(),
            paymentServiceTransactionId: z.nullable(z.string()).optional(),
            status: PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$.outboundSchema.optional(),
            code: z.nullable(z.string()).optional(),
            instrumentType:
                PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$.outboundSchema.optional(),
            retryRule: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$.outboundSchema
                )
                .optional(),
            rawResponseCode: z.nullable(z.string()).optional(),
            rawResponseDescription: z.nullable(z.string()).optional(),
            avsResponseCode: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$.outboundSchema
                )
                .optional(),
            cvvResponseCode: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$.outboundSchema
                )
                .optional(),
            paymentMethodScheme: z
                .nullable(
                    PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$.outboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                paymentServiceId: "payment_service_id",
                paymentServiceDisplayName: "payment_service_display_name",
                paymentServiceDefinitionId: "payment_service_definition_id",
                paymentServiceTransactionId: "payment_service_transaction_id",
                instrumentType: "instrument_type",
                retryRule: "retry_rule",
                rawResponseCode: "raw_response_code",
                rawResponseDescription: "raw_response_description",
                avsResponseCode: "avs_response_code",
                cvvResponseCode: "cvv_response_code",
                paymentMethodScheme: "payment_method_scheme",
            });
        });
}

/** @internal */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEvent$ {
    export const inboundSchema: z.ZodType<
        PaymentConnectorResponseTransactionAuthorizationFailedEvent,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: PaymentConnectorResponseTransactionAuthorizationFailedEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: PaymentConnectorResponseTransactionAuthorizationFailedEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z
                .lazy(
                    () =>
                        PaymentConnectorResponseTransactionAuthorizationFailedEventContext$.inboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?:
            | PaymentConnectorResponseTransactionAuthorizationFailedEventContext$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaymentConnectorResponseTransactionAuthorizationFailedEvent
    > = z
        .object({
            type: PaymentConnectorResponseTransactionAuthorizationFailedEventType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: PaymentConnectorResponseTransactionAuthorizationFailedEventName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z
                .lazy(
                    () =>
                        PaymentConnectorResponseTransactionAuthorizationFailedEventContext$.outboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
