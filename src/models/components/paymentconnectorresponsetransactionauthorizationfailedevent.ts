/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventType
>;

/**
 * The name of this resource. Is always `payment-connector-response-transaction-authorization-failed`.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventName = {
    PaymentConnectorResponseTransactionAuthorizationFailed:
        "payment-connector-response-transaction-authorization-failed",
} as const;
/**
 * The name of this resource. Is always `payment-connector-response-transaction-authorization-failed`.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventName = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventName
>;

/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_failed`.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventStatus = {
    AuthorizationFailed: "authorization_failed",
} as const;
/**
 * The new status code for the transaction. This is always
 *
 * @remarks
 * set to `authorization_failed`.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventStatus = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventStatus
>;

/**
 * The type of instrument used for this transaction.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType = {
    Pan: "pan",
    CardToken: "card_token",
    Redirect: "redirect",
    RedirectToken: "redirect_token",
    Googlepay: "googlepay",
    Applepay: "applepay",
    NetworkToken: "network_token",
} as const;
/**
 * The type of instrument used for this transaction.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType
>;

/**
 * Defines why the transaction might be retried. A retry is not guaranteed because
 *
 * @remarks
 * the maximum number of retries might already have been attempted.
 *
 * * `failure` - the transaction will be retried because of a failure calling
 *   the payment service.
 * * `retriable_decline` - the transaction will be retried because a decline code
 *   was received that can be retried.
 * * `payment_method_replacement` - the transaction will be retried because a
 *   decline code was received that triggered a payment method replacement.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule = {
    Failure: "failure",
    RetriableDecline: "retriable_decline",
    PaymentMethodReplacement: "payment_method_replacement",
} as const;
/**
 * Defines why the transaction might be retried. A retry is not guaranteed because
 *
 * @remarks
 * the maximum number of retries might already have been attempted.
 *
 * * `failure` - the transaction will be retried because of a failure calling
 *   the payment service.
 * * `retriable_decline` - the transaction will be retried because a decline code
 *   was received that can be retried.
 * * `payment_method_replacement` - the transaction will be retried because a
 *   decline code was received that triggered a payment method replacement.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule
>;

/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    PartialMatchAddress: "partial_match_address",
    PartialMatchPostcode: "partial_match_postcode",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Address
 *
 * @remarks
 * Verification Check (AVS). This code is mapped to a standardized Gr4vy
 * AVS response code.
 *
 * - `no_match` - neither address or postal code match
 * - `match` - both address and postal code match
 * - `partial_match_address` - address matches but postal code does not
 * - `partial_match_postcode` - postal code matches but address does not
 * - `unavailable ` - AVS is unavailable for card/country
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode
>;

/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode = {
    NoMatch: "no_match",
    Match: "match",
    Unavailable: "unavailable",
} as const;
/**
 * The response code received from the payment service for the Card
 *
 * @remarks
 * Verification Value (CVV). This code is mapped to a standardized Gr4vy
 * CVV response code.
 *
 * - `no_match` - the CVV does not match the expected value
 * - `match` - the CVV matches the expected value
 * - `unavailable ` - CVV check unavailable for card our country
 * - `not_provided ` - CVV not provided
 *
 * The value of this field can be `null` if the payment service did not
 * provide a response.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode = ClosedEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode
>;

/**
 * The card scheme sent to the connector.
 */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme = {
    Accel: "accel",
    Amex: "amex",
    Bancontact: "bancontact",
    CarteBancaire: "carte-bancaire",
    Cirrus: "cirrus",
    Culiance: "culiance",
    Dankort: "dankort",
    DinersClub: "diners-club",
    Discover: "discover",
    EftposAustralia: "eftpos-australia",
    Elo: "elo",
    Hipercard: "hipercard",
    Jcb: "jcb",
    Maestro: "maestro",
    Mastercard: "mastercard",
    Mir: "mir",
    Nyce: "nyce",
    Other: "other",
    Pulse: "pulse",
    Rupay: "rupay",
    Star: "star",
    Uatp: "uatp",
    Unionpay: "unionpay",
    Visa: "visa",
} as const;
/**
 * The card scheme sent to the connector.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme =
    ClosedEnum<
        typeof PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme
    >;

/**
 * Additional context for this event.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventContext = {
    /**
     * The unique ID of the payment service used.
     */
    paymentServiceId?: string | undefined;
    /**
     * The display name of the payment service used.
     */
    paymentServiceDisplayName?: string | undefined;
    /**
     * The payment service definition used.
     */
    paymentServiceDefinitionId?: string | undefined;
    /**
     * The external ID of the transaction as set by the payment service.
     */
    paymentServiceTransactionId?: string | null | undefined;
    /**
     * The new status code for the transaction. This is always
     *
     * @remarks
     * set to `authorization_failed`.
     */
    status?: PaymentConnectorResponseTransactionAuthorizationFailedEventStatus | undefined;
    /**
     * A raw response code returned for the failure.
     */
    code?: string | null | undefined;
    /**
     * The type of instrument used for this transaction.
     */
    instrumentType?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType
        | undefined;
    /**
     * Defines why the transaction might be retried. A retry is not guaranteed because
     *
     * @remarks
     * the maximum number of retries might already have been attempted.
     *
     * * `failure` - the transaction will be retried because of a failure calling
     *   the payment service.
     * * `retriable_decline` - the transaction will be retried because a decline code
     *   was received that can be retried.
     * * `payment_method_replacement` - the transaction will be retried because a
     *   decline code was received that triggered a payment method replacement.
     */
    retryRule?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule
        | null
        | undefined;
    /**
     * This is the response code received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseCode?: string | null | undefined;
    /**
     * This is the response description received from the payment service. This
     *
     * @remarks
     * can be set to any value and is not standardized across different
     * payment services.
     */
    rawResponseDescription?: string | null | undefined;
    /**
     * The response code received from the payment service for the Address
     *
     * @remarks
     * Verification Check (AVS). This code is mapped to a standardized Gr4vy
     * AVS response code.
     *
     * - `no_match` - neither address or postal code match
     * - `match` - both address and postal code match
     * - `partial_match_address` - address matches but postal code does not
     * - `partial_match_postcode` - postal code matches but address does not
     * - `unavailable ` - AVS is unavailable for card/country
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    avsResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode
        | null
        | undefined;
    /**
     * The response code received from the payment service for the Card
     *
     * @remarks
     * Verification Value (CVV). This code is mapped to a standardized Gr4vy
     * CVV response code.
     *
     * - `no_match` - the CVV does not match the expected value
     * - `match` - the CVV matches the expected value
     * - `unavailable ` - CVV check unavailable for card our country
     * - `not_provided ` - CVV not provided
     *
     * The value of this field can be `null` if the payment service did not
     * provide a response.
     */
    cvvResponseCode?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode
        | null
        | undefined;
    /**
     * The card scheme sent to the connector.
     */
    paymentMethodScheme?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme
        | null
        | undefined;
};

/**
 * This event logs the exact details parsed details for a failed authorization
 *
 * @remarks
 * as reported by our connector.
 */
export type PaymentConnectorResponseTransactionAuthorizationFailedEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: PaymentConnectorResponseTransactionAuthorizationFailedEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `payment-connector-response-transaction-authorization-failed`.
     */
    name?: PaymentConnectorResponseTransactionAuthorizationFailedEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * Additional context for this event.
     */
    context?: PaymentConnectorResponseTransactionAuthorizationFailedEventContext | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventType
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventType);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventType
> = PaymentConnectorResponseTransactionAuthorizationFailedEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventName$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventName
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventName);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventName$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventName
> = PaymentConnectorResponseTransactionAuthorizationFailedEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventName$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventName$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventName$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventName$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventName$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventStatus
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventStatus);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventStatus
> = PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType
> = PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule
> = PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode
> = PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode
> = PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$inboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme
> = z.nativeEnum(PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme);

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$outboundSchema: z.ZodNativeEnum<
    typeof PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme
> = PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$outboundSchema;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventContext$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationFailedEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_service_id: z.string().optional(),
        payment_service_display_name: z.string().optional(),
        payment_service_definition_id: z.string().optional(),
        payment_service_transaction_id: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$inboundSchema.optional(),
        code: z.nullable(z.string()).optional(),
        instrument_type:
            PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$inboundSchema.optional(),
        retry_rule: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$inboundSchema
            )
            .optional(),
        raw_response_code: z.nullable(z.string()).optional(),
        raw_response_description: z.nullable(z.string()).optional(),
        avs_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$inboundSchema
            )
            .optional(),
        cvv_response_code: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$inboundSchema
            )
            .optional(),
        payment_method_scheme: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_service_id: "paymentServiceId",
            payment_service_display_name: "paymentServiceDisplayName",
            payment_service_definition_id: "paymentServiceDefinitionId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            instrument_type: "instrumentType",
            retry_rule: "retryRule",
            raw_response_code: "rawResponseCode",
            raw_response_description: "rawResponseDescription",
            avs_response_code: "avsResponseCode",
            cvv_response_code: "cvvResponseCode",
            payment_method_scheme: "paymentMethodScheme",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionAuthorizationFailedEventContext$Outbound = {
    payment_service_id?: string | undefined;
    payment_service_display_name?: string | undefined;
    payment_service_definition_id?: string | undefined;
    payment_service_transaction_id?: string | null | undefined;
    status?: string | undefined;
    code?: string | null | undefined;
    instrument_type?: string | undefined;
    retry_rule?: string | null | undefined;
    raw_response_code?: string | null | undefined;
    raw_response_description?: string | null | undefined;
    avs_response_code?: string | null | undefined;
    cvv_response_code?: string | null | undefined;
    payment_method_scheme?: string | null | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEventContext$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationFailedEventContext$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionAuthorizationFailedEventContext
> = z
    .object({
        paymentServiceId: z.string().optional(),
        paymentServiceDisplayName: z.string().optional(),
        paymentServiceDefinitionId: z.string().optional(),
        paymentServiceTransactionId: z.nullable(z.string()).optional(),
        status: PaymentConnectorResponseTransactionAuthorizationFailedEventStatus$outboundSchema.optional(),
        code: z.nullable(z.string()).optional(),
        instrumentType:
            PaymentConnectorResponseTransactionAuthorizationFailedEventInstrumentType$outboundSchema.optional(),
        retryRule: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventRetryRule$outboundSchema
            )
            .optional(),
        rawResponseCode: z.nullable(z.string()).optional(),
        rawResponseDescription: z.nullable(z.string()).optional(),
        avsResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventAvsResponseCode$outboundSchema
            )
            .optional(),
        cvvResponseCode: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventCvvResponseCode$outboundSchema
            )
            .optional(),
        paymentMethodScheme: z
            .nullable(
                PaymentConnectorResponseTransactionAuthorizationFailedEventPaymentMethodScheme$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentServiceId: "payment_service_id",
            paymentServiceDisplayName: "payment_service_display_name",
            paymentServiceDefinitionId: "payment_service_definition_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            instrumentType: "instrument_type",
            retryRule: "retry_rule",
            rawResponseCode: "raw_response_code",
            rawResponseDescription: "raw_response_description",
            avsResponseCode: "avs_response_code",
            cvvResponseCode: "cvv_response_code",
            paymentMethodScheme: "payment_method_scheme",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEventContext$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventContext$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventContext$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventContext$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEventContext$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEventContext$Outbound` instead. */
    export type Outbound =
        PaymentConnectorResponseTransactionAuthorizationFailedEventContext$Outbound;
}

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEvent$inboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationFailedEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentConnectorResponseTransactionAuthorizationFailedEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionAuthorizationFailedEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z
            .lazy(
                () =>
                    PaymentConnectorResponseTransactionAuthorizationFailedEventContext$inboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type PaymentConnectorResponseTransactionAuthorizationFailedEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?:
        | PaymentConnectorResponseTransactionAuthorizationFailedEventContext$Outbound
        | undefined;
};

/** @internal */
export const PaymentConnectorResponseTransactionAuthorizationFailedEvent$outboundSchema: z.ZodType<
    PaymentConnectorResponseTransactionAuthorizationFailedEvent$Outbound,
    z.ZodTypeDef,
    PaymentConnectorResponseTransactionAuthorizationFailedEvent
> = z
    .object({
        type: PaymentConnectorResponseTransactionAuthorizationFailedEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: PaymentConnectorResponseTransactionAuthorizationFailedEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z
            .lazy(
                () =>
                    PaymentConnectorResponseTransactionAuthorizationFailedEventContext$outboundSchema
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentConnectorResponseTransactionAuthorizationFailedEvent$ {
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEvent$inboundSchema` instead. */
    export const inboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEvent$inboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEvent$outboundSchema` instead. */
    export const outboundSchema =
        PaymentConnectorResponseTransactionAuthorizationFailedEvent$outboundSchema;
    /** @deprecated use `PaymentConnectorResponseTransactionAuthorizationFailedEvent$Outbound` instead. */
    export type Outbound = PaymentConnectorResponseTransactionAuthorizationFailedEvent$Outbound;
}
