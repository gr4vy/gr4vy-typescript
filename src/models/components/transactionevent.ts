/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The specific event name.
 */
export const Name = {
  TransactionUpdatedStatus: "transaction-updated-status",
  TransactionSyncEvent: "transaction-sync-event",
  TransactionSyncFailedEvent: "transaction-sync-failed-event",
  TransactionModifiedEvent: "transaction-modified-event",
  TransactionApiRequest: "transaction-api-request",
  TransactionApiResponse: "transaction-api-response",
  BinLookupRequest: "bin-lookup-request",
  ThreeDSecureSuccess: "three-d-secure-success",
  ThreeDSecureRequestError: "three-d-secure-request-error",
  ThreeDSecurePreparationRequest: "three-d-secure-preparation-request",
  ThreeDSecureAuthenticationRequest: "three-d-secure-authentication-request",
  ThreeDSecureResultRequest: "three-d-secure-result-request",
  AntiFraudDecision: "anti-fraud-decision",
  AntiFraudDecisionError: "anti-fraud-decision-error",
  AntiFraudDecisionSkipped: "anti-fraud-decision-skipped",
  AntiFraudWebhook: "anti-fraud-webhook",
  AntiFraudTransactionStatusUpdate: "anti-fraud-transaction-status-update",
  AntiFraudTransactionStatusUpdateError:
    "anti-fraud-transaction-status-update-error",
  AntiFraudDecisionUpdate: "anti-fraud-decision-update",
  AntiFraudDecisionUpdateError: "anti-fraud-decision-update-error",
  GiftCardRedemptionSucceeded: "gift-card-redemption-succeeded",
  GiftCardRedemptionFailed: "gift-card-redemption-failed",
  GiftCardRefundSucceeded: "gift-card-refund-succeeded",
  GiftCardRefundFailed: "gift-card-refund-failed",
  GiftCardReversalSucceeded: "gift-card-reversal-succeeded",
  PaymentConnectorResponseTransactionAuthorizationSucceeded:
    "payment-connector-response-transaction-authorization-succeeded",
  PaymentConnectorResponseTransactionCaptureSucceeded:
    "payment-connector-response-transaction-capture-succeeded",
  PaymentConnectorResponseTransactionAuthorizationFailed:
    "payment-connector-response-transaction-authorization-failed",
  PaymentConnectorResponseTransactionDeclined:
    "payment-connector-response-transaction-declined",
  PaymentConnectorResponseTransactionCaptureFailed:
    "payment-connector-response-transaction-capture-failed",
  PaymentConnectorResponseTransactionCaptureDeclined:
    "payment-connector-response-transaction-capture-declined",
  PaymentConnectorResponseTransactionCancelSucceeded:
    "payment-connector-response-transaction-cancel-succeeded",
  PaymentConnectorResponseTransactionCancelFailed:
    "payment-connector-response-transaction-cancel-failed",
  PaymentConnectorResponseTransactionVoidSucceeded:
    "payment-connector-response-transaction-void-succeeded",
  PaymentConnectorResponseTransactionVoidDeclined:
    "payment-connector-response-transaction-void-declined",
  PaymentConnectorResponseTransactionVoidFailed:
    "payment-connector-response-transaction-void-failed",
  PaymentConnectorExternalTransactionRequest:
    "payment-connector-external-transaction-request",
  PaymentConnectorReportTransactionSettled:
    "payment-connector-report-transaction-settled",
  PaymentConnectorReportChargebackPosted:
    "payment-connector-report-chargeback-posted",
  PaymentConnectorReportChargebackReversalPosted:
    "payment-connector-report-chargeback-reversal-posted",
  DigitalWalletApplePayTokenDecrypted:
    "digital-wallet-apple-pay-token-decrypted",
  DigitalWalletGooglePayTokenDecrypted:
    "digital-wallet-google-pay-token-decrypted",
  DigitalWalletClickToPayTokenDecrypted:
    "digital-wallet-click-to-pay-token-decrypted",
  NetworkTokenProvisionSucceeded: "network-token-provision-succeeded",
  NetworkTokenProvisionFailed: "network-token-provision-failed",
  NetworkTokenCryptogramProvisionSucceeded:
    "network-token-cryptogram-provision-succeeded",
  NetworkTokenCryptogramProvisionFailed:
    "network-token-cryptogram-provision-failed",
  TheGivingBlockTransactionConversionSucceeded:
    "the-giving-block-transaction-conversion-succeeded",
  RealTimeAccountUpdate: "real-time-account-update",
} as const;
/**
 * The specific event name.
 */
export type Name = OpenEnum<typeof Name>;

export type TransactionEvent = {
  /**
   * Always `transaction-event`.
   */
  type?: "transaction-event" | undefined;
  /**
   * The ID for the event.
   */
  id: string;
  /**
   * The specific event name.
   */
  name: Name;
  /**
   * The date this event was created at.
   */
  createdAt: Date;
  context: { [k: string]: any };
};

/** @internal */
export const Name$inboundSchema: z.ZodType<Name, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Name),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Name$outboundSchema: z.ZodType<Name, z.ZodTypeDef, Name> = z.union(
  [
    z.nativeEnum(Name),
    z.string().and(z.custom<Unrecognized<string>>()),
  ],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
  /** @deprecated use `Name$inboundSchema` instead. */
  export const inboundSchema = Name$inboundSchema;
  /** @deprecated use `Name$outboundSchema` instead. */
  export const outboundSchema = Name$outboundSchema;
}

/** @internal */
export const TransactionEvent$inboundSchema: z.ZodType<
  TransactionEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("transaction-event").default("transaction-event"),
  id: z.string(),
  name: Name$inboundSchema,
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  context: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type TransactionEvent$Outbound = {
  type: "transaction-event";
  id: string;
  name: string;
  created_at: string;
  context: { [k: string]: any };
};

/** @internal */
export const TransactionEvent$outboundSchema: z.ZodType<
  TransactionEvent$Outbound,
  z.ZodTypeDef,
  TransactionEvent
> = z.object({
  type: z.literal("transaction-event").default("transaction-event" as const),
  id: z.string(),
  name: Name$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
  context: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEvent$ {
  /** @deprecated use `TransactionEvent$inboundSchema` instead. */
  export const inboundSchema = TransactionEvent$inboundSchema;
  /** @deprecated use `TransactionEvent$outboundSchema` instead. */
  export const outboundSchema = TransactionEvent$outboundSchema;
  /** @deprecated use `TransactionEvent$Outbound` instead. */
  export type Outbound = TransactionEvent$Outbound;
}

export function transactionEventToJSON(
  transactionEvent: TransactionEvent,
): string {
  return JSON.stringify(
    TransactionEvent$outboundSchema.parse(transactionEvent),
  );
}

export function transactionEventFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEvent' from JSON`,
  );
}
