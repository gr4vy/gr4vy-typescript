/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    TransactionEventContext,
    TransactionEventContext$inboundSchema,
    TransactionEventContext$Outbound,
    TransactionEventContext$outboundSchema,
} from "./transactioneventcontext.js";
import * as z from "zod";

export const TransactionEventType = {
    TransactionEvent: "transaction-event",
} as const;
export type TransactionEventType = ClosedEnum<typeof TransactionEventType>;

/**
 * Base model with JSON encoders.
 */
export type TransactionEvent = {
    type?: TransactionEventType | undefined;
    id: string;
    name: string;
    createdAt: Date;
    /**
     * Base model with JSON encoders.
     */
    context: TransactionEventContext;
};

/** @internal */
export const TransactionEventType$inboundSchema: z.ZodNativeEnum<typeof TransactionEventType> =
    z.nativeEnum(TransactionEventType);

/** @internal */
export const TransactionEventType$outboundSchema: z.ZodNativeEnum<typeof TransactionEventType> =
    TransactionEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEventType$ {
    /** @deprecated use `TransactionEventType$inboundSchema` instead. */
    export const inboundSchema = TransactionEventType$inboundSchema;
    /** @deprecated use `TransactionEventType$outboundSchema` instead. */
    export const outboundSchema = TransactionEventType$outboundSchema;
}

/** @internal */
export const TransactionEvent$inboundSchema: z.ZodType<TransactionEvent, z.ZodTypeDef, unknown> = z
    .object({
        type: TransactionEventType$inboundSchema.default("transaction-event"),
        id: z.string(),
        name: z.string(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        context: TransactionEventContext$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type TransactionEvent$Outbound = {
    type: string;
    id: string;
    name: string;
    created_at: string;
    context: TransactionEventContext$Outbound;
};

/** @internal */
export const TransactionEvent$outboundSchema: z.ZodType<
    TransactionEvent$Outbound,
    z.ZodTypeDef,
    TransactionEvent
> = z
    .object({
        type: TransactionEventType$outboundSchema.default("transaction-event"),
        id: z.string(),
        name: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        context: TransactionEventContext$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEvent$ {
    /** @deprecated use `TransactionEvent$inboundSchema` instead. */
    export const inboundSchema = TransactionEvent$inboundSchema;
    /** @deprecated use `TransactionEvent$outboundSchema` instead. */
    export const outboundSchema = TransactionEvent$outboundSchema;
    /** @deprecated use `TransactionEvent$Outbound` instead. */
    export type Outbound = TransactionEvent$Outbound;
}
