/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransactionRetriesReportSpec = {
  /**
   * The report model type.
   */
  model?: "transaction_retries" | undefined;
  /**
   * The parameters for the transaction retries report model.
   */
  params: { [k: string]: any };
};

/** @internal */
export const TransactionRetriesReportSpec$inboundSchema: z.ZodType<
  TransactionRetriesReportSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.literal("transaction_retries").default("transaction_retries"),
  params: z.record(z.any()),
});

/** @internal */
export type TransactionRetriesReportSpec$Outbound = {
  model: "transaction_retries";
  params: { [k: string]: any };
};

/** @internal */
export const TransactionRetriesReportSpec$outboundSchema: z.ZodType<
  TransactionRetriesReportSpec$Outbound,
  z.ZodTypeDef,
  TransactionRetriesReportSpec
> = z.object({
  model: z.literal("transaction_retries").default(
    "transaction_retries" as const,
  ),
  params: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionRetriesReportSpec$ {
  /** @deprecated use `TransactionRetriesReportSpec$inboundSchema` instead. */
  export const inboundSchema = TransactionRetriesReportSpec$inboundSchema;
  /** @deprecated use `TransactionRetriesReportSpec$outboundSchema` instead. */
  export const outboundSchema = TransactionRetriesReportSpec$outboundSchema;
  /** @deprecated use `TransactionRetriesReportSpec$Outbound` instead. */
  export type Outbound = TransactionRetriesReportSpec$Outbound;
}

export function transactionRetriesReportSpecToJSON(
  transactionRetriesReportSpec: TransactionRetriesReportSpec,
): string {
  return JSON.stringify(
    TransactionRetriesReportSpec$outboundSchema.parse(
      transactionRetriesReportSpec,
    ),
  );
}

export function transactionRetriesReportSpecFromJSON(
  jsonString: string,
): SafeParseResult<TransactionRetriesReportSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionRetriesReportSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionRetriesReportSpec' from JSON`,
  );
}
