/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DigitalWalletProvider,
  DigitalWalletProvider$inboundSchema,
  DigitalWalletProvider$outboundSchema,
} from "./digitalwalletprovider.js";

export type DigitalWallet = {
  /**
   * Always `digital-wallet`.
   */
  type?: "digital-wallet" | undefined;
  /**
   * The ID for the digital wallet.
   */
  id: string;
  /**
   * The ID of the merchant account this digital wallet belongs to.
   */
  merchantAccountId: string;
  provider: DigitalWalletProvider;
  /**
   * The name of the merchant the digital wallet is registered to.
   */
  merchantName: string;
  /**
   * The consumer facing name of the merchant.
   */
  merchantDisplayName?: string | null | undefined;
  /**
   * The main URL of the merchant.
   */
  merchantUrl?: string | null | undefined;
  /**
   * The country code where the merchant is registered.
   */
  merchantCountryCode?: string | null | undefined;
  /**
   * The list of domain names that a digital wallet can be used on (deprecated).
   */
  domainNames: Array<string>;
  /**
   * The number of active custom certificates registered for this digital wallet (Apple Pay only).
   */
  activeCertificateCount?: number | undefined;
  /**
   * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
   */
  pendingCertificateCount?: number | undefined;
  /**
   * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
   */
  expiredCertificateCount?: number | undefined;
  /**
   * Custom attributes for some digital wallets. Currently only used by Click to Pay.
   */
  fields?: { [k: string]: any } | null | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
};

/** @internal */
export const DigitalWallet$inboundSchema: z.ZodType<
  DigitalWallet,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("digital-wallet").default("digital-wallet"),
  id: z.string(),
  merchant_account_id: z.string(),
  provider: DigitalWalletProvider$inboundSchema,
  merchant_name: z.string(),
  merchant_display_name: z.nullable(z.string()).optional(),
  merchant_url: z.nullable(z.string()).optional(),
  merchant_country_code: z.nullable(z.string()).optional(),
  domain_names: z.array(z.string()),
  active_certificate_count: z.number().int().default(0),
  pending_certificate_count: z.number().int().default(0),
  expired_certificate_count: z.number().int().default(0),
  fields: z.nullable(z.record(z.any())).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "merchant_name": "merchantName",
    "merchant_display_name": "merchantDisplayName",
    "merchant_url": "merchantUrl",
    "merchant_country_code": "merchantCountryCode",
    "domain_names": "domainNames",
    "active_certificate_count": "activeCertificateCount",
    "pending_certificate_count": "pendingCertificateCount",
    "expired_certificate_count": "expiredCertificateCount",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type DigitalWallet$Outbound = {
  type: "digital-wallet";
  id: string;
  merchant_account_id: string;
  provider: string;
  merchant_name: string;
  merchant_display_name?: string | null | undefined;
  merchant_url?: string | null | undefined;
  merchant_country_code?: string | null | undefined;
  domain_names: Array<string>;
  active_certificate_count: number;
  pending_certificate_count: number;
  expired_certificate_count: number;
  fields?: { [k: string]: any } | null | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const DigitalWallet$outboundSchema: z.ZodType<
  DigitalWallet$Outbound,
  z.ZodTypeDef,
  DigitalWallet
> = z.object({
  type: z.literal("digital-wallet").default("digital-wallet" as const),
  id: z.string(),
  merchantAccountId: z.string(),
  provider: DigitalWalletProvider$outboundSchema,
  merchantName: z.string(),
  merchantDisplayName: z.nullable(z.string()).optional(),
  merchantUrl: z.nullable(z.string()).optional(),
  merchantCountryCode: z.nullable(z.string()).optional(),
  domainNames: z.array(z.string()),
  activeCertificateCount: z.number().int().default(0),
  pendingCertificateCount: z.number().int().default(0),
  expiredCertificateCount: z.number().int().default(0),
  fields: z.nullable(z.record(z.any())).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    merchantName: "merchant_name",
    merchantDisplayName: "merchant_display_name",
    merchantUrl: "merchant_url",
    merchantCountryCode: "merchant_country_code",
    domainNames: "domain_names",
    activeCertificateCount: "active_certificate_count",
    pendingCertificateCount: "pending_certificate_count",
    expiredCertificateCount: "expired_certificate_count",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWallet$ {
  /** @deprecated use `DigitalWallet$inboundSchema` instead. */
  export const inboundSchema = DigitalWallet$inboundSchema;
  /** @deprecated use `DigitalWallet$outboundSchema` instead. */
  export const outboundSchema = DigitalWallet$outboundSchema;
  /** @deprecated use `DigitalWallet$Outbound` instead. */
  export type Outbound = DigitalWallet$Outbound;
}

export function digitalWalletToJSON(digitalWallet: DigitalWallet): string {
  return JSON.stringify(DigitalWallet$outboundSchema.parse(digitalWallet));
}

export function digitalWalletFromJSON(
  jsonString: string,
): SafeParseResult<DigitalWallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DigitalWallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DigitalWallet' from JSON`,
  );
}
