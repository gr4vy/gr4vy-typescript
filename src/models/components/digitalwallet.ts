/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    DigitalWalletClickToPayFields,
    DigitalWalletClickToPayFields$,
} from "./digitalwalletclicktopayfields";
import * as z from "zod";

/**
 * `digital-wallet`.
 */
export enum DigitalWalletType {
    DigitalWallet = "digital-wallet",
}

/**
 * The name of the digital wallet provider.
 */
export enum DigitalWalletProvider {
    Apple = "apple",
    Google = "google",
}

/**
 * A digital wallet (e.g. Apple Pay) that has been registered.
 */
export type DigitalWallet = {
    /**
     * `digital-wallet`.
     */
    type?: DigitalWalletType | undefined;
    /**
     * The ID of the registered digital wallet.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The name of the digital wallet provider.
     */
    provider?: DigitalWalletProvider | undefined;
    /**
     * The name of the merchant the digital wallet is registered to.
     */
    merchantName?: string | undefined;
    /**
     * The main URL of the merchant.
     */
    merchantUrl?: string | null | undefined;
    /**
     * The consumer facing name of the merchant.
     */
    merchantDisplayName?: string | null | undefined;
    /**
     * The country code where the merchant is registered.
     */
    merchantCountryCode?: string | null | undefined;
    /**
     * The list of domain names that a digital wallet can be used on. To use a
     *
     * @remarks
     * digital wallet on a website, the domain of the site is required to be
     * in this list.
     */
    domainNames?: Array<string> | undefined;
    fields?: DigitalWalletClickToPayFields | undefined;
    /**
     * The date and time when this digital wallet was registered.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this digital wallet was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The number of active custom certificates registered for this digital wallet (Apple Pay only).
     */
    activeCertificateCount?: number | undefined;
    /**
     * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     */
    pendingCertificateCount?: number | undefined;
    /**
     * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     */
    expiredCertificateCount?: number | undefined;
};

/** @internal */
export const DigitalWalletType$ = z.nativeEnum(DigitalWalletType);

/** @internal */
export const DigitalWalletProvider$ = z.nativeEnum(DigitalWalletProvider);

/** @internal */
export namespace DigitalWallet$ {
    export type Inbound = {
        type?: DigitalWalletType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        provider?: DigitalWalletProvider | undefined;
        merchant_name?: string | undefined;
        merchant_url?: string | null | undefined;
        merchant_display_name?: string | null | undefined;
        merchant_country_code?: string | null | undefined;
        domain_names?: Array<string> | undefined;
        fields?: DigitalWalletClickToPayFields$.Inbound | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        active_certificate_count?: number | undefined;
        pending_certificate_count?: number | undefined;
        expired_certificate_count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<DigitalWallet, z.ZodTypeDef, Inbound> = z
        .object({
            type: DigitalWalletType$.optional(),
            id: z.string().optional(),
            merchant_account_id: z.string().optional(),
            provider: DigitalWalletProvider$.optional(),
            merchant_name: z.string().optional(),
            merchant_url: z.nullable(z.string()).default(null),
            merchant_display_name: z.nullable(z.string()).optional(),
            merchant_country_code: z.nullable(z.string()).optional(),
            domain_names: z.array(z.string()).optional(),
            fields: DigitalWalletClickToPayFields$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            active_certificate_count: z.number().int().optional(),
            pending_certificate_count: z.number().int().optional(),
            expired_certificate_count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.merchant_name === undefined ? null : { merchantName: v.merchant_name }),
                merchantUrl: v.merchant_url,
                ...(v.merchant_display_name === undefined
                    ? null
                    : { merchantDisplayName: v.merchant_display_name }),
                ...(v.merchant_country_code === undefined
                    ? null
                    : { merchantCountryCode: v.merchant_country_code }),
                ...(v.domain_names === undefined ? null : { domainNames: v.domain_names }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.active_certificate_count === undefined
                    ? null
                    : { activeCertificateCount: v.active_certificate_count }),
                ...(v.pending_certificate_count === undefined
                    ? null
                    : { pendingCertificateCount: v.pending_certificate_count }),
                ...(v.expired_certificate_count === undefined
                    ? null
                    : { expiredCertificateCount: v.expired_certificate_count }),
            };
        });

    export type Outbound = {
        type?: DigitalWalletType | undefined;
        id?: string | undefined;
        merchant_account_id?: string | undefined;
        provider?: DigitalWalletProvider | undefined;
        merchant_name?: string | undefined;
        merchant_url: string | null;
        merchant_display_name?: string | null | undefined;
        merchant_country_code?: string | null | undefined;
        domain_names?: Array<string> | undefined;
        fields?: DigitalWalletClickToPayFields$.Outbound | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        active_certificate_count?: number | undefined;
        pending_certificate_count?: number | undefined;
        expired_certificate_count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DigitalWallet> = z
        .object({
            type: DigitalWalletType$.optional(),
            id: z.string().optional(),
            merchantAccountId: z.string().optional(),
            provider: DigitalWalletProvider$.optional(),
            merchantName: z.string().optional(),
            merchantUrl: z.nullable(z.string()).default(null),
            merchantDisplayName: z.nullable(z.string()).optional(),
            merchantCountryCode: z.nullable(z.string()).optional(),
            domainNames: z.array(z.string()).optional(),
            fields: DigitalWalletClickToPayFields$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            activeCertificateCount: z.number().int().optional(),
            pendingCertificateCount: z.number().int().optional(),
            expiredCertificateCount: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.merchantName === undefined ? null : { merchant_name: v.merchantName }),
                merchant_url: v.merchantUrl,
                ...(v.merchantDisplayName === undefined
                    ? null
                    : { merchant_display_name: v.merchantDisplayName }),
                ...(v.merchantCountryCode === undefined
                    ? null
                    : { merchant_country_code: v.merchantCountryCode }),
                ...(v.domainNames === undefined ? null : { domain_names: v.domainNames }),
                ...(v.fields === undefined ? null : { fields: v.fields }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.activeCertificateCount === undefined
                    ? null
                    : { active_certificate_count: v.activeCertificateCount }),
                ...(v.pendingCertificateCount === undefined
                    ? null
                    : { pending_certificate_count: v.pendingCertificateCount }),
                ...(v.expiredCertificateCount === undefined
                    ? null
                    : { expired_certificate_count: v.expiredCertificateCount }),
            };
        });
}
