/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    DigitalWalletClickToPayFields,
    DigitalWalletClickToPayFields$inboundSchema,
    DigitalWalletClickToPayFields$Outbound,
    DigitalWalletClickToPayFields$outboundSchema,
} from "./digitalwalletclicktopayfields.js";
import * as z from "zod";

/**
 * `digital-wallet`.
 */
export const DigitalWalletType = {
    DigitalWallet: "digital-wallet",
} as const;
/**
 * `digital-wallet`.
 */
export type DigitalWalletType = ClosedEnum<typeof DigitalWalletType>;

/**
 * The name of the digital wallet provider.
 */
export const DigitalWalletProvider = {
    Apple: "apple",
    Google: "google",
} as const;
/**
 * The name of the digital wallet provider.
 */
export type DigitalWalletProvider = ClosedEnum<typeof DigitalWalletProvider>;

/**
 * A digital wallet (e.g. Apple Pay) that has been registered.
 */
export type DigitalWallet = {
    /**
     * `digital-wallet`.
     */
    type?: DigitalWalletType | undefined;
    /**
     * The ID of the registered digital wallet.
     */
    id?: string | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The name of the digital wallet provider.
     */
    provider?: DigitalWalletProvider | undefined;
    /**
     * The name of the merchant the digital wallet is registered to.
     */
    merchantName?: string | undefined;
    /**
     * The main URL of the merchant.
     */
    merchantUrl?: string | null | undefined;
    /**
     * The consumer facing name of the merchant.
     */
    merchantDisplayName?: string | null | undefined;
    /**
     * The country code where the merchant is registered.
     */
    merchantCountryCode?: string | null | undefined;
    /**
     * The list of domain names that a digital wallet can be used on. To use a
     *
     * @remarks
     * digital wallet on a website, the domain of the site is required to be
     * in this list.
     */
    domainNames?: Array<string> | undefined;
    fields?: DigitalWalletClickToPayFields | undefined;
    /**
     * The date and time when this digital wallet was registered.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this digital wallet was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The number of active custom certificates registered for this digital wallet (Apple Pay only).
     */
    activeCertificateCount?: number | undefined;
    /**
     * The number of pending custom certificates registered for this digital wallet (Apple Pay only).
     */
    pendingCertificateCount?: number | undefined;
    /**
     * The number of expired custom certificates registered for this digital wallet (Apple Pay only).
     */
    expiredCertificateCount?: number | undefined;
};

/** @internal */
export const DigitalWalletType$inboundSchema: z.ZodNativeEnum<typeof DigitalWalletType> =
    z.nativeEnum(DigitalWalletType);

/** @internal */
export const DigitalWalletType$outboundSchema: z.ZodNativeEnum<typeof DigitalWalletType> =
    DigitalWalletType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletType$ {
    /** @deprecated use `DigitalWalletType$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletType$inboundSchema;
    /** @deprecated use `DigitalWalletType$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletType$outboundSchema;
}

/** @internal */
export const DigitalWalletProvider$inboundSchema: z.ZodNativeEnum<typeof DigitalWalletProvider> =
    z.nativeEnum(DigitalWalletProvider);

/** @internal */
export const DigitalWalletProvider$outboundSchema: z.ZodNativeEnum<typeof DigitalWalletProvider> =
    DigitalWalletProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWalletProvider$ {
    /** @deprecated use `DigitalWalletProvider$inboundSchema` instead. */
    export const inboundSchema = DigitalWalletProvider$inboundSchema;
    /** @deprecated use `DigitalWalletProvider$outboundSchema` instead. */
    export const outboundSchema = DigitalWalletProvider$outboundSchema;
}

/** @internal */
export const DigitalWallet$inboundSchema: z.ZodType<DigitalWallet, z.ZodTypeDef, unknown> = z
    .object({
        type: DigitalWalletType$inboundSchema.optional(),
        id: z.string().optional(),
        merchant_account_id: z.string().optional(),
        provider: DigitalWalletProvider$inboundSchema.optional(),
        merchant_name: z.string().optional(),
        merchant_url: z.nullable(z.string()).default(null),
        merchant_display_name: z.nullable(z.string()).optional(),
        merchant_country_code: z.nullable(z.string()).optional(),
        domain_names: z.array(z.string()).optional(),
        fields: DigitalWalletClickToPayFields$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        active_certificate_count: z.number().int().optional(),
        pending_certificate_count: z.number().int().optional(),
        expired_certificate_count: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchant_account_id: "merchantAccountId",
            merchant_name: "merchantName",
            merchant_url: "merchantUrl",
            merchant_display_name: "merchantDisplayName",
            merchant_country_code: "merchantCountryCode",
            domain_names: "domainNames",
            created_at: "createdAt",
            updated_at: "updatedAt",
            active_certificate_count: "activeCertificateCount",
            pending_certificate_count: "pendingCertificateCount",
            expired_certificate_count: "expiredCertificateCount",
        });
    });

/** @internal */
export type DigitalWallet$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    merchant_account_id?: string | undefined;
    provider?: string | undefined;
    merchant_name?: string | undefined;
    merchant_url: string | null;
    merchant_display_name?: string | null | undefined;
    merchant_country_code?: string | null | undefined;
    domain_names?: Array<string> | undefined;
    fields?: DigitalWalletClickToPayFields$Outbound | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    active_certificate_count?: number | undefined;
    pending_certificate_count?: number | undefined;
    expired_certificate_count?: number | undefined;
};

/** @internal */
export const DigitalWallet$outboundSchema: z.ZodType<
    DigitalWallet$Outbound,
    z.ZodTypeDef,
    DigitalWallet
> = z
    .object({
        type: DigitalWalletType$outboundSchema.optional(),
        id: z.string().optional(),
        merchantAccountId: z.string().optional(),
        provider: DigitalWalletProvider$outboundSchema.optional(),
        merchantName: z.string().optional(),
        merchantUrl: z.nullable(z.string()).default(null),
        merchantDisplayName: z.nullable(z.string()).optional(),
        merchantCountryCode: z.nullable(z.string()).optional(),
        domainNames: z.array(z.string()).optional(),
        fields: DigitalWalletClickToPayFields$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        activeCertificateCount: z.number().int().optional(),
        pendingCertificateCount: z.number().int().optional(),
        expiredCertificateCount: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            merchantAccountId: "merchant_account_id",
            merchantName: "merchant_name",
            merchantUrl: "merchant_url",
            merchantDisplayName: "merchant_display_name",
            merchantCountryCode: "merchant_country_code",
            domainNames: "domain_names",
            createdAt: "created_at",
            updatedAt: "updated_at",
            activeCertificateCount: "active_certificate_count",
            pendingCertificateCount: "pending_certificate_count",
            expiredCertificateCount: "expired_certificate_count",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalWallet$ {
    /** @deprecated use `DigitalWallet$inboundSchema` instead. */
    export const inboundSchema = DigitalWallet$inboundSchema;
    /** @deprecated use `DigitalWallet$outboundSchema` instead. */
    export const outboundSchema = DigitalWallet$outboundSchema;
    /** @deprecated use `DigitalWallet$Outbound` instead. */
    export type Outbound = DigitalWallet$Outbound;
}
