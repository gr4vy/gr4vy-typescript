/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CartItem,
  CartItem$inboundSchema,
  CartItem$Outbound,
  CartItem$outboundSchema,
} from "./cartitem.js";
import {
  GuestBuyerInput,
  GuestBuyerInput$inboundSchema,
  GuestBuyerInput$Outbound,
  GuestBuyerInput$outboundSchema,
} from "./guestbuyerinput.js";
import {
  StatementDescriptor,
  StatementDescriptor$inboundSchema,
  StatementDescriptor$Outbound,
  StatementDescriptor$outboundSchema,
} from "./statementdescriptor.js";
import {
  TransactionConnectionOptions,
  TransactionConnectionOptions$inboundSchema,
  TransactionConnectionOptions$Outbound,
  TransactionConnectionOptions$outboundSchema,
} from "./transactionconnectionoptions.js";
import {
  TransactionIntent,
  TransactionIntent$inboundSchema,
  TransactionIntent$outboundSchema,
} from "./transactionintent.js";
import {
  TransactionPaymentSource,
  TransactionPaymentSource$inboundSchema,
  TransactionPaymentSource$outboundSchema,
} from "./transactionpaymentsource.js";

export const Locale = {
  En: "en",
  EnGB: "en-GB",
  Pt: "pt",
  PtBR: "pt-BR",
  Es: "es",
} as const;
export type Locale = OpenEnum<typeof Locale>;

export type PaymentLinkCreate = {
  /**
   * The guest buyer for the payment link.
   */
  buyer?: GuestBuyerInput | null | undefined;
  /**
   * The expiration date and time for the payment link.
   */
  expiresAt?: Date | null | undefined;
  /**
   * Connection options for the payment link.
   */
  connectionOptions?: TransactionConnectionOptions | null | undefined;
  /**
   * The merchant reference for the payment link.
   */
  externalIdentifier?: string | null | undefined;
  /**
   * The statement descriptor for the payment link.
   */
  statementDescriptor?: StatementDescriptor | null | undefined;
  /**
   * The locale for the payment link.
   */
  locale?: Locale | null | undefined;
  /**
   * The merchant's display name.
   */
  merchantName?: string | null | undefined;
  /**
   * The merchant's website URL.
   */
  merchantUrl?: string | null | undefined;
  /**
   * The merchant's banner image URL.
   */
  merchantBannerUrl?: string | null | undefined;
  /**
   * The merchant's brand color.
   */
  merchantColor?: string | null | undefined;
  /**
   * A message from the merchant.
   */
  merchantMessage?: string | null | undefined;
  /**
   * URL to the merchant's terms and conditions.
   */
  merchantTermsAndConditionsUrl?: string | null | undefined;
  /**
   * URL to the merchant's favicon.
   */
  merchantFaviconUrl?: string | null | undefined;
  /**
   * The amount for the payment link.
   */
  amount: number;
  /**
   * The country code for the payment link.
   */
  country: string;
  /**
   * The currency code for the payment link.
   */
  currency: string;
  intent?: TransactionIntent | undefined;
  /**
   * The return URL after payment completion.
   */
  returnUrl?: string | null | undefined;
  /**
   * The cart items for the payment link.
   */
  cartItems?: Array<CartItem> | null | undefined;
  /**
   * Arbitrary metadata for the payment link.
   */
  metadata?: { [k: string]: any } | null | undefined;
  /**
   * The way payment method information made it to this transaction.
   */
  paymentSource?: TransactionPaymentSource | undefined;
};

/** @internal */
export const Locale$inboundSchema: z.ZodType<Locale, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Locale),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Locale$outboundSchema: z.ZodType<Locale, z.ZodTypeDef, Locale> = z
  .union([
    z.nativeEnum(Locale),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Locale$ {
  /** @deprecated use `Locale$inboundSchema` instead. */
  export const inboundSchema = Locale$inboundSchema;
  /** @deprecated use `Locale$outboundSchema` instead. */
  export const outboundSchema = Locale$outboundSchema;
}

/** @internal */
export const PaymentLinkCreate$inboundSchema: z.ZodType<
  PaymentLinkCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  buyer: z.nullable(GuestBuyerInput$inboundSchema).optional(),
  expires_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  connection_options: z.nullable(TransactionConnectionOptions$inboundSchema)
    .optional(),
  external_identifier: z.nullable(z.string()).optional(),
  statement_descriptor: z.nullable(StatementDescriptor$inboundSchema)
    .optional(),
  locale: z.nullable(Locale$inboundSchema).optional(),
  merchant_name: z.nullable(z.string()).optional(),
  merchant_url: z.nullable(z.string()).optional(),
  merchant_banner_url: z.nullable(z.string()).optional(),
  merchant_color: z.nullable(z.string()).optional(),
  merchant_message: z.nullable(z.string()).optional(),
  merchant_terms_and_conditions_url: z.nullable(z.string()).optional(),
  merchant_favicon_url: z.nullable(z.string()).optional(),
  amount: z.number().int(),
  country: z.string(),
  currency: z.string(),
  intent: TransactionIntent$inboundSchema.optional(),
  return_url: z.nullable(z.string()).optional(),
  cart_items: z.nullable(z.array(CartItem$inboundSchema)).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  payment_source: TransactionPaymentSource$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
    "connection_options": "connectionOptions",
    "external_identifier": "externalIdentifier",
    "statement_descriptor": "statementDescriptor",
    "merchant_name": "merchantName",
    "merchant_url": "merchantUrl",
    "merchant_banner_url": "merchantBannerUrl",
    "merchant_color": "merchantColor",
    "merchant_message": "merchantMessage",
    "merchant_terms_and_conditions_url": "merchantTermsAndConditionsUrl",
    "merchant_favicon_url": "merchantFaviconUrl",
    "return_url": "returnUrl",
    "cart_items": "cartItems",
    "payment_source": "paymentSource",
  });
});

/** @internal */
export type PaymentLinkCreate$Outbound = {
  buyer?: GuestBuyerInput$Outbound | null | undefined;
  expires_at?: string | null | undefined;
  connection_options?: TransactionConnectionOptions$Outbound | null | undefined;
  external_identifier?: string | null | undefined;
  statement_descriptor?: StatementDescriptor$Outbound | null | undefined;
  locale?: string | null | undefined;
  merchant_name?: string | null | undefined;
  merchant_url?: string | null | undefined;
  merchant_banner_url?: string | null | undefined;
  merchant_color?: string | null | undefined;
  merchant_message?: string | null | undefined;
  merchant_terms_and_conditions_url?: string | null | undefined;
  merchant_favicon_url?: string | null | undefined;
  amount: number;
  country: string;
  currency: string;
  intent?: string | undefined;
  return_url?: string | null | undefined;
  cart_items?: Array<CartItem$Outbound> | null | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  payment_source?: string | undefined;
};

/** @internal */
export const PaymentLinkCreate$outboundSchema: z.ZodType<
  PaymentLinkCreate$Outbound,
  z.ZodTypeDef,
  PaymentLinkCreate
> = z.object({
  buyer: z.nullable(GuestBuyerInput$outboundSchema).optional(),
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  connectionOptions: z.nullable(TransactionConnectionOptions$outboundSchema)
    .optional(),
  externalIdentifier: z.nullable(z.string()).optional(),
  statementDescriptor: z.nullable(StatementDescriptor$outboundSchema)
    .optional(),
  locale: z.nullable(Locale$outboundSchema).optional(),
  merchantName: z.nullable(z.string()).optional(),
  merchantUrl: z.nullable(z.string()).optional(),
  merchantBannerUrl: z.nullable(z.string()).optional(),
  merchantColor: z.nullable(z.string()).optional(),
  merchantMessage: z.nullable(z.string()).optional(),
  merchantTermsAndConditionsUrl: z.nullable(z.string()).optional(),
  merchantFaviconUrl: z.nullable(z.string()).optional(),
  amount: z.number().int(),
  country: z.string(),
  currency: z.string(),
  intent: TransactionIntent$outboundSchema.optional(),
  returnUrl: z.nullable(z.string()).optional(),
  cartItems: z.nullable(z.array(CartItem$outboundSchema)).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  paymentSource: TransactionPaymentSource$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
    connectionOptions: "connection_options",
    externalIdentifier: "external_identifier",
    statementDescriptor: "statement_descriptor",
    merchantName: "merchant_name",
    merchantUrl: "merchant_url",
    merchantBannerUrl: "merchant_banner_url",
    merchantColor: "merchant_color",
    merchantMessage: "merchant_message",
    merchantTermsAndConditionsUrl: "merchant_terms_and_conditions_url",
    merchantFaviconUrl: "merchant_favicon_url",
    returnUrl: "return_url",
    cartItems: "cart_items",
    paymentSource: "payment_source",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentLinkCreate$ {
  /** @deprecated use `PaymentLinkCreate$inboundSchema` instead. */
  export const inboundSchema = PaymentLinkCreate$inboundSchema;
  /** @deprecated use `PaymentLinkCreate$outboundSchema` instead. */
  export const outboundSchema = PaymentLinkCreate$outboundSchema;
  /** @deprecated use `PaymentLinkCreate$Outbound` instead. */
  export type Outbound = PaymentLinkCreate$Outbound;
}

export function paymentLinkCreateToJSON(
  paymentLinkCreate: PaymentLinkCreate,
): string {
  return JSON.stringify(
    PaymentLinkCreate$outboundSchema.parse(paymentLinkCreate),
  );
}

export function paymentLinkCreateFromJSON(
  jsonString: string,
): SafeParseResult<PaymentLinkCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentLinkCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentLinkCreate' from JSON`,
  );
}
