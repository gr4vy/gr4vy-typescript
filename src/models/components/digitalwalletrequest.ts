/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The name of the digital wallet provider.
 */
export enum Provider {
    Apple = "apple",
    Google = "google",
}

/**
 * Merchant details used to register with a digital wallet provider.
 */
export type DigitalWalletRequest = {
    /**
     * The name of the digital wallet provider.
     */
    provider: Provider;
    /**
     * The name of the merchant. This is used to register the merchant with a
     *
     * @remarks
     * digital wallet provider and this name is not displayed to the buyer.
     */
    merchantName: string;
    /**
     * The main URL of the merchant.
     */
    merchantUrl?: string | null | undefined;
    /**
     * The consumer facing name of the merchant.
     */
    merchantDisplayName?: string | null | undefined;
    /**
     * The country code where the merchant is registered.
     */
    merchantCountryCode?: string | null | undefined;
    /**
     * The list of domain names that a digital wallet can be used on. To use a
     *
     * @remarks
     * digital wallet on a website, the domain of the site is required to be
     * in this list.
     */
    domainNames: Array<string>;
    /**
     * The explicit acceptance of the digital wallet provider's terms and
     *
     * @remarks
     * conditions by the merchant. Needs to be `true` to register a new digital
     * wallet.
     */
    acceptTermsAndConditions: boolean;
};

/** @internal */
export namespace Provider$ {
    export const inboundSchema = z.nativeEnum(Provider);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DigitalWalletRequest$ {
    export const inboundSchema: z.ZodType<DigitalWalletRequest, z.ZodTypeDef, unknown> = z
        .object({
            provider: Provider$.inboundSchema,
            merchant_name: z.string(),
            merchant_url: z.nullable(z.string()).default(null),
            merchant_display_name: z.nullable(z.string()).optional(),
            merchant_country_code: z.nullable(z.string()).optional(),
            domain_names: z.array(z.string()),
            accept_terms_and_conditions: z.boolean(),
        })
        .transform((v) => {
            return remap$(v, {
                merchant_name: "merchantName",
                merchant_url: "merchantUrl",
                merchant_display_name: "merchantDisplayName",
                merchant_country_code: "merchantCountryCode",
                domain_names: "domainNames",
                accept_terms_and_conditions: "acceptTermsAndConditions",
            });
        });

    export type Outbound = {
        provider: string;
        merchant_name: string;
        merchant_url: string | null;
        merchant_display_name?: string | null | undefined;
        merchant_country_code?: string | null | undefined;
        domain_names: Array<string>;
        accept_terms_and_conditions: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DigitalWalletRequest> = z
        .object({
            provider: Provider$.outboundSchema,
            merchantName: z.string(),
            merchantUrl: z.nullable(z.string()).default(null),
            merchantDisplayName: z.nullable(z.string()).optional(),
            merchantCountryCode: z.nullable(z.string()).optional(),
            domainNames: z.array(z.string()),
            acceptTermsAndConditions: z.boolean(),
        })
        .transform((v) => {
            return remap$(v, {
                merchantName: "merchant_name",
                merchantUrl: "merchant_url",
                merchantDisplayName: "merchant_display_name",
                merchantCountryCode: "merchant_country_code",
                domainNames: "domain_names",
                acceptTermsAndConditions: "accept_terms_and_conditions",
            });
        });
}
