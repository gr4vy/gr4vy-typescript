/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export const ThreeDSecureSuccessEventType = {
    TransactionEvent: "transaction-event",
} as const;
/**
 * The type of this resource. Is always `transaction-event`.
 */
export type ThreeDSecureSuccessEventType = ClosedEnum<typeof ThreeDSecureSuccessEventType>;

/**
 * The name of this resource. Is always `three-d-secure-success`.
 */
export const ThreeDSecureSuccessEventName = {
    ThreeDSecureSuccess: "three-d-secure-success",
} as const;
/**
 * The name of this resource. Is always `three-d-secure-success`.
 */
export type ThreeDSecureSuccessEventName = ClosedEnum<typeof ThreeDSecureSuccessEventName>;

/**
 * The method used for 3DS authentication for this transaction.
 */
export const ThreeDSecureSuccessEventMethod = {
    Challenge: "challenge",
    Frictionless: "frictionless",
} as const;
/**
 * The method used for 3DS authentication for this transaction.
 */
export type ThreeDSecureSuccessEventMethod = ClosedEnum<typeof ThreeDSecureSuccessEventMethod>;

/**
 * 3DS context.
 */
export type ThreeDSecureSuccessEventContext = {
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci?: string | undefined;
    /**
     * The cardholder authentication value or AAV.
     */
    cavv?: string | undefined;
    /**
     * The version of 3-D Secure that was used.
     */
    version?: string | undefined;
    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
     */
    directoryResponse?: string | undefined;
    /**
     * The transaction status from the challenge result (not required for frictionless).
     */
    authenticationResponse?: string | null | undefined;
    /**
     * The transaction identifier.
     */
    directoryTransactionId?: string | null | undefined;
    /**
     * The CAVV Algorithm used.
     */
    cavvAlgorithm?: string | null | undefined;
    /**
     * The method used for 3DS authentication for this transaction.
     */
    method?: ThreeDSecureSuccessEventMethod | null | undefined;
};

/**
 * Details related to 3DS processing.
 */
export type ThreeDSecureSuccessEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureSuccessEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-success`.
     */
    name?: ThreeDSecureSuccessEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS context.
     */
    context?: ThreeDSecureSuccessEventContext | undefined;
};

/** @internal */
export const ThreeDSecureSuccessEventType$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventType
> = z.nativeEnum(ThreeDSecureSuccessEventType);

/** @internal */
export const ThreeDSecureSuccessEventType$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventType
> = ThreeDSecureSuccessEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureSuccessEventType$ {
    /** @deprecated use `ThreeDSecureSuccessEventType$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureSuccessEventType$inboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEventType$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureSuccessEventType$outboundSchema;
}

/** @internal */
export const ThreeDSecureSuccessEventName$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventName
> = z.nativeEnum(ThreeDSecureSuccessEventName);

/** @internal */
export const ThreeDSecureSuccessEventName$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventName
> = ThreeDSecureSuccessEventName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureSuccessEventName$ {
    /** @deprecated use `ThreeDSecureSuccessEventName$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureSuccessEventName$inboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEventName$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureSuccessEventName$outboundSchema;
}

/** @internal */
export const ThreeDSecureSuccessEventMethod$inboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventMethod
> = z.nativeEnum(ThreeDSecureSuccessEventMethod);

/** @internal */
export const ThreeDSecureSuccessEventMethod$outboundSchema: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventMethod
> = ThreeDSecureSuccessEventMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureSuccessEventMethod$ {
    /** @deprecated use `ThreeDSecureSuccessEventMethod$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureSuccessEventMethod$inboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEventMethod$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureSuccessEventMethod$outboundSchema;
}

/** @internal */
export const ThreeDSecureSuccessEventContext$inboundSchema: z.ZodType<
    ThreeDSecureSuccessEventContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        eci: z.string().optional(),
        cavv: z.string().optional(),
        version: z.string().optional(),
        directory_response: z.string().optional(),
        authentication_response: z.nullable(z.string()).optional(),
        directory_transaction_id: z.nullable(z.string()).optional(),
        cavv_algorithm: z.nullable(z.string()).optional(),
        method: z.nullable(ThreeDSecureSuccessEventMethod$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            directory_response: "directoryResponse",
            authentication_response: "authenticationResponse",
            directory_transaction_id: "directoryTransactionId",
            cavv_algorithm: "cavvAlgorithm",
        });
    });

/** @internal */
export type ThreeDSecureSuccessEventContext$Outbound = {
    eci?: string | undefined;
    cavv?: string | undefined;
    version?: string | undefined;
    directory_response?: string | undefined;
    authentication_response?: string | null | undefined;
    directory_transaction_id?: string | null | undefined;
    cavv_algorithm?: string | null | undefined;
    method?: string | null | undefined;
};

/** @internal */
export const ThreeDSecureSuccessEventContext$outboundSchema: z.ZodType<
    ThreeDSecureSuccessEventContext$Outbound,
    z.ZodTypeDef,
    ThreeDSecureSuccessEventContext
> = z
    .object({
        eci: z.string().optional(),
        cavv: z.string().optional(),
        version: z.string().optional(),
        directoryResponse: z.string().optional(),
        authenticationResponse: z.nullable(z.string()).optional(),
        directoryTransactionId: z.nullable(z.string()).optional(),
        cavvAlgorithm: z.nullable(z.string()).optional(),
        method: z.nullable(ThreeDSecureSuccessEventMethod$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            directoryResponse: "directory_response",
            authenticationResponse: "authentication_response",
            directoryTransactionId: "directory_transaction_id",
            cavvAlgorithm: "cavv_algorithm",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureSuccessEventContext$ {
    /** @deprecated use `ThreeDSecureSuccessEventContext$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureSuccessEventContext$inboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEventContext$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureSuccessEventContext$outboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEventContext$Outbound` instead. */
    export type Outbound = ThreeDSecureSuccessEventContext$Outbound;
}

/** @internal */
export const ThreeDSecureSuccessEvent$inboundSchema: z.ZodType<
    ThreeDSecureSuccessEvent,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: ThreeDSecureSuccessEventType$inboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecureSuccessEventName$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        context: z.lazy(() => ThreeDSecureSuccessEventContext$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type ThreeDSecureSuccessEvent$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    created_at?: string | undefined;
    context?: ThreeDSecureSuccessEventContext$Outbound | undefined;
};

/** @internal */
export const ThreeDSecureSuccessEvent$outboundSchema: z.ZodType<
    ThreeDSecureSuccessEvent$Outbound,
    z.ZodTypeDef,
    ThreeDSecureSuccessEvent
> = z
    .object({
        type: ThreeDSecureSuccessEventType$outboundSchema.optional(),
        id: z.string().optional(),
        name: ThreeDSecureSuccessEventName$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        context: z.lazy(() => ThreeDSecureSuccessEventContext$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreeDSecureSuccessEvent$ {
    /** @deprecated use `ThreeDSecureSuccessEvent$inboundSchema` instead. */
    export const inboundSchema = ThreeDSecureSuccessEvent$inboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEvent$outboundSchema` instead. */
    export const outboundSchema = ThreeDSecureSuccessEvent$outboundSchema;
    /** @deprecated use `ThreeDSecureSuccessEvent$Outbound` instead. */
    export type Outbound = ThreeDSecureSuccessEvent$Outbound;
}
