/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum ThreeDSecureSuccessEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `three-d-secure-success`.
 */
export enum ThreeDSecureSuccessEventName {
    ThreeDSecureSuccess = "three-d-secure-success",
}

/**
 * The method used for 3DS authentication for this transaction.
 */
export enum ThreeDSecureSuccessEventMethod {
    Challenge = "challenge",
    Frictionless = "frictionless",
}

/**
 * 3DS context.
 */
export type ThreeDSecureSuccessEventContext = {
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci?: string | undefined;
    /**
     * The cardholder authentication value or AAV.
     */
    cavv?: string | undefined;
    /**
     * The version of 3-D Secure that was used.
     */
    version?: string | undefined;
    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
     */
    directoryResponse?: string | undefined;
    /**
     * The transaction status from the challenge result (not required for frictionless).
     */
    authenticationResponse?: string | null | undefined;
    /**
     * The transaction identifier.
     */
    directoryTransactionId?: string | null | undefined;
    /**
     * The CAVV Algorithm used.
     */
    cavvAlgorithm?: string | null | undefined;
    /**
     * The method used for 3DS authentication for this transaction.
     */
    method?: ThreeDSecureSuccessEventMethod | null | undefined;
};

/**
 * Details related to 3DS processing.
 */
export type ThreeDSecureSuccessEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureSuccessEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-success`.
     */
    name?: ThreeDSecureSuccessEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS context.
     */
    context?: ThreeDSecureSuccessEventContext | undefined;
};

/** @internal */
export const ThreeDSecureSuccessEventType$: z.ZodNativeEnum<typeof ThreeDSecureSuccessEventType> =
    z.nativeEnum(ThreeDSecureSuccessEventType);

/** @internal */
export const ThreeDSecureSuccessEventName$: z.ZodNativeEnum<typeof ThreeDSecureSuccessEventName> =
    z.nativeEnum(ThreeDSecureSuccessEventName);

/** @internal */
export const ThreeDSecureSuccessEventMethod$: z.ZodNativeEnum<
    typeof ThreeDSecureSuccessEventMethod
> = z.nativeEnum(ThreeDSecureSuccessEventMethod);

/** @internal */
export namespace ThreeDSecureSuccessEventContext$ {
    export type Inbound = {
        eci?: string | undefined;
        cavv?: string | undefined;
        version?: string | undefined;
        directory_response?: string | undefined;
        authentication_response?: string | null | undefined;
        directory_transaction_id?: string | null | undefined;
        cavv_algorithm?: string | null | undefined;
        method?: ThreeDSecureSuccessEventMethod | null | undefined;
    };

    export const inboundSchema: z.ZodType<ThreeDSecureSuccessEventContext, z.ZodTypeDef, Inbound> =
        z
            .object({
                eci: z.string().optional(),
                cavv: z.string().optional(),
                version: z.string().optional(),
                directory_response: z.string().optional(),
                authentication_response: z.nullable(z.string()).optional(),
                directory_transaction_id: z.nullable(z.string()).optional(),
                cavv_algorithm: z.nullable(z.string()).optional(),
                method: z.nullable(ThreeDSecureSuccessEventMethod$).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.eci === undefined ? null : { eci: v.eci }),
                    ...(v.cavv === undefined ? null : { cavv: v.cavv }),
                    ...(v.version === undefined ? null : { version: v.version }),
                    ...(v.directory_response === undefined
                        ? null
                        : { directoryResponse: v.directory_response }),
                    ...(v.authentication_response === undefined
                        ? null
                        : { authenticationResponse: v.authentication_response }),
                    ...(v.directory_transaction_id === undefined
                        ? null
                        : { directoryTransactionId: v.directory_transaction_id }),
                    ...(v.cavv_algorithm === undefined
                        ? null
                        : { cavvAlgorithm: v.cavv_algorithm }),
                    ...(v.method === undefined ? null : { method: v.method }),
                };
            });

    export type Outbound = {
        eci?: string | undefined;
        cavv?: string | undefined;
        version?: string | undefined;
        directory_response?: string | undefined;
        authentication_response?: string | null | undefined;
        directory_transaction_id?: string | null | undefined;
        cavv_algorithm?: string | null | undefined;
        method?: ThreeDSecureSuccessEventMethod | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureSuccessEventContext
    > = z
        .object({
            eci: z.string().optional(),
            cavv: z.string().optional(),
            version: z.string().optional(),
            directoryResponse: z.string().optional(),
            authenticationResponse: z.nullable(z.string()).optional(),
            directoryTransactionId: z.nullable(z.string()).optional(),
            cavvAlgorithm: z.nullable(z.string()).optional(),
            method: z.nullable(ThreeDSecureSuccessEventMethod$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.eci === undefined ? null : { eci: v.eci }),
                ...(v.cavv === undefined ? null : { cavv: v.cavv }),
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.directoryResponse === undefined
                    ? null
                    : { directory_response: v.directoryResponse }),
                ...(v.authenticationResponse === undefined
                    ? null
                    : { authentication_response: v.authenticationResponse }),
                ...(v.directoryTransactionId === undefined
                    ? null
                    : { directory_transaction_id: v.directoryTransactionId }),
                ...(v.cavvAlgorithm === undefined ? null : { cavv_algorithm: v.cavvAlgorithm }),
                ...(v.method === undefined ? null : { method: v.method }),
            };
        });
}

/** @internal */
export namespace ThreeDSecureSuccessEvent$ {
    export type Inbound = {
        type?: ThreeDSecureSuccessEventType | undefined;
        id?: string | undefined;
        name?: ThreeDSecureSuccessEventName | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureSuccessEventContext$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ThreeDSecureSuccessEvent, z.ZodTypeDef, Inbound> = z
        .object({
            type: ThreeDSecureSuccessEventType$.optional(),
            id: z.string().optional(),
            name: ThreeDSecureSuccessEventName$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => ThreeDSecureSuccessEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });

    export type Outbound = {
        type?: ThreeDSecureSuccessEventType | undefined;
        id?: string | undefined;
        name?: ThreeDSecureSuccessEventName | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureSuccessEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureSuccessEvent> = z
        .object({
            type: ThreeDSecureSuccessEventType$.optional(),
            id: z.string().optional(),
            name: ThreeDSecureSuccessEventName$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => ThreeDSecureSuccessEventContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.context === undefined ? null : { context: v.context }),
            };
        });
}
