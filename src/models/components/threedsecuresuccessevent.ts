/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `transaction-event`.
 */
export enum ThreeDSecureSuccessEventType {
    TransactionEvent = "transaction-event",
}

/**
 * The name of this resource. Is always `three-d-secure-success`.
 */
export enum ThreeDSecureSuccessEventName {
    ThreeDSecureSuccess = "three-d-secure-success",
}

/**
 * The method used for 3DS authentication for this transaction.
 */
export enum ThreeDSecureSuccessEventMethod {
    Challenge = "challenge",
    Frictionless = "frictionless",
}

/**
 * 3DS context.
 */
export type ThreeDSecureSuccessEventContext = {
    /**
     * The electronic commerce indicator for the 3DS transaction.
     */
    eci?: string | undefined;
    /**
     * The cardholder authentication value or AAV.
     */
    cavv?: string | undefined;
    /**
     * The version of 3-D Secure that was used.
     */
    version?: string | undefined;
    /**
     * For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
     */
    directoryResponse?: string | undefined;
    /**
     * The transaction status from the challenge result (not required for frictionless).
     */
    authenticationResponse?: string | null | undefined;
    /**
     * The transaction identifier.
     */
    directoryTransactionId?: string | null | undefined;
    /**
     * The CAVV Algorithm used.
     */
    cavvAlgorithm?: string | null | undefined;
    /**
     * The method used for 3DS authentication for this transaction.
     */
    method?: ThreeDSecureSuccessEventMethod | null | undefined;
};

/**
 * Details related to 3DS processing.
 */
export type ThreeDSecureSuccessEvent = {
    /**
     * The type of this resource. Is always `transaction-event`.
     */
    type?: ThreeDSecureSuccessEventType | undefined;
    /**
     * The unique identifier for this event.
     */
    id?: string | undefined;
    /**
     * The name of this resource. Is always `three-d-secure-success`.
     */
    name?: ThreeDSecureSuccessEventName | undefined;
    /**
     * The date and time when this transaction was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * 3DS context.
     */
    context?: ThreeDSecureSuccessEventContext | undefined;
};

/** @internal */
export namespace ThreeDSecureSuccessEventType$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureSuccessEventType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureSuccessEventName$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureSuccessEventName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureSuccessEventMethod$ {
    export const inboundSchema = z.nativeEnum(ThreeDSecureSuccessEventMethod);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ThreeDSecureSuccessEventContext$ {
    export const inboundSchema: z.ZodType<ThreeDSecureSuccessEventContext, z.ZodTypeDef, unknown> =
        z
            .object({
                eci: z.string().optional(),
                cavv: z.string().optional(),
                version: z.string().optional(),
                directory_response: z.string().optional(),
                authentication_response: z.nullable(z.string()).optional(),
                directory_transaction_id: z.nullable(z.string()).optional(),
                cavv_algorithm: z.nullable(z.string()).optional(),
                method: z.nullable(ThreeDSecureSuccessEventMethod$.inboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    directory_response: "directoryResponse",
                    authentication_response: "authenticationResponse",
                    directory_transaction_id: "directoryTransactionId",
                    cavv_algorithm: "cavvAlgorithm",
                });
            });

    export type Outbound = {
        eci?: string | undefined;
        cavv?: string | undefined;
        version?: string | undefined;
        directory_response?: string | undefined;
        authentication_response?: string | null | undefined;
        directory_transaction_id?: string | null | undefined;
        cavv_algorithm?: string | null | undefined;
        method?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ThreeDSecureSuccessEventContext
    > = z
        .object({
            eci: z.string().optional(),
            cavv: z.string().optional(),
            version: z.string().optional(),
            directoryResponse: z.string().optional(),
            authenticationResponse: z.nullable(z.string()).optional(),
            directoryTransactionId: z.nullable(z.string()).optional(),
            cavvAlgorithm: z.nullable(z.string()).optional(),
            method: z.nullable(ThreeDSecureSuccessEventMethod$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                directoryResponse: "directory_response",
                authenticationResponse: "authentication_response",
                directoryTransactionId: "directory_transaction_id",
                cavvAlgorithm: "cavv_algorithm",
            });
        });
}

/** @internal */
export namespace ThreeDSecureSuccessEvent$ {
    export const inboundSchema: z.ZodType<ThreeDSecureSuccessEvent, z.ZodTypeDef, unknown> = z
        .object({
            type: ThreeDSecureSuccessEventType$.inboundSchema.optional(),
            id: z.string().optional(),
            name: ThreeDSecureSuccessEventName$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            context: z.lazy(() => ThreeDSecureSuccessEventContext$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
        created_at?: string | undefined;
        context?: ThreeDSecureSuccessEventContext$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeDSecureSuccessEvent> = z
        .object({
            type: ThreeDSecureSuccessEventType$.outboundSchema.optional(),
            id: z.string().optional(),
            name: ThreeDSecureSuccessEventName$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            context: z.lazy(() => ThreeDSecureSuccessEventContext$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
            });
        });
}
