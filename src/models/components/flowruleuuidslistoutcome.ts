/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of action outcome for the given rule.
 */
export enum FlowRuleUUIDsListOutcomeType {
    List = "list",
}

/**
 * Defines the outcome of a rule in a flow where the result
 *
 * @remarks
 * is a list of UUIDs.
 *
 * Depending on the flow and action where this outcome is used, the UUIDs
 * may have an important meaning like the ID of a payment service to be
 * used (this is the case for `redirect-transaction` flow and
 * `route-transaction` action).
 */
export type FlowRuleUUIDsListOutcome = {
    /**
     * The type of action outcome for the given rule.
     */
    type: FlowRuleUUIDsListOutcomeType;
    /**
     * Results for a given flow action.
     */
    result: Array<string>;
};

/** @internal */
export const FlowRuleUUIDsListOutcomeType$ = z.nativeEnum(FlowRuleUUIDsListOutcomeType);

/** @internal */
export namespace FlowRuleUUIDsListOutcome$ {
    export type Inbound = {
        type: FlowRuleUUIDsListOutcomeType;
        result: Array<string>;
    };

    export const inboundSchema: z.ZodType<FlowRuleUUIDsListOutcome, z.ZodTypeDef, Inbound> = z
        .object({
            type: FlowRuleUUIDsListOutcomeType$,
            result: z.array(z.string()),
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
            };
        });

    export type Outbound = {
        type: FlowRuleUUIDsListOutcomeType;
        result: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleUUIDsListOutcome> = z
        .object({
            type: FlowRuleUUIDsListOutcomeType$,
            result: z.array(z.string()),
        })
        .transform((v) => {
            return {
                type: v.type,
                result: v.result,
            };
        });
}
