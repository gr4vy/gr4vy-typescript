/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ThreeDSecureDataV1,
  ThreeDSecureDataV1$inboundSchema,
  ThreeDSecureDataV1$Outbound,
  ThreeDSecureDataV1$outboundSchema,
} from "./threedsecuredatav1.js";
import {
  ThreeDSecureError,
  ThreeDSecureError$inboundSchema,
  ThreeDSecureError$Outbound,
  ThreeDSecureError$outboundSchema,
} from "./threedsecureerror.js";
import {
  ThreeDSecureMethod,
  ThreeDSecureMethod$inboundSchema,
  ThreeDSecureMethod$outboundSchema,
} from "./threedsecuremethod.js";
import {
  ThreeDSecureStatus,
  ThreeDSecureStatus$inboundSchema,
  ThreeDSecureStatus$outboundSchema,
} from "./threedsecurestatus.js";
import {
  ThreeDSecureV2,
  ThreeDSecureV2$inboundSchema,
  ThreeDSecureV2$Outbound,
  ThreeDSecureV2$outboundSchema,
} from "./threedsecurev2.js";

/**
 * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
 */
export type ResponseData = ThreeDSecureDataV1 | ThreeDSecureV2;

export type TransactionThreeDSecureSummaryOutput = {
  /**
   * The version of 3DS used for this transaction.
   */
  version?: string | null | undefined;
  /**
   * The status of the 3DS challenge for this transaction.
   */
  status?: ThreeDSecureStatus | null | undefined;
  /**
   * The method used for 3DS authentication for this transaction.
   */
  method?: ThreeDSecureMethod | null | undefined;
  /**
   * The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
   */
  responseData?: ThreeDSecureDataV1 | ThreeDSecureV2 | null | undefined;
  /**
   * The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
   */
  errorData?: ThreeDSecureError | null | undefined;
};

/** @internal */
export const ResponseData$inboundSchema: z.ZodType<
  ResponseData,
  z.ZodTypeDef,
  unknown
> = z.union([ThreeDSecureDataV1$inboundSchema, ThreeDSecureV2$inboundSchema]);

/** @internal */
export type ResponseData$Outbound =
  | ThreeDSecureDataV1$Outbound
  | ThreeDSecureV2$Outbound;

/** @internal */
export const ResponseData$outboundSchema: z.ZodType<
  ResponseData$Outbound,
  z.ZodTypeDef,
  ResponseData
> = z.union([ThreeDSecureDataV1$outboundSchema, ThreeDSecureV2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseData$ {
  /** @deprecated use `ResponseData$inboundSchema` instead. */
  export const inboundSchema = ResponseData$inboundSchema;
  /** @deprecated use `ResponseData$outboundSchema` instead. */
  export const outboundSchema = ResponseData$outboundSchema;
  /** @deprecated use `ResponseData$Outbound` instead. */
  export type Outbound = ResponseData$Outbound;
}

export function responseDataToJSON(responseData: ResponseData): string {
  return JSON.stringify(ResponseData$outboundSchema.parse(responseData));
}

export function responseDataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseData' from JSON`,
  );
}

/** @internal */
export const TransactionThreeDSecureSummaryOutput$inboundSchema: z.ZodType<
  TransactionThreeDSecureSummaryOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.nullable(z.string()).optional(),
  status: z.nullable(ThreeDSecureStatus$inboundSchema).optional(),
  method: z.nullable(ThreeDSecureMethod$inboundSchema).optional(),
  response_data: z.nullable(
    z.union([ThreeDSecureDataV1$inboundSchema, ThreeDSecureV2$inboundSchema]),
  ).optional(),
  error_data: z.nullable(ThreeDSecureError$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_data": "responseData",
    "error_data": "errorData",
  });
});

/** @internal */
export type TransactionThreeDSecureSummaryOutput$Outbound = {
  version?: string | null | undefined;
  status?: string | null | undefined;
  method?: string | null | undefined;
  response_data?:
    | ThreeDSecureDataV1$Outbound
    | ThreeDSecureV2$Outbound
    | null
    | undefined;
  error_data?: ThreeDSecureError$Outbound | null | undefined;
};

/** @internal */
export const TransactionThreeDSecureSummaryOutput$outboundSchema: z.ZodType<
  TransactionThreeDSecureSummaryOutput$Outbound,
  z.ZodTypeDef,
  TransactionThreeDSecureSummaryOutput
> = z.object({
  version: z.nullable(z.string()).optional(),
  status: z.nullable(ThreeDSecureStatus$outboundSchema).optional(),
  method: z.nullable(ThreeDSecureMethod$outboundSchema).optional(),
  responseData: z.nullable(
    z.union([ThreeDSecureDataV1$outboundSchema, ThreeDSecureV2$outboundSchema]),
  ).optional(),
  errorData: z.nullable(ThreeDSecureError$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    responseData: "response_data",
    errorData: "error_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionThreeDSecureSummaryOutput$ {
  /** @deprecated use `TransactionThreeDSecureSummaryOutput$inboundSchema` instead. */
  export const inboundSchema =
    TransactionThreeDSecureSummaryOutput$inboundSchema;
  /** @deprecated use `TransactionThreeDSecureSummaryOutput$outboundSchema` instead. */
  export const outboundSchema =
    TransactionThreeDSecureSummaryOutput$outboundSchema;
  /** @deprecated use `TransactionThreeDSecureSummaryOutput$Outbound` instead. */
  export type Outbound = TransactionThreeDSecureSummaryOutput$Outbound;
}

export function transactionThreeDSecureSummaryOutputToJSON(
  transactionThreeDSecureSummaryOutput: TransactionThreeDSecureSummaryOutput,
): string {
  return JSON.stringify(
    TransactionThreeDSecureSummaryOutput$outboundSchema.parse(
      transactionThreeDSecureSummaryOutput,
    ),
  );
}

export function transactionThreeDSecureSummaryOutputFromJSON(
  jsonString: string,
): SafeParseResult<TransactionThreeDSecureSummaryOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionThreeDSecureSummaryOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionThreeDSecureSummaryOutput' from JSON`,
  );
}
