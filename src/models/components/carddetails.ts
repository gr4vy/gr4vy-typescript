/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RequiredFields, RequiredFields$ } from "./requiredfields";
import * as z from "zod";

/**
 * `card-detail`.
 */
export enum CardDetailsType {
    CardDetail = "card-detail",
}

/**
 * The type of card.
 */
export enum CardDetailsCardType {
    Credit = "credit",
    Debit = "debit",
}

/**
 * The scheme/brand of the card.
 */
export enum CardDetailsScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * Details about a card.
 */
export type CardDetails = {
    /**
     * `card-detail`.
     */
    type?: CardDetailsType | undefined;
    /**
     * The 8 digit BIN of the card. When looking up card details using a
     *
     * @remarks
     * `payment_method_id` this value will be `null`.
     */
    id?: string | undefined;
    /**
     * The type of card.
     */
    cardType?: CardDetailsCardType | undefined;
    /**
     * The scheme/brand of the card.
     */
    scheme?: CardDetailsScheme | null | undefined;
    /**
     * An icon to display for the card scheme.
     */
    schemeIconUrl?: string | undefined;
    /**
     * The 2-letter ISO code of the issuing country of the card.
     */
    country?: string | undefined;
    /**
     * The fields that are required to process a transaction for this payment option.
     */
    requiredFields?: RequiredFields | undefined;
};

/** @internal */
export const CardDetailsType$ = z.nativeEnum(CardDetailsType);

/** @internal */
export const CardDetailsCardType$ = z.nativeEnum(CardDetailsCardType);

/** @internal */
export const CardDetailsScheme$ = z.nativeEnum(CardDetailsScheme);

/** @internal */
export namespace CardDetails$ {
    export type Inbound = {
        type?: CardDetailsType | undefined;
        id?: string | undefined;
        card_type?: CardDetailsCardType | undefined;
        scheme?: CardDetailsScheme | null | undefined;
        scheme_icon_url?: string | undefined;
        country?: string | undefined;
        required_fields?: RequiredFields$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CardDetails, z.ZodTypeDef, Inbound> = z
        .object({
            type: CardDetailsType$.optional(),
            id: z.string().optional(),
            card_type: CardDetailsCardType$.optional(),
            scheme: z.nullable(CardDetailsScheme$).optional(),
            scheme_icon_url: z.string().optional(),
            country: z.string().optional(),
            required_fields: RequiredFields$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.card_type === undefined ? null : { cardType: v.card_type }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.scheme_icon_url === undefined ? null : { schemeIconUrl: v.scheme_icon_url }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.required_fields === undefined ? null : { requiredFields: v.required_fields }),
            };
        });

    export type Outbound = {
        type?: CardDetailsType | undefined;
        id?: string | undefined;
        card_type?: CardDetailsCardType | undefined;
        scheme?: CardDetailsScheme | null | undefined;
        scheme_icon_url?: string | undefined;
        country?: string | undefined;
        required_fields?: RequiredFields$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CardDetails> = z
        .object({
            type: CardDetailsType$.optional(),
            id: z.string().optional(),
            cardType: CardDetailsCardType$.optional(),
            scheme: z.nullable(CardDetailsScheme$).optional(),
            schemeIconUrl: z.string().optional(),
            country: z.string().optional(),
            requiredFields: RequiredFields$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.cardType === undefined ? null : { card_type: v.cardType }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.schemeIconUrl === undefined ? null : { scheme_icon_url: v.schemeIconUrl }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.requiredFields === undefined ? null : { required_fields: v.requiredFields }),
            };
        });
}
