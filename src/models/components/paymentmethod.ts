/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingDetails,
  BillingDetails$inboundSchema,
  BillingDetails$Outbound,
  BillingDetails$outboundSchema,
} from "./billingdetails.js";
import {
  CardScheme,
  CardScheme$inboundSchema,
  CardScheme$outboundSchema,
} from "./cardscheme.js";
import {
  CardType,
  CardType$inboundSchema,
  CardType$outboundSchema,
} from "./cardtype.js";

/**
 * Always `payment-method`.
 */
export const PaymentMethodType = {
  PaymentMethod: "payment-method",
} as const;
/**
 * Always `payment-method`.
 */
export type PaymentMethodType = ClosedEnum<typeof PaymentMethodType>;

/**
 * Details for credit or debit card payment method.
 */
export type PaymentMethodDetails = {
  bin?: string | undefined;
  /**
   * An enumeration.
   */
  cardType?: CardType | undefined;
  cardIssuerName?: string | undefined;
};

/**
 * The type of this payment method.
 */
export const PaymentMethodMethod = {
  Abitab: "abitab",
  Affirm: "affirm",
  Afterpay: "afterpay",
  Alipay: "alipay",
  Alipayhk: "alipayhk",
  Applepay: "applepay",
  Arcuspaynetwork: "arcuspaynetwork",
  Bacs: "bacs",
  Bancontact: "bancontact",
  Banked: "banked",
  Bcp: "bcp",
  Becs: "becs",
  Bitpay: "bitpay",
  Boleto: "boleto",
  Boost: "boost",
  Card: "card",
  Cashapp: "cashapp",
  Chaseorbital: "chaseorbital",
  Clearpay: "clearpay",
  ClickToPay: "click-to-pay",
  Dana: "dana",
  Dcb: "dcb",
  Dlocal: "dlocal",
  Ebanx: "ebanx",
  Efecty: "efecty",
  Eps: "eps",
  Everydaypay: "everydaypay",
  Gcash: "gcash",
  Gem: "gem",
  Gemds: "gemds",
  GiftCard: "gift-card",
  Giropay: "giropay",
  Givingblock: "givingblock",
  Gocardless: "gocardless",
  Googlepay: "googlepay",
  GooglepayPanOnly: "googlepay_pan_only",
  Gopay: "gopay",
  Grabpay: "grabpay",
  Ideal: "ideal",
  Kakaopay: "kakaopay",
  Kcp: "kcp",
  Khipu: "khipu",
  Klarna: "klarna",
  Latitude: "latitude",
  Latitudeds: "latitudeds",
  Laybuy: "laybuy",
  Linepay: "linepay",
  Linkaja: "linkaja",
  Maybankqrpay: "maybankqrpay",
  Mercadopago: "mercadopago",
  Multibanco: "multibanco",
  Multipago: "multipago",
  Nequi: "nequi",
  Netbanking: "netbanking",
  NetworkToken: "network-token",
  Nupay: "nupay",
  Oney10x: "oney_10x",
  Oney12x: "oney_12x",
  Oney3x: "oney_3x",
  Oney4x: "oney_4x",
  Oney6x: "oney_6x",
  Ovo: "ovo",
  Oxxo: "oxxo",
  Pagoefectivo: "pagoefectivo",
  Payid: "payid",
  Paymaya: "paymaya",
  Paypal: "paypal",
  Paypalpaylater: "paypalpaylater",
  Payto: "payto",
  Payvalida: "payvalida",
  Picpay: "picpay",
  Pix: "pix",
  Pse: "pse",
  Rabbitlinepay: "rabbitlinepay",
  Razorpay: "razorpay",
  Redpagos: "redpagos",
  Scalapay: "scalapay",
  Sepa: "sepa",
  Servipag: "servipag",
  Shopeepay: "shopeepay",
  Singteldash: "singteldash",
  Smartpay: "smartpay",
  Sofort: "sofort",
  Spei: "spei",
  Stripedd: "stripedd",
  Thaiqr: "thaiqr",
  Touchngo: "touchngo",
  Truemoney: "truemoney",
  Trustly: "trustly",
  Trustlyeurope: "trustlyeurope",
  Upi: "upi",
  Venmo: "venmo",
  Vipps: "vipps",
  Waave: "waave",
  Webpay: "webpay",
  Wechat: "wechat",
  Yape: "yape",
  Zippay: "zippay",
} as const;
/**
 * The type of this payment method.
 */
export type PaymentMethodMethod = ClosedEnum<typeof PaymentMethodMethod>;

/**
 * The mode to use with this payment method.
 */
export const PaymentMethodMode = {
  Card: "card",
  Redirect: "redirect",
  Applepay: "applepay",
  Googlepay: "googlepay",
  CheckoutSession: "checkout-session",
  ClickToPay: "click-to-pay",
  GiftCard: "gift-card",
} as const;
/**
 * The mode to use with this payment method.
 */
export type PaymentMethodMode = ClosedEnum<typeof PaymentMethodMode>;

/**
 * The scheme of the card. Only applies to card payments.
 */
export const PaymentMethodCardScheme = {
  Accel: "accel",
  Amex: "amex",
  Bancontact: "bancontact",
  CarteBancaire: "carte-bancaire",
  Cirrus: "cirrus",
  Culiance: "culiance",
  Dankort: "dankort",
  DinersClub: "diners-club",
  Discover: "discover",
  EftposAustralia: "eftpos-australia",
  Elo: "elo",
  Hipercard: "hipercard",
  Jcb: "jcb",
  Maestro: "maestro",
  Mastercard: "mastercard",
  Mir: "mir",
  Nyce: "nyce",
  Other: "other",
  Pulse: "pulse",
  Rupay: "rupay",
  Star: "star",
  Uatp: "uatp",
  Unionpay: "unionpay",
  Visa: "visa",
} as const;
/**
 * The scheme of the card. Only applies to card payments.
 */
export type PaymentMethodCardScheme = ClosedEnum<
  typeof PaymentMethodCardScheme
>;

/**
 * Always `buyer`.
 */
export const PaymentMethodBuyerType = {
  Buyer: "buyer",
} as const;
/**
 * Always `buyer`.
 */
export type PaymentMethodBuyerType = ClosedEnum<typeof PaymentMethodBuyerType>;

/**
 * The optional buyer for which this payment method has been stored.
 */
export type PaymentMethodBuyer = {
  /**
   * Always `buyer`.
   */
  type?: PaymentMethodBuyerType | undefined;
  /**
   * The ID for the buyer.
   */
  id?: string | undefined;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * The display name for the buyer.
   */
  displayName?: string | undefined;
  /**
   * The merchant identifier for this buyer.
   */
  externalIdentifier?: string | undefined;
  /**
   * Base model with JSON encoders.
   */
  billingDetails?: BillingDetails | undefined;
  /**
   * The buyer account number
   */
  accountNumber?: string | undefined;
  /**
   * The date this buyer was created at.
   */
  createdAt: Date;
  /**
   * The date this buyer was last updated at.
   */
  updatedAt: Date;
};

/**
 * The state of the payment method.
 */
export const PaymentMethodPaymentMethodStatus = {
  Processing: "processing",
  BuyerApprovalRequired: "buyer_approval_required",
  Succeeded: "succeeded",
  Failed: "failed",
  Paused: "paused",
} as const;
/**
 * The state of the payment method.
 */
export type PaymentMethodPaymentMethodStatus = ClosedEnum<
  typeof PaymentMethodPaymentMethodStatus
>;

/**
 * Payment Method
 *
 * @remarks
 *
 * A stored payment method.
 */
export type PaymentMethod = {
  /**
   * Always `payment-method`.
   */
  type?: PaymentMethodType | undefined;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize their payment.
   */
  approvalUrl?: string | undefined;
  /**
   * The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
   */
  country?: string | undefined;
  /**
   * The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
   */
  currency?: string | undefined;
  /**
   * Details for credit or debit card payment method.
   */
  details?: PaymentMethodDetails | undefined;
  /**
   * The expiration date for the payment method.
   */
  expirationDate?: string | undefined;
  /**
   * The unique hash derived from the payment method identifier (e.g. card number).
   */
  fingerprint?: string | undefined;
  /**
   * A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
   */
  label?: string | undefined;
  /**
   * The date and time when this card was last replaced by the account updater.
   */
  lastReplacedAt?: Date | undefined;
  /**
   * The type of this payment method.
   */
  method: PaymentMethodMethod;
  /**
   * The mode to use with this payment method.
   */
  mode?: PaymentMethodMode | undefined;
  /**
   * The scheme of the card. Only applies to card payments.
   */
  scheme?: PaymentMethodCardScheme | undefined;
  /**
   * The ID for the payment method.
   */
  id: string;
  /**
   * The ID of the merchant account this buyer belongs to.
   */
  merchantAccountId: string;
  /**
   * Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
   */
  additionalSchemes?: Array<CardScheme> | undefined;
  /**
   * The timestamp when this payment method was last used in a transaction for client initiated transactions.
   */
  citLastUsedAt?: Date | undefined;
  /**
   * The number of times this payment method has been used in transactions for client initiated transactions.
   */
  citUsageCount: number;
  /**
   * Whether this card has a pending replacement that hasn't been applied yet.
   */
  hasReplacement: boolean;
  /**
   * The timestamp when this payment method was last used in a transaction.
   */
  lastUsedAt?: Date | undefined;
  /**
   * The number of times this payment method has been used in transactions.
   */
  usageCount: number;
  /**
   * The optional buyer for which this payment method has been stored.
   */
  buyer?: PaymentMethodBuyer | undefined;
  /**
   * The merchant reference that can be used to match the payment method against your own records.
   */
  externalIdentifier?: string | undefined;
  /**
   * The state of the payment method.
   */
  status: PaymentMethodPaymentMethodStatus;
  /**
   * The date and time when this payment method was first created in our system.
   */
  createdAt: Date;
  /**
   * The date and time when this payment method was last updated in our system.
   */
  updatedAt: Date;
};

/** @internal */
export const PaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodType
> = z.nativeEnum(PaymentMethodType);

/** @internal */
export const PaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodType
> = PaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodType$ {
  /** @deprecated use `PaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodType$inboundSchema;
  /** @deprecated use `PaymentMethodType$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodType$outboundSchema;
}

/** @internal */
export const PaymentMethodDetails$inboundSchema: z.ZodType<
  PaymentMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.string().optional(),
  card_type: CardType$inboundSchema.optional(),
  card_issuer_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "card_type": "cardType",
    "card_issuer_name": "cardIssuerName",
  });
});

/** @internal */
export type PaymentMethodDetails$Outbound = {
  bin?: string | undefined;
  card_type?: string | undefined;
  card_issuer_name?: string | undefined;
};

/** @internal */
export const PaymentMethodDetails$outboundSchema: z.ZodType<
  PaymentMethodDetails$Outbound,
  z.ZodTypeDef,
  PaymentMethodDetails
> = z.object({
  bin: z.string().optional(),
  cardType: CardType$outboundSchema.optional(),
  cardIssuerName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cardType: "card_type",
    cardIssuerName: "card_issuer_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodDetails$ {
  /** @deprecated use `PaymentMethodDetails$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodDetails$inboundSchema;
  /** @deprecated use `PaymentMethodDetails$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodDetails$outboundSchema;
  /** @deprecated use `PaymentMethodDetails$Outbound` instead. */
  export type Outbound = PaymentMethodDetails$Outbound;
}

export function paymentMethodDetailsToJSON(
  paymentMethodDetails: PaymentMethodDetails,
): string {
  return JSON.stringify(
    PaymentMethodDetails$outboundSchema.parse(paymentMethodDetails),
  );
}

export function paymentMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodDetails' from JSON`,
  );
}

/** @internal */
export const PaymentMethodMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodMethod
> = z.nativeEnum(PaymentMethodMethod);

/** @internal */
export const PaymentMethodMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodMethod
> = PaymentMethodMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodMethod$ {
  /** @deprecated use `PaymentMethodMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodMethod$inboundSchema;
  /** @deprecated use `PaymentMethodMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodMethod$outboundSchema;
}

/** @internal */
export const PaymentMethodMode$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodMode
> = z.nativeEnum(PaymentMethodMode);

/** @internal */
export const PaymentMethodMode$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodMode
> = PaymentMethodMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodMode$ {
  /** @deprecated use `PaymentMethodMode$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodMode$inboundSchema;
  /** @deprecated use `PaymentMethodMode$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodMode$outboundSchema;
}

/** @internal */
export const PaymentMethodCardScheme$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodCardScheme
> = z.nativeEnum(PaymentMethodCardScheme);

/** @internal */
export const PaymentMethodCardScheme$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodCardScheme
> = PaymentMethodCardScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCardScheme$ {
  /** @deprecated use `PaymentMethodCardScheme$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCardScheme$inboundSchema;
  /** @deprecated use `PaymentMethodCardScheme$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCardScheme$outboundSchema;
}

/** @internal */
export const PaymentMethodBuyerType$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodBuyerType
> = z.nativeEnum(PaymentMethodBuyerType);

/** @internal */
export const PaymentMethodBuyerType$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodBuyerType
> = PaymentMethodBuyerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodBuyerType$ {
  /** @deprecated use `PaymentMethodBuyerType$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodBuyerType$inboundSchema;
  /** @deprecated use `PaymentMethodBuyerType$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodBuyerType$outboundSchema;
}

/** @internal */
export const PaymentMethodBuyer$inboundSchema: z.ZodType<
  PaymentMethodBuyer,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PaymentMethodBuyerType$inboundSchema.default("buyer"),
  id: z.string().optional(),
  merchant_account_id: z.string(),
  display_name: z.string().optional(),
  external_identifier: z.string().optional(),
  billing_details: BillingDetails$inboundSchema.optional(),
  account_number: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "merchant_account_id": "merchantAccountId",
    "display_name": "displayName",
    "external_identifier": "externalIdentifier",
    "billing_details": "billingDetails",
    "account_number": "accountNumber",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PaymentMethodBuyer$Outbound = {
  type: string;
  id?: string | undefined;
  merchant_account_id: string;
  display_name?: string | undefined;
  external_identifier?: string | undefined;
  billing_details?: BillingDetails$Outbound | undefined;
  account_number?: string | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PaymentMethodBuyer$outboundSchema: z.ZodType<
  PaymentMethodBuyer$Outbound,
  z.ZodTypeDef,
  PaymentMethodBuyer
> = z.object({
  type: PaymentMethodBuyerType$outboundSchema.default("buyer"),
  id: z.string().optional(),
  merchantAccountId: z.string(),
  displayName: z.string().optional(),
  externalIdentifier: z.string().optional(),
  billingDetails: BillingDetails$outboundSchema.optional(),
  accountNumber: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAccountId: "merchant_account_id",
    displayName: "display_name",
    externalIdentifier: "external_identifier",
    billingDetails: "billing_details",
    accountNumber: "account_number",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodBuyer$ {
  /** @deprecated use `PaymentMethodBuyer$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodBuyer$inboundSchema;
  /** @deprecated use `PaymentMethodBuyer$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodBuyer$outboundSchema;
  /** @deprecated use `PaymentMethodBuyer$Outbound` instead. */
  export type Outbound = PaymentMethodBuyer$Outbound;
}

export function paymentMethodBuyerToJSON(
  paymentMethodBuyer: PaymentMethodBuyer,
): string {
  return JSON.stringify(
    PaymentMethodBuyer$outboundSchema.parse(paymentMethodBuyer),
  );
}

export function paymentMethodBuyerFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodBuyer' from JSON`,
  );
}

/** @internal */
export const PaymentMethodPaymentMethodStatus$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodPaymentMethodStatus
> = z.nativeEnum(PaymentMethodPaymentMethodStatus);

/** @internal */
export const PaymentMethodPaymentMethodStatus$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethodPaymentMethodStatus
> = PaymentMethodPaymentMethodStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodPaymentMethodStatus$ {
  /** @deprecated use `PaymentMethodPaymentMethodStatus$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodPaymentMethodStatus$inboundSchema;
  /** @deprecated use `PaymentMethodPaymentMethodStatus$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodPaymentMethodStatus$outboundSchema;
}

/** @internal */
export const PaymentMethod$inboundSchema: z.ZodType<
  PaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PaymentMethodType$inboundSchema.default("payment-method"),
  approval_url: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => PaymentMethodDetails$inboundSchema).optional(),
  expiration_date: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  last_replaced_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  method: PaymentMethodMethod$inboundSchema,
  mode: PaymentMethodMode$inboundSchema.optional(),
  scheme: PaymentMethodCardScheme$inboundSchema.optional(),
  id: z.string(),
  merchant_account_id: z.string(),
  additional_schemes: z.array(CardScheme$inboundSchema).optional(),
  cit_last_used_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  cit_usage_count: z.number().int(),
  has_replacement: z.boolean(),
  last_used_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  usage_count: z.number().int(),
  buyer: z.lazy(() => PaymentMethodBuyer$inboundSchema).optional(),
  external_identifier: z.string().optional(),
  status: PaymentMethodPaymentMethodStatus$inboundSchema,
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "approval_url": "approvalUrl",
    "expiration_date": "expirationDate",
    "last_replaced_at": "lastReplacedAt",
    "merchant_account_id": "merchantAccountId",
    "additional_schemes": "additionalSchemes",
    "cit_last_used_at": "citLastUsedAt",
    "cit_usage_count": "citUsageCount",
    "has_replacement": "hasReplacement",
    "last_used_at": "lastUsedAt",
    "usage_count": "usageCount",
    "external_identifier": "externalIdentifier",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PaymentMethod$Outbound = {
  type: string;
  approval_url?: string | undefined;
  country?: string | undefined;
  currency?: string | undefined;
  details?: PaymentMethodDetails$Outbound | undefined;
  expiration_date?: string | undefined;
  fingerprint?: string | undefined;
  label?: string | undefined;
  last_replaced_at?: string | undefined;
  method: string;
  mode?: string | undefined;
  scheme?: string | undefined;
  id: string;
  merchant_account_id: string;
  additional_schemes?: Array<string> | undefined;
  cit_last_used_at?: string | undefined;
  cit_usage_count: number;
  has_replacement: boolean;
  last_used_at?: string | undefined;
  usage_count: number;
  buyer?: PaymentMethodBuyer$Outbound | undefined;
  external_identifier?: string | undefined;
  status: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PaymentMethod$outboundSchema: z.ZodType<
  PaymentMethod$Outbound,
  z.ZodTypeDef,
  PaymentMethod
> = z.object({
  type: PaymentMethodType$outboundSchema.default("payment-method"),
  approvalUrl: z.string().optional(),
  country: z.string().optional(),
  currency: z.string().optional(),
  details: z.lazy(() => PaymentMethodDetails$outboundSchema).optional(),
  expirationDate: z.string().optional(),
  fingerprint: z.string().optional(),
  label: z.string().optional(),
  lastReplacedAt: z.date().transform(v => v.toISOString()).optional(),
  method: PaymentMethodMethod$outboundSchema,
  mode: PaymentMethodMode$outboundSchema.optional(),
  scheme: PaymentMethodCardScheme$outboundSchema.optional(),
  id: z.string(),
  merchantAccountId: z.string(),
  additionalSchemes: z.array(CardScheme$outboundSchema).optional(),
  citLastUsedAt: z.date().transform(v => v.toISOString()).optional(),
  citUsageCount: z.number().int(),
  hasReplacement: z.boolean(),
  lastUsedAt: z.date().transform(v => v.toISOString()).optional(),
  usageCount: z.number().int(),
  buyer: z.lazy(() => PaymentMethodBuyer$outboundSchema).optional(),
  externalIdentifier: z.string().optional(),
  status: PaymentMethodPaymentMethodStatus$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    approvalUrl: "approval_url",
    expirationDate: "expiration_date",
    lastReplacedAt: "last_replaced_at",
    merchantAccountId: "merchant_account_id",
    additionalSchemes: "additional_schemes",
    citLastUsedAt: "cit_last_used_at",
    citUsageCount: "cit_usage_count",
    hasReplacement: "has_replacement",
    lastUsedAt: "last_used_at",
    usageCount: "usage_count",
    externalIdentifier: "external_identifier",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethod$ {
  /** @deprecated use `PaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethod$inboundSchema;
  /** @deprecated use `PaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethod$outboundSchema;
  /** @deprecated use `PaymentMethod$Outbound` instead. */
  export type Outbound = PaymentMethod$Outbound;
}

export function paymentMethodToJSON(paymentMethod: PaymentMethod): string {
  return JSON.stringify(PaymentMethod$outboundSchema.parse(paymentMethod));
}

export function paymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethod' from JSON`,
  );
}
