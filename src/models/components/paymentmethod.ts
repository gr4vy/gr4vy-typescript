/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentMethodDetailsCard, PaymentMethodDetailsCard$ } from "./paymentmethoddetailscard";
import * as z from "zod";

/**
 * `payment-method`.
 */
export enum PaymentMethodType {
    PaymentMethod = "payment-method",
}

export enum PaymentMethodAdditionalSchemes {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
 */
export enum PaymentMethodApprovalTarget {
    Any = "any",
    NewWindow = "new_window",
}

/**
 * The type of this resource. Is always `buyer`.
 */
export enum PaymentMethodBuyerType {
    Buyer = "buyer",
}

/**
 * The type of this resource. Is always `billing-details`.
 */
export enum PaymentMethodBuyerBillingDetailsType {
    BillingDetails = "billing-details",
}

/**
 * The billing address of the buyer.
 */
export type PaymentMethodAddress = {
    /**
     * The city for the address.
     */
    city?: string | null | undefined;
    /**
     * The country for the address in ISO 3166 format.
     */
    country?: string | null | undefined;
    /**
     * The postal code or zip code for the address.
     */
    postalCode?: string | null | undefined;
    /**
     * The state, county, or province for the address.
     */
    state?: string | null | undefined;
    /**
     * The code of state, county, or province for the address in
     *
     * @remarks
     * ISO 3166-2 format.
     */
    stateCode?: string | null | undefined;
    /**
     * The house number or name for the address. Not all payment
     *
     * @remarks
     * services use this field but some do.
     */
    houseNumberOrName?: string | null | undefined;
    /**
     * The first line of the address.
     */
    line1?: string | null | undefined;
    /**
     * The second line of the address.
     */
    line2?: string | null | undefined;
    /**
     * The optional name of the company or organisation to add
     *
     * @remarks
     * to the address.
     */
    organization?: string | null | undefined;
};

/**
 * The kind of tax ID.
 */
export enum PaymentMethodKind {
    AeTrn = "ae.trn",
    AuAbn = "au.abn",
    ArDni = "ar.dni",
    ArCuil = "ar.cuil",
    ArCuit = "ar.cuit",
    BrCnpj = "br.cnpj",
    BrCpf = "br.cpf",
    CaBn = "ca.bn",
    CaGstHst = "ca.gst_hst",
    CaPstBc = "ca.pst_bc",
    CaPstMb = "ca.pst_mb",
    CaPstSk = "ca.pst_sk",
    CaQst = "ca.qst",
    ChVat = "ch.vat",
    ClTin = "cl.tin",
    EsCif = "es.cif",
    EuVat = "eu.vat",
    GbVat = "gb.vat",
    HkBr = "hk.br",
    IdNik = "id.nik",
    IdNpwp = "id.npwp",
    InGst = "in.gst",
    JpCn = "jp.cn",
    JpRn = "jp.rn",
    KrBrn = "kr.brn",
    LiUid = "li.uid",
    MxCurp = "mx.curp",
    MyFrp = "my.frp",
    MyItn = "my.itn",
    MyNric = "my.nric",
    MySst = "my.sst",
    NoVat = "no.vat",
    NzGst = "nz.gst",
    PhTin = "ph.tin",
    RuInn = "ru.inn",
    RuKpp = "ru.kpp",
    SaVat = "sa.vat",
    SgGst = "sg.gst",
    SgUen = "sg.uen",
    ThId = "th.id",
    ThVat = "th.vat",
    TwVat = "tw.vat",
    UsEin = "us.ein",
    ZaVat = "za.vat",
}

/**
 * The tax information associated with the billing details.
 */
export type PaymentMethodTaxID = {
    /**
     * The tax ID for the buyer.
     */
    value: string;
    /**
     * The kind of tax ID.
     */
    kind: PaymentMethodKind;
};

/**
 * The billing details associated with a buyer.
 */
export type PaymentMethodBillingDetails = {
    /**
     * The type of this resource. Is always `billing-details`.
     */
    type?: PaymentMethodBuyerBillingDetailsType | undefined;
    /**
     * The first name(s) or given name of the buyer.
     */
    firstName?: string | null | undefined;
    /**
     * The last name, or family name, of the buyer.
     */
    lastName?: string | null | undefined;
    /**
     * The email address of the buyer.
     */
    emailAddress?: string | null | undefined;
    /**
     * The phone number of the buyer. This number is formatted according to the
     *
     * @remarks
     * [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
     */
    phoneNumber?: string | null | undefined;
    /**
     * The billing address of the buyer.
     */
    address?: PaymentMethodAddress | null | undefined;
    /**
     * The tax information associated with the billing details.
     */
    taxId?: PaymentMethodTaxID | null | undefined;
};

/**
 * The optional buyer for which this payment method has been stored.
 */
export type PaymentMethodBuyer = {
    /**
     * The type of this resource. Is always `buyer`.
     */
    type?: PaymentMethodBuyerType | undefined;
    /**
     * The unique Gr4vy ID for this buyer.
     */
    id?: string | undefined;
    /**
     * The billing details associated with a buyer.
     */
    billingDetails?: PaymentMethodBillingDetails | null | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was created in our system.
     */
    createdAt?: Date | undefined;
    /**
     * A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.
     */
    displayName?: string | null | undefined;
    /**
     * An external identifier that can be used to match the buyer against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The date and time
     *
     * @remarks
     * when this buyer was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/**
 * The type of this payment method.
 */
export enum PaymentMethodMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    Cashapp = "cashapp",
    Chaseorbital = "chaseorbital",
    CheckoutSession = "checkout-session",
    Clearpay = "clearpay",
    ClickToPay = "click-to-pay",
    Dana = "dana",
    Dcb = "dcb",
    Dlocal = "dlocal",
    Ebanx = "ebanx",
    Gcash = "gcash",
    Giropay = "giropay",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Payid = "payid",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Payto = "payto",
    Venmo = "venmo",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Trustlyeurope = "trustlyeurope",
    Givingblock = "givingblock",
    Wechat = "wechat",
    Zippay = "zippay",
    Bancontact = "bancontact",
    Eps = "eps",
    Linepay = "linepay",
    Razorpay = "razorpay",
    Multipago = "multipago",
    Waave = "waave",
    Smartpay = "smartpay",
    Vipps = "vipps",
}

/**
 * The mode to use with this payment method.
 */
export enum Mode {
    Card = "card",
    Redirect = "redirect",
    Applepay = "applepay",
    Googlepay = "googlepay",
}

/**
 * The scheme of the card. Only applies to card payments.
 */
export enum PaymentMethodScheme {
    Accel = "accel",
    Amex = "amex",
    Bancontact = "bancontact",
    CarteBancaire = "carte-bancaire",
    Cirrus = "cirrus",
    Culiance = "culiance",
    Dankort = "dankort",
    DinersClub = "diners-club",
    Discover = "discover",
    EftposAustralia = "eftpos-australia",
    Elo = "elo",
    Hipercard = "hipercard",
    Jcb = "jcb",
    Maestro = "maestro",
    Mastercard = "mastercard",
    Mir = "mir",
    Nyce = "nyce",
    Other = "other",
    Pulse = "pulse",
    Rupay = "rupay",
    Star = "star",
    Uatp = "uatp",
    Unionpay = "unionpay",
    Visa = "visa",
}

/**
 * The state of the payment method.
 *
 * @remarks
 *
 * - `processing` - The payment method is stored but has not been used yet.
 * - `buyer_approval_required` - Storing the payment method requires
 *   the buyer to provide approval. Follow the `approval_url` for next steps.
 * - `succeeded` - The payment method is stored and has been used.
 * - `failed` - The payment method could not be stored, or failed first use.
 */
export enum Status {
    Processing = "processing",
    BuyerApprovalRequired = "buyer_approval_required",
    Succeeded = "succeeded",
    Failed = "failed",
}

/**
 * A generic payment method.
 */
export type PaymentMethod = {
    /**
     * `payment-method`.
     */
    type?: PaymentMethodType | undefined;
    /**
     * The unique ID of the payment method.
     */
    id?: string | undefined;
    /**
     * Additional schemes of the card. Only applies to card payment methods.
     */
    additionalSchemes?: Array<PaymentMethodAdditionalSchemes> | null | undefined;
    /**
     * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
     */
    approvalTarget?: PaymentMethodApprovalTarget | null | undefined;
    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    approvalUrl?: string | null | undefined;
    /**
     * The optional buyer for which this payment method has been stored.
     */
    buyer?: PaymentMethodBuyer | null | undefined;
    /**
     * The 2-letter ISO code of the country this payment method can
     *
     * @remarks
     * be used for. If this value is `null` the payment method may be
     * used in multiple countries.
     */
    country?: string | null | undefined;
    /**
     * The date and time when this payment method was first created in our
     *
     * @remarks
     * system.
     */
    createdAt?: Date | undefined;
    /**
     * The ISO-4217 currency code that this payment method can be
     *
     * @remarks
     * used for. If this value is `null` the payment method may be
     * used for multiple currencies.
     */
    currency?: string | null | undefined;
    /**
     * A credit or debit card payment method.
     */
    details?: PaymentMethodDetailsCard | undefined;
    /**
     * The expiration date for the payment method.
     */
    expirationDate?: string | null | undefined;
    /**
     * An external identifier that can be used to match the payment method
     *
     * @remarks
     * against your own records.
     */
    externalIdentifier?: string | null | undefined;
    /**
     * Whether this card has a pending replacement that hasn't been applied yet.
     *
     * @remarks
     *
     * When the Account Updater determines that new card details are available, existing details are not
     * changed immediately, but this field is set to `true`. There are three scenarios in which the actual
     * replacement occurs:
     *
     * 1. When this card has expired.
     * 2. When only the expiration date changed.
     * 3. When a transaction using this card is declined with any of the following codes:
     *     * `canceled_payment_method`
     *     * `expired_payment_method`
     *     * `unavailable_payment_method`
     *     * `unknown_payment_method`
     *
     * When the replacement is applied, this field is set to `false`.
     * For non-card payment methods, the value of this field is always set to `false`.
     */
    hasReplacement?: boolean | undefined;
    /**
     * A label for the card or the account. For a `paypal` payment method this
     *
     * @remarks
     * is the user's email address. For a card it is the last 4 digits of the
     * card.
     */
    label?: string | null | undefined;
    /**
     * The date and time when this card was last replaced.
     *
     * @remarks
     *
     * When the Account Updater determines that new card details are available, existing details are not
     * changed immediately. There are three scenarios in which the actual replacement occurs:
     *
     * 1. When this card has expired.
     * 2. When only the expiration date changed.
     * 3. When a transaction using this card is declined with any of the following codes:
     *     * `canceled_payment_method`
     *     * `expired_payment_method`
     *     * `unavailable_payment_method`
     *     * `unknown_payment_method`
     *
     * When the replacement is applied, this field is updated.
     * For non-card payment methods, the value of this field is always set to `null`.
     */
    lastReplacedAt?: Date | null | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The type of this payment method.
     */
    method?: PaymentMethodMethod | undefined;
    /**
     * The mode to use with this payment method.
     */
    mode?: Mode | undefined;
    /**
     * The scheme of the card. Only applies to card payments.
     */
    scheme?: PaymentMethodScheme | null | undefined;
    /**
     * The state of the payment method.
     *
     * @remarks
     *
     * - `processing` - The payment method is stored but has not been used yet.
     * - `buyer_approval_required` - Storing the payment method requires
     *   the buyer to provide approval. Follow the `approval_url` for next steps.
     * - `succeeded` - The payment method is stored and has been used.
     * - `failed` - The payment method could not be stored, or failed first use.
     */
    status?: Status | undefined;
    /**
     * The date and time when this payment method was last updated in our system.
     */
    updatedAt?: Date | undefined;
    /**
     * The unique hash derived from the payment method identifier (e.g. card number).
     */
    fingerprint?: string | null | undefined;
};

/** @internal */
export const PaymentMethodType$: z.ZodNativeEnum<typeof PaymentMethodType> =
    z.nativeEnum(PaymentMethodType);

/** @internal */
export const PaymentMethodAdditionalSchemes$: z.ZodNativeEnum<
    typeof PaymentMethodAdditionalSchemes
> = z.nativeEnum(PaymentMethodAdditionalSchemes);

/** @internal */
export const PaymentMethodApprovalTarget$: z.ZodNativeEnum<typeof PaymentMethodApprovalTarget> =
    z.nativeEnum(PaymentMethodApprovalTarget);

/** @internal */
export const PaymentMethodBuyerType$: z.ZodNativeEnum<typeof PaymentMethodBuyerType> =
    z.nativeEnum(PaymentMethodBuyerType);

/** @internal */
export const PaymentMethodBuyerBillingDetailsType$: z.ZodNativeEnum<
    typeof PaymentMethodBuyerBillingDetailsType
> = z.nativeEnum(PaymentMethodBuyerBillingDetailsType);

/** @internal */
export namespace PaymentMethodAddress$ {
    export type Inbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentMethodAddress, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postal_code: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            state_code: z.nullable(z.string()).optional(),
            house_number_or_name: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postal_code === undefined ? null : { postalCode: v.postal_code }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.state_code === undefined ? null : { stateCode: v.state_code }),
                ...(v.house_number_or_name === undefined
                    ? null
                    : { houseNumberOrName: v.house_number_or_name }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });

    export type Outbound = {
        city?: string | null | undefined;
        country?: string | null | undefined;
        postal_code?: string | null | undefined;
        state?: string | null | undefined;
        state_code?: string | null | undefined;
        house_number_or_name?: string | null | undefined;
        line1?: string | null | undefined;
        line2?: string | null | undefined;
        organization?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodAddress> = z
        .object({
            city: z.nullable(z.string()).optional(),
            country: z.nullable(z.string()).optional(),
            postalCode: z.nullable(z.string()).optional(),
            state: z.nullable(z.string()).optional(),
            stateCode: z.nullable(z.string()).optional(),
            houseNumberOrName: z.nullable(z.string()).optional(),
            line1: z.nullable(z.string()).optional(),
            line2: z.nullable(z.string()).optional(),
            organization: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postalCode === undefined ? null : { postal_code: v.postalCode }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.stateCode === undefined ? null : { state_code: v.stateCode }),
                ...(v.houseNumberOrName === undefined
                    ? null
                    : { house_number_or_name: v.houseNumberOrName }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.organization === undefined ? null : { organization: v.organization }),
            };
        });
}

/** @internal */
export const PaymentMethodKind$: z.ZodNativeEnum<typeof PaymentMethodKind> =
    z.nativeEnum(PaymentMethodKind);

/** @internal */
export namespace PaymentMethodTaxID$ {
    export type Inbound = {
        value: string;
        kind: PaymentMethodKind;
    };

    export const inboundSchema: z.ZodType<PaymentMethodTaxID, z.ZodTypeDef, Inbound> = z
        .object({
            value: z.string(),
            kind: PaymentMethodKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });

    export type Outbound = {
        value: string;
        kind: PaymentMethodKind;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodTaxID> = z
        .object({
            value: z.string(),
            kind: PaymentMethodKind$,
        })
        .transform((v) => {
            return {
                value: v.value,
                kind: v.kind,
            };
        });
}

/** @internal */
export namespace PaymentMethodBillingDetails$ {
    export type Inbound = {
        type?: PaymentMethodBuyerBillingDetailsType | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: PaymentMethodAddress$.Inbound | null | undefined;
        tax_id?: PaymentMethodTaxID$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentMethodBillingDetails, z.ZodTypeDef, Inbound> = z
        .object({
            type: PaymentMethodBuyerBillingDetailsType$.optional(),
            first_name: z.nullable(z.string()).optional(),
            last_name: z.nullable(z.string()).optional(),
            email_address: z.nullable(z.string()).optional(),
            phone_number: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => PaymentMethodAddress$.inboundSchema)).optional(),
            tax_id: z.nullable(z.lazy(() => PaymentMethodTaxID$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.first_name === undefined ? null : { firstName: v.first_name }),
                ...(v.last_name === undefined ? null : { lastName: v.last_name }),
                ...(v.email_address === undefined ? null : { emailAddress: v.email_address }),
                ...(v.phone_number === undefined ? null : { phoneNumber: v.phone_number }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.tax_id === undefined ? null : { taxId: v.tax_id }),
            };
        });

    export type Outbound = {
        type?: PaymentMethodBuyerBillingDetailsType | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        email_address?: string | null | undefined;
        phone_number?: string | null | undefined;
        address?: PaymentMethodAddress$.Outbound | null | undefined;
        tax_id?: PaymentMethodTaxID$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodBillingDetails> = z
        .object({
            type: PaymentMethodBuyerBillingDetailsType$.optional(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phoneNumber: z.nullable(z.string()).optional(),
            address: z.nullable(z.lazy(() => PaymentMethodAddress$.outboundSchema)).optional(),
            taxId: z.nullable(z.lazy(() => PaymentMethodTaxID$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.firstName === undefined ? null : { first_name: v.firstName }),
                ...(v.lastName === undefined ? null : { last_name: v.lastName }),
                ...(v.emailAddress === undefined ? null : { email_address: v.emailAddress }),
                ...(v.phoneNumber === undefined ? null : { phone_number: v.phoneNumber }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.taxId === undefined ? null : { tax_id: v.taxId }),
            };
        });
}

/** @internal */
export namespace PaymentMethodBuyer$ {
    export type Inbound = {
        type?: PaymentMethodBuyerType | undefined;
        id?: string | undefined;
        billing_details?: PaymentMethodBillingDetails$.Inbound | null | undefined;
        created_at?: string | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
        merchant_account_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentMethodBuyer, z.ZodTypeDef, Inbound> = z
        .object({
            type: PaymentMethodBuyerType$.optional(),
            id: z.string().optional(),
            billing_details: z
                .nullable(z.lazy(() => PaymentMethodBillingDetails$.inboundSchema))
                .optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            display_name: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
            merchant_account_id: z.string().optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: PaymentMethodBuyerType | undefined;
        id?: string | undefined;
        billing_details?: PaymentMethodBillingDetails$.Outbound | null | undefined;
        created_at?: string | undefined;
        display_name?: string | null | undefined;
        external_identifier?: string | null | undefined;
        merchant_account_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodBuyer> = z
        .object({
            type: PaymentMethodBuyerType$.optional(),
            id: z.string().optional(),
            billingDetails: z
                .nullable(z.lazy(() => PaymentMethodBillingDetails$.outboundSchema))
                .optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            displayName: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            merchantAccountId: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}

/** @internal */
export const PaymentMethodMethod$: z.ZodNativeEnum<typeof PaymentMethodMethod> =
    z.nativeEnum(PaymentMethodMethod);

/** @internal */
export const Mode$: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(Mode);

/** @internal */
export const PaymentMethodScheme$: z.ZodNativeEnum<typeof PaymentMethodScheme> =
    z.nativeEnum(PaymentMethodScheme);

/** @internal */
export const Status$: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export namespace PaymentMethod$ {
    export type Inbound = {
        type?: PaymentMethodType | undefined;
        id?: string | undefined;
        additional_schemes?: Array<PaymentMethodAdditionalSchemes> | null | undefined;
        approval_target?: PaymentMethodApprovalTarget | null | undefined;
        approval_url?: string | null | undefined;
        buyer?: PaymentMethodBuyer$.Inbound | null | undefined;
        country?: string | null | undefined;
        created_at?: string | undefined;
        currency?: string | null | undefined;
        details?: PaymentMethodDetailsCard$.Inbound | undefined;
        expiration_date?: string | null | undefined;
        external_identifier?: string | null | undefined;
        has_replacement?: boolean | undefined;
        label?: string | null | undefined;
        last_replaced_at?: string | null | undefined;
        merchant_account_id?: string | undefined;
        method?: PaymentMethodMethod | undefined;
        mode?: Mode | undefined;
        scheme?: PaymentMethodScheme | null | undefined;
        status?: Status | undefined;
        updated_at?: string | undefined;
        fingerprint?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentMethod, z.ZodTypeDef, Inbound> = z
        .object({
            type: PaymentMethodType$.optional(),
            id: z.string().optional(),
            additional_schemes: z.nullable(z.array(PaymentMethodAdditionalSchemes$)).optional(),
            approval_target: z.nullable(PaymentMethodApprovalTarget$).optional(),
            approval_url: z.nullable(z.string()).optional(),
            buyer: z.nullable(z.lazy(() => PaymentMethodBuyer$.inboundSchema)).optional(),
            country: z.nullable(z.string()).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency: z.nullable(z.string()).optional(),
            details: PaymentMethodDetailsCard$.inboundSchema.optional(),
            expiration_date: z.nullable(z.string()).optional(),
            external_identifier: z.nullable(z.string()).optional(),
            has_replacement: z.boolean().optional(),
            label: z.nullable(z.string()).optional(),
            last_replaced_at: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            merchant_account_id: z.string().optional(),
            method: PaymentMethodMethod$.optional(),
            mode: Mode$.optional(),
            scheme: z.nullable(PaymentMethodScheme$).optional(),
            status: Status$.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.additional_schemes === undefined
                    ? null
                    : { additionalSchemes: v.additional_schemes }),
                ...(v.approval_target === undefined ? null : { approvalTarget: v.approval_target }),
                ...(v.approval_url === undefined ? null : { approvalUrl: v.approval_url }),
                ...(v.buyer === undefined ? null : { buyer: v.buyer }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.expiration_date === undefined ? null : { expirationDate: v.expiration_date }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.has_replacement === undefined ? null : { hasReplacement: v.has_replacement }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.last_replaced_at === undefined
                    ? null
                    : { lastReplacedAt: v.last_replaced_at }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.mode === undefined ? null : { mode: v.mode }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.fingerprint === undefined ? null : { fingerprint: v.fingerprint }),
            };
        });

    export type Outbound = {
        type?: PaymentMethodType | undefined;
        id?: string | undefined;
        additional_schemes?: Array<PaymentMethodAdditionalSchemes> | null | undefined;
        approval_target?: PaymentMethodApprovalTarget | null | undefined;
        approval_url?: string | null | undefined;
        buyer?: PaymentMethodBuyer$.Outbound | null | undefined;
        country?: string | null | undefined;
        created_at?: string | undefined;
        currency?: string | null | undefined;
        details?: PaymentMethodDetailsCard$.Outbound | undefined;
        expiration_date?: string | null | undefined;
        external_identifier?: string | null | undefined;
        has_replacement?: boolean | undefined;
        label?: string | null | undefined;
        last_replaced_at?: string | null | undefined;
        merchant_account_id?: string | undefined;
        method?: PaymentMethodMethod | undefined;
        mode?: Mode | undefined;
        scheme?: PaymentMethodScheme | null | undefined;
        status?: Status | undefined;
        updated_at?: string | undefined;
        fingerprint?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethod> = z
        .object({
            type: PaymentMethodType$.optional(),
            id: z.string().optional(),
            additionalSchemes: z.nullable(z.array(PaymentMethodAdditionalSchemes$)).optional(),
            approvalTarget: z.nullable(PaymentMethodApprovalTarget$).optional(),
            approvalUrl: z.nullable(z.string()).optional(),
            buyer: z.nullable(z.lazy(() => PaymentMethodBuyer$.outboundSchema)).optional(),
            country: z.nullable(z.string()).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currency: z.nullable(z.string()).optional(),
            details: PaymentMethodDetailsCard$.outboundSchema.optional(),
            expirationDate: z.nullable(z.string()).optional(),
            externalIdentifier: z.nullable(z.string()).optional(),
            hasReplacement: z.boolean().optional(),
            label: z.nullable(z.string()).optional(),
            lastReplacedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            merchantAccountId: z.string().optional(),
            method: PaymentMethodMethod$.optional(),
            mode: Mode$.optional(),
            scheme: z.nullable(PaymentMethodScheme$).optional(),
            status: Status$.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            fingerprint: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.additionalSchemes === undefined
                    ? null
                    : { additional_schemes: v.additionalSchemes }),
                ...(v.approvalTarget === undefined ? null : { approval_target: v.approvalTarget }),
                ...(v.approvalUrl === undefined ? null : { approval_url: v.approvalUrl }),
                ...(v.buyer === undefined ? null : { buyer: v.buyer }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.expirationDate === undefined ? null : { expiration_date: v.expirationDate }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.hasReplacement === undefined ? null : { has_replacement: v.hasReplacement }),
                ...(v.label === undefined ? null : { label: v.label }),
                ...(v.lastReplacedAt === undefined ? null : { last_replaced_at: v.lastReplacedAt }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.mode === undefined ? null : { mode: v.mode }),
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.fingerprint === undefined ? null : { fingerprint: v.fingerprint }),
            };
        });
}
