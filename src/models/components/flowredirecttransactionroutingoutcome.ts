/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The type of this resource. Is always `outcome`.
 */
export enum FlowRedirectTransactionRoutingOutcomeType {
    Outcome = "outcome",
}

/**
 * Outcome for redirect transactions flow/routing action.
 *
 * @remarks
 * Each option is a Gr4vy payment service object.
 */
export type FlowRedirectTransactionRoutingOutcome = {
    /**
     * The type of this resource. Is always `outcome`.
     */
    type?: FlowRedirectTransactionRoutingOutcomeType | undefined;
    /**
     * Payment service identifier.
     */
    id?: string | undefined;
    /**
     * The display name of the payment service.
     */
    label?: string | undefined;
    /**
     * The status of the payment service.
     */
    active?: boolean | undefined;
    /**
     * Payment service icon URL.
     */
    iconUrl?: string | null | undefined;
    /**
     * Accepted currency ISO codes for the payment service.
     */
    countries?: Array<string> | undefined;
    /**
     * Accepted country ISO codes for the payment service.
     */
    currencies?: Array<string> | undefined;
};

/** @internal */
export namespace FlowRedirectTransactionRoutingOutcomeType$ {
    export const inboundSchema = z.nativeEnum(FlowRedirectTransactionRoutingOutcomeType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowRedirectTransactionRoutingOutcome$ {
    export const inboundSchema: z.ZodType<
        FlowRedirectTransactionRoutingOutcome,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FlowRedirectTransactionRoutingOutcomeType$.inboundSchema.optional(),
            id: z.string().optional(),
            label: z.string().optional(),
            active: z.boolean().optional(),
            icon_url: z.nullable(z.string()).optional(),
            countries: z.array(z.string()).optional(),
            currencies: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                icon_url: "iconUrl",
            });
        });

    export type Outbound = {
        type?: string | undefined;
        id?: string | undefined;
        label?: string | undefined;
        active?: boolean | undefined;
        icon_url?: string | null | undefined;
        countries?: Array<string> | undefined;
        currencies?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlowRedirectTransactionRoutingOutcome
    > = z
        .object({
            type: FlowRedirectTransactionRoutingOutcomeType$.outboundSchema.optional(),
            id: z.string().optional(),
            label: z.string().optional(),
            active: z.boolean().optional(),
            iconUrl: z.nullable(z.string()).optional(),
            countries: z.array(z.string()).optional(),
            currencies: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                iconUrl: "icon_url",
            });
        });
}
