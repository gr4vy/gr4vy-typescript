/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentMethodSummary,
  PaymentMethodSummary$inboundSchema,
  PaymentMethodSummary$Outbound,
  PaymentMethodSummary$outboundSchema,
} from "./paymentmethodsummary.js";

export type PaymentMethodSummaries = {
  /**
   * A list of items returned for this request.
   */
  items: Array<PaymentMethodSummary>;
};

/** @internal */
export const PaymentMethodSummaries$inboundSchema: z.ZodType<
  PaymentMethodSummaries,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(PaymentMethodSummary$inboundSchema),
});

/** @internal */
export type PaymentMethodSummaries$Outbound = {
  items: Array<PaymentMethodSummary$Outbound>;
};

/** @internal */
export const PaymentMethodSummaries$outboundSchema: z.ZodType<
  PaymentMethodSummaries$Outbound,
  z.ZodTypeDef,
  PaymentMethodSummaries
> = z.object({
  items: z.array(PaymentMethodSummary$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodSummaries$ {
  /** @deprecated use `PaymentMethodSummaries$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodSummaries$inboundSchema;
  /** @deprecated use `PaymentMethodSummaries$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodSummaries$outboundSchema;
  /** @deprecated use `PaymentMethodSummaries$Outbound` instead. */
  export type Outbound = PaymentMethodSummaries$Outbound;
}

export function paymentMethodSummariesToJSON(
  paymentMethodSummaries: PaymentMethodSummaries,
): string {
  return JSON.stringify(
    PaymentMethodSummaries$outboundSchema.parse(paymentMethodSummaries),
  );
}

export function paymentMethodSummariesFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodSummaries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodSummaries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodSummaries' from JSON`,
  );
}
