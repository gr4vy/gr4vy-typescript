/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountUpdaterOptions,
  AccountUpdaterOptions$inboundSchema,
  AccountUpdaterOptions$Outbound,
  AccountUpdaterOptions$outboundSchema,
} from "./accountupdateroptions.js";
import {
  AdyenCardOptions,
  AdyenCardOptions$inboundSchema,
  AdyenCardOptions$Outbound,
  AdyenCardOptions$outboundSchema,
} from "./adyencardoptions.js";
import {
  AdyenOptions,
  AdyenOptions$inboundSchema,
  AdyenOptions$Outbound,
  AdyenOptions$outboundSchema,
} from "./adyenoptions.js";
import {
  AdyenSepaOptions,
  AdyenSepaOptions$inboundSchema,
  AdyenSepaOptions$Outbound,
  AdyenSepaOptions$outboundSchema,
} from "./adyensepaoptions.js";
import {
  AffirmOptions,
  AffirmOptions$inboundSchema,
  AffirmOptions$Outbound,
  AffirmOptions$outboundSchema,
} from "./affirmoptions.js";
import {
  BraintreeOptions,
  BraintreeOptions$inboundSchema,
  BraintreeOptions$Outbound,
  BraintreeOptions$outboundSchema,
} from "./braintreeoptions.js";
import {
  CybersourceAntiFraudOptions,
  CybersourceAntiFraudOptions$inboundSchema,
  CybersourceAntiFraudOptions$Outbound,
  CybersourceAntiFraudOptions$outboundSchema,
} from "./cybersourceantifraudoptions.js";
import {
  CybersourceOptions,
  CybersourceOptions$inboundSchema,
  CybersourceOptions$Outbound,
  CybersourceOptions$outboundSchema,
} from "./cybersourceoptions.js";
import {
  DlocalOptions,
  DlocalOptions$inboundSchema,
  DlocalOptions$Outbound,
  DlocalOptions$outboundSchema,
} from "./dlocaloptions.js";
import {
  DlocalUPIOptions,
  DlocalUPIOptions$inboundSchema,
  DlocalUPIOptions$Outbound,
  DlocalUPIOptions$outboundSchema,
} from "./dlocalupioptions.js";
import {
  FiservOptions,
  FiservOptions$inboundSchema,
  FiservOptions$Outbound,
  FiservOptions$outboundSchema,
} from "./fiservoptions.js";
import {
  ForterAntiFraudOptions,
  ForterAntiFraudOptions$inboundSchema,
  ForterAntiFraudOptions$Outbound,
  ForterAntiFraudOptions$outboundSchema,
} from "./forterantifraudoptions.js";
import {
  GivingBlockOptions,
  GivingBlockOptions$inboundSchema,
  GivingBlockOptions$Outbound,
  GivingBlockOptions$outboundSchema,
} from "./givingblockoptions.js";
import {
  LatitudeOptions,
  LatitudeOptions$inboundSchema,
  LatitudeOptions$Outbound,
  LatitudeOptions$outboundSchema,
} from "./latitudeoptions.js";
import {
  MattildaTapiOptions,
  MattildaTapiOptions$inboundSchema,
  MattildaTapiOptions$Outbound,
  MattildaTapiOptions$outboundSchema,
} from "./mattildatapioptions.js";
import {
  MockCardOptions,
  MockCardOptions$inboundSchema,
  MockCardOptions$Outbound,
  MockCardOptions$outboundSchema,
} from "./mockcardoptions.js";
import {
  MonatoSpeiOptions,
  MonatoSpeiOptions$inboundSchema,
  MonatoSpeiOptions$Outbound,
  MonatoSpeiOptions$outboundSchema,
} from "./monatospeioptions.js";
import {
  NuveiOptions,
  NuveiOptions$inboundSchema,
  NuveiOptions$Outbound,
  NuveiOptions$outboundSchema,
} from "./nuveioptions.js";
import {
  NuveiPSEOptions,
  NuveiPSEOptions$inboundSchema,
  NuveiPSEOptions$Outbound,
  NuveiPSEOptions$outboundSchema,
} from "./nuveipseoptions.js";
import {
  OxxoOptions,
  OxxoOptions$inboundSchema,
  OxxoOptions$Outbound,
  OxxoOptions$outboundSchema,
} from "./oxxooptions.js";
import {
  PaypalOptions,
  PaypalOptions$inboundSchema,
  PaypalOptions$Outbound,
  PaypalOptions$outboundSchema,
} from "./paypaloptions.js";
import {
  PowertranzOptions,
  PowertranzOptions$inboundSchema,
  PowertranzOptions$Outbound,
  PowertranzOptions$outboundSchema,
} from "./powertranzoptions.js";
import {
  StripeOptions,
  StripeOptions$inboundSchema,
  StripeOptions$Outbound,
  StripeOptions$outboundSchema,
} from "./stripeoptions.js";
import {
  TravelhubOptions,
  TravelhubOptions$inboundSchema,
  TravelhubOptions$Outbound,
  TravelhubOptions$outboundSchema,
} from "./travelhuboptions.js";
import {
  TrustlyOptions,
  TrustlyOptions$inboundSchema,
  TrustlyOptions$Outbound,
  TrustlyOptions$outboundSchema,
} from "./trustlyoptions.js";
import {
  WpayEverdaypayOptions,
  WpayEverdaypayOptions$inboundSchema,
  WpayEverdaypayOptions$Outbound,
  WpayEverdaypayOptions$outboundSchema,
} from "./wpayeverdaypayoptions.js";
import {
  WpayPaytoOptions,
  WpayPaytoOptions$inboundSchema,
  WpayPaytoOptions$Outbound,
  WpayPaytoOptions$outboundSchema,
} from "./wpaypaytooptions.js";

export type TransactionConnectionOptions = {
  /**
   * Custom options to be passed to the `account-updater` connector, allowing for simulating different account updater responses.
   */
  accountUpdater?: AccountUpdaterOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-afterpay` connector.
   */
  adyenAfterpay?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-alipay` connector.
   */
  adyenAlipay?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-card` connector.
   */
  adyenCard?: AdyenCardOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-cashapp` connector.
   */
  adyenCashapp?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-giropay` connector.
   */
  adyenGiropay?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-ideal` connector.
   */
  adyenIdeal?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-sepa` connector.
   */
  adyenSepa?: AdyenSepaOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-sofort` connector.
   */
  adyenSofort?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `adyen-vipps` connector.
   */
  adyenVipps?: AdyenOptions | null | undefined;
  /**
   * Custom options to be passed to the `affirm-affirm` connector.
   */
  affirmAffirm?: AffirmOptions | null | undefined;
  /**
   * Custom options to be passed to the `braintree-card` connector.
   */
  braintreeCard?: BraintreeOptions | null | undefined;
  /**
   * Custom options to be passed to the `cybersource-anti-fraud` connector.
   */
  cybersourceAntiFraud?: CybersourceAntiFraudOptions | null | undefined;
  /**
   * Custom options to be passed to the `cybersource-card` connector.
   */
  cybersourceCard?: CybersourceOptions | null | undefined;
  /**
   * Custom options to be passed to the `cybersource-ideal` connector.
   */
  cybersourceIdeal?: CybersourceOptions | null | undefined;
  /**
   * Custom options to be passed to the `cybersource-kcp` connector.
   */
  cybersourceKcp?: CybersourceOptions | null | undefined;
  /**
   * Custom options to be passed to the `dlocal-nequi` connector.
   */
  dlocalNequi?: DlocalOptions | null | undefined;
  /**
   * Custom options to be passed to the `dlocal-upi` connector.
   */
  dlocalUpi?: DlocalUPIOptions | null | undefined;
  /**
   * Custom options to be passed to the `fiserv-card` connector.
   */
  fiservCard?: FiservOptions | null | undefined;
  /**
   * Custom options to be passed to the `forter-anti-fraud` connector.
   */
  forterAntiFraud?: ForterAntiFraudOptions | null | undefined;
  /**
   * Custom options to be passed to the `gem-gem` connector.
   */
  gemGem?: LatitudeOptions | null | undefined;
  /**
   * Custom options to be passed to the `gem-gemds` connector.
   */
  gemGemds?: LatitudeOptions | null | undefined;
  /**
   * Custom options to be passed to the `givingblock-givingblock` connector.
   */
  givingblockGivingblock?: GivingBlockOptions | null | undefined;
  /**
   * Custom options to be passed to the `latitude-latitude` connector.
   */
  latitudeLatitude?: LatitudeOptions | null | undefined;
  /**
   * Custom options to be passed to the `latitude-latitudeds` connector.
   */
  latitudeLatitudeds?: LatitudeOptions | null | undefined;
  /**
   * Custom options to be passed to the `mattilda-tapi` connector.
   */
  mattildaTapi?: MattildaTapiOptions | null | undefined;
  /**
   * Custom options to be passed to the `mattilda-tapifintechs` connector.
   */
  mattildaTapifintechs?: MattildaTapiOptions | null | undefined;
  /**
   * Custom options to be passed to the `monato-spei` connector.
   */
  monatoSpei?: MonatoSpeiOptions | null | undefined;
  /**
   * Custom options to be passed to the `mock-card` connector.
   */
  mockCard?: MockCardOptions | null | undefined;
  /**
   * Custom options to be passed to the `nuvei-card` connector.
   */
  nuveiCard?: NuveiOptions | null | undefined;
  /**
   * Custom options to be passed to the `nuvei-pse` connector.
   */
  nuveiPse?: NuveiPSEOptions | null | undefined;
  /**
   * Custom options to be passed to the `oxxo-oxxo` connector.
   */
  oxxoOxxo?: OxxoOptions | null | undefined;
  /**
   * Custom options to be passed to the `paypal-paypal` connector.
   */
  paypalPaypal?: PaypalOptions | null | undefined;
  /**
   * Custom options to be passed to the `paypal-paypalpaylater` connector.
   */
  paypalPaypalpaylater?: PaypalOptions | null | undefined;
  /**
   * Custom options to be passed to the `powertranz-card` connector.
   */
  powertranzCard?: PowertranzOptions | null | undefined;
  /**
   * Custom options to be passed to the `stripe-card` connector.
   */
  stripeCard?: StripeOptions | null | undefined;
  /**
   * Custom options to be passed to the `travelhub-card` connector.
   */
  travelhubCard?: TravelhubOptions | null | undefined;
  /**
   * Custom options to be passed to the `trustly-trustly` connector.
   */
  trustlyTrustly?: TrustlyOptions | null | undefined;
  /**
   * Custom options to be passed to the `wpay-everydaypay` connector.
   */
  wpayEverydaypay?: WpayEverdaypayOptions | null | undefined;
  /**
   * Custom options to be passed to the `wpay-payto` connector.
   */
  wpayPayto?: WpayPaytoOptions | null | undefined;
};

/** @internal */
export const TransactionConnectionOptions$inboundSchema: z.ZodType<
  TransactionConnectionOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  "account-updater": z.nullable(AccountUpdaterOptions$inboundSchema).optional(),
  "adyen-afterpay": z.nullable(AdyenOptions$inboundSchema).optional(),
  "adyen-alipay": z.nullable(AdyenOptions$inboundSchema).optional(),
  "adyen-card": z.nullable(AdyenCardOptions$inboundSchema).optional(),
  "adyen-cashapp": z.nullable(AdyenOptions$inboundSchema).optional(),
  "adyen-giropay": z.nullable(AdyenOptions$inboundSchema).optional(),
  "adyen-ideal": z.nullable(AdyenOptions$inboundSchema).optional(),
  "adyen-sepa": z.nullable(AdyenSepaOptions$inboundSchema).optional(),
  "adyen-sofort": z.nullable(AdyenOptions$inboundSchema).optional(),
  "adyen-vipps": z.nullable(AdyenOptions$inboundSchema).optional(),
  "affirm-affirm": z.nullable(AffirmOptions$inboundSchema).optional(),
  "braintree-card": z.nullable(BraintreeOptions$inboundSchema).optional(),
  "cybersource-anti-fraud": z.nullable(
    CybersourceAntiFraudOptions$inboundSchema,
  ).optional(),
  "cybersource-card": z.nullable(CybersourceOptions$inboundSchema).optional(),
  "cybersource-ideal": z.nullable(CybersourceOptions$inboundSchema).optional(),
  "cybersource-kcp": z.nullable(CybersourceOptions$inboundSchema).optional(),
  "dlocal-nequi": z.nullable(DlocalOptions$inboundSchema).optional(),
  "dlocal-upi": z.nullable(DlocalUPIOptions$inboundSchema).optional(),
  "fiserv-card": z.nullable(FiservOptions$inboundSchema).optional(),
  "forter-anti-fraud": z.nullable(ForterAntiFraudOptions$inboundSchema)
    .optional(),
  "gem-gem": z.nullable(LatitudeOptions$inboundSchema).optional(),
  "gem-gemds": z.nullable(LatitudeOptions$inboundSchema).optional(),
  "givingblock-givingblock": z.nullable(GivingBlockOptions$inboundSchema)
    .optional(),
  "latitude-latitude": z.nullable(LatitudeOptions$inboundSchema).optional(),
  "latitude-latitudeds": z.nullable(LatitudeOptions$inboundSchema).optional(),
  "mattilda-tapi": z.nullable(MattildaTapiOptions$inboundSchema).optional(),
  "mattilda-tapifintechs": z.nullable(MattildaTapiOptions$inboundSchema)
    .optional(),
  "monato-spei": z.nullable(MonatoSpeiOptions$inboundSchema).optional(),
  "mock-card": z.nullable(MockCardOptions$inboundSchema).optional(),
  "nuvei-card": z.nullable(NuveiOptions$inboundSchema).optional(),
  "nuvei-pse": z.nullable(NuveiPSEOptions$inboundSchema).optional(),
  "oxxo-oxxo": z.nullable(OxxoOptions$inboundSchema).optional(),
  "paypal-paypal": z.nullable(PaypalOptions$inboundSchema).optional(),
  "paypal-paypalpaylater": z.nullable(PaypalOptions$inboundSchema).optional(),
  "powertranz-card": z.nullable(PowertranzOptions$inboundSchema).optional(),
  "stripe-card": z.nullable(StripeOptions$inboundSchema).optional(),
  "travelhub-card": z.nullable(TravelhubOptions$inboundSchema).optional(),
  "trustly-trustly": z.nullable(TrustlyOptions$inboundSchema).optional(),
  "wpay-everydaypay": z.nullable(WpayEverdaypayOptions$inboundSchema)
    .optional(),
  "wpay-payto": z.nullable(WpayPaytoOptions$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "account-updater": "accountUpdater",
    "adyen-afterpay": "adyenAfterpay",
    "adyen-alipay": "adyenAlipay",
    "adyen-card": "adyenCard",
    "adyen-cashapp": "adyenCashapp",
    "adyen-giropay": "adyenGiropay",
    "adyen-ideal": "adyenIdeal",
    "adyen-sepa": "adyenSepa",
    "adyen-sofort": "adyenSofort",
    "adyen-vipps": "adyenVipps",
    "affirm-affirm": "affirmAffirm",
    "braintree-card": "braintreeCard",
    "cybersource-anti-fraud": "cybersourceAntiFraud",
    "cybersource-card": "cybersourceCard",
    "cybersource-ideal": "cybersourceIdeal",
    "cybersource-kcp": "cybersourceKcp",
    "dlocal-nequi": "dlocalNequi",
    "dlocal-upi": "dlocalUpi",
    "fiserv-card": "fiservCard",
    "forter-anti-fraud": "forterAntiFraud",
    "gem-gem": "gemGem",
    "gem-gemds": "gemGemds",
    "givingblock-givingblock": "givingblockGivingblock",
    "latitude-latitude": "latitudeLatitude",
    "latitude-latitudeds": "latitudeLatitudeds",
    "mattilda-tapi": "mattildaTapi",
    "mattilda-tapifintechs": "mattildaTapifintechs",
    "monato-spei": "monatoSpei",
    "mock-card": "mockCard",
    "nuvei-card": "nuveiCard",
    "nuvei-pse": "nuveiPse",
    "oxxo-oxxo": "oxxoOxxo",
    "paypal-paypal": "paypalPaypal",
    "paypal-paypalpaylater": "paypalPaypalpaylater",
    "powertranz-card": "powertranzCard",
    "stripe-card": "stripeCard",
    "travelhub-card": "travelhubCard",
    "trustly-trustly": "trustlyTrustly",
    "wpay-everydaypay": "wpayEverydaypay",
    "wpay-payto": "wpayPayto",
  });
});

/** @internal */
export type TransactionConnectionOptions$Outbound = {
  "account-updater"?: AccountUpdaterOptions$Outbound | null | undefined;
  "adyen-afterpay"?: AdyenOptions$Outbound | null | undefined;
  "adyen-alipay"?: AdyenOptions$Outbound | null | undefined;
  "adyen-card"?: AdyenCardOptions$Outbound | null | undefined;
  "adyen-cashapp"?: AdyenOptions$Outbound | null | undefined;
  "adyen-giropay"?: AdyenOptions$Outbound | null | undefined;
  "adyen-ideal"?: AdyenOptions$Outbound | null | undefined;
  "adyen-sepa"?: AdyenSepaOptions$Outbound | null | undefined;
  "adyen-sofort"?: AdyenOptions$Outbound | null | undefined;
  "adyen-vipps"?: AdyenOptions$Outbound | null | undefined;
  "affirm-affirm"?: AffirmOptions$Outbound | null | undefined;
  "braintree-card"?: BraintreeOptions$Outbound | null | undefined;
  "cybersource-anti-fraud"?:
    | CybersourceAntiFraudOptions$Outbound
    | null
    | undefined;
  "cybersource-card"?: CybersourceOptions$Outbound | null | undefined;
  "cybersource-ideal"?: CybersourceOptions$Outbound | null | undefined;
  "cybersource-kcp"?: CybersourceOptions$Outbound | null | undefined;
  "dlocal-nequi"?: DlocalOptions$Outbound | null | undefined;
  "dlocal-upi"?: DlocalUPIOptions$Outbound | null | undefined;
  "fiserv-card"?: FiservOptions$Outbound | null | undefined;
  "forter-anti-fraud"?: ForterAntiFraudOptions$Outbound | null | undefined;
  "gem-gem"?: LatitudeOptions$Outbound | null | undefined;
  "gem-gemds"?: LatitudeOptions$Outbound | null | undefined;
  "givingblock-givingblock"?: GivingBlockOptions$Outbound | null | undefined;
  "latitude-latitude"?: LatitudeOptions$Outbound | null | undefined;
  "latitude-latitudeds"?: LatitudeOptions$Outbound | null | undefined;
  "mattilda-tapi"?: MattildaTapiOptions$Outbound | null | undefined;
  "mattilda-tapifintechs"?: MattildaTapiOptions$Outbound | null | undefined;
  "monato-spei"?: MonatoSpeiOptions$Outbound | null | undefined;
  "mock-card"?: MockCardOptions$Outbound | null | undefined;
  "nuvei-card"?: NuveiOptions$Outbound | null | undefined;
  "nuvei-pse"?: NuveiPSEOptions$Outbound | null | undefined;
  "oxxo-oxxo"?: OxxoOptions$Outbound | null | undefined;
  "paypal-paypal"?: PaypalOptions$Outbound | null | undefined;
  "paypal-paypalpaylater"?: PaypalOptions$Outbound | null | undefined;
  "powertranz-card"?: PowertranzOptions$Outbound | null | undefined;
  "stripe-card"?: StripeOptions$Outbound | null | undefined;
  "travelhub-card"?: TravelhubOptions$Outbound | null | undefined;
  "trustly-trustly"?: TrustlyOptions$Outbound | null | undefined;
  "wpay-everydaypay"?: WpayEverdaypayOptions$Outbound | null | undefined;
  "wpay-payto"?: WpayPaytoOptions$Outbound | null | undefined;
};

/** @internal */
export const TransactionConnectionOptions$outboundSchema: z.ZodType<
  TransactionConnectionOptions$Outbound,
  z.ZodTypeDef,
  TransactionConnectionOptions
> = z.object({
  accountUpdater: z.nullable(AccountUpdaterOptions$outboundSchema).optional(),
  adyenAfterpay: z.nullable(AdyenOptions$outboundSchema).optional(),
  adyenAlipay: z.nullable(AdyenOptions$outboundSchema).optional(),
  adyenCard: z.nullable(AdyenCardOptions$outboundSchema).optional(),
  adyenCashapp: z.nullable(AdyenOptions$outboundSchema).optional(),
  adyenGiropay: z.nullable(AdyenOptions$outboundSchema).optional(),
  adyenIdeal: z.nullable(AdyenOptions$outboundSchema).optional(),
  adyenSepa: z.nullable(AdyenSepaOptions$outboundSchema).optional(),
  adyenSofort: z.nullable(AdyenOptions$outboundSchema).optional(),
  adyenVipps: z.nullable(AdyenOptions$outboundSchema).optional(),
  affirmAffirm: z.nullable(AffirmOptions$outboundSchema).optional(),
  braintreeCard: z.nullable(BraintreeOptions$outboundSchema).optional(),
  cybersourceAntiFraud: z.nullable(CybersourceAntiFraudOptions$outboundSchema)
    .optional(),
  cybersourceCard: z.nullable(CybersourceOptions$outboundSchema).optional(),
  cybersourceIdeal: z.nullable(CybersourceOptions$outboundSchema).optional(),
  cybersourceKcp: z.nullable(CybersourceOptions$outboundSchema).optional(),
  dlocalNequi: z.nullable(DlocalOptions$outboundSchema).optional(),
  dlocalUpi: z.nullable(DlocalUPIOptions$outboundSchema).optional(),
  fiservCard: z.nullable(FiservOptions$outboundSchema).optional(),
  forterAntiFraud: z.nullable(ForterAntiFraudOptions$outboundSchema).optional(),
  gemGem: z.nullable(LatitudeOptions$outboundSchema).optional(),
  gemGemds: z.nullable(LatitudeOptions$outboundSchema).optional(),
  givingblockGivingblock: z.nullable(GivingBlockOptions$outboundSchema)
    .optional(),
  latitudeLatitude: z.nullable(LatitudeOptions$outboundSchema).optional(),
  latitudeLatitudeds: z.nullable(LatitudeOptions$outboundSchema).optional(),
  mattildaTapi: z.nullable(MattildaTapiOptions$outboundSchema).optional(),
  mattildaTapifintechs: z.nullable(MattildaTapiOptions$outboundSchema)
    .optional(),
  monatoSpei: z.nullable(MonatoSpeiOptions$outboundSchema).optional(),
  mockCard: z.nullable(MockCardOptions$outboundSchema).optional(),
  nuveiCard: z.nullable(NuveiOptions$outboundSchema).optional(),
  nuveiPse: z.nullable(NuveiPSEOptions$outboundSchema).optional(),
  oxxoOxxo: z.nullable(OxxoOptions$outboundSchema).optional(),
  paypalPaypal: z.nullable(PaypalOptions$outboundSchema).optional(),
  paypalPaypalpaylater: z.nullable(PaypalOptions$outboundSchema).optional(),
  powertranzCard: z.nullable(PowertranzOptions$outboundSchema).optional(),
  stripeCard: z.nullable(StripeOptions$outboundSchema).optional(),
  travelhubCard: z.nullable(TravelhubOptions$outboundSchema).optional(),
  trustlyTrustly: z.nullable(TrustlyOptions$outboundSchema).optional(),
  wpayEverydaypay: z.nullable(WpayEverdaypayOptions$outboundSchema).optional(),
  wpayPayto: z.nullable(WpayPaytoOptions$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    accountUpdater: "account-updater",
    adyenAfterpay: "adyen-afterpay",
    adyenAlipay: "adyen-alipay",
    adyenCard: "adyen-card",
    adyenCashapp: "adyen-cashapp",
    adyenGiropay: "adyen-giropay",
    adyenIdeal: "adyen-ideal",
    adyenSepa: "adyen-sepa",
    adyenSofort: "adyen-sofort",
    adyenVipps: "adyen-vipps",
    affirmAffirm: "affirm-affirm",
    braintreeCard: "braintree-card",
    cybersourceAntiFraud: "cybersource-anti-fraud",
    cybersourceCard: "cybersource-card",
    cybersourceIdeal: "cybersource-ideal",
    cybersourceKcp: "cybersource-kcp",
    dlocalNequi: "dlocal-nequi",
    dlocalUpi: "dlocal-upi",
    fiservCard: "fiserv-card",
    forterAntiFraud: "forter-anti-fraud",
    gemGem: "gem-gem",
    gemGemds: "gem-gemds",
    givingblockGivingblock: "givingblock-givingblock",
    latitudeLatitude: "latitude-latitude",
    latitudeLatitudeds: "latitude-latitudeds",
    mattildaTapi: "mattilda-tapi",
    mattildaTapifintechs: "mattilda-tapifintechs",
    monatoSpei: "monato-spei",
    mockCard: "mock-card",
    nuveiCard: "nuvei-card",
    nuveiPse: "nuvei-pse",
    oxxoOxxo: "oxxo-oxxo",
    paypalPaypal: "paypal-paypal",
    paypalPaypalpaylater: "paypal-paypalpaylater",
    powertranzCard: "powertranz-card",
    stripeCard: "stripe-card",
    travelhubCard: "travelhub-card",
    trustlyTrustly: "trustly-trustly",
    wpayEverydaypay: "wpay-everydaypay",
    wpayPayto: "wpay-payto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionConnectionOptions$ {
  /** @deprecated use `TransactionConnectionOptions$inboundSchema` instead. */
  export const inboundSchema = TransactionConnectionOptions$inboundSchema;
  /** @deprecated use `TransactionConnectionOptions$outboundSchema` instead. */
  export const outboundSchema = TransactionConnectionOptions$outboundSchema;
  /** @deprecated use `TransactionConnectionOptions$Outbound` instead. */
  export type Outbound = TransactionConnectionOptions$Outbound;
}

export function transactionConnectionOptionsToJSON(
  transactionConnectionOptions: TransactionConnectionOptions,
): string {
  return JSON.stringify(
    TransactionConnectionOptions$outboundSchema.parse(
      transactionConnectionOptions,
    ),
  );
}

export function transactionConnectionOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionConnectionOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionConnectionOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionConnectionOptions' from JSON`,
  );
}
