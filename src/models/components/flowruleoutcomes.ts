/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    FlowCardTransactionRoutingOutcome,
    FlowCardTransactionRoutingOutcome$,
} from "./flowcardtransactionroutingoutcome";
import { FlowPaymentOptionOutcome, FlowPaymentOptionOutcome$ } from "./flowpaymentoptionoutcome";
import {
    FlowRedirectTransactionRoutingOutcome,
    FlowRedirectTransactionRoutingOutcome$,
} from "./flowredirecttransactionroutingoutcome";
import * as z from "zod";

export type FlowRuleOutcomesItems =
    | FlowPaymentOptionOutcome
    | FlowRedirectTransactionRoutingOutcome
    | FlowCardTransactionRoutingOutcome;

/**
 * Defines the outcome of a rule in a flow.
 *
 * @remarks
 * Currently the outcomes can be a boolean value, or a list of string
 * values. The meaning of this outcome depends on the `action` this rule
 * is triggered for.
 */
export type FlowRuleOutcomes = {
    /**
     * A list of outcomes.
     */
    items?:
        | Array<
              | FlowPaymentOptionOutcome
              | FlowRedirectTransactionRoutingOutcome
              | FlowCardTransactionRoutingOutcome
          >
        | undefined;
};

/** @internal */
export namespace FlowRuleOutcomesItems$ {
    export type Inbound =
        | FlowPaymentOptionOutcome$.Inbound
        | FlowRedirectTransactionRoutingOutcome$.Inbound
        | FlowCardTransactionRoutingOutcome$.Inbound;

    export type Outbound =
        | FlowPaymentOptionOutcome$.Outbound
        | FlowRedirectTransactionRoutingOutcome$.Outbound
        | FlowCardTransactionRoutingOutcome$.Outbound;
    export const inboundSchema: z.ZodType<FlowRuleOutcomesItems, z.ZodTypeDef, Inbound> = z.union([
        FlowPaymentOptionOutcome$.inboundSchema,
        FlowRedirectTransactionRoutingOutcome$.inboundSchema,
        FlowCardTransactionRoutingOutcome$.inboundSchema,
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleOutcomesItems> = z.union(
        [
            FlowPaymentOptionOutcome$.outboundSchema,
            FlowRedirectTransactionRoutingOutcome$.outboundSchema,
            FlowCardTransactionRoutingOutcome$.outboundSchema,
        ]
    );
}

/** @internal */
export namespace FlowRuleOutcomes$ {
    export type Inbound = {
        items?:
            | Array<
                  | FlowPaymentOptionOutcome$.Inbound
                  | FlowRedirectTransactionRoutingOutcome$.Inbound
                  | FlowCardTransactionRoutingOutcome$.Inbound
              >
            | undefined;
    };

    export const inboundSchema: z.ZodType<FlowRuleOutcomes, z.ZodTypeDef, Inbound> = z
        .object({
            items: z
                .array(
                    z.union([
                        FlowPaymentOptionOutcome$.inboundSchema,
                        FlowRedirectTransactionRoutingOutcome$.inboundSchema,
                        FlowCardTransactionRoutingOutcome$.inboundSchema,
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
            };
        });

    export type Outbound = {
        items?:
            | Array<
                  | FlowPaymentOptionOutcome$.Outbound
                  | FlowRedirectTransactionRoutingOutcome$.Outbound
                  | FlowCardTransactionRoutingOutcome$.Outbound
              >
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowRuleOutcomes> = z
        .object({
            items: z
                .array(
                    z.union([
                        FlowPaymentOptionOutcome$.outboundSchema,
                        FlowRedirectTransactionRoutingOutcome$.outboundSchema,
                        FlowCardTransactionRoutingOutcome$.outboundSchema,
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
            };
        });
}
