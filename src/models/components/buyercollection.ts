/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { Buyer, Buyer$inboundSchema, Buyer$Outbound, Buyer$outboundSchema } from "./buyer.js";
import * as z from "zod";

/**
 * Collection of results.
 */
export type BuyerCollection = {
    /**
     * A page of items returned for this request
     */
    items: Array<Buyer>;
    /**
     * The number of items for this page
     */
    limit?: number | undefined;
    /**
     * The cursor pointing at the next page of items.
     */
    nextCursor?: string | null | undefined;
    /**
     * The cursor pointing at the previous page of items.
     */
    previousCursor?: string | null | undefined;
};

/** @internal */
export const BuyerCollection$inboundSchema: z.ZodType<BuyerCollection, z.ZodTypeDef, unknown> = z
    .object({
        items: z.array(Buyer$inboundSchema),
        limit: z.number().int().default(20),
        next_cursor: z.nullable(z.string()).optional(),
        previous_cursor: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            next_cursor: "nextCursor",
            previous_cursor: "previousCursor",
        });
    });

/** @internal */
export type BuyerCollection$Outbound = {
    items: Array<Buyer$Outbound>;
    limit: number;
    next_cursor?: string | null | undefined;
    previous_cursor?: string | null | undefined;
};

/** @internal */
export const BuyerCollection$outboundSchema: z.ZodType<
    BuyerCollection$Outbound,
    z.ZodTypeDef,
    BuyerCollection
> = z
    .object({
        items: z.array(Buyer$outboundSchema),
        limit: z.number().int().default(20),
        nextCursor: z.nullable(z.string()).optional(),
        previousCursor: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            nextCursor: "next_cursor",
            previousCursor: "previous_cursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyerCollection$ {
    /** @deprecated use `BuyerCollection$inboundSchema` instead. */
    export const inboundSchema = BuyerCollection$inboundSchema;
    /** @deprecated use `BuyerCollection$outboundSchema` instead. */
    export const outboundSchema = BuyerCollection$outboundSchema;
    /** @deprecated use `BuyerCollection$Outbound` instead. */
    export type Outbound = BuyerCollection$Outbound;
}
