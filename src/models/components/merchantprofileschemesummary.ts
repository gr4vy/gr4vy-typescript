/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MerchantProfileSchemeSummary = {
  /**
   * Acquirer BIN to use when calling 3DS through this scheme.
   */
  merchantAcquirerBin: string;
  /**
   * Merchant ID to use when calling 3DS through this scheme.
   */
  merchantAcquirerId: string;
  merchantName: string;
  /**
   * The merchant's ISO 3166-1 numeric country code.
   */
  merchantCountryCode: string;
  /**
   * Merchant category code to use when calling 3DS through this scheme.
   */
  merchantCategoryCode: string;
  /**
   * URL to send when calling 3DS through this scheme.
   */
  merchantUrl: string;
  /**
   * The date and time when this profile was first created in our system.
   */
  createdAt: Date;
};

/** @internal */
export const MerchantProfileSchemeSummary$inboundSchema: z.ZodType<
  MerchantProfileSchemeSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchant_acquirer_bin: z.string(),
  merchant_acquirer_id: z.string(),
  merchant_name: z.string(),
  merchant_country_code: z.string(),
  merchant_category_code: z.string(),
  merchant_url: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "merchant_acquirer_bin": "merchantAcquirerBin",
    "merchant_acquirer_id": "merchantAcquirerId",
    "merchant_name": "merchantName",
    "merchant_country_code": "merchantCountryCode",
    "merchant_category_code": "merchantCategoryCode",
    "merchant_url": "merchantUrl",
    "created_at": "createdAt",
  });
});

/** @internal */
export type MerchantProfileSchemeSummary$Outbound = {
  merchant_acquirer_bin: string;
  merchant_acquirer_id: string;
  merchant_name: string;
  merchant_country_code: string;
  merchant_category_code: string;
  merchant_url: string;
  created_at: string;
};

/** @internal */
export const MerchantProfileSchemeSummary$outboundSchema: z.ZodType<
  MerchantProfileSchemeSummary$Outbound,
  z.ZodTypeDef,
  MerchantProfileSchemeSummary
> = z.object({
  merchantAcquirerBin: z.string(),
  merchantAcquirerId: z.string(),
  merchantName: z.string(),
  merchantCountryCode: z.string(),
  merchantCategoryCode: z.string(),
  merchantUrl: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    merchantAcquirerBin: "merchant_acquirer_bin",
    merchantAcquirerId: "merchant_acquirer_id",
    merchantName: "merchant_name",
    merchantCountryCode: "merchant_country_code",
    merchantCategoryCode: "merchant_category_code",
    merchantUrl: "merchant_url",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantProfileSchemeSummary$ {
  /** @deprecated use `MerchantProfileSchemeSummary$inboundSchema` instead. */
  export const inboundSchema = MerchantProfileSchemeSummary$inboundSchema;
  /** @deprecated use `MerchantProfileSchemeSummary$outboundSchema` instead. */
  export const outboundSchema = MerchantProfileSchemeSummary$outboundSchema;
  /** @deprecated use `MerchantProfileSchemeSummary$Outbound` instead. */
  export type Outbound = MerchantProfileSchemeSummary$Outbound;
}

export function merchantProfileSchemeSummaryToJSON(
  merchantProfileSchemeSummary: MerchantProfileSchemeSummary,
): string {
  return JSON.stringify(
    MerchantProfileSchemeSummary$outboundSchema.parse(
      merchantProfileSchemeSummary,
    ),
  );
}

export function merchantProfileSchemeSummaryFromJSON(
  jsonString: string,
): SafeParseResult<MerchantProfileSchemeSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MerchantProfileSchemeSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MerchantProfileSchemeSummary' from JSON`,
  );
}
