/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowPaymentSourceConditionName {
    PaymentSource = "payment_source",
}

/**
 * The comparison to make on the payment source `value`.
 */
export enum FlowPaymentSourceConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowPaymentSourceConditionValue {
    Ecommerce = "ecommerce",
    Moto = "moto",
    Recurring = "recurring",
    Installment = "installment",
    CardOnFile = "card_on_file",
}

/**
 * Payment source conditions with a name, operator, and value.
 */
export type FlowPaymentSourceCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowPaymentSourceConditionName;
    /**
     * The comparison to make on the payment source `value`.
     */
    operator: FlowPaymentSourceConditionOperator;
    /**
     * Payment sources to compare the transaction to.
     */
    value: Array<FlowPaymentSourceConditionValue>;
};

/** @internal */
export const FlowPaymentSourceConditionName$: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionName
> = z.nativeEnum(FlowPaymentSourceConditionName);

/** @internal */
export const FlowPaymentSourceConditionOperator$: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionOperator
> = z.nativeEnum(FlowPaymentSourceConditionOperator);

/** @internal */
export const FlowPaymentSourceConditionValue$: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionValue
> = z.nativeEnum(FlowPaymentSourceConditionValue);

/** @internal */
export namespace FlowPaymentSourceCondition$ {
    export type Inbound = {
        name: FlowPaymentSourceConditionName;
        operator: FlowPaymentSourceConditionOperator;
        value: Array<FlowPaymentSourceConditionValue>;
    };

    export const inboundSchema: z.ZodType<FlowPaymentSourceCondition, z.ZodTypeDef, Inbound> = z
        .object({
            name: FlowPaymentSourceConditionName$,
            operator: FlowPaymentSourceConditionOperator$,
            value: z.array(FlowPaymentSourceConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });

    export type Outbound = {
        name: FlowPaymentSourceConditionName;
        operator: FlowPaymentSourceConditionOperator;
        value: Array<FlowPaymentSourceConditionValue>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowPaymentSourceCondition> = z
        .object({
            name: FlowPaymentSourceConditionName$,
            operator: FlowPaymentSourceConditionOperator$,
            value: z.array(FlowPaymentSourceConditionValue$),
        })
        .transform((v) => {
            return {
                name: v.name,
                operator: v.operator,
                value: v.value,
            };
        });
}
