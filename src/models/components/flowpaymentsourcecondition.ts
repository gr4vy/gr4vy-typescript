/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export const FlowPaymentSourceConditionName = {
    PaymentSource: "payment_source",
} as const;
/**
 * The type of match made for this rule.
 */
export type FlowPaymentSourceConditionName = ClosedEnum<typeof FlowPaymentSourceConditionName>;

/**
 * The comparison to make on the payment source `value`.
 */
export const FlowPaymentSourceConditionOperator = {
    IsOneOf: "is_one_of",
    IsNotOneOf: "is_not_one_of",
} as const;
/**
 * The comparison to make on the payment source `value`.
 */
export type FlowPaymentSourceConditionOperator = ClosedEnum<
    typeof FlowPaymentSourceConditionOperator
>;

export const FlowPaymentSourceConditionValue = {
    Ecommerce: "ecommerce",
    Moto: "moto",
    Recurring: "recurring",
    Installment: "installment",
    CardOnFile: "card_on_file",
} as const;
export type FlowPaymentSourceConditionValue = ClosedEnum<typeof FlowPaymentSourceConditionValue>;

/**
 * Payment source conditions with a name, operator, and value.
 */
export type FlowPaymentSourceCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowPaymentSourceConditionName;
    /**
     * The comparison to make on the payment source `value`.
     */
    operator: FlowPaymentSourceConditionOperator;
    /**
     * Payment sources to compare the transaction to.
     */
    value: Array<FlowPaymentSourceConditionValue>;
};

/** @internal */
export const FlowPaymentSourceConditionName$inboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionName
> = z.nativeEnum(FlowPaymentSourceConditionName);

/** @internal */
export const FlowPaymentSourceConditionName$outboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionName
> = FlowPaymentSourceConditionName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentSourceConditionName$ {
    /** @deprecated use `FlowPaymentSourceConditionName$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentSourceConditionName$inboundSchema;
    /** @deprecated use `FlowPaymentSourceConditionName$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentSourceConditionName$outboundSchema;
}

/** @internal */
export const FlowPaymentSourceConditionOperator$inboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionOperator
> = z.nativeEnum(FlowPaymentSourceConditionOperator);

/** @internal */
export const FlowPaymentSourceConditionOperator$outboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionOperator
> = FlowPaymentSourceConditionOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentSourceConditionOperator$ {
    /** @deprecated use `FlowPaymentSourceConditionOperator$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentSourceConditionOperator$inboundSchema;
    /** @deprecated use `FlowPaymentSourceConditionOperator$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentSourceConditionOperator$outboundSchema;
}

/** @internal */
export const FlowPaymentSourceConditionValue$inboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionValue
> = z.nativeEnum(FlowPaymentSourceConditionValue);

/** @internal */
export const FlowPaymentSourceConditionValue$outboundSchema: z.ZodNativeEnum<
    typeof FlowPaymentSourceConditionValue
> = FlowPaymentSourceConditionValue$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentSourceConditionValue$ {
    /** @deprecated use `FlowPaymentSourceConditionValue$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentSourceConditionValue$inboundSchema;
    /** @deprecated use `FlowPaymentSourceConditionValue$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentSourceConditionValue$outboundSchema;
}

/** @internal */
export const FlowPaymentSourceCondition$inboundSchema: z.ZodType<
    FlowPaymentSourceCondition,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: FlowPaymentSourceConditionName$inboundSchema,
    operator: FlowPaymentSourceConditionOperator$inboundSchema,
    value: z.array(FlowPaymentSourceConditionValue$inboundSchema),
});

/** @internal */
export type FlowPaymentSourceCondition$Outbound = {
    name: string;
    operator: string;
    value: Array<string>;
};

/** @internal */
export const FlowPaymentSourceCondition$outboundSchema: z.ZodType<
    FlowPaymentSourceCondition$Outbound,
    z.ZodTypeDef,
    FlowPaymentSourceCondition
> = z.object({
    name: FlowPaymentSourceConditionName$outboundSchema,
    operator: FlowPaymentSourceConditionOperator$outboundSchema,
    value: z.array(FlowPaymentSourceConditionValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlowPaymentSourceCondition$ {
    /** @deprecated use `FlowPaymentSourceCondition$inboundSchema` instead. */
    export const inboundSchema = FlowPaymentSourceCondition$inboundSchema;
    /** @deprecated use `FlowPaymentSourceCondition$outboundSchema` instead. */
    export const outboundSchema = FlowPaymentSourceCondition$outboundSchema;
    /** @deprecated use `FlowPaymentSourceCondition$Outbound` instead. */
    export type Outbound = FlowPaymentSourceCondition$Outbound;
}
