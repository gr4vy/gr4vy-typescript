/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of match made for this rule.
 */
export enum FlowPaymentSourceConditionName {
    PaymentSource = "payment_source",
}

/**
 * The comparison to make on the payment source `value`.
 */
export enum FlowPaymentSourceConditionOperator {
    IsOneOf = "is_one_of",
    IsNotOneOf = "is_not_one_of",
}

export enum FlowPaymentSourceConditionValue {
    Ecommerce = "ecommerce",
    Moto = "moto",
    Recurring = "recurring",
    Installment = "installment",
    CardOnFile = "card_on_file",
}

/**
 * Payment source conditions with a name, operator, and value.
 */
export type FlowPaymentSourceCondition = {
    /**
     * The type of match made for this rule.
     */
    name: FlowPaymentSourceConditionName;
    /**
     * The comparison to make on the payment source `value`.
     */
    operator: FlowPaymentSourceConditionOperator;
    /**
     * Payment sources to compare the transaction to.
     */
    value: Array<FlowPaymentSourceConditionValue>;
};

/** @internal */
export namespace FlowPaymentSourceConditionName$ {
    export const inboundSchema = z.nativeEnum(FlowPaymentSourceConditionName);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowPaymentSourceConditionOperator$ {
    export const inboundSchema = z.nativeEnum(FlowPaymentSourceConditionOperator);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowPaymentSourceConditionValue$ {
    export const inboundSchema = z.nativeEnum(FlowPaymentSourceConditionValue);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FlowPaymentSourceCondition$ {
    export const inboundSchema: z.ZodType<FlowPaymentSourceCondition, z.ZodTypeDef, unknown> =
        z.object({
            name: FlowPaymentSourceConditionName$.inboundSchema,
            operator: FlowPaymentSourceConditionOperator$.inboundSchema,
            value: z.array(FlowPaymentSourceConditionValue$.inboundSchema),
        });

    export type Outbound = {
        name: string;
        operator: string;
        value: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlowPaymentSourceCondition> =
        z.object({
            name: FlowPaymentSourceConditionName$.outboundSchema,
            operator: FlowPaymentSourceConditionOperator$.outboundSchema,
            value: z.array(FlowPaymentSourceConditionValue$.outboundSchema),
        });
}
