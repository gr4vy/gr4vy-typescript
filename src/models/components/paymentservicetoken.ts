/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentMethodStatus,
  PaymentMethodStatus$inboundSchema,
  PaymentMethodStatus$outboundSchema,
} from "./paymentmethodstatus.js";

export type PaymentServiceToken = {
  /**
   * Always `payment-service-token`.
   */
  type?: "payment-service-token" | undefined;
  /**
   * The ID for the payment service token.
   */
  id: string;
  /**
   * The optional URL that the buyer needs to be redirected to to further authorize the token creation.
   */
  approvalUrl?: string | null | undefined;
  /**
   * The ID of the payment method used to generate this token
   */
  paymentMethodId: string;
  /**
   * The ID of the payment method used to generate this token.
   */
  paymentServiceId: string;
  status: PaymentMethodStatus;
  /**
   * The token value. Will be present if succeeded.
   */
  token?: string | null | undefined;
  /**
   * The date and time when this payment service token was first created in our system.
   */
  createdAt: Date;
  /**
   * The date and time when this payment service token was last updated in our system.
   */
  updatedAt: Date;
};

/** @internal */
export const PaymentServiceToken$inboundSchema: z.ZodType<
  PaymentServiceToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("payment-service-token").default("payment-service-token"),
  id: z.string(),
  approval_url: z.nullable(z.string()).optional(),
  payment_method_id: z.string(),
  payment_service_id: z.string(),
  status: PaymentMethodStatus$inboundSchema,
  token: z.nullable(z.string()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "approval_url": "approvalUrl",
    "payment_method_id": "paymentMethodId",
    "payment_service_id": "paymentServiceId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PaymentServiceToken$Outbound = {
  type: "payment-service-token";
  id: string;
  approval_url?: string | null | undefined;
  payment_method_id: string;
  payment_service_id: string;
  status: string;
  token?: string | null | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PaymentServiceToken$outboundSchema: z.ZodType<
  PaymentServiceToken$Outbound,
  z.ZodTypeDef,
  PaymentServiceToken
> = z.object({
  type: z.literal("payment-service-token").default(
    "payment-service-token" as const,
  ),
  id: z.string(),
  approvalUrl: z.nullable(z.string()).optional(),
  paymentMethodId: z.string(),
  paymentServiceId: z.string(),
  status: PaymentMethodStatus$outboundSchema,
  token: z.nullable(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    approvalUrl: "approval_url",
    paymentMethodId: "payment_method_id",
    paymentServiceId: "payment_service_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceToken$ {
  /** @deprecated use `PaymentServiceToken$inboundSchema` instead. */
  export const inboundSchema = PaymentServiceToken$inboundSchema;
  /** @deprecated use `PaymentServiceToken$outboundSchema` instead. */
  export const outboundSchema = PaymentServiceToken$outboundSchema;
  /** @deprecated use `PaymentServiceToken$Outbound` instead. */
  export type Outbound = PaymentServiceToken$Outbound;
}

export function paymentServiceTokenToJSON(
  paymentServiceToken: PaymentServiceToken,
): string {
  return JSON.stringify(
    PaymentServiceToken$outboundSchema.parse(paymentServiceToken),
  );
}

export function paymentServiceTokenFromJSON(
  jsonString: string,
): SafeParseResult<PaymentServiceToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentServiceToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentServiceToken' from JSON`,
  );
}
