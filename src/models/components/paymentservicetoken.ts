/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of this resource.
 */
export const PaymentServiceTokenType = {
    PaymentServiceToken: "payment-service-token",
} as const;
/**
 * The type of this resource.
 */
export type PaymentServiceTokenType = ClosedEnum<typeof PaymentServiceTokenType>;

/**
 * The state of the token.
 *
 * @remarks
 *
 * - `processing` - The payment method is still being stored.
 * - `buyer_approval_required` - Storing the payment method requires
 *   the buyer to provide approval. Follow the `approval_url` for next steps.
 * - `succeeded` - The payment method is approved and stored with all
 *   relevant payment services.
 * - `failed` - Storing the payment method did not succeed.
 */
export const PaymentServiceTokenStatus = {
    Processing: "processing",
    BuyerApprovalRequired: "buyer_approval_required",
    Succeeded: "succeeded",
    Failed: "failed",
} as const;
/**
 * The state of the token.
 *
 * @remarks
 *
 * - `processing` - The payment method is still being stored.
 * - `buyer_approval_required` - Storing the payment method requires
 *   the buyer to provide approval. Follow the `approval_url` for next steps.
 * - `succeeded` - The payment method is approved and stored with all
 *   relevant payment services.
 * - `failed` - Storing the payment method did not succeed.
 */
export type PaymentServiceTokenStatus = ClosedEnum<typeof PaymentServiceTokenStatus>;

/**
 * A payment service token.
 */
export type PaymentServiceToken = {
    /**
     * The type of this resource.
     */
    type?: PaymentServiceTokenType | undefined;
    /**
     * The unique ID of the token.
     */
    id?: string | undefined;
    /**
     * The unique ID of the payment method.
     */
    paymentMethodId?: string | undefined;
    /**
     * The unique ID of the payment service.
     */
    paymentServiceId?: string | undefined;
    /**
     * The state of the token.
     *
     * @remarks
     *
     * - `processing` - The payment method is still being stored.
     * - `buyer_approval_required` - Storing the payment method requires
     *   the buyer to provide approval. Follow the `approval_url` for next steps.
     * - `succeeded` - The payment method is approved and stored with all
     *   relevant payment services.
     * - `failed` - Storing the payment method did not succeed.
     */
    status?: PaymentServiceTokenStatus | undefined;
    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    approvalUrl?: string | null | undefined;
    /**
     * The token value.
     */
    token?: string | undefined;
    /**
     * The date and time when this token was first created in our
     *
     * @remarks
     * system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this token was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const PaymentServiceTokenType$inboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceTokenType
> = z.nativeEnum(PaymentServiceTokenType);

/** @internal */
export const PaymentServiceTokenType$outboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceTokenType
> = PaymentServiceTokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceTokenType$ {
    /** @deprecated use `PaymentServiceTokenType$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceTokenType$inboundSchema;
    /** @deprecated use `PaymentServiceTokenType$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceTokenType$outboundSchema;
}

/** @internal */
export const PaymentServiceTokenStatus$inboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceTokenStatus
> = z.nativeEnum(PaymentServiceTokenStatus);

/** @internal */
export const PaymentServiceTokenStatus$outboundSchema: z.ZodNativeEnum<
    typeof PaymentServiceTokenStatus
> = PaymentServiceTokenStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceTokenStatus$ {
    /** @deprecated use `PaymentServiceTokenStatus$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceTokenStatus$inboundSchema;
    /** @deprecated use `PaymentServiceTokenStatus$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceTokenStatus$outboundSchema;
}

/** @internal */
export const PaymentServiceToken$inboundSchema: z.ZodType<
    PaymentServiceToken,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: PaymentServiceTokenType$inboundSchema.optional(),
        id: z.string().optional(),
        payment_method_id: z.string().optional(),
        payment_service_id: z.string().optional(),
        status: PaymentServiceTokenStatus$inboundSchema.optional(),
        approval_url: z.nullable(z.string()).optional(),
        token: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_method_id: "paymentMethodId",
            payment_service_id: "paymentServiceId",
            approval_url: "approvalUrl",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type PaymentServiceToken$Outbound = {
    type?: string | undefined;
    id?: string | undefined;
    payment_method_id?: string | undefined;
    payment_service_id?: string | undefined;
    status?: string | undefined;
    approval_url?: string | null | undefined;
    token?: string | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const PaymentServiceToken$outboundSchema: z.ZodType<
    PaymentServiceToken$Outbound,
    z.ZodTypeDef,
    PaymentServiceToken
> = z
    .object({
        type: PaymentServiceTokenType$outboundSchema.optional(),
        id: z.string().optional(),
        paymentMethodId: z.string().optional(),
        paymentServiceId: z.string().optional(),
        status: PaymentServiceTokenStatus$outboundSchema.optional(),
        approvalUrl: z.nullable(z.string()).optional(),
        token: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentMethodId: "payment_method_id",
            paymentServiceId: "payment_service_id",
            approvalUrl: "approval_url",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceToken$ {
    /** @deprecated use `PaymentServiceToken$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceToken$inboundSchema;
    /** @deprecated use `PaymentServiceToken$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceToken$outboundSchema;
    /** @deprecated use `PaymentServiceToken$Outbound` instead. */
    export type Outbound = PaymentServiceToken$Outbound;
}
