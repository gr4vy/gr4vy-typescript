/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    PaymentMethodStatus,
    PaymentMethodStatus$inboundSchema,
    PaymentMethodStatus$outboundSchema,
} from "./paymentmethodstatus.js";
import * as z from "zod";

export const Type = {
    PaymentServiceToken: "payment-service-token",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Base model with JSON encoders.
 */
export type PaymentServiceToken = {
    type?: Type | undefined;
    id: string;
    paymentMethodId: string;
    paymentServiceId: string;
    /**
     * An enumeration.
     */
    status: PaymentMethodStatus;
    approvalUrl?: string | undefined;
    token?: string | undefined;
    createdAt: Date;
    updatedAt: Date;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const PaymentServiceToken$inboundSchema: z.ZodType<
    PaymentServiceToken,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: Type$inboundSchema.default("payment-service-token"),
        id: z.string(),
        payment_method_id: z.string(),
        payment_service_id: z.string(),
        status: PaymentMethodStatus$inboundSchema,
        approval_url: z.string().optional(),
        token: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            payment_method_id: "paymentMethodId",
            payment_service_id: "paymentServiceId",
            approval_url: "approvalUrl",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type PaymentServiceToken$Outbound = {
    type: string;
    id: string;
    payment_method_id: string;
    payment_service_id: string;
    status: string;
    approval_url?: string | undefined;
    token?: string | undefined;
    created_at: string;
    updated_at: string;
};

/** @internal */
export const PaymentServiceToken$outboundSchema: z.ZodType<
    PaymentServiceToken$Outbound,
    z.ZodTypeDef,
    PaymentServiceToken
> = z
    .object({
        type: Type$outboundSchema.default("payment-service-token"),
        id: z.string(),
        paymentMethodId: z.string(),
        paymentServiceId: z.string(),
        status: PaymentMethodStatus$outboundSchema,
        approvalUrl: z.string().optional(),
        token: z.string().optional(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            paymentMethodId: "payment_method_id",
            paymentServiceId: "payment_service_id",
            approvalUrl: "approval_url",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentServiceToken$ {
    /** @deprecated use `PaymentServiceToken$inboundSchema` instead. */
    export const inboundSchema = PaymentServiceToken$inboundSchema;
    /** @deprecated use `PaymentServiceToken$outboundSchema` instead. */
    export const outboundSchema = PaymentServiceToken$outboundSchema;
    /** @deprecated use `PaymentServiceToken$Outbound` instead. */
    export type Outbound = PaymentServiceToken$Outbound;
}
