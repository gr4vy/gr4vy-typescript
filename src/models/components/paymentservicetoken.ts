/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of this resource.
 */
export enum PaymentServiceTokenType {
    PaymentServiceToken = "payment-service-token",
}

/**
 * The state of the token.
 *
 * @remarks
 *
 * - `processing` - The payment method is still being stored.
 * - `buyer_approval_required` - Storing the payment method requires
 *   the buyer to provide approval. Follow the `approval_url` for next steps.
 * - `succeeded` - The payment method is approved and stored with all
 *   relevant payment services.
 * - `failed` - Storing the payment method did not succeed.
 */
export enum PaymentServiceTokenStatus {
    Processing = "processing",
    BuyerApprovalRequired = "buyer_approval_required",
    Succeeded = "succeeded",
    Failed = "failed",
}

/**
 * A payment service token.
 */
export type PaymentServiceToken = {
    /**
     * The type of this resource.
     */
    type?: PaymentServiceTokenType | undefined;
    /**
     * The unique ID of the token.
     */
    id?: string | undefined;
    /**
     * The unique ID of the payment method.
     */
    paymentMethodId?: string | undefined;
    /**
     * The unique ID of the payment service.
     */
    paymentServiceId?: string | undefined;
    /**
     * The state of the token.
     *
     * @remarks
     *
     * - `processing` - The payment method is still being stored.
     * - `buyer_approval_required` - Storing the payment method requires
     *   the buyer to provide approval. Follow the `approval_url` for next steps.
     * - `succeeded` - The payment method is approved and stored with all
     *   relevant payment services.
     * - `failed` - Storing the payment method did not succeed.
     */
    status?: PaymentServiceTokenStatus | undefined;
    /**
     * The optional URL that the buyer needs to be redirected to to further authorize their payment.
     */
    approvalUrl?: string | null | undefined;
    /**
     * The token value.
     */
    token?: string | undefined;
    /**
     * The date and time when this token was first created in our
     *
     * @remarks
     * system.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this token was last updated in our system.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const PaymentServiceTokenType$ = z.nativeEnum(PaymentServiceTokenType);

/** @internal */
export const PaymentServiceTokenStatus$ = z.nativeEnum(PaymentServiceTokenStatus);

/** @internal */
export namespace PaymentServiceToken$ {
    export type Inbound = {
        type?: PaymentServiceTokenType | undefined;
        id?: string | undefined;
        payment_method_id?: string | undefined;
        payment_service_id?: string | undefined;
        status?: PaymentServiceTokenStatus | undefined;
        approval_url?: string | null | undefined;
        token?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentServiceToken, z.ZodTypeDef, Inbound> = z
        .object({
            type: PaymentServiceTokenType$.optional(),
            id: z.string().optional(),
            payment_method_id: z.string().optional(),
            payment_service_id: z.string().optional(),
            status: PaymentServiceTokenStatus$.optional(),
            approval_url: z.nullable(z.string()).optional(),
            token: z.string().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.payment_method_id === undefined
                    ? null
                    : { paymentMethodId: v.payment_method_id }),
                ...(v.payment_service_id === undefined
                    ? null
                    : { paymentServiceId: v.payment_service_id }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.approval_url === undefined ? null : { approvalUrl: v.approval_url }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        type?: PaymentServiceTokenType | undefined;
        id?: string | undefined;
        payment_method_id?: string | undefined;
        payment_service_id?: string | undefined;
        status?: PaymentServiceTokenStatus | undefined;
        approval_url?: string | null | undefined;
        token?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentServiceToken> = z
        .object({
            type: PaymentServiceTokenType$.optional(),
            id: z.string().optional(),
            paymentMethodId: z.string().optional(),
            paymentServiceId: z.string().optional(),
            status: PaymentServiceTokenStatus$.optional(),
            approvalUrl: z.nullable(z.string()).optional(),
            token: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.paymentMethodId === undefined
                    ? null
                    : { payment_method_id: v.paymentMethodId }),
                ...(v.paymentServiceId === undefined
                    ? null
                    : { payment_service_id: v.paymentServiceId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.approvalUrl === undefined ? null : { approval_url: v.approvalUrl }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
