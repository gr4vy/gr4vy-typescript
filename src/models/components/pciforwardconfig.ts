/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A configured Vault Forward configuration.
 */
export type PCIForwardConfig = {
    /**
     * The type of this resource. It is always `vault-forward-config`.
     */
    type?: string | undefined;
    /**
     * The ID of this Vault Forward configuration.
     */
    id?: string | undefined;
    /**
     * The date and time when this configuration was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this configuration was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The ID of the Vault Forward definition.
     */
    definitionId?: string | undefined;
    /**
     * The display name for this configuration.
     */
    displayName?: string | undefined;
    /**
     * The hosts where Vault Forward requests are allowed for this definition.
     */
    hosts?: Array<string> | undefined;
};

/** @internal */
export namespace PCIForwardConfig$ {
    export type Inbound = {
        type?: string | undefined;
        id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        merchant_account_id?: string | undefined;
        definition_id?: string | undefined;
        display_name?: string | undefined;
        hosts?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PCIForwardConfig, z.ZodTypeDef, Inbound> = z
        .object({
            type: z.string().default("vault-forward-config"),
            id: z.string().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            merchant_account_id: z.string().optional(),
            definition_id: z.string().optional(),
            display_name: z.string().optional(),
            hosts: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
                ...(v.merchant_account_id === undefined
                    ? null
                    : { merchantAccountId: v.merchant_account_id }),
                ...(v.definition_id === undefined ? null : { definitionId: v.definition_id }),
                ...(v.display_name === undefined ? null : { displayName: v.display_name }),
                ...(v.hosts === undefined ? null : { hosts: v.hosts }),
            };
        });

    export type Outbound = {
        type: string;
        id?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        merchant_account_id?: string | undefined;
        definition_id?: string | undefined;
        display_name?: string | undefined;
        hosts?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PCIForwardConfig> = z
        .object({
            type: z.string().default("vault-forward-config"),
            id: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            merchantAccountId: z.string().optional(),
            definitionId: z.string().optional(),
            displayName: z.string().optional(),
            hosts: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
                ...(v.merchantAccountId === undefined
                    ? null
                    : { merchant_account_id: v.merchantAccountId }),
                ...(v.definitionId === undefined ? null : { definition_id: v.definitionId }),
                ...(v.displayName === undefined ? null : { display_name: v.displayName }),
                ...(v.hosts === undefined ? null : { hosts: v.hosts }),
            };
        });
}
