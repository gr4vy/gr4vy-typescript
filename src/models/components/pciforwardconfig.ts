/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    PCIForwardConfigAuthentication,
    PCIForwardConfigAuthentication$inboundSchema,
    PCIForwardConfigAuthentication$Outbound,
    PCIForwardConfigAuthentication$outboundSchema,
} from "./pciforwardconfigauthentication.js";
import * as z from "zod";

/**
 * The user who created the Vault Forward configuration.
 */
export type PCIForwardConfigCreator = {
    /**
     * The ID of the user.
     */
    id?: string | undefined;
    /**
     * The name of the user.
     */
    name?: string | undefined;
    /**
     * The email address for this user.
     */
    emailAddress?: string | undefined;
};

/**
 * A configured Vault Forward configuration.
 */
export type PCIForwardConfig = {
    /**
     * The type of this resource. It is always `vault-forward-config`.
     */
    type?: string | undefined;
    /**
     * The ID of this Vault Forward configuration.
     */
    id?: string | undefined;
    /**
     * The date and time when this configuration was created.
     */
    createdAt?: Date | undefined;
    /**
     * The date and time when this configuration was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * The unique ID for a merchant account.
     */
    merchantAccountId?: string | undefined;
    /**
     * The ID of the Vault Forward definition.
     */
    definitionId?: string | undefined;
    /**
     * The display name for this configuration.
     */
    displayName?: string | undefined;
    /**
     * The hosts where Vault Forward requests are allowed for this definition.
     */
    hosts?: Array<string> | undefined;
    /**
     * Authentication methods that can be applied in Vault Forward requests.
     */
    authentications?: Array<PCIForwardConfigAuthentication> | undefined;
    /**
     * The user who created the Vault Forward configuration.
     */
    creator?: PCIForwardConfigCreator | null | undefined;
};

/** @internal */
export const PCIForwardConfigCreator$inboundSchema: z.ZodType<
    PCIForwardConfigCreator,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        email_address: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            email_address: "emailAddress",
        });
    });

/** @internal */
export type PCIForwardConfigCreator$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    email_address?: string | undefined;
};

/** @internal */
export const PCIForwardConfigCreator$outboundSchema: z.ZodType<
    PCIForwardConfigCreator$Outbound,
    z.ZodTypeDef,
    PCIForwardConfigCreator
> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        emailAddress: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            emailAddress: "email_address",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardConfigCreator$ {
    /** @deprecated use `PCIForwardConfigCreator$inboundSchema` instead. */
    export const inboundSchema = PCIForwardConfigCreator$inboundSchema;
    /** @deprecated use `PCIForwardConfigCreator$outboundSchema` instead. */
    export const outboundSchema = PCIForwardConfigCreator$outboundSchema;
    /** @deprecated use `PCIForwardConfigCreator$Outbound` instead. */
    export type Outbound = PCIForwardConfigCreator$Outbound;
}

/** @internal */
export const PCIForwardConfig$inboundSchema: z.ZodType<PCIForwardConfig, z.ZodTypeDef, unknown> = z
    .object({
        type: z.string().default("vault-forward-config"),
        id: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        merchant_account_id: z.string().optional(),
        definition_id: z.string().optional(),
        display_name: z.string().optional(),
        hosts: z.array(z.string()).optional(),
        authentications: z.array(PCIForwardConfigAuthentication$inboundSchema).optional(),
        creator: z.nullable(z.lazy(() => PCIForwardConfigCreator$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
            merchant_account_id: "merchantAccountId",
            definition_id: "definitionId",
            display_name: "displayName",
        });
    });

/** @internal */
export type PCIForwardConfig$Outbound = {
    type: string;
    id?: string | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    merchant_account_id?: string | undefined;
    definition_id?: string | undefined;
    display_name?: string | undefined;
    hosts?: Array<string> | undefined;
    authentications?: Array<PCIForwardConfigAuthentication$Outbound> | undefined;
    creator?: PCIForwardConfigCreator$Outbound | null | undefined;
};

/** @internal */
export const PCIForwardConfig$outboundSchema: z.ZodType<
    PCIForwardConfig$Outbound,
    z.ZodTypeDef,
    PCIForwardConfig
> = z
    .object({
        type: z.string().default("vault-forward-config"),
        id: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        merchantAccountId: z.string().optional(),
        definitionId: z.string().optional(),
        displayName: z.string().optional(),
        hosts: z.array(z.string()).optional(),
        authentications: z.array(PCIForwardConfigAuthentication$outboundSchema).optional(),
        creator: z.nullable(z.lazy(() => PCIForwardConfigCreator$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
            merchantAccountId: "merchant_account_id",
            definitionId: "definition_id",
            displayName: "display_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PCIForwardConfig$ {
    /** @deprecated use `PCIForwardConfig$inboundSchema` instead. */
    export const inboundSchema = PCIForwardConfig$inboundSchema;
    /** @deprecated use `PCIForwardConfig$outboundSchema` instead. */
    export const outboundSchema = PCIForwardConfig$outboundSchema;
    /** @deprecated use `PCIForwardConfig$Outbound` instead. */
    export type Outbound = PCIForwardConfig$Outbound;
}
