/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Error403,
  Error403$inboundSchema,
  Error403$Outbound,
  Error403$outboundSchema,
} from "./error403.js";
import {
  Error403Active,
  Error403Active$inboundSchema,
  Error403Active$Outbound,
  Error403Active$outboundSchema,
} from "./error403active.js";
import {
  Error403Forbidden,
  Error403Forbidden$inboundSchema,
  Error403Forbidden$Outbound,
  Error403Forbidden$outboundSchema,
} from "./error403forbidden.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The credentials were invalid or the caller did not have permission to act on the resource.
 */
export type UpdateBuyerResponse403UpdateBuyer =
  | Error403
  | Error403Forbidden
  | Error403Active;

/** @internal */
export const UpdateBuyerResponse403UpdateBuyer$inboundSchema: z.ZodType<
  UpdateBuyerResponse403UpdateBuyer,
  z.ZodTypeDef,
  unknown
> = z.union([
  Error403$inboundSchema,
  Error403Forbidden$inboundSchema,
  Error403Active$inboundSchema,
]);

/** @internal */
export type UpdateBuyerResponse403UpdateBuyer$Outbound =
  | Error403$Outbound
  | Error403Forbidden$Outbound
  | Error403Active$Outbound;

/** @internal */
export const UpdateBuyerResponse403UpdateBuyer$outboundSchema: z.ZodType<
  UpdateBuyerResponse403UpdateBuyer$Outbound,
  z.ZodTypeDef,
  UpdateBuyerResponse403UpdateBuyer
> = z.union([
  Error403$outboundSchema,
  Error403Forbidden$outboundSchema,
  Error403Active$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBuyerResponse403UpdateBuyer$ {
  /** @deprecated use `UpdateBuyerResponse403UpdateBuyer$inboundSchema` instead. */
  export const inboundSchema = UpdateBuyerResponse403UpdateBuyer$inboundSchema;
  /** @deprecated use `UpdateBuyerResponse403UpdateBuyer$outboundSchema` instead. */
  export const outboundSchema =
    UpdateBuyerResponse403UpdateBuyer$outboundSchema;
  /** @deprecated use `UpdateBuyerResponse403UpdateBuyer$Outbound` instead. */
  export type Outbound = UpdateBuyerResponse403UpdateBuyer$Outbound;
}

export function updateBuyerResponse403UpdateBuyerToJSON(
  updateBuyerResponse403UpdateBuyer: UpdateBuyerResponse403UpdateBuyer,
): string {
  return JSON.stringify(
    UpdateBuyerResponse403UpdateBuyer$outboundSchema.parse(
      updateBuyerResponse403UpdateBuyer,
    ),
  );
}

export function updateBuyerResponse403UpdateBuyerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBuyerResponse403UpdateBuyer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBuyerResponse403UpdateBuyer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBuyerResponse403UpdateBuyer' from JSON`,
  );
}
