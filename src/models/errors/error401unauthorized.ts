/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * `error`.
 */
export const Error401UnauthorizedType = {
    Error: "error",
} as const;
/**
 * `error`.
 */
export type Error401UnauthorizedType = ClosedEnum<typeof Error401UnauthorizedType>;

/**
 * `unauthorized`.
 */
export const Error401UnauthorizedCode = {
    Unauthorized: "unauthorized",
} as const;
/**
 * `unauthorized`.
 */
export type Error401UnauthorizedCode = ClosedEnum<typeof Error401UnauthorizedCode>;

/**
 * `401`.
 */
export const Error401UnauthorizedStatus = {
    FourHundredAndOne: 401,
} as const;
/**
 * `401`.
 */
export type Error401UnauthorizedStatus = ClosedEnum<typeof Error401UnauthorizedStatus>;

/**
 * No valid API authentication found.
 */
export const Message = {
    NoValidAPIAuthenticationFound: "No valid API authentication found",
} as const;
/**
 * No valid API authentication found.
 */
export type Message = ClosedEnum<typeof Message>;

/**
 * Unauthorized Error (HTTP 401).
 */
export type Error401UnauthorizedData = {
    /**
     * `error`.
     */
    type?: Error401UnauthorizedType | undefined;
    /**
     * `unauthorized`.
     */
    code?: Error401UnauthorizedCode | undefined;
    /**
     * `401`.
     */
    status?: Error401UnauthorizedStatus | undefined;
    /**
     * No valid API authentication found.
     */
    message?: Message | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Unauthorized Error (HTTP 401).
 */
export class Error401Unauthorized extends Error {
    /**
     * `error`.
     */
    type?: Error401UnauthorizedType | undefined;
    /**
     * `unauthorized`.
     */
    code?: Error401UnauthorizedCode | undefined;
    /**
     * `401`.
     */
    status?: Error401UnauthorizedStatus | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error401UnauthorizedData;

    constructor(err: Error401UnauthorizedData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.name = "Error401Unauthorized";
    }
}

/** @internal */
export const Error401UnauthorizedType$inboundSchema: z.ZodNativeEnum<
    typeof Error401UnauthorizedType
> = z.nativeEnum(Error401UnauthorizedType);

/** @internal */
export const Error401UnauthorizedType$outboundSchema: z.ZodNativeEnum<
    typeof Error401UnauthorizedType
> = Error401UnauthorizedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error401UnauthorizedType$ {
    /** @deprecated use `Error401UnauthorizedType$inboundSchema` instead. */
    export const inboundSchema = Error401UnauthorizedType$inboundSchema;
    /** @deprecated use `Error401UnauthorizedType$outboundSchema` instead. */
    export const outboundSchema = Error401UnauthorizedType$outboundSchema;
}

/** @internal */
export const Error401UnauthorizedCode$inboundSchema: z.ZodNativeEnum<
    typeof Error401UnauthorizedCode
> = z.nativeEnum(Error401UnauthorizedCode);

/** @internal */
export const Error401UnauthorizedCode$outboundSchema: z.ZodNativeEnum<
    typeof Error401UnauthorizedCode
> = Error401UnauthorizedCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error401UnauthorizedCode$ {
    /** @deprecated use `Error401UnauthorizedCode$inboundSchema` instead. */
    export const inboundSchema = Error401UnauthorizedCode$inboundSchema;
    /** @deprecated use `Error401UnauthorizedCode$outboundSchema` instead. */
    export const outboundSchema = Error401UnauthorizedCode$outboundSchema;
}

/** @internal */
export const Error401UnauthorizedStatus$inboundSchema: z.ZodNativeEnum<
    typeof Error401UnauthorizedStatus
> = z.nativeEnum(Error401UnauthorizedStatus);

/** @internal */
export const Error401UnauthorizedStatus$outboundSchema: z.ZodNativeEnum<
    typeof Error401UnauthorizedStatus
> = Error401UnauthorizedStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error401UnauthorizedStatus$ {
    /** @deprecated use `Error401UnauthorizedStatus$inboundSchema` instead. */
    export const inboundSchema = Error401UnauthorizedStatus$inboundSchema;
    /** @deprecated use `Error401UnauthorizedStatus$outboundSchema` instead. */
    export const outboundSchema = Error401UnauthorizedStatus$outboundSchema;
}

/** @internal */
export const Message$inboundSchema: z.ZodNativeEnum<typeof Message> = z.nativeEnum(Message);

/** @internal */
export const Message$outboundSchema: z.ZodNativeEnum<typeof Message> = Message$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
    /** @deprecated use `Message$inboundSchema` instead. */
    export const inboundSchema = Message$inboundSchema;
    /** @deprecated use `Message$outboundSchema` instead. */
    export const outboundSchema = Message$outboundSchema;
}

/** @internal */
export const Error401Unauthorized$inboundSchema: z.ZodType<
    Error401Unauthorized,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: Error401UnauthorizedType$inboundSchema.optional(),
        code: Error401UnauthorizedCode$inboundSchema.optional(),
        status: Error401UnauthorizedStatus$inboundSchema.optional(),
        message: Message$inboundSchema.optional(),
        details: z.array(components.ErrorDetail$inboundSchema).optional(),
    })
    .transform((v) => {
        return new Error401Unauthorized(v);
    });

/** @internal */
export type Error401Unauthorized$Outbound = {
    type?: string | undefined;
    code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    details?: Array<components.ErrorDetail$Outbound> | undefined;
};

/** @internal */
export const Error401Unauthorized$outboundSchema: z.ZodType<
    Error401Unauthorized$Outbound,
    z.ZodTypeDef,
    Error401Unauthorized
> = z
    .instanceof(Error401Unauthorized)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            type: Error401UnauthorizedType$outboundSchema.optional(),
            code: Error401UnauthorizedCode$outboundSchema.optional(),
            status: Error401UnauthorizedStatus$outboundSchema.optional(),
            message: Message$outboundSchema.optional(),
            details: z.array(components.ErrorDetail$outboundSchema).optional(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error401Unauthorized$ {
    /** @deprecated use `Error401Unauthorized$inboundSchema` instead. */
    export const inboundSchema = Error401Unauthorized$inboundSchema;
    /** @deprecated use `Error401Unauthorized$outboundSchema` instead. */
    export const outboundSchema = Error401Unauthorized$outboundSchema;
    /** @deprecated use `Error401Unauthorized$Outbound` instead. */
    export type Outbound = Error401Unauthorized$Outbound;
}
