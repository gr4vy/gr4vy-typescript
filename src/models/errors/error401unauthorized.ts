/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * `error`.
 */
export enum Error401UnauthorizedType {
    Error = "error",
}

/**
 * `unauthorized`.
 */
export enum Error401UnauthorizedCode {
    Unauthorized = "unauthorized",
}

/**
 * `401`.
 */
export enum Error401UnauthorizedStatus {
    FourHundredAndOne = 401,
}

/**
 * No valid API authentication found.
 */
export enum Message {
    NoValidAPIAuthenticationFound = "No valid API authentication found",
}

/**
 * Unauthorized Error (HTTP 401).
 */
export type Error401UnauthorizedData = {
    /**
     * `error`.
     */
    type?: Error401UnauthorizedType | undefined;
    /**
     * `unauthorized`.
     */
    code?: Error401UnauthorizedCode | undefined;
    /**
     * `401`.
     */
    status?: Error401UnauthorizedStatus | undefined;
    /**
     * No valid API authentication found.
     */
    message?: Message | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Unauthorized Error (HTTP 401).
 */
export class Error401Unauthorized extends Error {
    /**
     * `error`.
     */
    type?: Error401UnauthorizedType | undefined;
    /**
     * `unauthorized`.
     */
    code?: Error401UnauthorizedCode | undefined;
    /**
     * `401`.
     */
    status?: Error401UnauthorizedStatus | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error401UnauthorizedData;

    constructor(err: Error401UnauthorizedData) {
        super("");
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "Error401Unauthorized";
    }
}

/** @internal */
export const Error401UnauthorizedType$ = z.nativeEnum(Error401UnauthorizedType);

/** @internal */
export const Error401UnauthorizedCode$ = z.nativeEnum(Error401UnauthorizedCode);

/** @internal */
export const Error401UnauthorizedStatus$ = z.nativeEnum(Error401UnauthorizedStatus);

/** @internal */
export const Message$ = z.nativeEnum(Message);

/** @internal */
export namespace Error401Unauthorized$ {
    export type Inbound = {
        type?: Error401UnauthorizedType | undefined;
        code?: Error401UnauthorizedCode | undefined;
        status?: Error401UnauthorizedStatus | undefined;
        message?: Message | undefined;
        details?: Array<components.ErrorDetail$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Error401Unauthorized, z.ZodTypeDef, Inbound> = z
        .object({
            type: Error401UnauthorizedType$.optional(),
            code: Error401UnauthorizedCode$.optional(),
            status: Error401UnauthorizedStatus$.optional(),
            message: Message$.optional(),
            details: z.array(components.ErrorDetail$.inboundSchema).optional(),
        })
        .transform((v) => {
            return new Error401Unauthorized({
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.details === undefined ? null : { details: v.details }),
            });
        });

    export type Outbound = {
        type?: Error401UnauthorizedType | undefined;
        code?: Error401UnauthorizedCode | undefined;
        status?: Error401UnauthorizedStatus | undefined;
        message?: Message | undefined;
        details?: Array<components.ErrorDetail$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Error401Unauthorized> = z
        .instanceof(Error401Unauthorized)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    type: Error401UnauthorizedType$.optional(),
                    code: Error401UnauthorizedCode$.optional(),
                    status: Error401UnauthorizedStatus$.optional(),
                    message: Message$.optional(),
                    details: z.array(components.ErrorDetail$.outboundSchema).optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.type === undefined ? null : { type: v.type }),
                        ...(v.code === undefined ? null : { code: v.code }),
                        ...(v.status === undefined ? null : { status: v.status }),
                        ...(v.message === undefined ? null : { message: v.message }),
                        ...(v.details === undefined ? null : { details: v.details }),
                    };
                })
        );
}
