/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * `error`.
 */
export const Error404NotFoundType = {
    Error: "error",
} as const;
/**
 * `error`.
 */
export type Error404NotFoundType = ClosedEnum<typeof Error404NotFoundType>;

/**
 * The reason code for the error.
 */
export const Error404NotFoundCode = {
    NotFound: "not_found",
    PendingCreation: "pending_creation",
} as const;
/**
 * The reason code for the error.
 */
export type Error404NotFoundCode = ClosedEnum<typeof Error404NotFoundCode>;

/**
 * `404`.
 */
export const Error404NotFoundStatus = {
    FourHundredAndFour: 404,
} as const;
/**
 * `404`.
 */
export type Error404NotFoundStatus = ClosedEnum<typeof Error404NotFoundStatus>;

/**
 * Not Found Error (HTTP 404).
 */
export type Error404NotFoundData = {
    /**
     * `error`.
     */
    type?: Error404NotFoundType | undefined;
    /**
     * The reason code for the error.
     */
    code?: Error404NotFoundCode | undefined;
    /**
     * `404`.
     */
    status?: Error404NotFoundStatus | undefined;
    /**
     * The human readable reason for the error.
     */
    message?: string | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Not Found Error (HTTP 404).
 */
export class Error404NotFound extends Error {
    /**
     * `error`.
     */
    type?: Error404NotFoundType | undefined;
    /**
     * The reason code for the error.
     */
    code?: Error404NotFoundCode | undefined;
    /**
     * `404`.
     */
    status?: Error404NotFoundStatus | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error404NotFoundData;

    constructor(err: Error404NotFoundData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.name = "Error404NotFound";
    }
}

/** @internal */
export const Error404NotFoundType$inboundSchema: z.ZodNativeEnum<typeof Error404NotFoundType> =
    z.nativeEnum(Error404NotFoundType);

/** @internal */
export const Error404NotFoundType$outboundSchema: z.ZodNativeEnum<typeof Error404NotFoundType> =
    Error404NotFoundType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error404NotFoundType$ {
    /** @deprecated use `Error404NotFoundType$inboundSchema` instead. */
    export const inboundSchema = Error404NotFoundType$inboundSchema;
    /** @deprecated use `Error404NotFoundType$outboundSchema` instead. */
    export const outboundSchema = Error404NotFoundType$outboundSchema;
}

/** @internal */
export const Error404NotFoundCode$inboundSchema: z.ZodNativeEnum<typeof Error404NotFoundCode> =
    z.nativeEnum(Error404NotFoundCode);

/** @internal */
export const Error404NotFoundCode$outboundSchema: z.ZodNativeEnum<typeof Error404NotFoundCode> =
    Error404NotFoundCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error404NotFoundCode$ {
    /** @deprecated use `Error404NotFoundCode$inboundSchema` instead. */
    export const inboundSchema = Error404NotFoundCode$inboundSchema;
    /** @deprecated use `Error404NotFoundCode$outboundSchema` instead. */
    export const outboundSchema = Error404NotFoundCode$outboundSchema;
}

/** @internal */
export const Error404NotFoundStatus$inboundSchema: z.ZodNativeEnum<typeof Error404NotFoundStatus> =
    z.nativeEnum(Error404NotFoundStatus);

/** @internal */
export const Error404NotFoundStatus$outboundSchema: z.ZodNativeEnum<typeof Error404NotFoundStatus> =
    Error404NotFoundStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error404NotFoundStatus$ {
    /** @deprecated use `Error404NotFoundStatus$inboundSchema` instead. */
    export const inboundSchema = Error404NotFoundStatus$inboundSchema;
    /** @deprecated use `Error404NotFoundStatus$outboundSchema` instead. */
    export const outboundSchema = Error404NotFoundStatus$outboundSchema;
}

/** @internal */
export const Error404NotFound$inboundSchema: z.ZodType<Error404NotFound, z.ZodTypeDef, unknown> = z
    .object({
        type: Error404NotFoundType$inboundSchema.optional(),
        code: Error404NotFoundCode$inboundSchema.optional(),
        status: Error404NotFoundStatus$inboundSchema.optional(),
        message: z.string().optional(),
        details: z.array(components.ErrorDetail$inboundSchema).optional(),
    })
    .transform((v) => {
        return new Error404NotFound(v);
    });

/** @internal */
export type Error404NotFound$Outbound = {
    type?: string | undefined;
    code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    details?: Array<components.ErrorDetail$Outbound> | undefined;
};

/** @internal */
export const Error404NotFound$outboundSchema: z.ZodType<
    Error404NotFound$Outbound,
    z.ZodTypeDef,
    Error404NotFound
> = z
    .instanceof(Error404NotFound)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            type: Error404NotFoundType$outboundSchema.optional(),
            code: Error404NotFoundCode$outboundSchema.optional(),
            status: Error404NotFoundStatus$outboundSchema.optional(),
            message: z.string().optional(),
            details: z.array(components.ErrorDetail$outboundSchema).optional(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error404NotFound$ {
    /** @deprecated use `Error404NotFound$inboundSchema` instead. */
    export const inboundSchema = Error404NotFound$inboundSchema;
    /** @deprecated use `Error404NotFound$outboundSchema` instead. */
    export const outboundSchema = Error404NotFound$outboundSchema;
    /** @deprecated use `Error404NotFound$Outbound` instead. */
    export type Outbound = Error404NotFound$Outbound;
}
