/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * `error`.
 */
export enum Error409DuplicateRecordType {
    Error = "error",
}

/**
 * `duplicate_record`.
 */
export enum Error409DuplicateRecordCode {
    DuplicateRecord = "duplicate_record",
}

/**
 * `409`.
 */
export enum Error409DuplicateRecordStatus {
    FourHundredAndNine = 409,
}

/**
 * Duplicate Record Error (HTTP 409).
 */
export type Error409DuplicateRecordData = {
    /**
     * `error`.
     */
    type?: Error409DuplicateRecordType | undefined;
    /**
     * `duplicate_record`.
     */
    code?: Error409DuplicateRecordCode | undefined;
    /**
     * `409`.
     */
    status?: Error409DuplicateRecordStatus | undefined;
    /**
     * Further details on the field that triggered the error.
     */
    message?: string | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Duplicate Record Error (HTTP 409).
 */
export class Error409DuplicateRecord extends Error {
    /**
     * `error`.
     */
    type?: Error409DuplicateRecordType | undefined;
    /**
     * `duplicate_record`.
     */
    code?: Error409DuplicateRecordCode | undefined;
    /**
     * `409`.
     */
    status?: Error409DuplicateRecordStatus | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error409DuplicateRecordData;

    constructor(err: Error409DuplicateRecordData) {
        super("");
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "Error409DuplicateRecord";
    }
}

/** @internal */
export namespace Error409DuplicateRecordType$ {
    export const inboundSchema = z.nativeEnum(Error409DuplicateRecordType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Error409DuplicateRecordCode$ {
    export const inboundSchema = z.nativeEnum(Error409DuplicateRecordCode);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Error409DuplicateRecordStatus$ {
    export const inboundSchema = z.nativeEnum(Error409DuplicateRecordStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Error409DuplicateRecord$ {
    export const inboundSchema: z.ZodType<Error409DuplicateRecord, z.ZodTypeDef, unknown> = z
        .object({
            type: Error409DuplicateRecordType$.inboundSchema.optional(),
            code: Error409DuplicateRecordCode$.inboundSchema.optional(),
            status: Error409DuplicateRecordStatus$.inboundSchema.optional(),
            message: z.string().optional(),
            details: z.array(components.ErrorDetail$.inboundSchema).optional(),
        })
        .transform((v) => {
            return new Error409DuplicateRecord(v);
        });

    export type Outbound = {
        type?: string | undefined;
        code?: string | undefined;
        status?: number | undefined;
        message?: string | undefined;
        details?: Array<components.ErrorDetail$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Error409DuplicateRecord> = z
        .instanceof(Error409DuplicateRecord)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                type: Error409DuplicateRecordType$.outboundSchema.optional(),
                code: Error409DuplicateRecordCode$.outboundSchema.optional(),
                status: Error409DuplicateRecordStatus$.outboundSchema.optional(),
                message: z.string().optional(),
                details: z.array(components.ErrorDetail$.outboundSchema).optional(),
            })
        );
}
