/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as components from "../components/index.js";
import { Gr4vyError } from "./gr4vyerror.js";

export type Error409Data = {
  /**
   * Always `error`.
   */
  type?: "error";
  /**
   * Always `duplicate_record`
   */
  code?: string;
  /**
   * Always `409`.
   */
  status?: number;
  /**
   * A human readable message that provides more context to the error.
   */
  message?: string;
  /**
   * A list of details that further ellaborate on the error.
   */
  details?: Array<components.ErrorDetail> | undefined;
};

export class Error409 extends Gr4vyError {
  /**
   * Always `error`.
   */
  type?: "error";
  /**
   * Always `duplicate_record`
   */
  code?: string;
  /**
   * Always `409`.
   */
  status?: number;
  /**
   * A list of details that further ellaborate on the error.
   */
  details?: Array<components.ErrorDetail> | undefined;

  /** The original data that was passed to this error instance. */
  data$: Error409Data;

  constructor(
    err: Error409Data,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.type != null) this.type = err.type;
    if (err.code != null) this.code = err.code;
    if (err.status != null) this.status = err.status;
    if (err.details != null) this.details = err.details;

    this.name = "Error409";
  }
}

/** @internal */
export const Error409$inboundSchema: z.ZodType<
  Error409,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("error").default("error"),
  code: z.string().default("duplicate_record"),
  status: z.number().int().default(409),
  message: z.string().default("Generic error"),
  details: z.array(components.ErrorDetail$inboundSchema).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new Error409(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type Error409$Outbound = {
  type?: "error";
  code?: string;
  status?: number;
  message?: string;
  details?: Array<components.ErrorDetail$Outbound> | undefined;
};

/** @internal */
export const Error409$outboundSchema: z.ZodType<
  Error409$Outbound,
  z.ZodTypeDef,
  Error409
> = z.instanceof(Error409)
  .transform(v => v.data$)
  .pipe(z.object({
    type: z.literal("error").default("error" as const),
    code: z.string().default("duplicate_record"),
    status: z.number().int().default(409),
    message: z.string().default("Generic error"),
    details: z.array(components.ErrorDetail$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error409$ {
  /** @deprecated use `Error409$inboundSchema` instead. */
  export const inboundSchema = Error409$inboundSchema;
  /** @deprecated use `Error409$outboundSchema` instead. */
  export const outboundSchema = Error409$outboundSchema;
  /** @deprecated use `Error409$Outbound` instead. */
  export type Outbound = Error409$Outbound;
}
