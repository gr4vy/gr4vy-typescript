/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * `error`.
 */
export const Type = {
    Error: "error",
} as const;
/**
 * `error`.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * A short code that describes the reason for the error.
 */
export const Code = {
    BadRequest: "bad_request",
    IncorrectJson: "incorrect_json",
    InvalidCredentials: "invalid_credentials",
} as const;
/**
 * A short code that describes the reason for the error.
 */
export type Code = ClosedEnum<typeof Code>;

/**
 * `400`.
 */
export const Status = {
    FourHundred: 400,
} as const;
/**
 * `400`.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Bad Request (HTTP 400).
 */
export type Error400BadRequestData = {
    /**
     * `error`.
     */
    type?: Type | undefined;
    /**
     * A short code that describes the reason for the error.
     */
    code?: Code | undefined;
    /**
     * `400`.
     */
    status?: Status | undefined;
    /**
     * A human-readable reason for the error.
     */
    message?: string | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Bad Request (HTTP 400).
 */
export class Error400BadRequest extends Error {
    /**
     * `error`.
     */
    type?: Type | undefined;
    /**
     * A short code that describes the reason for the error.
     */
    code?: Code | undefined;
    /**
     * `400`.
     */
    status?: Status | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error400BadRequestData;

    constructor(err: Error400BadRequestData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.name = "Error400BadRequest";
    }
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(Code);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> = Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
    /** @deprecated use `Code$inboundSchema` instead. */
    export const inboundSchema = Code$inboundSchema;
    /** @deprecated use `Code$outboundSchema` instead. */
    export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Error400BadRequest$inboundSchema: z.ZodType<
    Error400BadRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: Type$inboundSchema.optional(),
        code: Code$inboundSchema.optional(),
        status: Status$inboundSchema.optional(),
        message: z.string().optional(),
        details: z.array(components.ErrorDetail$inboundSchema).optional(),
    })
    .transform((v) => {
        return new Error400BadRequest(v);
    });

/** @internal */
export type Error400BadRequest$Outbound = {
    type?: string | undefined;
    code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    details?: Array<components.ErrorDetail$Outbound> | undefined;
};

/** @internal */
export const Error400BadRequest$outboundSchema: z.ZodType<
    Error400BadRequest$Outbound,
    z.ZodTypeDef,
    Error400BadRequest
> = z
    .instanceof(Error400BadRequest)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            type: Type$outboundSchema.optional(),
            code: Code$outboundSchema.optional(),
            status: Status$outboundSchema.optional(),
            message: z.string().optional(),
            details: z.array(components.ErrorDetail$outboundSchema).optional(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error400BadRequest$ {
    /** @deprecated use `Error400BadRequest$inboundSchema` instead. */
    export const inboundSchema = Error400BadRequest$inboundSchema;
    /** @deprecated use `Error400BadRequest$outboundSchema` instead. */
    export const outboundSchema = Error400BadRequest$outboundSchema;
    /** @deprecated use `Error400BadRequest$Outbound` instead. */
    export type Outbound = Error400BadRequest$Outbound;
}
