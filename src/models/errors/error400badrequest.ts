/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * `error`.
 */
export enum Type {
    Error = "error",
}

/**
 * `bad_request`.
 */
export enum Code {
    BadRequest = "bad_request",
}

/**
 * `400`.
 */
export enum Status {
    FourHundred = 400,
}

/**
 * Bad Request (HTTP 400).
 */
export type Error400BadRequestData = {
    /**
     * `error`.
     */
    type?: Type | undefined;
    /**
     * `bad_request`.
     */
    code?: Code | undefined;
    /**
     * `400`.
     */
    status?: Status | undefined;
    /**
     * Describes the fields that are missing or incorrectly formatted in the API
     *
     * @remarks
     * request.
     */
    message?: string | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Bad Request (HTTP 400).
 */
export class Error400BadRequest extends Error {
    /**
     * `error`.
     */
    type?: Type | undefined;
    /**
     * `bad_request`.
     */
    code?: Code | undefined;
    /**
     * `400`.
     */
    status?: Status | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error400BadRequestData;

    constructor(err: Error400BadRequestData) {
        super("");
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "Error400BadRequest";
    }
}

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export const Code$ = z.nativeEnum(Code);

/** @internal */
export const Status$ = z.nativeEnum(Status);

/** @internal */
export namespace Error400BadRequest$ {
    export type Inbound = {
        type?: Type | undefined;
        code?: Code | undefined;
        status?: Status | undefined;
        message?: string | undefined;
        details?: Array<components.ErrorDetail$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Error400BadRequest, z.ZodTypeDef, Inbound> = z
        .object({
            type: Type$.optional(),
            code: Code$.optional(),
            status: Status$.optional(),
            message: z.string().optional(),
            details: z.array(components.ErrorDetail$.inboundSchema).optional(),
        })
        .transform((v) => {
            return new Error400BadRequest({
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.details === undefined ? null : { details: v.details }),
            });
        });

    export type Outbound = {
        type?: Type | undefined;
        code?: Code | undefined;
        status?: Status | undefined;
        message?: string | undefined;
        details?: Array<components.ErrorDetail$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Error400BadRequest> = z
        .instanceof(Error400BadRequest)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    type: Type$.optional(),
                    code: Code$.optional(),
                    status: Status$.optional(),
                    message: z.string().optional(),
                    details: z.array(components.ErrorDetail$.outboundSchema).optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.type === undefined ? null : { type: v.type }),
                        ...(v.code === undefined ? null : { code: v.code }),
                        ...(v.status === undefined ? null : { status: v.status }),
                        ...(v.message === undefined ? null : { message: v.message }),
                        ...(v.details === undefined ? null : { details: v.details }),
                    };
                })
        );
}
