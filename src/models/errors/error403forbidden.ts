/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * `error`.
 */
export const Error403ForbiddenType = {
    Error: "error",
} as const;
/**
 * `error`.
 */
export type Error403ForbiddenType = ClosedEnum<typeof Error403ForbiddenType>;

/**
 * `forbidden`.
 */
export const Error403ForbiddenCode = {
    Forbidden: "forbidden",
} as const;
/**
 * `forbidden`.
 */
export type Error403ForbiddenCode = ClosedEnum<typeof Error403ForbiddenCode>;

/**
 * `403`.
 */
export const Error403ForbiddenStatus = {
    FourHundredAndThree: 403,
} as const;
/**
 * `403`.
 */
export type Error403ForbiddenStatus = ClosedEnum<typeof Error403ForbiddenStatus>;

/**
 * Invalid credentials.
 */
export const Error403ForbiddenMessage = {
    InvalidCredentials: "Invalid credentials",
} as const;
/**
 * Invalid credentials.
 */
export type Error403ForbiddenMessage = ClosedEnum<typeof Error403ForbiddenMessage>;

/**
 * Forbidden Error (HTTP 403).
 */
export type Error403ForbiddenData = {
    /**
     * `error`.
     */
    type?: Error403ForbiddenType | undefined;
    /**
     * `forbidden`.
     */
    code?: Error403ForbiddenCode | undefined;
    /**
     * `403`.
     */
    status?: Error403ForbiddenStatus | undefined;
    /**
     * Invalid credentials.
     */
    message?: Error403ForbiddenMessage | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Forbidden Error (HTTP 403).
 */
export class Error403Forbidden extends Error {
    /**
     * `error`.
     */
    type?: Error403ForbiddenType | undefined;
    /**
     * `forbidden`.
     */
    code?: Error403ForbiddenCode | undefined;
    /**
     * `403`.
     */
    status?: Error403ForbiddenStatus | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error403ForbiddenData;

    constructor(err: Error403ForbiddenData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.name = "Error403Forbidden";
    }
}

/** @internal */
export const Error403ForbiddenType$inboundSchema: z.ZodNativeEnum<typeof Error403ForbiddenType> =
    z.nativeEnum(Error403ForbiddenType);

/** @internal */
export const Error403ForbiddenType$outboundSchema: z.ZodNativeEnum<typeof Error403ForbiddenType> =
    Error403ForbiddenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error403ForbiddenType$ {
    /** @deprecated use `Error403ForbiddenType$inboundSchema` instead. */
    export const inboundSchema = Error403ForbiddenType$inboundSchema;
    /** @deprecated use `Error403ForbiddenType$outboundSchema` instead. */
    export const outboundSchema = Error403ForbiddenType$outboundSchema;
}

/** @internal */
export const Error403ForbiddenCode$inboundSchema: z.ZodNativeEnum<typeof Error403ForbiddenCode> =
    z.nativeEnum(Error403ForbiddenCode);

/** @internal */
export const Error403ForbiddenCode$outboundSchema: z.ZodNativeEnum<typeof Error403ForbiddenCode> =
    Error403ForbiddenCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error403ForbiddenCode$ {
    /** @deprecated use `Error403ForbiddenCode$inboundSchema` instead. */
    export const inboundSchema = Error403ForbiddenCode$inboundSchema;
    /** @deprecated use `Error403ForbiddenCode$outboundSchema` instead. */
    export const outboundSchema = Error403ForbiddenCode$outboundSchema;
}

/** @internal */
export const Error403ForbiddenStatus$inboundSchema: z.ZodNativeEnum<
    typeof Error403ForbiddenStatus
> = z.nativeEnum(Error403ForbiddenStatus);

/** @internal */
export const Error403ForbiddenStatus$outboundSchema: z.ZodNativeEnum<
    typeof Error403ForbiddenStatus
> = Error403ForbiddenStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error403ForbiddenStatus$ {
    /** @deprecated use `Error403ForbiddenStatus$inboundSchema` instead. */
    export const inboundSchema = Error403ForbiddenStatus$inboundSchema;
    /** @deprecated use `Error403ForbiddenStatus$outboundSchema` instead. */
    export const outboundSchema = Error403ForbiddenStatus$outboundSchema;
}

/** @internal */
export const Error403ForbiddenMessage$inboundSchema: z.ZodNativeEnum<
    typeof Error403ForbiddenMessage
> = z.nativeEnum(Error403ForbiddenMessage);

/** @internal */
export const Error403ForbiddenMessage$outboundSchema: z.ZodNativeEnum<
    typeof Error403ForbiddenMessage
> = Error403ForbiddenMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error403ForbiddenMessage$ {
    /** @deprecated use `Error403ForbiddenMessage$inboundSchema` instead. */
    export const inboundSchema = Error403ForbiddenMessage$inboundSchema;
    /** @deprecated use `Error403ForbiddenMessage$outboundSchema` instead. */
    export const outboundSchema = Error403ForbiddenMessage$outboundSchema;
}

/** @internal */
export const Error403Forbidden$inboundSchema: z.ZodType<Error403Forbidden, z.ZodTypeDef, unknown> =
    z
        .object({
            type: Error403ForbiddenType$inboundSchema.optional(),
            code: Error403ForbiddenCode$inboundSchema.optional(),
            status: Error403ForbiddenStatus$inboundSchema.optional(),
            message: Error403ForbiddenMessage$inboundSchema.optional(),
            details: z.array(components.ErrorDetail$inboundSchema).optional(),
        })
        .transform((v) => {
            return new Error403Forbidden(v);
        });

/** @internal */
export type Error403Forbidden$Outbound = {
    type?: string | undefined;
    code?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    details?: Array<components.ErrorDetail$Outbound> | undefined;
};

/** @internal */
export const Error403Forbidden$outboundSchema: z.ZodType<
    Error403Forbidden$Outbound,
    z.ZodTypeDef,
    Error403Forbidden
> = z
    .instanceof(Error403Forbidden)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            type: Error403ForbiddenType$outboundSchema.optional(),
            code: Error403ForbiddenCode$outboundSchema.optional(),
            status: Error403ForbiddenStatus$outboundSchema.optional(),
            message: Error403ForbiddenMessage$outboundSchema.optional(),
            details: z.array(components.ErrorDetail$outboundSchema).optional(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error403Forbidden$ {
    /** @deprecated use `Error403Forbidden$inboundSchema` instead. */
    export const inboundSchema = Error403Forbidden$inboundSchema;
    /** @deprecated use `Error403Forbidden$outboundSchema` instead. */
    export const outboundSchema = Error403Forbidden$outboundSchema;
    /** @deprecated use `Error403Forbidden$Outbound` instead. */
    export type Outbound = Error403Forbidden$Outbound;
}
