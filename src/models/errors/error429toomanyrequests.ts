/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * `error`.
 */
export enum Error429TooManyRequestsType {
    Error = "error",
}

/**
 * `too_many_requests`.
 */
export enum Error429TooManyRequestsCode {
    TooManyRequests = "too_many_requests",
}

/**
 * `429`.
 */
export enum Error429TooManyRequestsStatus {
    FourHundredAndTwentyNine = 429,
}

/**
 * Too Many Requests Error (HTTP 429).
 */
export type Error429TooManyRequestsData = {
    /**
     * `error`.
     */
    type?: Error429TooManyRequestsType | undefined;
    /**
     * `too_many_requests`.
     */
    code?: Error429TooManyRequestsCode | undefined;
    /**
     * `429`.
     */
    status?: Error429TooManyRequestsStatus | undefined;
    /**
     * Further details on the field that triggered the error.
     */
    message?: string | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;
};

/**
 * Too Many Requests Error (HTTP 429).
 */
export class Error429TooManyRequests extends Error {
    /**
     * `error`.
     */
    type?: Error429TooManyRequestsType | undefined;
    /**
     * `too_many_requests`.
     */
    code?: Error429TooManyRequestsCode | undefined;
    /**
     * `429`.
     */
    status?: Error429TooManyRequestsStatus | undefined;
    /**
     * A list of detail objects that further clarify the reason for the error.
     *
     * @remarks
     * Not every error supports more detail.
     */
    details?: Array<components.ErrorDetail> | undefined;

    /** The original data that was passed to this error instance. */
    data$: Error429TooManyRequestsData;

    constructor(err: Error429TooManyRequestsData) {
        super("");
        this.data$ = err;

        if (err.type != null) {
            this.type = err.type;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.status != null) {
            this.status = err.status;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "Error429TooManyRequests";
    }
}

/** @internal */
export const Error429TooManyRequestsType$: z.ZodNativeEnum<typeof Error429TooManyRequestsType> =
    z.nativeEnum(Error429TooManyRequestsType);

/** @internal */
export const Error429TooManyRequestsCode$: z.ZodNativeEnum<typeof Error429TooManyRequestsCode> =
    z.nativeEnum(Error429TooManyRequestsCode);

/** @internal */
export const Error429TooManyRequestsStatus$: z.ZodNativeEnum<typeof Error429TooManyRequestsStatus> =
    z.nativeEnum(Error429TooManyRequestsStatus);

/** @internal */
export namespace Error429TooManyRequests$ {
    export type Inbound = {
        type?: Error429TooManyRequestsType | undefined;
        code?: Error429TooManyRequestsCode | undefined;
        status?: Error429TooManyRequestsStatus | undefined;
        message?: string | undefined;
        details?: Array<components.ErrorDetail$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Error429TooManyRequests, z.ZodTypeDef, Inbound> = z
        .object({
            type: Error429TooManyRequestsType$.optional(),
            code: Error429TooManyRequestsCode$.optional(),
            status: Error429TooManyRequestsStatus$.optional(),
            message: z.string().optional(),
            details: z.array(components.ErrorDetail$.inboundSchema).optional(),
        })
        .transform((v) => {
            return new Error429TooManyRequests({
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.details === undefined ? null : { details: v.details }),
            });
        });

    export type Outbound = {
        type?: Error429TooManyRequestsType | undefined;
        code?: Error429TooManyRequestsCode | undefined;
        status?: Error429TooManyRequestsStatus | undefined;
        message?: string | undefined;
        details?: Array<components.ErrorDetail$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Error429TooManyRequests> = z
        .instanceof(Error429TooManyRequests)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    type: Error429TooManyRequestsType$.optional(),
                    code: Error429TooManyRequestsCode$.optional(),
                    status: Error429TooManyRequestsStatus$.optional(),
                    message: z.string().optional(),
                    details: z.array(components.ErrorDetail$.outboundSchema).optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.type === undefined ? null : { type: v.type }),
                        ...(v.code === undefined ? null : { code: v.code }),
                        ...(v.status === undefined ? null : { status: v.status }),
                        ...(v.message === undefined ? null : { message: v.message }),
                        ...(v.details === undefined ? null : { details: v.details }),
                    };
                })
        );
}
