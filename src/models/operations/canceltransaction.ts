/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelTransactionGlobals = {
  merchantAccountId?: string | undefined;
};

export type CancelTransactionRequest = {
  /**
   * The ID of the transaction
   */
  transactionId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const CancelTransactionGlobals$inboundSchema: z.ZodType<
  CancelTransactionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type CancelTransactionGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const CancelTransactionGlobals$outboundSchema: z.ZodType<
  CancelTransactionGlobals$Outbound,
  z.ZodTypeDef,
  CancelTransactionGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelTransactionGlobals$ {
  /** @deprecated use `CancelTransactionGlobals$inboundSchema` instead. */
  export const inboundSchema = CancelTransactionGlobals$inboundSchema;
  /** @deprecated use `CancelTransactionGlobals$outboundSchema` instead. */
  export const outboundSchema = CancelTransactionGlobals$outboundSchema;
  /** @deprecated use `CancelTransactionGlobals$Outbound` instead. */
  export type Outbound = CancelTransactionGlobals$Outbound;
}

export function cancelTransactionGlobalsToJSON(
  cancelTransactionGlobals: CancelTransactionGlobals,
): string {
  return JSON.stringify(
    CancelTransactionGlobals$outboundSchema.parse(cancelTransactionGlobals),
  );
}

export function cancelTransactionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CancelTransactionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelTransactionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelTransactionGlobals' from JSON`,
  );
}

/** @internal */
export const CancelTransactionRequest$inboundSchema: z.ZodType<
  CancelTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
  });
});

/** @internal */
export type CancelTransactionRequest$Outbound = {
  transaction_id: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const CancelTransactionRequest$outboundSchema: z.ZodType<
  CancelTransactionRequest$Outbound,
  z.ZodTypeDef,
  CancelTransactionRequest
> = z.object({
  transactionId: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelTransactionRequest$ {
  /** @deprecated use `CancelTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CancelTransactionRequest$inboundSchema;
  /** @deprecated use `CancelTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = CancelTransactionRequest$outboundSchema;
  /** @deprecated use `CancelTransactionRequest$Outbound` instead. */
  export type Outbound = CancelTransactionRequest$Outbound;
}

export function cancelTransactionRequestToJSON(
  cancelTransactionRequest: CancelTransactionRequest,
): string {
  return JSON.stringify(
    CancelTransactionRequest$outboundSchema.parse(cancelTransactionRequest),
  );
}

export function cancelTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelTransactionRequest' from JSON`,
  );
}
