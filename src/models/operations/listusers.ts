/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Filters the results to only the users for which the `status`
 *
 * @remarks
 * matches this value.
 */
export enum ListUsersQueryParamStatus {
    Active = "active",
    Pending = "pending",
}

export type ListUsersRequest = {
    /**
     * Filters the results to only the users for which the `name` or
     *
     * @remarks
     * `email_address` matches this value. This field allows for a partial
     * match, matching any user for which either of the fields partially or
     * completely matches.
     */
    search?: string | undefined;
    /**
     * Filters the results to only the users for which the `status`
     *
     * @remarks
     * matches this value.
     */
    status?: ListUsersQueryParamStatus | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Filters the results to only match the users that have any `roles`
     *
     * @remarks
     * that matches with any of the provided role IDs.
     */
    roles?: Array<string> | undefined;
};

export type ListUsersResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of users.
     */
    users?: components.Users | undefined;
};

/** @internal */
export const ListUsersQueryParamStatus$ = z.nativeEnum(ListUsersQueryParamStatus);

/** @internal */
export namespace ListUsersRequest$ {
    export type Inbound = {
        search?: string | undefined;
        status?: ListUsersQueryParamStatus | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
        roles?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<ListUsersRequest, z.ZodTypeDef, Inbound> = z
        .object({
            search: z.string().optional(),
            status: ListUsersQueryParamStatus$.optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            roles: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.search === undefined ? null : { search: v.search }),
                ...(v.status === undefined ? null : { status: v.status }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
            };
        });

    export type Outbound = {
        search?: string | undefined;
        status?: ListUsersQueryParamStatus | undefined;
        limit: number;
        cursor?: string | undefined;
        roles?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListUsersRequest> = z
        .object({
            search: z.string().optional(),
            status: ListUsersQueryParamStatus$.optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            roles: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.search === undefined ? null : { search: v.search }),
                ...(v.status === undefined ? null : { status: v.status }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
            };
        });
}

/** @internal */
export namespace ListUsersResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Users?: components.Users$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListUsersResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Users: components.Users$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Users === undefined ? null : { users: v.Users }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Users?: components.Users$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListUsersResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            users: components.Users$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.users === undefined ? null : { Users: v.users }),
            };
        });
}
