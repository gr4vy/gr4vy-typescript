/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UpdateApiKeyPairRequest = {
    /**
     * The ID for the API key pair.
     */
    apiKeyPairId: string;
    apiKeyPairUpdate?: components.APIKeyPairUpdate | undefined;
};

export type UpdateApiKeyPairResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns the updated key pair.
     */
    apiKeyPair?: components.APIKeyPair | undefined;
    /**
     * Returns a generic error.
     */
    errorGeneric?: components.ErrorGeneric | undefined;
};

/** @internal */
export namespace UpdateApiKeyPairRequest$ {
    export type Inbound = {
        api_key_pair_id: string;
        APIKeyPairUpdate?: components.APIKeyPairUpdate$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateApiKeyPairRequest, z.ZodTypeDef, Inbound> = z
        .object({
            api_key_pair_id: z.string(),
            APIKeyPairUpdate: components.APIKeyPairUpdate$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                apiKeyPairId: v.api_key_pair_id,
                ...(v.APIKeyPairUpdate === undefined
                    ? null
                    : { apiKeyPairUpdate: v.APIKeyPairUpdate }),
            };
        });

    export type Outbound = {
        api_key_pair_id: string;
        APIKeyPairUpdate?: components.APIKeyPairUpdate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateApiKeyPairRequest> = z
        .object({
            apiKeyPairId: z.string(),
            apiKeyPairUpdate: components.APIKeyPairUpdate$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                api_key_pair_id: v.apiKeyPairId,
                ...(v.apiKeyPairUpdate === undefined
                    ? null
                    : { APIKeyPairUpdate: v.apiKeyPairUpdate }),
            };
        });
}

/** @internal */
export namespace UpdateApiKeyPairResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        APIKeyPair?: components.APIKeyPair$.Inbound | undefined;
        ErrorGeneric?: components.ErrorGeneric$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateApiKeyPairResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            APIKeyPair: components.APIKeyPair$.inboundSchema.optional(),
            ErrorGeneric: components.ErrorGeneric$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.APIKeyPair === undefined ? null : { apiKeyPair: v.APIKeyPair }),
                ...(v.ErrorGeneric === undefined ? null : { errorGeneric: v.ErrorGeneric }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        APIKeyPair?: components.APIKeyPair$.Outbound | undefined;
        ErrorGeneric?: components.ErrorGeneric$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateApiKeyPairResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            apiKeyPair: components.APIKeyPair$.outboundSchema.optional(),
            errorGeneric: components.ErrorGeneric$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.apiKeyPair === undefined ? null : { APIKeyPair: v.apiKeyPair }),
                ...(v.errorGeneric === undefined ? null : { ErrorGeneric: v.errorGeneric }),
            };
        });
}
