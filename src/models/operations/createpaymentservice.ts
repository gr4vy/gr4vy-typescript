/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePaymentServiceGlobals = {
  merchantAccountId?: string | undefined;
};

export type CreatePaymentServiceRequest = {
  /**
   * the ID of the payment service
   */
  paymentServiceId: string;
  applicationName?: string | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  paymentServiceUpdate: components.PaymentServiceUpdate;
};

/** @internal */
export const CreatePaymentServiceGlobals$inboundSchema: z.ZodType<
  CreatePaymentServiceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type CreatePaymentServiceGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const CreatePaymentServiceGlobals$outboundSchema: z.ZodType<
  CreatePaymentServiceGlobals$Outbound,
  z.ZodTypeDef,
  CreatePaymentServiceGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentServiceGlobals$ {
  /** @deprecated use `CreatePaymentServiceGlobals$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentServiceGlobals$inboundSchema;
  /** @deprecated use `CreatePaymentServiceGlobals$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentServiceGlobals$outboundSchema;
  /** @deprecated use `CreatePaymentServiceGlobals$Outbound` instead. */
  export type Outbound = CreatePaymentServiceGlobals$Outbound;
}

export function createPaymentServiceGlobalsToJSON(
  createPaymentServiceGlobals: CreatePaymentServiceGlobals,
): string {
  return JSON.stringify(
    CreatePaymentServiceGlobals$outboundSchema.parse(
      createPaymentServiceGlobals,
    ),
  );
}

export function createPaymentServiceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentServiceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentServiceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentServiceGlobals' from JSON`,
  );
}

/** @internal */
export const CreatePaymentServiceRequest$inboundSchema: z.ZodType<
  CreatePaymentServiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_service_id: z.string(),
  application_name: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
  PaymentServiceUpdate: components.PaymentServiceUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "payment_service_id": "paymentServiceId",
    "application_name": "applicationName",
    "PaymentServiceUpdate": "paymentServiceUpdate",
  });
});

/** @internal */
export type CreatePaymentServiceRequest$Outbound = {
  payment_service_id: string;
  application_name: string;
  merchantAccountId?: string | null | undefined;
  PaymentServiceUpdate: components.PaymentServiceUpdate$Outbound;
};

/** @internal */
export const CreatePaymentServiceRequest$outboundSchema: z.ZodType<
  CreatePaymentServiceRequest$Outbound,
  z.ZodTypeDef,
  CreatePaymentServiceRequest
> = z.object({
  paymentServiceId: z.string(),
  applicationName: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
  paymentServiceUpdate: components.PaymentServiceUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    paymentServiceId: "payment_service_id",
    applicationName: "application_name",
    paymentServiceUpdate: "PaymentServiceUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentServiceRequest$ {
  /** @deprecated use `CreatePaymentServiceRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentServiceRequest$inboundSchema;
  /** @deprecated use `CreatePaymentServiceRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentServiceRequest$outboundSchema;
  /** @deprecated use `CreatePaymentServiceRequest$Outbound` instead. */
  export type Outbound = CreatePaymentServiceRequest$Outbound;
}

export function createPaymentServiceRequestToJSON(
  createPaymentServiceRequest: CreatePaymentServiceRequest,
): string {
  return JSON.stringify(
    CreatePaymentServiceRequest$outboundSchema.parse(
      createPaymentServiceRequest,
    ),
  );
}

export function createPaymentServiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentServiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePaymentServiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentServiceRequest' from JSON`,
  );
}
