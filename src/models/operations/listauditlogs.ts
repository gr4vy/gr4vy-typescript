/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListAuditLogsRequest = {
    cursor?: string | undefined;
    limit?: number | undefined;
    /**
     * An enumeration.
     */
    action?: components.AuditLogAction | undefined;
    userId?: string | undefined;
    resourceType?: string | undefined;
};

export type ListAuditLogsResponse = {
    result?: any | undefined;
};

/** @internal */
export const ListAuditLogsRequest$inboundSchema: z.ZodType<
    ListAuditLogsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        action: components.AuditLogAction$inboundSchema.optional(),
        user_id: z.string().optional(),
        resource_type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            user_id: "userId",
            resource_type: "resourceType",
        });
    });

/** @internal */
export type ListAuditLogsRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
    action?: string | undefined;
    user_id?: string | undefined;
    resource_type?: string | undefined;
};

/** @internal */
export const ListAuditLogsRequest$outboundSchema: z.ZodType<
    ListAuditLogsRequest$Outbound,
    z.ZodTypeDef,
    ListAuditLogsRequest
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        action: components.AuditLogAction$outboundSchema.optional(),
        userId: z.string().optional(),
        resourceType: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            userId: "user_id",
            resourceType: "resource_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditLogsRequest$ {
    /** @deprecated use `ListAuditLogsRequest$inboundSchema` instead. */
    export const inboundSchema = ListAuditLogsRequest$inboundSchema;
    /** @deprecated use `ListAuditLogsRequest$outboundSchema` instead. */
    export const outboundSchema = ListAuditLogsRequest$outboundSchema;
    /** @deprecated use `ListAuditLogsRequest$Outbound` instead. */
    export type Outbound = ListAuditLogsRequest$Outbound;
}

/** @internal */
export const ListAuditLogsResponse$inboundSchema: z.ZodType<
    ListAuditLogsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListAuditLogsResponse$Outbound = {
    Result?: any | undefined;
};

/** @internal */
export const ListAuditLogsResponse$outboundSchema: z.ZodType<
    ListAuditLogsResponse$Outbound,
    z.ZodTypeDef,
    ListAuditLogsResponse
> = z
    .object({
        result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditLogsResponse$ {
    /** @deprecated use `ListAuditLogsResponse$inboundSchema` instead. */
    export const inboundSchema = ListAuditLogsResponse$inboundSchema;
    /** @deprecated use `ListAuditLogsResponse$outboundSchema` instead. */
    export const outboundSchema = ListAuditLogsResponse$outboundSchema;
    /** @deprecated use `ListAuditLogsResponse$Outbound` instead. */
    export type Outbound = ListAuditLogsResponse$Outbound;
}
