/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Filters the results to only the items for which the `audit-log` has an
 *
 * @remarks
 * `action` that matches this value.
 */
export enum Action {
    Created = "created",
    Updated = "updated",
    Deleted = "deleted",
}

export type ListAuditLogsRequest = {
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Filters the results to only the items for which the `user` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    userId?: string | undefined;
    /**
     * Filters the results to only the items for which the `audit-log` has an
     *
     * @remarks
     * `action` that matches this value.
     */
    action?: Action | undefined;
    /**
     * Filters the results to only the items for which the `audit-log` has a
     *
     * @remarks
     * `resource` that matches this type value.
     */
    resourceType?: string | undefined;
};

export type ListAuditLogsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of audit logs.
     */
    auditLogs?: components.AuditLogs | undefined;
};

/** @internal */
export const Action$ = z.nativeEnum(Action);

/** @internal */
export namespace ListAuditLogsRequest$ {
    export type Inbound = {
        limit?: number | undefined;
        cursor?: string | undefined;
        user_id?: string | undefined;
        action?: Action | undefined;
        resource_type?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListAuditLogsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            user_id: z.string().optional(),
            action: Action$.optional(),
            resource_type: z.string().optional(),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.user_id === undefined ? null : { userId: v.user_id }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.resource_type === undefined ? null : { resourceType: v.resource_type }),
            };
        });

    export type Outbound = {
        limit: number;
        cursor?: string | undefined;
        user_id?: string | undefined;
        action?: Action | undefined;
        resource_type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAuditLogsRequest> = z
        .object({
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            userId: z.string().optional(),
            action: Action$.optional(),
            resourceType: z.string().optional(),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.userId === undefined ? null : { user_id: v.userId }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.resourceType === undefined ? null : { resource_type: v.resourceType }),
            };
        });
}

/** @internal */
export namespace ListAuditLogsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AuditLogs?: components.AuditLogs$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListAuditLogsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AuditLogs: components.AuditLogs$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AuditLogs === undefined ? null : { auditLogs: v.AuditLogs }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AuditLogs?: components.AuditLogs$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAuditLogsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            auditLogs: components.AuditLogs$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.auditLogs === undefined ? null : { AuditLogs: v.auditLogs }),
            };
        });
}
