/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Filters the results to only the items for which the `audit-log` has an
 *
 * @remarks
 * `action` that matches this value.
 */
export const Action = {
    Created: "created",
    Updated: "updated",
    Deleted: "deleted",
} as const;
/**
 * Filters the results to only the items for which the `audit-log` has an
 *
 * @remarks
 * `action` that matches this value.
 */
export type Action = ClosedEnum<typeof Action>;

export type ListAuditLogsRequest = {
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Filters the results to only the items for which the `user` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    userId?: string | undefined;
    /**
     * Filters the results to only the items for which the `audit-log` has an
     *
     * @remarks
     * `action` that matches this value.
     */
    action?: Action | undefined;
    /**
     * Filters the results to only the items for which the `audit-log` has a
     *
     * @remarks
     * `resource` that matches this type value.
     */
    resourceType?: string | undefined;
};

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z.nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> = Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
    /** @deprecated use `Action$inboundSchema` instead. */
    export const inboundSchema = Action$inboundSchema;
    /** @deprecated use `Action$outboundSchema` instead. */
    export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const ListAuditLogsRequest$inboundSchema: z.ZodType<
    ListAuditLogsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        limit: z.number().int().default(20),
        cursor: z.string().optional(),
        user_id: z.string().optional(),
        action: Action$inboundSchema.optional(),
        resource_type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            user_id: "userId",
            resource_type: "resourceType",
        });
    });

/** @internal */
export type ListAuditLogsRequest$Outbound = {
    limit: number;
    cursor?: string | undefined;
    user_id?: string | undefined;
    action?: string | undefined;
    resource_type?: string | undefined;
};

/** @internal */
export const ListAuditLogsRequest$outboundSchema: z.ZodType<
    ListAuditLogsRequest$Outbound,
    z.ZodTypeDef,
    ListAuditLogsRequest
> = z
    .object({
        limit: z.number().int().default(20),
        cursor: z.string().optional(),
        userId: z.string().optional(),
        action: Action$outboundSchema.optional(),
        resourceType: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            userId: "user_id",
            resourceType: "resource_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditLogsRequest$ {
    /** @deprecated use `ListAuditLogsRequest$inboundSchema` instead. */
    export const inboundSchema = ListAuditLogsRequest$inboundSchema;
    /** @deprecated use `ListAuditLogsRequest$outboundSchema` instead. */
    export const outboundSchema = ListAuditLogsRequest$outboundSchema;
    /** @deprecated use `ListAuditLogsRequest$Outbound` instead. */
    export type Outbound = ListAuditLogsRequest$Outbound;
}
