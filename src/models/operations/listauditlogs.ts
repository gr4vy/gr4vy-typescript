/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * Filters the results to only the items for which the `audit-log` has an
 *
 * @remarks
 * `action` that matches this value.
 */
export enum Action {
    Created = "created",
    Updated = "updated",
    Deleted = "deleted",
}

export type ListAuditLogsRequest = {
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Filters the results to only the items for which the `user` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    userId?: string | undefined;
    /**
     * Filters the results to only the items for which the `audit-log` has an
     *
     * @remarks
     * `action` that matches this value.
     */
    action?: Action | undefined;
    /**
     * Filters the results to only the items for which the `audit-log` has a
     *
     * @remarks
     * `resource` that matches this type value.
     */
    resourceType?: string | undefined;
};

/** @internal */
export namespace Action$ {
    export const inboundSchema = z.nativeEnum(Action);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListAuditLogsRequest$ {
    export const inboundSchema: z.ZodType<ListAuditLogsRequest, z.ZodTypeDef, unknown> = z
        .object({
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            user_id: z.string().optional(),
            action: Action$.inboundSchema.optional(),
            resource_type: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                user_id: "userId",
                resource_type: "resourceType",
            });
        });

    export type Outbound = {
        limit: number;
        cursor?: string | undefined;
        user_id?: string | undefined;
        action?: string | undefined;
        resource_type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAuditLogsRequest> = z
        .object({
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            userId: z.string().optional(),
            action: Action$.outboundSchema.optional(),
            resourceType: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                userId: "user_id",
                resourceType: "resource_type",
            });
        });
}
