/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filters the results to only the items for which the `audit-log` has an `action` that matches this value.
 */
export const AuditLogAction = {
  Created: "created",
  Updated: "updated",
  Deleted: "deleted",
  Voided: "voided",
  Captured: "captured",
} as const;
/**
 * Filters the results to only the items for which the `audit-log` has an `action` that matches this value.
 */
export type AuditLogAction = ClosedEnum<typeof AuditLogAction>;

export type ListAuditLogsRequest = {
  /**
   * A pointer to the page of results to return.
   */
  cursor?: string | undefined;
  /**
   * The maximum number of items that are at returned.
   */
  limit?: number | undefined;
  /**
   * Filters the results to only the items for which the `audit-log` has an `action` that matches this value.
   */
  action?: AuditLogAction | undefined;
  /**
   * Filters the results to only the items for which the `user` has an `id` that matches this value.
   */
  userId?: string | undefined;
  /**
   * Filters the results to only the items for which the `audit-log` has a `resource` that matches this type value.
   */
  resourceType?: string | undefined;
};

export type ListAuditLogsResponse = {
  result: components.AuditLogEntryCollection;
};

/** @internal */
export const AuditLogAction$inboundSchema: z.ZodNativeEnum<
  typeof AuditLogAction
> = z.nativeEnum(AuditLogAction);

/** @internal */
export const AuditLogAction$outboundSchema: z.ZodNativeEnum<
  typeof AuditLogAction
> = AuditLogAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogAction$ {
  /** @deprecated use `AuditLogAction$inboundSchema` instead. */
  export const inboundSchema = AuditLogAction$inboundSchema;
  /** @deprecated use `AuditLogAction$outboundSchema` instead. */
  export const outboundSchema = AuditLogAction$outboundSchema;
}

/** @internal */
export const ListAuditLogsRequest$inboundSchema: z.ZodType<
  ListAuditLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().int().default(20),
  action: AuditLogAction$inboundSchema.optional(),
  user_id: z.string().optional(),
  resource_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "resource_type": "resourceType",
  });
});

/** @internal */
export type ListAuditLogsRequest$Outbound = {
  cursor?: string | undefined;
  limit: number;
  action?: string | undefined;
  user_id?: string | undefined;
  resource_type?: string | undefined;
};

/** @internal */
export const ListAuditLogsRequest$outboundSchema: z.ZodType<
  ListAuditLogsRequest$Outbound,
  z.ZodTypeDef,
  ListAuditLogsRequest
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().int().default(20),
  action: AuditLogAction$outboundSchema.optional(),
  userId: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    resourceType: "resource_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditLogsRequest$ {
  /** @deprecated use `ListAuditLogsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAuditLogsRequest$inboundSchema;
  /** @deprecated use `ListAuditLogsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAuditLogsRequest$outboundSchema;
  /** @deprecated use `ListAuditLogsRequest$Outbound` instead. */
  export type Outbound = ListAuditLogsRequest$Outbound;
}

export function listAuditLogsRequestToJSON(
  listAuditLogsRequest: ListAuditLogsRequest,
): string {
  return JSON.stringify(
    ListAuditLogsRequest$outboundSchema.parse(listAuditLogsRequest),
  );
}

export function listAuditLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAuditLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuditLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuditLogsRequest' from JSON`,
  );
}

/** @internal */
export const ListAuditLogsResponse$inboundSchema: z.ZodType<
  ListAuditLogsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.AuditLogEntryCollection$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAuditLogsResponse$Outbound = {
  Result: components.AuditLogEntryCollection$Outbound;
};

/** @internal */
export const ListAuditLogsResponse$outboundSchema: z.ZodType<
  ListAuditLogsResponse$Outbound,
  z.ZodTypeDef,
  ListAuditLogsResponse
> = z.object({
  result: components.AuditLogEntryCollection$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditLogsResponse$ {
  /** @deprecated use `ListAuditLogsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAuditLogsResponse$inboundSchema;
  /** @deprecated use `ListAuditLogsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAuditLogsResponse$outboundSchema;
  /** @deprecated use `ListAuditLogsResponse$Outbound` instead. */
  export type Outbound = ListAuditLogsResponse$Outbound;
}

export function listAuditLogsResponseToJSON(
  listAuditLogsResponse: ListAuditLogsResponse,
): string {
  return JSON.stringify(
    ListAuditLogsResponse$outboundSchema.parse(listAuditLogsResponse),
  );
}

export function listAuditLogsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAuditLogsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuditLogsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuditLogsResponse' from JSON`,
  );
}
