/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateNetworkTokenCryptogramRequest = {
    paymentMethodId: string;
    networkTokenId: string;
    cryptogramCreate: components.CryptogramCreate;
};

/** @internal */
export const CreateNetworkTokenCryptogramRequest$inboundSchema: z.ZodType<
    CreateNetworkTokenCryptogramRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_method_id: z.string(),
        network_token_id: z.string(),
        CryptogramCreate: components.CryptogramCreate$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            payment_method_id: "paymentMethodId",
            network_token_id: "networkTokenId",
            CryptogramCreate: "cryptogramCreate",
        });
    });

/** @internal */
export type CreateNetworkTokenCryptogramRequest$Outbound = {
    payment_method_id: string;
    network_token_id: string;
    CryptogramCreate: components.CryptogramCreate$Outbound;
};

/** @internal */
export const CreateNetworkTokenCryptogramRequest$outboundSchema: z.ZodType<
    CreateNetworkTokenCryptogramRequest$Outbound,
    z.ZodTypeDef,
    CreateNetworkTokenCryptogramRequest
> = z
    .object({
        paymentMethodId: z.string(),
        networkTokenId: z.string(),
        cryptogramCreate: components.CryptogramCreate$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            paymentMethodId: "payment_method_id",
            networkTokenId: "network_token_id",
            cryptogramCreate: "CryptogramCreate",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNetworkTokenCryptogramRequest$ {
    /** @deprecated use `CreateNetworkTokenCryptogramRequest$inboundSchema` instead. */
    export const inboundSchema = CreateNetworkTokenCryptogramRequest$inboundSchema;
    /** @deprecated use `CreateNetworkTokenCryptogramRequest$outboundSchema` instead. */
    export const outboundSchema = CreateNetworkTokenCryptogramRequest$outboundSchema;
    /** @deprecated use `CreateNetworkTokenCryptogramRequest$Outbound` instead. */
    export type Outbound = CreateNetworkTokenCryptogramRequest$Outbound;
}
