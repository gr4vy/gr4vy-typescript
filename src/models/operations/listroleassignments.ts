/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Filters for role assignments for the assignee of the given type.
 */
export enum AssigneeType {
    User = "user",
}

export type ListRoleAssignmentsRequest = {
    /**
     * Filters for role assignments for the role that has a matching `id` value.
     */
    roleId?: string | undefined;
    /**
     * Filters for role assignments for the assignee of the given type.
     */
    assigneeType?: AssigneeType | undefined;
    /**
     * Filters for role assignments for the assignee that has a matching `id` value.
     *
     * @remarks
     * The `assignee_type` must also be specified.
     */
    assigneeId?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
};

export type ListRoleAssignmentsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of role assignments.
     */
    roleAssignments?: components.RoleAssignments | undefined;
};

/** @internal */
export const AssigneeType$ = z.nativeEnum(AssigneeType);

/** @internal */
export namespace ListRoleAssignmentsRequest$ {
    export type Inbound = {
        role_id?: string | undefined;
        assignee_type?: AssigneeType | undefined;
        assignee_id?: string | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListRoleAssignmentsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            role_id: z.string().optional(),
            assignee_type: AssigneeType$.optional(),
            assignee_id: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.role_id === undefined ? null : { roleId: v.role_id }),
                ...(v.assignee_type === undefined ? null : { assigneeType: v.assignee_type }),
                ...(v.assignee_id === undefined ? null : { assigneeId: v.assignee_id }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        role_id?: string | undefined;
        assignee_type?: AssigneeType | undefined;
        assignee_id?: string | undefined;
        limit: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListRoleAssignmentsRequest> = z
        .object({
            roleId: z.string().optional(),
            assigneeType: AssigneeType$.optional(),
            assigneeId: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.roleId === undefined ? null : { role_id: v.roleId }),
                ...(v.assigneeType === undefined ? null : { assignee_type: v.assigneeType }),
                ...(v.assigneeId === undefined ? null : { assignee_id: v.assigneeId }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}

/** @internal */
export namespace ListRoleAssignmentsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        RoleAssignments?: components.RoleAssignments$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListRoleAssignmentsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            RoleAssignments: components.RoleAssignments$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.RoleAssignments === undefined
                    ? null
                    : { roleAssignments: v.RoleAssignments }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        RoleAssignments?: components.RoleAssignments$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListRoleAssignmentsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            roleAssignments: components.RoleAssignments$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.roleAssignments === undefined
                    ? null
                    : { RoleAssignments: v.roleAssignments }),
            };
        });
}
