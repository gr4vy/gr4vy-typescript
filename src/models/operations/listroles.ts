/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ListRolesRequest = {
    cursor?: string | undefined;
    limit?: number | undefined;
};

export type ListRolesResponse = {
    result?: any | undefined;
};

/** @internal */
export const ListRolesRequest$inboundSchema: z.ZodType<ListRolesRequest, z.ZodTypeDef, unknown> =
    z.object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
    });

/** @internal */
export type ListRolesRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
};

/** @internal */
export const ListRolesRequest$outboundSchema: z.ZodType<
    ListRolesRequest$Outbound,
    z.ZodTypeDef,
    ListRolesRequest
> = z.object({
    cursor: z.string().optional(),
    limit: z.number().int().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRolesRequest$ {
    /** @deprecated use `ListRolesRequest$inboundSchema` instead. */
    export const inboundSchema = ListRolesRequest$inboundSchema;
    /** @deprecated use `ListRolesRequest$outboundSchema` instead. */
    export const outboundSchema = ListRolesRequest$outboundSchema;
    /** @deprecated use `ListRolesRequest$Outbound` instead. */
    export type Outbound = ListRolesRequest$Outbound;
}

/** @internal */
export const ListRolesResponse$inboundSchema: z.ZodType<ListRolesResponse, z.ZodTypeDef, unknown> =
    z
        .object({
            Result: z.any().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

/** @internal */
export type ListRolesResponse$Outbound = {
    Result?: any | undefined;
};

/** @internal */
export const ListRolesResponse$outboundSchema: z.ZodType<
    ListRolesResponse$Outbound,
    z.ZodTypeDef,
    ListRolesResponse
> = z
    .object({
        result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRolesResponse$ {
    /** @deprecated use `ListRolesResponse$inboundSchema` instead. */
    export const inboundSchema = ListRolesResponse$inboundSchema;
    /** @deprecated use `ListRolesResponse$outboundSchema` instead. */
    export const outboundSchema = ListRolesResponse$outboundSchema;
    /** @deprecated use `ListRolesResponse$Outbound` instead. */
    export type Outbound = ListRolesResponse$Outbound;
}
