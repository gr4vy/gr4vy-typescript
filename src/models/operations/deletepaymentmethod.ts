/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePaymentMethodRequest = {
  /**
   * The ID of the payment method
   */
  paymentMethodId: string;
};

/** @internal */
export const DeletePaymentMethodRequest$inboundSchema: z.ZodType<
  DeletePaymentMethodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_method_id": "paymentMethodId",
  });
});

/** @internal */
export type DeletePaymentMethodRequest$Outbound = {
  payment_method_id: string;
};

/** @internal */
export const DeletePaymentMethodRequest$outboundSchema: z.ZodType<
  DeletePaymentMethodRequest$Outbound,
  z.ZodTypeDef,
  DeletePaymentMethodRequest
> = z.object({
  paymentMethodId: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentMethodId: "payment_method_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentMethodRequest$ {
  /** @deprecated use `DeletePaymentMethodRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePaymentMethodRequest$inboundSchema;
  /** @deprecated use `DeletePaymentMethodRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePaymentMethodRequest$outboundSchema;
  /** @deprecated use `DeletePaymentMethodRequest$Outbound` instead. */
  export type Outbound = DeletePaymentMethodRequest$Outbound;
}

export function deletePaymentMethodRequestToJSON(
  deletePaymentMethodRequest: DeletePaymentMethodRequest,
): string {
  return JSON.stringify(
    DeletePaymentMethodRequest$outboundSchema.parse(deletePaymentMethodRequest),
  );
}

export function deletePaymentMethodRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePaymentMethodRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePaymentMethodRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePaymentMethodRequest' from JSON`,
  );
}
