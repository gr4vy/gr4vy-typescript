/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCheckoutSessionBody =
  | components.CheckoutSessionUpdate
  | Array<components.BaseModel>;

export type CreateCheckoutSessionRequest = {
  timeoutInSeconds?: number | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  xGr4vyMerchantAccountId?: string | null | undefined;
  requestBody?:
    | components.CheckoutSessionUpdate
    | Array<components.BaseModel>
    | null
    | undefined;
};

/** @internal */
export const CreateCheckoutSessionBody$inboundSchema: z.ZodType<
  CreateCheckoutSessionBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CheckoutSessionUpdate$inboundSchema,
  z.array(components.BaseModel$inboundSchema),
]);

/** @internal */
export type CreateCheckoutSessionBody$Outbound =
  | components.CheckoutSessionUpdate$Outbound
  | Array<components.BaseModel$Outbound>;

/** @internal */
export const CreateCheckoutSessionBody$outboundSchema: z.ZodType<
  CreateCheckoutSessionBody$Outbound,
  z.ZodTypeDef,
  CreateCheckoutSessionBody
> = z.union([
  components.CheckoutSessionUpdate$outboundSchema,
  z.array(components.BaseModel$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCheckoutSessionBody$ {
  /** @deprecated use `CreateCheckoutSessionBody$inboundSchema` instead. */
  export const inboundSchema = CreateCheckoutSessionBody$inboundSchema;
  /** @deprecated use `CreateCheckoutSessionBody$outboundSchema` instead. */
  export const outboundSchema = CreateCheckoutSessionBody$outboundSchema;
  /** @deprecated use `CreateCheckoutSessionBody$Outbound` instead. */
  export type Outbound = CreateCheckoutSessionBody$Outbound;
}

export function createCheckoutSessionBodyToJSON(
  createCheckoutSessionBody: CreateCheckoutSessionBody,
): string {
  return JSON.stringify(
    CreateCheckoutSessionBody$outboundSchema.parse(createCheckoutSessionBody),
  );
}

export function createCheckoutSessionBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCheckoutSessionBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCheckoutSessionBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCheckoutSessionBody' from JSON`,
  );
}

/** @internal */
export const CreateCheckoutSessionRequest$inboundSchema: z.ZodType<
  CreateCheckoutSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeout_in_seconds: z.number().default(1),
  "x-gr4vy-merchant-account-id": z.nullable(z.string()).optional(),
  RequestBody: z.nullable(
    z.union([
      components.CheckoutSessionUpdate$inboundSchema,
      z.array(components.BaseModel$inboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "timeout_in_seconds": "timeoutInSeconds",
    "x-gr4vy-merchant-account-id": "xGr4vyMerchantAccountId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateCheckoutSessionRequest$Outbound = {
  timeout_in_seconds: number;
  "x-gr4vy-merchant-account-id"?: string | null | undefined;
  RequestBody?:
    | components.CheckoutSessionUpdate$Outbound
    | Array<components.BaseModel$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateCheckoutSessionRequest$outboundSchema: z.ZodType<
  CreateCheckoutSessionRequest$Outbound,
  z.ZodTypeDef,
  CreateCheckoutSessionRequest
> = z.object({
  timeoutInSeconds: z.number().default(1),
  xGr4vyMerchantAccountId: z.nullable(z.string()).optional(),
  requestBody: z.nullable(
    z.union([
      components.CheckoutSessionUpdate$outboundSchema,
      z.array(components.BaseModel$outboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    timeoutInSeconds: "timeout_in_seconds",
    xGr4vyMerchantAccountId: "x-gr4vy-merchant-account-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCheckoutSessionRequest$ {
  /** @deprecated use `CreateCheckoutSessionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCheckoutSessionRequest$inboundSchema;
  /** @deprecated use `CreateCheckoutSessionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCheckoutSessionRequest$outboundSchema;
  /** @deprecated use `CreateCheckoutSessionRequest$Outbound` instead. */
  export type Outbound = CreateCheckoutSessionRequest$Outbound;
}

export function createCheckoutSessionRequestToJSON(
  createCheckoutSessionRequest: CreateCheckoutSessionRequest,
): string {
  return JSON.stringify(
    CreateCheckoutSessionRequest$outboundSchema.parse(
      createCheckoutSessionRequest,
    ),
  );
}

export function createCheckoutSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCheckoutSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCheckoutSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCheckoutSessionRequest' from JSON`,
  );
}
