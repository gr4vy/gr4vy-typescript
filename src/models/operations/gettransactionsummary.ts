/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTransactionSummaryRequest = {
  transactionId: string;
};

/** @internal */
export const GetTransactionSummaryRequest$inboundSchema: z.ZodType<
  GetTransactionSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
  });
});

/** @internal */
export type GetTransactionSummaryRequest$Outbound = {
  transaction_id: string;
};

/** @internal */
export const GetTransactionSummaryRequest$outboundSchema: z.ZodType<
  GetTransactionSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionSummaryRequest
> = z.object({
  transactionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionSummaryRequest$ {
  /** @deprecated use `GetTransactionSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionSummaryRequest$inboundSchema;
  /** @deprecated use `GetTransactionSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionSummaryRequest$outboundSchema;
  /** @deprecated use `GetTransactionSummaryRequest$Outbound` instead. */
  export type Outbound = GetTransactionSummaryRequest$Outbound;
}

export function getTransactionSummaryRequestToJSON(
  getTransactionSummaryRequest: GetTransactionSummaryRequest,
): string {
  return JSON.stringify(
    GetTransactionSummaryRequest$outboundSchema.parse(
      getTransactionSummaryRequest,
    ),
  );
}

export function getTransactionSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionSummaryRequest' from JSON`,
  );
}
