/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConfigureDigitalWalletGlobals = {
  merchantAccountId?: string | undefined;
};

export type ConfigureDigitalWalletRequest = {
  applicationName?: string | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  digitalWalletCreate: components.DigitalWalletCreate;
};

/** @internal */
export const ConfigureDigitalWalletGlobals$inboundSchema: z.ZodType<
  ConfigureDigitalWalletGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type ConfigureDigitalWalletGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ConfigureDigitalWalletGlobals$outboundSchema: z.ZodType<
  ConfigureDigitalWalletGlobals$Outbound,
  z.ZodTypeDef,
  ConfigureDigitalWalletGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigureDigitalWalletGlobals$ {
  /** @deprecated use `ConfigureDigitalWalletGlobals$inboundSchema` instead. */
  export const inboundSchema = ConfigureDigitalWalletGlobals$inboundSchema;
  /** @deprecated use `ConfigureDigitalWalletGlobals$outboundSchema` instead. */
  export const outboundSchema = ConfigureDigitalWalletGlobals$outboundSchema;
  /** @deprecated use `ConfigureDigitalWalletGlobals$Outbound` instead. */
  export type Outbound = ConfigureDigitalWalletGlobals$Outbound;
}

export function configureDigitalWalletGlobalsToJSON(
  configureDigitalWalletGlobals: ConfigureDigitalWalletGlobals,
): string {
  return JSON.stringify(
    ConfigureDigitalWalletGlobals$outboundSchema.parse(
      configureDigitalWalletGlobals,
    ),
  );
}

export function configureDigitalWalletGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ConfigureDigitalWalletGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigureDigitalWalletGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigureDigitalWalletGlobals' from JSON`,
  );
}

/** @internal */
export const ConfigureDigitalWalletRequest$inboundSchema: z.ZodType<
  ConfigureDigitalWalletRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_name: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
  DigitalWalletCreate: components.DigitalWalletCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "application_name": "applicationName",
    "DigitalWalletCreate": "digitalWalletCreate",
  });
});

/** @internal */
export type ConfigureDigitalWalletRequest$Outbound = {
  application_name: string;
  merchantAccountId?: string | null | undefined;
  DigitalWalletCreate: components.DigitalWalletCreate$Outbound;
};

/** @internal */
export const ConfigureDigitalWalletRequest$outboundSchema: z.ZodType<
  ConfigureDigitalWalletRequest$Outbound,
  z.ZodTypeDef,
  ConfigureDigitalWalletRequest
> = z.object({
  applicationName: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
  digitalWalletCreate: components.DigitalWalletCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    applicationName: "application_name",
    digitalWalletCreate: "DigitalWalletCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigureDigitalWalletRequest$ {
  /** @deprecated use `ConfigureDigitalWalletRequest$inboundSchema` instead. */
  export const inboundSchema = ConfigureDigitalWalletRequest$inboundSchema;
  /** @deprecated use `ConfigureDigitalWalletRequest$outboundSchema` instead. */
  export const outboundSchema = ConfigureDigitalWalletRequest$outboundSchema;
  /** @deprecated use `ConfigureDigitalWalletRequest$Outbound` instead. */
  export type Outbound = ConfigureDigitalWalletRequest$Outbound;
}

export function configureDigitalWalletRequestToJSON(
  configureDigitalWalletRequest: ConfigureDigitalWalletRequest,
): string {
  return JSON.stringify(
    ConfigureDigitalWalletRequest$outboundSchema.parse(
      configureDigitalWalletRequest,
    ),
  );
}

export function configureDigitalWalletRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConfigureDigitalWalletRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigureDigitalWalletRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigureDigitalWalletRequest' from JSON`,
  );
}
