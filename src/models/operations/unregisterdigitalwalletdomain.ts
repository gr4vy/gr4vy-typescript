/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnregisterDigitalWalletDomainGlobals = {
  merchantAccountId?: string | undefined;
};

export type UnregisterDigitalWalletDomainRequest = {
  digitalWalletId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  digitalWalletDomain: components.DigitalWalletDomain;
};

/** @internal */
export const UnregisterDigitalWalletDomainGlobals$inboundSchema: z.ZodType<
  UnregisterDigitalWalletDomainGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type UnregisterDigitalWalletDomainGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const UnregisterDigitalWalletDomainGlobals$outboundSchema: z.ZodType<
  UnregisterDigitalWalletDomainGlobals$Outbound,
  z.ZodTypeDef,
  UnregisterDigitalWalletDomainGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnregisterDigitalWalletDomainGlobals$ {
  /** @deprecated use `UnregisterDigitalWalletDomainGlobals$inboundSchema` instead. */
  export const inboundSchema =
    UnregisterDigitalWalletDomainGlobals$inboundSchema;
  /** @deprecated use `UnregisterDigitalWalletDomainGlobals$outboundSchema` instead. */
  export const outboundSchema =
    UnregisterDigitalWalletDomainGlobals$outboundSchema;
  /** @deprecated use `UnregisterDigitalWalletDomainGlobals$Outbound` instead. */
  export type Outbound = UnregisterDigitalWalletDomainGlobals$Outbound;
}

export function unregisterDigitalWalletDomainGlobalsToJSON(
  unregisterDigitalWalletDomainGlobals: UnregisterDigitalWalletDomainGlobals,
): string {
  return JSON.stringify(
    UnregisterDigitalWalletDomainGlobals$outboundSchema.parse(
      unregisterDigitalWalletDomainGlobals,
    ),
  );
}

export function unregisterDigitalWalletDomainGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UnregisterDigitalWalletDomainGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnregisterDigitalWalletDomainGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnregisterDigitalWalletDomainGlobals' from JSON`,
  );
}

/** @internal */
export const UnregisterDigitalWalletDomainRequest$inboundSchema: z.ZodType<
  UnregisterDigitalWalletDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  digital_wallet_id: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
  DigitalWalletDomain: components.DigitalWalletDomain$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "digital_wallet_id": "digitalWalletId",
    "DigitalWalletDomain": "digitalWalletDomain",
  });
});

/** @internal */
export type UnregisterDigitalWalletDomainRequest$Outbound = {
  digital_wallet_id: string;
  merchantAccountId?: string | null | undefined;
  DigitalWalletDomain: components.DigitalWalletDomain$Outbound;
};

/** @internal */
export const UnregisterDigitalWalletDomainRequest$outboundSchema: z.ZodType<
  UnregisterDigitalWalletDomainRequest$Outbound,
  z.ZodTypeDef,
  UnregisterDigitalWalletDomainRequest
> = z.object({
  digitalWalletId: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
  digitalWalletDomain: components.DigitalWalletDomain$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    digitalWalletId: "digital_wallet_id",
    digitalWalletDomain: "DigitalWalletDomain",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnregisterDigitalWalletDomainRequest$ {
  /** @deprecated use `UnregisterDigitalWalletDomainRequest$inboundSchema` instead. */
  export const inboundSchema =
    UnregisterDigitalWalletDomainRequest$inboundSchema;
  /** @deprecated use `UnregisterDigitalWalletDomainRequest$outboundSchema` instead. */
  export const outboundSchema =
    UnregisterDigitalWalletDomainRequest$outboundSchema;
  /** @deprecated use `UnregisterDigitalWalletDomainRequest$Outbound` instead. */
  export type Outbound = UnregisterDigitalWalletDomainRequest$Outbound;
}

export function unregisterDigitalWalletDomainRequestToJSON(
  unregisterDigitalWalletDomainRequest: UnregisterDigitalWalletDomainRequest,
): string {
  return JSON.stringify(
    UnregisterDigitalWalletDomainRequest$outboundSchema.parse(
      unregisterDigitalWalletDomainRequest,
    ),
  );
}

export function unregisterDigitalWalletDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnregisterDigitalWalletDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnregisterDigitalWalletDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnregisterDigitalWalletDomainRequest' from JSON`,
  );
}
