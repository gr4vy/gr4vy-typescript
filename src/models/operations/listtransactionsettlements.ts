/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTransactionSettlementsGlobals = {
  merchantAccountId?: string | undefined;
};

export type ListTransactionSettlementsRequest = {
  /**
   * The unique identifier of the transaction.
   */
  transactionId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListTransactionSettlementsGlobals$inboundSchema: z.ZodType<
  ListTransactionSettlementsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type ListTransactionSettlementsGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ListTransactionSettlementsGlobals$outboundSchema: z.ZodType<
  ListTransactionSettlementsGlobals$Outbound,
  z.ZodTypeDef,
  ListTransactionSettlementsGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionSettlementsGlobals$ {
  /** @deprecated use `ListTransactionSettlementsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTransactionSettlementsGlobals$inboundSchema;
  /** @deprecated use `ListTransactionSettlementsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListTransactionSettlementsGlobals$outboundSchema;
  /** @deprecated use `ListTransactionSettlementsGlobals$Outbound` instead. */
  export type Outbound = ListTransactionSettlementsGlobals$Outbound;
}

export function listTransactionSettlementsGlobalsToJSON(
  listTransactionSettlementsGlobals: ListTransactionSettlementsGlobals,
): string {
  return JSON.stringify(
    ListTransactionSettlementsGlobals$outboundSchema.parse(
      listTransactionSettlementsGlobals,
    ),
  );
}

export function listTransactionSettlementsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTransactionSettlementsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransactionSettlementsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransactionSettlementsGlobals' from JSON`,
  );
}

/** @internal */
export const ListTransactionSettlementsRequest$inboundSchema: z.ZodType<
  ListTransactionSettlementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
  });
});

/** @internal */
export type ListTransactionSettlementsRequest$Outbound = {
  transaction_id: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListTransactionSettlementsRequest$outboundSchema: z.ZodType<
  ListTransactionSettlementsRequest$Outbound,
  z.ZodTypeDef,
  ListTransactionSettlementsRequest
> = z.object({
  transactionId: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionSettlementsRequest$ {
  /** @deprecated use `ListTransactionSettlementsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTransactionSettlementsRequest$inboundSchema;
  /** @deprecated use `ListTransactionSettlementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListTransactionSettlementsRequest$outboundSchema;
  /** @deprecated use `ListTransactionSettlementsRequest$Outbound` instead. */
  export type Outbound = ListTransactionSettlementsRequest$Outbound;
}

export function listTransactionSettlementsRequestToJSON(
  listTransactionSettlementsRequest: ListTransactionSettlementsRequest,
): string {
  return JSON.stringify(
    ListTransactionSettlementsRequest$outboundSchema.parse(
      listTransactionSettlementsRequest,
    ),
  );
}

export function listTransactionSettlementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTransactionSettlementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransactionSettlementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransactionSettlementsRequest' from JSON`,
  );
}
