/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListReportsRequest = {
    cursor?: string | undefined;
    limit?: number | undefined;
    schedule?: Array<components.ReportSchedule> | undefined;
    scheduleEnabled?: boolean | undefined;
    name?: string | undefined;
};

export type ListReportsResponse = {
    result?: any | undefined;
};

/** @internal */
export const ListReportsRequest$inboundSchema: z.ZodType<
    ListReportsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        schedule: z.array(components.ReportSchedule$inboundSchema).optional(),
        schedule_enabled: z.boolean().optional(),
        name: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            schedule_enabled: "scheduleEnabled",
        });
    });

/** @internal */
export type ListReportsRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
    schedule?: Array<string> | undefined;
    schedule_enabled?: boolean | undefined;
    name?: string | undefined;
};

/** @internal */
export const ListReportsRequest$outboundSchema: z.ZodType<
    ListReportsRequest$Outbound,
    z.ZodTypeDef,
    ListReportsRequest
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        schedule: z.array(components.ReportSchedule$outboundSchema).optional(),
        scheduleEnabled: z.boolean().optional(),
        name: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            scheduleEnabled: "schedule_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReportsRequest$ {
    /** @deprecated use `ListReportsRequest$inboundSchema` instead. */
    export const inboundSchema = ListReportsRequest$inboundSchema;
    /** @deprecated use `ListReportsRequest$outboundSchema` instead. */
    export const outboundSchema = ListReportsRequest$outboundSchema;
    /** @deprecated use `ListReportsRequest$Outbound` instead. */
    export type Outbound = ListReportsRequest$Outbound;
}

/** @internal */
export const ListReportsResponse$inboundSchema: z.ZodType<
    ListReportsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListReportsResponse$Outbound = {
    Result?: any | undefined;
};

/** @internal */
export const ListReportsResponse$outboundSchema: z.ZodType<
    ListReportsResponse$Outbound,
    z.ZodTypeDef,
    ListReportsResponse
> = z
    .object({
        result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReportsResponse$ {
    /** @deprecated use `ListReportsResponse$inboundSchema` instead. */
    export const inboundSchema = ListReportsResponse$inboundSchema;
    /** @deprecated use `ListReportsResponse$outboundSchema` instead. */
    export const outboundSchema = ListReportsResponse$outboundSchema;
    /** @deprecated use `ListReportsResponse$Outbound` instead. */
    export type Outbound = ListReportsResponse$Outbound;
}
