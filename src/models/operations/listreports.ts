/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Schedule = {
    Daily: "daily",
    Monthly: "monthly",
    Once: "once",
    Weekly: "weekly",
} as const;
export type Schedule = ClosedEnum<typeof Schedule>;

export type ListReportsRequest = {
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * Filters for reports that have a matching `name` value.
     *
     * @remarks
     * This filter is case-insensitive.
     *
     * Ensure that when necessary, the value you pass for this
     * filter is URL encoded.
     */
    name?: string | undefined;
    /**
     * Filters for reports that have matching `schedule` values.
     */
    schedule?: Array<Schedule> | undefined;
    /**
     * Filters for reports that have a matching `schedule_enabled` value.
     */
    scheduleEnabled?: boolean | undefined;
};

/** @internal */
export const Schedule$inboundSchema: z.ZodNativeEnum<typeof Schedule> = z.nativeEnum(Schedule);

/** @internal */
export const Schedule$outboundSchema: z.ZodNativeEnum<typeof Schedule> = Schedule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schedule$ {
    /** @deprecated use `Schedule$inboundSchema` instead. */
    export const inboundSchema = Schedule$inboundSchema;
    /** @deprecated use `Schedule$outboundSchema` instead. */
    export const outboundSchema = Schedule$outboundSchema;
}

/** @internal */
export const ListReportsRequest$inboundSchema: z.ZodType<
    ListReportsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        name: z.string().optional(),
        schedule: z.array(Schedule$inboundSchema).optional(),
        schedule_enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            schedule_enabled: "scheduleEnabled",
        });
    });

/** @internal */
export type ListReportsRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
    name?: string | undefined;
    schedule?: Array<string> | undefined;
    schedule_enabled?: boolean | undefined;
};

/** @internal */
export const ListReportsRequest$outboundSchema: z.ZodType<
    ListReportsRequest$Outbound,
    z.ZodTypeDef,
    ListReportsRequest
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        name: z.string().optional(),
        schedule: z.array(Schedule$outboundSchema).optional(),
        scheduleEnabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            scheduleEnabled: "schedule_enabled",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListReportsRequest$ {
    /** @deprecated use `ListReportsRequest$inboundSchema` instead. */
    export const inboundSchema = ListReportsRequest$inboundSchema;
    /** @deprecated use `ListReportsRequest$outboundSchema` instead. */
    export const outboundSchema = ListReportsRequest$outboundSchema;
    /** @deprecated use `ListReportsRequest$Outbound` instead. */
    export type Outbound = ListReportsRequest$Outbound;
}
