/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export enum Schedule {
    Daily = "daily",
    Monthly = "monthly",
    Once = "once",
    Weekly = "weekly",
}

export type ListReportsRequest = {
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * Filters for reports that have a matching `name` value.
     *
     * @remarks
     * This filter is case-insensitive.
     *
     * Ensure that when necessary, the value you pass for this
     * filter is URL encoded.
     */
    name?: string | undefined;
    /**
     * Filters for reports that have matching `schedule` values.
     */
    schedule?: Array<Schedule> | undefined;
    /**
     * Filters for reports that have a matching `schedule_enabled` value.
     */
    scheduleEnabled?: boolean | undefined;
};

export type ListReportsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of reports.
     */
    reports?: components.Reports | undefined;
};

/** @internal */
export const Schedule$ = z.nativeEnum(Schedule);

/** @internal */
export namespace ListReportsRequest$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
        name?: string | undefined;
        schedule?: Array<Schedule> | undefined;
        schedule_enabled?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<ListReportsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
            name: z.string().optional(),
            schedule: z.array(Schedule$).optional(),
            schedule_enabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                limit: v.limit,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.schedule_enabled === undefined
                    ? null
                    : { scheduleEnabled: v.schedule_enabled }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit: number;
        name?: string | undefined;
        schedule?: Array<Schedule> | undefined;
        schedule_enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListReportsRequest> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
            name: z.string().optional(),
            schedule: z.array(Schedule$).optional(),
            scheduleEnabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                limit: v.limit,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.scheduleEnabled === undefined
                    ? null
                    : { schedule_enabled: v.scheduleEnabled }),
            };
        });
}

/** @internal */
export namespace ListReportsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Reports?: components.Reports$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListReportsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Reports: components.Reports$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Reports === undefined ? null : { reports: v.Reports }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Reports?: components.Reports$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListReportsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            reports: components.Reports$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.reports === undefined ? null : { Reports: v.reports }),
            };
        });
}
