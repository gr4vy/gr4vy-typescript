/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export enum Status {
    Processing = "processing",
    BuyerApprovalRequired = "buyer_approval_required",
    Succeeded = "succeeded",
    Failed = "failed",
}

export type ListPaymentMethodsRequest = {
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    buyerId?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * Filters the results to only the payment methods for which the `status`
     *
     * @remarks
     * matches with any of the provided status values.
     */
    status?: Array<Status> | undefined;
    /**
     * Filters the results to only the items for which the resource has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    externalIdentifier?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
};

export type ListPaymentMethodsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of payment methods.
     */
    paymentMethods?: components.PaymentMethods | undefined;
};

/** @internal */
export const Status$ = z.nativeEnum(Status);

/** @internal */
export namespace ListPaymentMethodsRequest$ {
    export type Inbound = {
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
        status?: Array<Status> | undefined;
        external_identifier?: string | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListPaymentMethodsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_id: z.string().optional(),
            buyer_external_identifier: z.string().optional(),
            status: z.array(Status$).optional(),
            external_identifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.buyer_id === undefined ? null : { buyerId: v.buyer_id }),
                ...(v.buyer_external_identifier === undefined
                    ? null
                    : { buyerExternalIdentifier: v.buyer_external_identifier }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
        status?: Array<Status> | undefined;
        external_identifier?: string | undefined;
        limit: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentMethodsRequest> = z
        .object({
            buyerId: z.string().optional(),
            buyerExternalIdentifier: z.string().optional(),
            status: z.array(Status$).optional(),
            externalIdentifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.buyerId === undefined ? null : { buyer_id: v.buyerId }),
                ...(v.buyerExternalIdentifier === undefined
                    ? null
                    : { buyer_external_identifier: v.buyerExternalIdentifier }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}

/** @internal */
export namespace ListPaymentMethodsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        PaymentMethods?: components.PaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListPaymentMethodsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            PaymentMethods: components.PaymentMethods$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.PaymentMethods === undefined ? null : { paymentMethods: v.PaymentMethods }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        PaymentMethods?: components.PaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentMethodsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            paymentMethods: components.PaymentMethods$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.paymentMethods === undefined ? null : { PaymentMethods: v.paymentMethods }),
            };
        });
}
