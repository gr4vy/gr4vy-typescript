/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export enum Status {
    Processing = "processing",
    BuyerApprovalRequired = "buyer_approval_required",
    Succeeded = "succeeded",
    Failed = "failed",
}

export type ListPaymentMethodsRequest = {
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    buyerId?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * Filters the results to only the payment methods for which the `status`
     *
     * @remarks
     * matches with any of the provided status values.
     */
    status?: Array<Status> | undefined;
    /**
     * Filters the results to only the items for which the resource has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    externalIdentifier?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListPaymentMethodsRequest$ {
    export const inboundSchema: z.ZodType<ListPaymentMethodsRequest, z.ZodTypeDef, unknown> = z
        .object({
            buyer_id: z.string().optional(),
            buyer_external_identifier: z.string().optional(),
            status: z.array(Status$.inboundSchema).optional(),
            external_identifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                buyer_id: "buyerId",
                buyer_external_identifier: "buyerExternalIdentifier",
                external_identifier: "externalIdentifier",
            });
        });

    export type Outbound = {
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
        status?: Array<string> | undefined;
        external_identifier?: string | undefined;
        limit: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentMethodsRequest> = z
        .object({
            buyerId: z.string().optional(),
            buyerExternalIdentifier: z.string().optional(),
            status: z.array(Status$.outboundSchema).optional(),
            externalIdentifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                buyerId: "buyer_id",
                buyerExternalIdentifier: "buyer_external_identifier",
                externalIdentifier: "external_identifier",
            });
        });
}
