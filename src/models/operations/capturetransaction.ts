/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CaptureTransactionRequest = {
    /**
     * The ID for the transaction to get the information for.
     */
    transactionId: string;
    transactionCaptureRequest?: components.TransactionCaptureRequest | undefined;
};

/** @internal */
export namespace CaptureTransactionRequest$ {
    export type Inbound = {
        transaction_id: string;
        TransactionCaptureRequest?: components.TransactionCaptureRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CaptureTransactionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            transaction_id: z.string(),
            TransactionCaptureRequest:
                components.TransactionCaptureRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                transactionId: v.transaction_id,
                ...(v.TransactionCaptureRequest === undefined
                    ? null
                    : { transactionCaptureRequest: v.TransactionCaptureRequest }),
            };
        });

    export type Outbound = {
        transaction_id: string;
        TransactionCaptureRequest?: components.TransactionCaptureRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CaptureTransactionRequest> = z
        .object({
            transactionId: z.string(),
            transactionCaptureRequest:
                components.TransactionCaptureRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                transaction_id: v.transactionId,
                ...(v.transactionCaptureRequest === undefined
                    ? null
                    : { TransactionCaptureRequest: v.transactionCaptureRequest }),
            };
        });
}
