/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type NewRefundRequest = {
    /**
     * The ID for the transaction to get the information for.
     */
    transactionId: string;
    transactionRefundRequest?: components.TransactionRefundRequest | undefined;
};

/** @internal */
export namespace NewRefundRequest$ {
    export type Inbound = {
        transaction_id: string;
        TransactionRefundRequest?: components.TransactionRefundRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<NewRefundRequest, z.ZodTypeDef, Inbound> = z
        .object({
            transaction_id: z.string(),
            TransactionRefundRequest: components.TransactionRefundRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                transactionId: v.transaction_id,
                ...(v.TransactionRefundRequest === undefined
                    ? null
                    : { transactionRefundRequest: v.TransactionRefundRequest }),
            };
        });

    export type Outbound = {
        transaction_id: string;
        TransactionRefundRequest?: components.TransactionRefundRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewRefundRequest> = z
        .object({
            transactionId: z.string(),
            transactionRefundRequest:
                components.TransactionRefundRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                transaction_id: v.transactionId,
                ...(v.transactionRefundRequest === undefined
                    ? null
                    : { TransactionRefundRequest: v.transactionRefundRequest }),
            };
        });
}
