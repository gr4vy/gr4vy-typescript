/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddReportGlobals = {
  merchantAccountId?: string | undefined;
};

export type AddReportRequest = {
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  reportCreate: components.ReportCreate;
};

/** @internal */
export const AddReportGlobals$inboundSchema: z.ZodType<
  AddReportGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type AddReportGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const AddReportGlobals$outboundSchema: z.ZodType<
  AddReportGlobals$Outbound,
  z.ZodTypeDef,
  AddReportGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddReportGlobals$ {
  /** @deprecated use `AddReportGlobals$inboundSchema` instead. */
  export const inboundSchema = AddReportGlobals$inboundSchema;
  /** @deprecated use `AddReportGlobals$outboundSchema` instead. */
  export const outboundSchema = AddReportGlobals$outboundSchema;
  /** @deprecated use `AddReportGlobals$Outbound` instead. */
  export type Outbound = AddReportGlobals$Outbound;
}

export function addReportGlobalsToJSON(
  addReportGlobals: AddReportGlobals,
): string {
  return JSON.stringify(
    AddReportGlobals$outboundSchema.parse(addReportGlobals),
  );
}

export function addReportGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AddReportGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddReportGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddReportGlobals' from JSON`,
  );
}

/** @internal */
export const AddReportRequest$inboundSchema: z.ZodType<
  AddReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.nullable(z.string()).optional(),
  ReportCreate: components.ReportCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ReportCreate": "reportCreate",
  });
});

/** @internal */
export type AddReportRequest$Outbound = {
  merchantAccountId?: string | null | undefined;
  ReportCreate: components.ReportCreate$Outbound;
};

/** @internal */
export const AddReportRequest$outboundSchema: z.ZodType<
  AddReportRequest$Outbound,
  z.ZodTypeDef,
  AddReportRequest
> = z.object({
  merchantAccountId: z.nullable(z.string()).optional(),
  reportCreate: components.ReportCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    reportCreate: "ReportCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddReportRequest$ {
  /** @deprecated use `AddReportRequest$inboundSchema` instead. */
  export const inboundSchema = AddReportRequest$inboundSchema;
  /** @deprecated use `AddReportRequest$outboundSchema` instead. */
  export const outboundSchema = AddReportRequest$outboundSchema;
  /** @deprecated use `AddReportRequest$Outbound` instead. */
  export type Outbound = AddReportRequest$Outbound;
}

export function addReportRequestToJSON(
  addReportRequest: AddReportRequest,
): string {
  return JSON.stringify(
    AddReportRequest$outboundSchema.parse(addReportRequest),
  );
}

export function addReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddReportRequest' from JSON`,
  );
}
