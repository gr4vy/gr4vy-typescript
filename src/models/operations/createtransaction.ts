/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransactionGlobals = {
  merchantAccountId?: string | undefined;
};

export type CreateTransactionRequest = {
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  /**
   * A unique key that identifies this request. Providing this header will make this an idempotent request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid collisions.
   */
  idempotencyKey?: string | null | undefined;
  /**
   * The IP address to forward from the customer. Use this when calling
   *
   * @remarks
   * our API from the server side to ensure the customer's address is
   * passed to downstream services, rather than your server IP.
   */
  xForwardedFor?: string | undefined;
  transactionCreate: components.TransactionCreate;
};

/** @internal */
export const CreateTransactionGlobals$inboundSchema: z.ZodType<
  CreateTransactionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type CreateTransactionGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const CreateTransactionGlobals$outboundSchema: z.ZodType<
  CreateTransactionGlobals$Outbound,
  z.ZodTypeDef,
  CreateTransactionGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionGlobals$ {
  /** @deprecated use `CreateTransactionGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionGlobals$inboundSchema;
  /** @deprecated use `CreateTransactionGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionGlobals$outboundSchema;
  /** @deprecated use `CreateTransactionGlobals$Outbound` instead. */
  export type Outbound = CreateTransactionGlobals$Outbound;
}

export function createTransactionGlobalsToJSON(
  createTransactionGlobals: CreateTransactionGlobals,
): string {
  return JSON.stringify(
    CreateTransactionGlobals$outboundSchema.parse(createTransactionGlobals),
  );
}

export function createTransactionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTransactionRequest$inboundSchema: z.ZodType<
  CreateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.nullable(z.string()).optional(),
  "idempotency-key": z.nullable(z.string()).optional(),
  "X-Forwarded-For": z.string().optional(),
  TransactionCreate: components.TransactionCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "X-Forwarded-For": "xForwardedFor",
    "TransactionCreate": "transactionCreate",
  });
});

/** @internal */
export type CreateTransactionRequest$Outbound = {
  merchantAccountId?: string | null | undefined;
  "idempotency-key"?: string | null | undefined;
  "X-Forwarded-For"?: string | undefined;
  TransactionCreate: components.TransactionCreate$Outbound;
};

/** @internal */
export const CreateTransactionRequest$outboundSchema: z.ZodType<
  CreateTransactionRequest$Outbound,
  z.ZodTypeDef,
  CreateTransactionRequest
> = z.object({
  merchantAccountId: z.nullable(z.string()).optional(),
  idempotencyKey: z.nullable(z.string()).optional(),
  xForwardedFor: z.string().optional(),
  transactionCreate: components.TransactionCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    xForwardedFor: "X-Forwarded-For",
    transactionCreate: "TransactionCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionRequest$ {
  /** @deprecated use `CreateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionRequest$inboundSchema;
  /** @deprecated use `CreateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionRequest$outboundSchema;
  /** @deprecated use `CreateTransactionRequest$Outbound` instead. */
  export type Outbound = CreateTransactionRequest$Outbound;
}

export function createTransactionRequestToJSON(
  createTransactionRequest: CreateTransactionRequest,
): string {
  return JSON.stringify(
    CreateTransactionRequest$outboundSchema.parse(createTransactionRequest),
  );
}

export function createTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionRequest' from JSON`,
  );
}
