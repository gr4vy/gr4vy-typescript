/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransactionRequest = {
  timeoutInSeconds?: number | undefined;
  transactionCreate: components.TransactionCreate;
};

export type CreateTransactionResponse = components.Transaction | any;

/** @internal */
export const CreateTransactionRequest$inboundSchema: z.ZodType<
  CreateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeout_in_seconds: z.number().default(1),
  TransactionCreate: components.TransactionCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "timeout_in_seconds": "timeoutInSeconds",
    "TransactionCreate": "transactionCreate",
  });
});

/** @internal */
export type CreateTransactionRequest$Outbound = {
  timeout_in_seconds: number;
  TransactionCreate: components.TransactionCreate$Outbound;
};

/** @internal */
export const CreateTransactionRequest$outboundSchema: z.ZodType<
  CreateTransactionRequest$Outbound,
  z.ZodTypeDef,
  CreateTransactionRequest
> = z.object({
  timeoutInSeconds: z.number().default(1),
  transactionCreate: components.TransactionCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    timeoutInSeconds: "timeout_in_seconds",
    transactionCreate: "TransactionCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionRequest$ {
  /** @deprecated use `CreateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionRequest$inboundSchema;
  /** @deprecated use `CreateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionRequest$outboundSchema;
  /** @deprecated use `CreateTransactionRequest$Outbound` instead. */
  export type Outbound = CreateTransactionRequest$Outbound;
}

export function createTransactionRequestToJSON(
  createTransactionRequest: CreateTransactionRequest,
): string {
  return JSON.stringify(
    CreateTransactionRequest$outboundSchema.parse(createTransactionRequest),
  );
}

export function createTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionRequest' from JSON`,
  );
}

/** @internal */
export const CreateTransactionResponse$inboundSchema: z.ZodType<
  CreateTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Transaction$inboundSchema, z.any()]);

/** @internal */
export type CreateTransactionResponse$Outbound =
  | components.Transaction$Outbound
  | any;

/** @internal */
export const CreateTransactionResponse$outboundSchema: z.ZodType<
  CreateTransactionResponse$Outbound,
  z.ZodTypeDef,
  CreateTransactionResponse
> = z.union([components.Transaction$outboundSchema, z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionResponse$ {
  /** @deprecated use `CreateTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionResponse$inboundSchema;
  /** @deprecated use `CreateTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionResponse$outboundSchema;
  /** @deprecated use `CreateTransactionResponse$Outbound` instead. */
  export type Outbound = CreateTransactionResponse$Outbound;
}

export function createTransactionResponseToJSON(
  createTransactionResponse: CreateTransactionResponse,
): string {
  return JSON.stringify(
    CreateTransactionResponse$outboundSchema.parse(createTransactionResponse),
  );
}

export function createTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionResponse' from JSON`,
  );
}
