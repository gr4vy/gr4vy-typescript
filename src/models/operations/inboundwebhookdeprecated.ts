/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type InboundWebhookDeprecatedRequest = {
    /**
     * Opaque token representing the payment service associated with
     *
     * @remarks
     * the webhook endpoint.
     */
    hook: string;
};

export type InboundWebhookDeprecatedResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace InboundWebhookDeprecatedRequest$ {
    export type Inbound = {
        hook: string;
    };

    export const inboundSchema: z.ZodType<InboundWebhookDeprecatedRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                hook: z.string(),
            })
            .transform((v) => {
                return {
                    hook: v.hook,
                };
            });

    export type Outbound = {
        hook: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InboundWebhookDeprecatedRequest
    > = z
        .object({
            hook: z.string(),
        })
        .transform((v) => {
            return {
                hook: v.hook,
            };
        });
}

/** @internal */
export namespace InboundWebhookDeprecatedResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<InboundWebhookDeprecatedResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InboundWebhookDeprecatedResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
