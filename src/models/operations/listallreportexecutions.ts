/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAllReportExecutionsGlobals = {
  merchantAccountId?: string | undefined;
};

export type ListAllReportExecutionsRequest = {
  /**
   * A pointer to the page of results to return.
   */
  cursor?: string | null | undefined;
  /**
   * The maximum number of items that are at returned.
   */
  limit?: number | undefined;
  /**
   * Filters the reports by searching their name for (partial) matches.
   */
  reportName?: string | null | undefined;
  /**
   * Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
   */
  createdAtLte?: Date | null | undefined;
  /**
   * Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
   */
  createdAtGte?: Date | null | undefined;
  /**
   * Filters the results to only the reports that have a `status` that matches with any of the provided status values.
   */
  status?: Array<components.ReportExecutionStatus> | null | undefined;
  /**
   * Filters the results to only the reports that were created by the users with these IDs.
   */
  creatorId?: Array<string> | null | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

export type ListAllReportExecutionsResponse = {
  result: components.ReportExecutions;
};

/** @internal */
export const ListAllReportExecutionsGlobals$inboundSchema: z.ZodType<
  ListAllReportExecutionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type ListAllReportExecutionsGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ListAllReportExecutionsGlobals$outboundSchema: z.ZodType<
  ListAllReportExecutionsGlobals$Outbound,
  z.ZodTypeDef,
  ListAllReportExecutionsGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllReportExecutionsGlobals$ {
  /** @deprecated use `ListAllReportExecutionsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListAllReportExecutionsGlobals$inboundSchema;
  /** @deprecated use `ListAllReportExecutionsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListAllReportExecutionsGlobals$outboundSchema;
  /** @deprecated use `ListAllReportExecutionsGlobals$Outbound` instead. */
  export type Outbound = ListAllReportExecutionsGlobals$Outbound;
}

export function listAllReportExecutionsGlobalsToJSON(
  listAllReportExecutionsGlobals: ListAllReportExecutionsGlobals,
): string {
  return JSON.stringify(
    ListAllReportExecutionsGlobals$outboundSchema.parse(
      listAllReportExecutionsGlobals,
    ),
  );
}

export function listAllReportExecutionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListAllReportExecutionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllReportExecutionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllReportExecutionsGlobals' from JSON`,
  );
}

/** @internal */
export const ListAllReportExecutionsRequest$inboundSchema: z.ZodType<
  ListAllReportExecutionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  report_name: z.nullable(z.string()).optional(),
  created_at_lte: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at_gte: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(z.array(components.ReportExecutionStatus$inboundSchema))
    .optional(),
  creator_id: z.nullable(z.array(z.string())).optional(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "report_name": "reportName",
    "created_at_lte": "createdAtLte",
    "created_at_gte": "createdAtGte",
    "creator_id": "creatorId",
  });
});

/** @internal */
export type ListAllReportExecutionsRequest$Outbound = {
  cursor?: string | null | undefined;
  limit: number;
  report_name?: string | null | undefined;
  created_at_lte?: string | null | undefined;
  created_at_gte?: string | null | undefined;
  status?: Array<string> | null | undefined;
  creator_id?: Array<string> | null | undefined;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListAllReportExecutionsRequest$outboundSchema: z.ZodType<
  ListAllReportExecutionsRequest$Outbound,
  z.ZodTypeDef,
  ListAllReportExecutionsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  reportName: z.nullable(z.string()).optional(),
  createdAtLte: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAtGte: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: z.nullable(z.array(components.ReportExecutionStatus$outboundSchema))
    .optional(),
  creatorId: z.nullable(z.array(z.string())).optional(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    reportName: "report_name",
    createdAtLte: "created_at_lte",
    createdAtGte: "created_at_gte",
    creatorId: "creator_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllReportExecutionsRequest$ {
  /** @deprecated use `ListAllReportExecutionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllReportExecutionsRequest$inboundSchema;
  /** @deprecated use `ListAllReportExecutionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllReportExecutionsRequest$outboundSchema;
  /** @deprecated use `ListAllReportExecutionsRequest$Outbound` instead. */
  export type Outbound = ListAllReportExecutionsRequest$Outbound;
}

export function listAllReportExecutionsRequestToJSON(
  listAllReportExecutionsRequest: ListAllReportExecutionsRequest,
): string {
  return JSON.stringify(
    ListAllReportExecutionsRequest$outboundSchema.parse(
      listAllReportExecutionsRequest,
    ),
  );
}

export function listAllReportExecutionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAllReportExecutionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllReportExecutionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllReportExecutionsRequest' from JSON`,
  );
}

/** @internal */
export const ListAllReportExecutionsResponse$inboundSchema: z.ZodType<
  ListAllReportExecutionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ReportExecutions$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAllReportExecutionsResponse$Outbound = {
  Result: components.ReportExecutions$Outbound;
};

/** @internal */
export const ListAllReportExecutionsResponse$outboundSchema: z.ZodType<
  ListAllReportExecutionsResponse$Outbound,
  z.ZodTypeDef,
  ListAllReportExecutionsResponse
> = z.object({
  result: components.ReportExecutions$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllReportExecutionsResponse$ {
  /** @deprecated use `ListAllReportExecutionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAllReportExecutionsResponse$inboundSchema;
  /** @deprecated use `ListAllReportExecutionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAllReportExecutionsResponse$outboundSchema;
  /** @deprecated use `ListAllReportExecutionsResponse$Outbound` instead. */
  export type Outbound = ListAllReportExecutionsResponse$Outbound;
}

export function listAllReportExecutionsResponseToJSON(
  listAllReportExecutionsResponse: ListAllReportExecutionsResponse,
): string {
  return JSON.stringify(
    ListAllReportExecutionsResponse$outboundSchema.parse(
      listAllReportExecutionsResponse,
    ),
  );
}

export function listAllReportExecutionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAllReportExecutionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAllReportExecutionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAllReportExecutionsResponse' from JSON`,
  );
}
