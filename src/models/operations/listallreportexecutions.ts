/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListAllReportExecutionsRequest = {
    cursor?: string | undefined;
    limit?: number | undefined;
    reportName?: string | undefined;
    createdAtLte?: Date | undefined;
    createdAtGte?: Date | undefined;
    status?: Array<components.ReportExecutionStatus> | undefined;
    creatorId?: Array<string> | undefined;
};

export type ListAllReportExecutionsResponse = {
    result?: any | undefined;
};

/** @internal */
export const ListAllReportExecutionsRequest$inboundSchema: z.ZodType<
    ListAllReportExecutionsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        report_name: z.string().optional(),
        created_at_lte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        created_at_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        status: z.array(components.ReportExecutionStatus$inboundSchema).optional(),
        creator_id: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            report_name: "reportName",
            created_at_lte: "createdAtLte",
            created_at_gte: "createdAtGte",
            creator_id: "creatorId",
        });
    });

/** @internal */
export type ListAllReportExecutionsRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
    report_name?: string | undefined;
    created_at_lte?: string | undefined;
    created_at_gte?: string | undefined;
    status?: Array<string> | undefined;
    creator_id?: Array<string> | undefined;
};

/** @internal */
export const ListAllReportExecutionsRequest$outboundSchema: z.ZodType<
    ListAllReportExecutionsRequest$Outbound,
    z.ZodTypeDef,
    ListAllReportExecutionsRequest
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        reportName: z.string().optional(),
        createdAtLte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        createdAtGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        status: z.array(components.ReportExecutionStatus$outboundSchema).optional(),
        creatorId: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            reportName: "report_name",
            createdAtLte: "created_at_lte",
            createdAtGte: "created_at_gte",
            creatorId: "creator_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllReportExecutionsRequest$ {
    /** @deprecated use `ListAllReportExecutionsRequest$inboundSchema` instead. */
    export const inboundSchema = ListAllReportExecutionsRequest$inboundSchema;
    /** @deprecated use `ListAllReportExecutionsRequest$outboundSchema` instead. */
    export const outboundSchema = ListAllReportExecutionsRequest$outboundSchema;
    /** @deprecated use `ListAllReportExecutionsRequest$Outbound` instead. */
    export type Outbound = ListAllReportExecutionsRequest$Outbound;
}

/** @internal */
export const ListAllReportExecutionsResponse$inboundSchema: z.ZodType<
    ListAllReportExecutionsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListAllReportExecutionsResponse$Outbound = {
    Result?: any | undefined;
};

/** @internal */
export const ListAllReportExecutionsResponse$outboundSchema: z.ZodType<
    ListAllReportExecutionsResponse$Outbound,
    z.ZodTypeDef,
    ListAllReportExecutionsResponse
> = z
    .object({
        result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllReportExecutionsResponse$ {
    /** @deprecated use `ListAllReportExecutionsResponse$inboundSchema` instead. */
    export const inboundSchema = ListAllReportExecutionsResponse$inboundSchema;
    /** @deprecated use `ListAllReportExecutionsResponse$outboundSchema` instead. */
    export const outboundSchema = ListAllReportExecutionsResponse$outboundSchema;
    /** @deprecated use `ListAllReportExecutionsResponse$Outbound` instead. */
    export type Outbound = ListAllReportExecutionsResponse$Outbound;
}
