/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ListAllReportExecutionsQueryParamStatus {
    Dispatched = "dispatched",
    Failed = "failed",
    Pending = "pending",
    Processing = "processing",
    Succeeded = "succeeded",
}

export type ListAllReportExecutionsRequest = {
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * Filters the results to report executions created after this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    createdAtGte?: string | undefined;
    /**
     * Filters the results to report executions created before this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    createdAtLte?: string | undefined;
    /**
     * Filters for executions of reports that have a matching
     *
     * @remarks
     * `name` value. This filter is case-insensitive.
     *
     * Ensure that when necessary, the value you pass for this
     * filter is URL encoded.
     */
    reportName?: string | undefined;
    /**
     * Filters for report executions that have a matching `status` value.
     *
     * @remarks
     *
     * This filter accepts multiple values.
     */
    status?: Array<ListAllReportExecutionsQueryParamStatus> | undefined;
    /**
     * Filters the results to only match the reports that their `creator_id`
     *
     * @remarks
     * matches with any of the provided creator IDs.
     */
    creatorId?: Array<string> | undefined;
};

/** @internal */
export const ListAllReportExecutionsQueryParamStatus$: z.ZodNativeEnum<
    typeof ListAllReportExecutionsQueryParamStatus
> = z.nativeEnum(ListAllReportExecutionsQueryParamStatus);

/** @internal */
export namespace ListAllReportExecutionsRequest$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
        created_at_gte?: string | undefined;
        created_at_lte?: string | undefined;
        report_name?: string | undefined;
        status?: Array<ListAllReportExecutionsQueryParamStatus> | undefined;
        creator_id?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<ListAllReportExecutionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
            created_at_gte: z.string().optional(),
            created_at_lte: z.string().optional(),
            report_name: z.string().optional(),
            status: z.array(ListAllReportExecutionsQueryParamStatus$).optional(),
            creator_id: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                limit: v.limit,
                ...(v.created_at_gte === undefined ? null : { createdAtGte: v.created_at_gte }),
                ...(v.created_at_lte === undefined ? null : { createdAtLte: v.created_at_lte }),
                ...(v.report_name === undefined ? null : { reportName: v.report_name }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.creator_id === undefined ? null : { creatorId: v.creator_id }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit: number;
        created_at_gte?: string | undefined;
        created_at_lte?: string | undefined;
        report_name?: string | undefined;
        status?: Array<ListAllReportExecutionsQueryParamStatus> | undefined;
        creator_id?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAllReportExecutionsRequest> =
        z
            .object({
                cursor: z.string().optional(),
                limit: z.number().int().default(20),
                createdAtGte: z.string().optional(),
                createdAtLte: z.string().optional(),
                reportName: z.string().optional(),
                status: z.array(ListAllReportExecutionsQueryParamStatus$).optional(),
                creatorId: z.array(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                    limit: v.limit,
                    ...(v.createdAtGte === undefined ? null : { created_at_gte: v.createdAtGte }),
                    ...(v.createdAtLte === undefined ? null : { created_at_lte: v.createdAtLte }),
                    ...(v.reportName === undefined ? null : { report_name: v.reportName }),
                    ...(v.status === undefined ? null : { status: v.status }),
                    ...(v.creatorId === undefined ? null : { creator_id: v.creatorId }),
                };
            });
}
