/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Filters the results to only the items for which the `method` has been set to
 *
 * @remarks
 * this value. For example `card`.
 */
export enum Method {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Bancontact = "bancontact",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    CheckoutSession = "checkout-session",
    ClickToPay = "click-to-pay",
    Clearpay = "clearpay",
    Dana = "dana",
    Dcb = "dcb",
    Eps = "eps",
    Fortumo = "fortumo",
    Gcash = "gcash",
    Giropay = "giropay",
    Givingblock = "givingblock",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Id = "id",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linepay = "linepay",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Razorpay = "razorpay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Venmo = "venmo",
    Waave = "waave",
    Wechat = "wechat",
    Zippay = "zippay",
}

export type ListPaymentServicesRequest = {
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Filters the results to only the items for which the `method` has been set to
     *
     * @remarks
     * this value. For example `card`.
     */
    method?: Method | undefined;
    /**
     * Filters the results to only show items which have been deleted.
     *
     * @remarks
     * By default, deleted items will not be returned.
     */
    deleted?: boolean | undefined;
};

/** @internal */
export const Method$ = z.nativeEnum(Method);

/** @internal */
export namespace ListPaymentServicesRequest$ {
    export type Inbound = {
        limit?: number | undefined;
        cursor?: string | undefined;
        method?: Method | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<ListPaymentServicesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            method: Method$.optional(),
            deleted: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.method === undefined ? null : { method: v.method }),
                deleted: v.deleted,
            };
        });

    export type Outbound = {
        limit: number;
        cursor?: string | undefined;
        method?: Method | undefined;
        deleted: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentServicesRequest> = z
        .object({
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
            method: Method$.optional(),
            deleted: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.method === undefined ? null : { method: v.method }),
                deleted: v.deleted,
            };
        });
}
