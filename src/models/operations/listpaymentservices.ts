/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPaymentServicesGlobals = {
  merchantAccountId?: string | undefined;
};

export type ListPaymentServicesRequest = {
  /**
   * Return any payment service for this method.
   */
  method?: components.Method | null | undefined;
  /**
   * A pointer to the page of results to return.
   */
  cursor?: string | null | undefined;
  /**
   * The maximum number of items that are at returned.
   */
  limit?: number | undefined;
  /**
   * Return any deleted payment service.
   */
  deleted?: boolean | null | undefined;
  applicationName?: string | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

export type ListPaymentServicesResponse = {
  result: components.CollectionPaymentService;
};

/** @internal */
export const ListPaymentServicesGlobals$inboundSchema: z.ZodType<
  ListPaymentServicesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type ListPaymentServicesGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ListPaymentServicesGlobals$outboundSchema: z.ZodType<
  ListPaymentServicesGlobals$Outbound,
  z.ZodTypeDef,
  ListPaymentServicesGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentServicesGlobals$ {
  /** @deprecated use `ListPaymentServicesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListPaymentServicesGlobals$inboundSchema;
  /** @deprecated use `ListPaymentServicesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListPaymentServicesGlobals$outboundSchema;
  /** @deprecated use `ListPaymentServicesGlobals$Outbound` instead. */
  export type Outbound = ListPaymentServicesGlobals$Outbound;
}

export function listPaymentServicesGlobalsToJSON(
  listPaymentServicesGlobals: ListPaymentServicesGlobals,
): string {
  return JSON.stringify(
    ListPaymentServicesGlobals$outboundSchema.parse(listPaymentServicesGlobals),
  );
}

export function listPaymentServicesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentServicesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentServicesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentServicesGlobals' from JSON`,
  );
}

/** @internal */
export const ListPaymentServicesRequest$inboundSchema: z.ZodType<
  ListPaymentServicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: z.nullable(components.Method$inboundSchema).optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  deleted: z.nullable(z.boolean()).optional(),
  application_name: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "application_name": "applicationName",
  });
});

/** @internal */
export type ListPaymentServicesRequest$Outbound = {
  method?: string | null | undefined;
  cursor?: string | null | undefined;
  limit: number;
  deleted?: boolean | null | undefined;
  application_name: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListPaymentServicesRequest$outboundSchema: z.ZodType<
  ListPaymentServicesRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentServicesRequest
> = z.object({
  method: z.nullable(components.Method$outboundSchema).optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  deleted: z.nullable(z.boolean()).optional(),
  applicationName: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    applicationName: "application_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentServicesRequest$ {
  /** @deprecated use `ListPaymentServicesRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentServicesRequest$inboundSchema;
  /** @deprecated use `ListPaymentServicesRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentServicesRequest$outboundSchema;
  /** @deprecated use `ListPaymentServicesRequest$Outbound` instead. */
  export type Outbound = ListPaymentServicesRequest$Outbound;
}

export function listPaymentServicesRequestToJSON(
  listPaymentServicesRequest: ListPaymentServicesRequest,
): string {
  return JSON.stringify(
    ListPaymentServicesRequest$outboundSchema.parse(listPaymentServicesRequest),
  );
}

export function listPaymentServicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentServicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentServicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentServicesRequest' from JSON`,
  );
}

/** @internal */
export const ListPaymentServicesResponse$inboundSchema: z.ZodType<
  ListPaymentServicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.CollectionPaymentService$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListPaymentServicesResponse$Outbound = {
  Result: components.CollectionPaymentService$Outbound;
};

/** @internal */
export const ListPaymentServicesResponse$outboundSchema: z.ZodType<
  ListPaymentServicesResponse$Outbound,
  z.ZodTypeDef,
  ListPaymentServicesResponse
> = z.object({
  result: components.CollectionPaymentService$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentServicesResponse$ {
  /** @deprecated use `ListPaymentServicesResponse$inboundSchema` instead. */
  export const inboundSchema = ListPaymentServicesResponse$inboundSchema;
  /** @deprecated use `ListPaymentServicesResponse$outboundSchema` instead. */
  export const outboundSchema = ListPaymentServicesResponse$outboundSchema;
  /** @deprecated use `ListPaymentServicesResponse$Outbound` instead. */
  export type Outbound = ListPaymentServicesResponse$Outbound;
}

export function listPaymentServicesResponseToJSON(
  listPaymentServicesResponse: ListPaymentServicesResponse,
): string {
  return JSON.stringify(
    ListPaymentServicesResponse$outboundSchema.parse(
      listPaymentServicesResponse,
    ),
  );
}

export function listPaymentServicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentServicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentServicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentServicesResponse' from JSON`,
  );
}
