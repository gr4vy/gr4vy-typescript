/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Filters the results to only the items for which the `method` has been set to
 *
 * @remarks
 * this value. For example `card`.
 */
export const Method = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
/**
 * Filters the results to only the items for which the `method` has been set to
 *
 * @remarks
 * this value. For example `card`.
 */
export type Method = ClosedEnum<typeof Method>;

export type ListPaymentServicesRequest = {
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Filters the results to only the items for which the `method` has been set to
     *
     * @remarks
     * this value. For example `card`.
     */
    method?: Method | undefined;
    /**
     * Filters the results to only show items which have been deleted.
     *
     * @remarks
     * By default, deleted items will not be returned.
     */
    deleted?: boolean | undefined;
};

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z.nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> = Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
    /** @deprecated use `Method$inboundSchema` instead. */
    export const inboundSchema = Method$inboundSchema;
    /** @deprecated use `Method$outboundSchema` instead. */
    export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const ListPaymentServicesRequest$inboundSchema: z.ZodType<
    ListPaymentServicesRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    limit: z.number().int().default(20),
    cursor: z.string().optional(),
    method: Method$inboundSchema.optional(),
    deleted: z.boolean().default(false),
});

/** @internal */
export type ListPaymentServicesRequest$Outbound = {
    limit: number;
    cursor?: string | undefined;
    method?: string | undefined;
    deleted: boolean;
};

/** @internal */
export const ListPaymentServicesRequest$outboundSchema: z.ZodType<
    ListPaymentServicesRequest$Outbound,
    z.ZodTypeDef,
    ListPaymentServicesRequest
> = z.object({
    limit: z.number().int().default(20),
    cursor: z.string().optional(),
    method: Method$outboundSchema.optional(),
    deleted: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentServicesRequest$ {
    /** @deprecated use `ListPaymentServicesRequest$inboundSchema` instead. */
    export const inboundSchema = ListPaymentServicesRequest$inboundSchema;
    /** @deprecated use `ListPaymentServicesRequest$outboundSchema` instead. */
    export const outboundSchema = ListPaymentServicesRequest$outboundSchema;
    /** @deprecated use `ListPaymentServicesRequest$Outbound` instead. */
    export type Outbound = ListPaymentServicesRequest$Outbound;
}
