/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type IssueCryptogramRequest = {
    /**
     * The ID of the payment method.
     */
    paymentMethodId: string;
    /**
     * The ID of the network token.
     */
    networkTokenId: string;
    issueCryptogramRequest?: components.IssueCryptogramRequest | undefined;
};

/** @internal */
export const IssueCryptogramRequest$inboundSchema: z.ZodType<
    IssueCryptogramRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        payment_method_id: z.string(),
        network_token_id: z.string(),
        IssueCryptogramRequest: components.IssueCryptogramRequest$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            payment_method_id: "paymentMethodId",
            network_token_id: "networkTokenId",
            IssueCryptogramRequest: "issueCryptogramRequest",
        });
    });

/** @internal */
export type IssueCryptogramRequest$Outbound = {
    payment_method_id: string;
    network_token_id: string;
    IssueCryptogramRequest?: components.IssueCryptogramRequest$Outbound | undefined;
};

/** @internal */
export const IssueCryptogramRequest$outboundSchema: z.ZodType<
    IssueCryptogramRequest$Outbound,
    z.ZodTypeDef,
    IssueCryptogramRequest
> = z
    .object({
        paymentMethodId: z.string(),
        networkTokenId: z.string(),
        issueCryptogramRequest: components.IssueCryptogramRequest$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            paymentMethodId: "payment_method_id",
            networkTokenId: "network_token_id",
            issueCryptogramRequest: "IssueCryptogramRequest",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueCryptogramRequest$ {
    /** @deprecated use `IssueCryptogramRequest$inboundSchema` instead. */
    export const inboundSchema = IssueCryptogramRequest$inboundSchema;
    /** @deprecated use `IssueCryptogramRequest$outboundSchema` instead. */
    export const outboundSchema = IssueCryptogramRequest$outboundSchema;
    /** @deprecated use `IssueCryptogramRequest$Outbound` instead. */
    export type Outbound = IssueCryptogramRequest$Outbound;
}
