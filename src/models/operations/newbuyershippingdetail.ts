/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type NewBuyerShippingDetailRequest = {
    /**
     * The unique ID for a buyer.
     */
    buyerId: string;
    shippingDetailRequest?: components.ShippingDetailRequest | undefined;
};

/** @internal */
export namespace NewBuyerShippingDetailRequest$ {
    export type Inbound = {
        buyer_id: string;
        ShippingDetailRequest?: components.ShippingDetailRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<NewBuyerShippingDetailRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_id: z.string(),
            ShippingDetailRequest: components.ShippingDetailRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                buyerId: v.buyer_id,
                ...(v.ShippingDetailRequest === undefined
                    ? null
                    : { shippingDetailRequest: v.ShippingDetailRequest }),
            };
        });

    export type Outbound = {
        buyer_id: string;
        ShippingDetailRequest?: components.ShippingDetailRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewBuyerShippingDetailRequest> =
        z
            .object({
                buyerId: z.string(),
                shippingDetailRequest: components.ShippingDetailRequest$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    buyer_id: v.buyerId,
                    ...(v.shippingDetailRequest === undefined
                        ? null
                        : { ShippingDetailRequest: v.shippingDetailRequest }),
                };
            });
}
