/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetBuyerRequest = {
    /**
     * The unique ID for a buyer.
     */
    buyerId: string;
};

export type GetBuyerResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns the information about a buyer.
     */
    buyer?: components.Buyer | undefined;
    /**
     * Returns a generic error.
     */
    errorGeneric?: components.ErrorGeneric | undefined;
};

/** @internal */
export namespace GetBuyerRequest$ {
    export type Inbound = {
        buyer_id: string;
    };

    export const inboundSchema: z.ZodType<GetBuyerRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_id: z.string(),
        })
        .transform((v) => {
            return {
                buyerId: v.buyer_id,
            };
        });

    export type Outbound = {
        buyer_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBuyerRequest> = z
        .object({
            buyerId: z.string(),
        })
        .transform((v) => {
            return {
                buyer_id: v.buyerId,
            };
        });
}

/** @internal */
export namespace GetBuyerResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Buyer?: components.Buyer$.Inbound | undefined;
        ErrorGeneric?: components.ErrorGeneric$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetBuyerResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Buyer: components.Buyer$.inboundSchema.optional(),
            ErrorGeneric: components.ErrorGeneric$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Buyer === undefined ? null : { buyer: v.Buyer }),
                ...(v.ErrorGeneric === undefined ? null : { errorGeneric: v.ErrorGeneric }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Buyer?: components.Buyer$.Outbound | undefined;
        ErrorGeneric?: components.ErrorGeneric$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBuyerResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            buyer: components.Buyer$.outboundSchema.optional(),
            errorGeneric: components.ErrorGeneric$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.buyer === undefined ? null : { Buyer: v.buyer }),
                ...(v.errorGeneric === undefined ? null : { ErrorGeneric: v.errorGeneric }),
            };
        });
}
