/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetBuyerRequest = {
    /**
     * The unique ID for a buyer.
     */
    buyerId: string;
};

export type GetBuyerResponse = components.ErrorGeneric | components.Buyer;

/** @internal */
export namespace GetBuyerRequest$ {
    export type Inbound = {
        buyer_id: string;
    };

    export const inboundSchema: z.ZodType<GetBuyerRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_id: z.string(),
        })
        .transform((v) => {
            return {
                buyerId: v.buyer_id,
            };
        });

    export type Outbound = {
        buyer_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBuyerRequest> = z
        .object({
            buyerId: z.string(),
        })
        .transform((v) => {
            return {
                buyer_id: v.buyerId,
            };
        });
}

/** @internal */
export namespace GetBuyerResponse$ {
    export type Inbound = components.ErrorGeneric$.Inbound | components.Buyer$.Inbound;

    export type Outbound = components.ErrorGeneric$.Outbound | components.Buyer$.Outbound;
    export const inboundSchema: z.ZodType<GetBuyerResponse, z.ZodTypeDef, Inbound> = z.union([
        components.ErrorGeneric$.inboundSchema,
        components.Buyer$.inboundSchema,
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBuyerResponse> = z.union([
        components.ErrorGeneric$.outboundSchema,
        components.Buyer$.outboundSchema,
    ]);
}
