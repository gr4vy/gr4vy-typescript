/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetRefundRequest = {
    /**
     * The ID for the transaction to get the information for.
     */
    transactionId: string;
    /**
     * The unique ID of the refund.
     */
    refundId: string;
};

export type GetRefundResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a refund.
     */
    refund?: components.Refund | undefined;
};

/** @internal */
export namespace GetRefundRequest$ {
    export type Inbound = {
        transaction_id: string;
        refund_id: string;
    };

    export const inboundSchema: z.ZodType<GetRefundRequest, z.ZodTypeDef, Inbound> = z
        .object({
            transaction_id: z.string(),
            refund_id: z.string(),
        })
        .transform((v) => {
            return {
                transactionId: v.transaction_id,
                refundId: v.refund_id,
            };
        });

    export type Outbound = {
        transaction_id: string;
        refund_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRefundRequest> = z
        .object({
            transactionId: z.string(),
            refundId: z.string(),
        })
        .transform((v) => {
            return {
                transaction_id: v.transactionId,
                refund_id: v.refundId,
            };
        });
}

/** @internal */
export namespace GetRefundResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Refund?: components.Refund$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetRefundResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Refund: components.Refund$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Refund === undefined ? null : { refund: v.Refund }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Refund?: components.Refund$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRefundResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            refund: components.Refund$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.refund === undefined ? null : { Refund: v.refund }),
            };
        });
}
