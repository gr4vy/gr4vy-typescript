/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRefundGlobals = {
  merchantAccountId?: string | undefined;
};

export type GetRefundRequest = {
  /**
   * The ID of the refund
   */
  refundId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const GetRefundGlobals$inboundSchema: z.ZodType<
  GetRefundGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type GetRefundGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const GetRefundGlobals$outboundSchema: z.ZodType<
  GetRefundGlobals$Outbound,
  z.ZodTypeDef,
  GetRefundGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundGlobals$ {
  /** @deprecated use `GetRefundGlobals$inboundSchema` instead. */
  export const inboundSchema = GetRefundGlobals$inboundSchema;
  /** @deprecated use `GetRefundGlobals$outboundSchema` instead. */
  export const outboundSchema = GetRefundGlobals$outboundSchema;
  /** @deprecated use `GetRefundGlobals$Outbound` instead. */
  export type Outbound = GetRefundGlobals$Outbound;
}

export function getRefundGlobalsToJSON(
  getRefundGlobals: GetRefundGlobals,
): string {
  return JSON.stringify(
    GetRefundGlobals$outboundSchema.parse(getRefundGlobals),
  );
}

export function getRefundGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundGlobals' from JSON`,
  );
}

/** @internal */
export const GetRefundRequest$inboundSchema: z.ZodType<
  GetRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  refund_id: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "refund_id": "refundId",
  });
});

/** @internal */
export type GetRefundRequest$Outbound = {
  refund_id: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const GetRefundRequest$outboundSchema: z.ZodType<
  GetRefundRequest$Outbound,
  z.ZodTypeDef,
  GetRefundRequest
> = z.object({
  refundId: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    refundId: "refund_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRequest$ {
  /** @deprecated use `GetRefundRequest$inboundSchema` instead. */
  export const inboundSchema = GetRefundRequest$inboundSchema;
  /** @deprecated use `GetRefundRequest$outboundSchema` instead. */
  export const outboundSchema = GetRefundRequest$outboundSchema;
  /** @deprecated use `GetRefundRequest$Outbound` instead. */
  export type Outbound = GetRefundRequest$Outbound;
}

export function getRefundRequestToJSON(
  getRefundRequest: GetRefundRequest,
): string {
  return JSON.stringify(
    GetRefundRequest$outboundSchema.parse(getRefundRequest),
  );
}

export function getRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRefundRequest' from JSON`,
  );
}
