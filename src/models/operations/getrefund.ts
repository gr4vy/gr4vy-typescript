/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type GetRefundRequest = {
    refundId: string;
};

/** @internal */
export const GetRefundRequest$inboundSchema: z.ZodType<GetRefundRequest, z.ZodTypeDef, unknown> = z
    .object({
        refund_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            refund_id: "refundId",
        });
    });

/** @internal */
export type GetRefundRequest$Outbound = {
    refund_id: string;
};

/** @internal */
export const GetRefundRequest$outboundSchema: z.ZodType<
    GetRefundRequest$Outbound,
    z.ZodTypeDef,
    GetRefundRequest
> = z
    .object({
        refundId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            refundId: "refund_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRequest$ {
    /** @deprecated use `GetRefundRequest$inboundSchema` instead. */
    export const inboundSchema = GetRefundRequest$inboundSchema;
    /** @deprecated use `GetRefundRequest$outboundSchema` instead. */
    export const outboundSchema = GetRefundRequest$outboundSchema;
    /** @deprecated use `GetRefundRequest$Outbound` instead. */
    export type Outbound = GetRefundRequest$Outbound;
}
