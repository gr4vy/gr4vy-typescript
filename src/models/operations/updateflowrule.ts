/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export enum UpdateFlowRulePathParamFlow {
    Checkout = "checkout",
    CardTransaction = "card-transaction",
    NonCardTransaction = "non-card-transaction",
    RedirectTransaction = "redirect-transaction",
}

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export enum UpdateFlowRulePathParamAction {
    SelectPaymentOptions = "select-payment-options",
    DeclineEarly = "decline-early",
    RouteTransaction = "route-transaction",
    Skip3ds = "skip-3ds",
}

export type UpdateFlowRuleRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: UpdateFlowRulePathParamFlow;
    /**
     * The flow action.
     */
    action: UpdateFlowRulePathParamAction;
    /**
     * The unique ID for a rule.
     */
    ruleId: string;
    flowRuleUpdateRequest?: components.FlowRuleUpdateRequest | undefined;
};

/** @internal */
export namespace UpdateFlowRulePathParamFlow$ {
    export const inboundSchema = z.nativeEnum(UpdateFlowRulePathParamFlow);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateFlowRulePathParamAction$ {
    export const inboundSchema = z.nativeEnum(UpdateFlowRulePathParamAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateFlowRuleRequest$ {
    export const inboundSchema: z.ZodType<UpdateFlowRuleRequest, z.ZodTypeDef, unknown> = z
        .object({
            flow: UpdateFlowRulePathParamFlow$.inboundSchema,
            action: UpdateFlowRulePathParamAction$.inboundSchema,
            rule_id: z.string(),
            FlowRuleUpdateRequest: components.FlowRuleUpdateRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                rule_id: "ruleId",
                FlowRuleUpdateRequest: "flowRuleUpdateRequest",
            });
        });

    export type Outbound = {
        flow: string;
        action: string;
        rule_id: string;
        FlowRuleUpdateRequest?: components.FlowRuleUpdateRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateFlowRuleRequest> = z
        .object({
            flow: UpdateFlowRulePathParamFlow$.outboundSchema,
            action: UpdateFlowRulePathParamAction$.outboundSchema,
            ruleId: z.string(),
            flowRuleUpdateRequest: components.FlowRuleUpdateRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ruleId: "rule_id",
                flowRuleUpdateRequest: "FlowRuleUpdateRequest",
            });
        });
}
