/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListBuyersRequest = {
    /**
     * A pointer to the page of results to return.
     */
    cursor?: string | undefined;
    /**
     * The maximum number of items that are at returned.
     */
    limit?: number | undefined;
    /**
     * Filters the results to only the buyers for which the `display_name` or `external_identifier` matches this value.
     */
    search?: string | undefined;
    /**
     * Filters the results to only the buyers for which the `external_identifier` matches this value.
     */
    externalIdentifier?: string | undefined;
};

export type ListBuyersResponse = {
    result: components.BuyerCollection;
};

/** @internal */
export const ListBuyersRequest$inboundSchema: z.ZodType<ListBuyersRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
            search: z.string().optional(),
            external_identifier: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                external_identifier: "externalIdentifier",
            });
        });

/** @internal */
export type ListBuyersRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
    search?: string | undefined;
    external_identifier?: string | undefined;
};

/** @internal */
export const ListBuyersRequest$outboundSchema: z.ZodType<
    ListBuyersRequest$Outbound,
    z.ZodTypeDef,
    ListBuyersRequest
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        search: z.string().optional(),
        externalIdentifier: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            externalIdentifier: "external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBuyersRequest$ {
    /** @deprecated use `ListBuyersRequest$inboundSchema` instead. */
    export const inboundSchema = ListBuyersRequest$inboundSchema;
    /** @deprecated use `ListBuyersRequest$outboundSchema` instead. */
    export const outboundSchema = ListBuyersRequest$outboundSchema;
    /** @deprecated use `ListBuyersRequest$Outbound` instead. */
    export type Outbound = ListBuyersRequest$Outbound;
}

/** @internal */
export const ListBuyersResponse$inboundSchema: z.ZodType<
    ListBuyersResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.BuyerCollection$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListBuyersResponse$Outbound = {
    Result: components.BuyerCollection$Outbound;
};

/** @internal */
export const ListBuyersResponse$outboundSchema: z.ZodType<
    ListBuyersResponse$Outbound,
    z.ZodTypeDef,
    ListBuyersResponse
> = z
    .object({
        result: components.BuyerCollection$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBuyersResponse$ {
    /** @deprecated use `ListBuyersResponse$inboundSchema` instead. */
    export const inboundSchema = ListBuyersResponse$inboundSchema;
    /** @deprecated use `ListBuyersResponse$outboundSchema` instead. */
    export const outboundSchema = ListBuyersResponse$outboundSchema;
    /** @deprecated use `ListBuyersResponse$Outbound` instead. */
    export type Outbound = ListBuyersResponse$Outbound;
}
