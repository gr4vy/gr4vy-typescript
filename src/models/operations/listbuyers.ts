/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ListBuyersRequest = {
    /**
     * Filters the results to only the buyers for which the `display_name` or
     *
     * @remarks
     * `external_identifier` matches this value. This field allows for a partial
     * match, matching any buyer for which either of the fields partially or
     * completely matches.
     *
     * Please do not use this query parameter in a production application, as this API call is
     * very inefficient and may negatively impact transaction performance.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    search?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that exactly matches this value.
     */
    externalIdentifier?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
};

/** @internal */
export const ListBuyersRequest$inboundSchema: z.ZodType<ListBuyersRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            search: z.string().optional(),
            external_identifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                external_identifier: "externalIdentifier",
            });
        });

/** @internal */
export type ListBuyersRequest$Outbound = {
    search?: string | undefined;
    external_identifier?: string | undefined;
    limit: number;
    cursor?: string | undefined;
};

/** @internal */
export const ListBuyersRequest$outboundSchema: z.ZodType<
    ListBuyersRequest$Outbound,
    z.ZodTypeDef,
    ListBuyersRequest
> = z
    .object({
        search: z.string().optional(),
        externalIdentifier: z.string().optional(),
        limit: z.number().int().default(20),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            externalIdentifier: "external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBuyersRequest$ {
    /** @deprecated use `ListBuyersRequest$inboundSchema` instead. */
    export const inboundSchema = ListBuyersRequest$inboundSchema;
    /** @deprecated use `ListBuyersRequest$outboundSchema` instead. */
    export const outboundSchema = ListBuyersRequest$outboundSchema;
    /** @deprecated use `ListBuyersRequest$Outbound` instead. */
    export type Outbound = ListBuyersRequest$Outbound;
}
