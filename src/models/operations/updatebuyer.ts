/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UpdateBuyerRequest = {
    /**
     * The unique ID for a buyer.
     */
    buyerId: string;
    buyerUpdate?: components.BuyerUpdate | undefined;
};

/** @internal */
export namespace UpdateBuyerRequest$ {
    export type Inbound = {
        buyer_id: string;
        BuyerUpdate?: components.BuyerUpdate$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateBuyerRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_id: z.string(),
            BuyerUpdate: components.BuyerUpdate$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                buyerId: v.buyer_id,
                ...(v.BuyerUpdate === undefined ? null : { buyerUpdate: v.BuyerUpdate }),
            };
        });

    export type Outbound = {
        buyer_id: string;
        BuyerUpdate?: components.BuyerUpdate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateBuyerRequest> = z
        .object({
            buyerId: z.string(),
            buyerUpdate: components.BuyerUpdate$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                buyer_id: v.buyerId,
                ...(v.buyerUpdate === undefined ? null : { BuyerUpdate: v.buyerUpdate }),
            };
        });
}
