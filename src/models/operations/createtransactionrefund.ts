/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransactionRefundRequest = {
  transactionId: string;
  transactionRefundCreate: components.TransactionRefundCreate;
};

/** @internal */
export const CreateTransactionRefundRequest$inboundSchema: z.ZodType<
  CreateTransactionRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  TransactionRefundCreate: components.TransactionRefundCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "TransactionRefundCreate": "transactionRefundCreate",
  });
});

/** @internal */
export type CreateTransactionRefundRequest$Outbound = {
  transaction_id: string;
  TransactionRefundCreate: components.TransactionRefundCreate$Outbound;
};

/** @internal */
export const CreateTransactionRefundRequest$outboundSchema: z.ZodType<
  CreateTransactionRefundRequest$Outbound,
  z.ZodTypeDef,
  CreateTransactionRefundRequest
> = z.object({
  transactionId: z.string(),
  transactionRefundCreate: components.TransactionRefundCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    transactionRefundCreate: "TransactionRefundCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionRefundRequest$ {
  /** @deprecated use `CreateTransactionRefundRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionRefundRequest$inboundSchema;
  /** @deprecated use `CreateTransactionRefundRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionRefundRequest$outboundSchema;
  /** @deprecated use `CreateTransactionRefundRequest$Outbound` instead. */
  export type Outbound = CreateTransactionRefundRequest$Outbound;
}

export function createTransactionRefundRequestToJSON(
  createTransactionRefundRequest: CreateTransactionRefundRequest,
): string {
  return JSON.stringify(
    CreateTransactionRefundRequest$outboundSchema.parse(
      createTransactionRefundRequest,
    ),
  );
}

export function createTransactionRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionRefundRequest' from JSON`,
  );
}
