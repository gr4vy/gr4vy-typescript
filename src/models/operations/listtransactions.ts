/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListTransactionsRequest = {
    cursor?: string | undefined;
    limit?: number | undefined;
    beforeCreatedAt?: Date | undefined;
    afterCreatedAt?: Date | undefined;
    beforeUpdatedAt?: Date | undefined;
    afterUpdatedAt?: Date | undefined;
    transactionStatus?: Array<components.TransactionStatus> | undefined;
    createdAtLte?: Date | undefined;
    createdAtGte?: Date | undefined;
    updatedAtLte?: Date | undefined;
    updatedAtGte?: Date | undefined;
    search?: string | undefined;
    buyerExternalIdentifier?: string | undefined;
    buyerId?: string | undefined;
    buyerEmailAddress?: string | undefined;
    status?: Array<components.TransactionStatus> | undefined;
    id?: string | undefined;
    paymentServiceTransactionId?: string | undefined;
    externalIdentifier?: string | undefined;
    metadata?: Array<string> | undefined;
    amountEq?: number | undefined;
    amountLte?: number | undefined;
    amountGte?: number | undefined;
    currency?: Array<string> | undefined;
    paymentServiceId?: Array<string> | undefined;
    paymentMethodId?: string | undefined;
    paymentMethodLabel?: string | undefined;
    paymentMethodFingerprint?: string | undefined;
    method?: Array<components.PaymentMethod> | undefined;
    errorCode?: Array<string> | undefined;
    hasRefunds?: boolean | undefined;
    pendingReview?: boolean | undefined;
    checkoutSessionId?: string | undefined;
    reconciliationId?: string | undefined;
    hasGiftCardRedemptions?: boolean | undefined;
    giftCardId?: string | undefined;
    giftCardLast4?: string | undefined;
};

export type ListTransactionsResponse = {
    result?: any | undefined;
};

/** @internal */
export const ListTransactionsRequest$inboundSchema: z.ZodType<
    ListTransactionsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        before_created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        after_created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        before_updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        after_updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        transaction_status: z.array(components.TransactionStatus$inboundSchema).optional(),
        created_at_lte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        created_at_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at_lte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        search: z.string().optional(),
        buyer_external_identifier: z.string().optional(),
        buyer_id: z.string().optional(),
        buyer_email_address: z.string().optional(),
        status: z.array(components.TransactionStatus$inboundSchema).optional(),
        id: z.string().optional(),
        payment_service_transaction_id: z.string().optional(),
        external_identifier: z.string().optional(),
        metadata: z.array(z.string()).optional(),
        amount_eq: z.number().int().optional(),
        amount_lte: z.number().int().optional(),
        amount_gte: z.number().int().optional(),
        currency: z.array(z.string()).optional(),
        payment_service_id: z.array(z.string()).optional(),
        payment_method_id: z.string().optional(),
        payment_method_label: z.string().optional(),
        payment_method_fingerprint: z.string().optional(),
        method: z.array(components.PaymentMethod$inboundSchema).optional(),
        error_code: z.array(z.string()).optional(),
        has_refunds: z.boolean().optional(),
        pending_review: z.boolean().optional(),
        checkout_session_id: z.string().optional(),
        reconciliation_id: z.string().optional(),
        has_gift_card_redemptions: z.boolean().optional(),
        gift_card_id: z.string().optional(),
        gift_card_last4: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            before_created_at: "beforeCreatedAt",
            after_created_at: "afterCreatedAt",
            before_updated_at: "beforeUpdatedAt",
            after_updated_at: "afterUpdatedAt",
            transaction_status: "transactionStatus",
            created_at_lte: "createdAtLte",
            created_at_gte: "createdAtGte",
            updated_at_lte: "updatedAtLte",
            updated_at_gte: "updatedAtGte",
            buyer_external_identifier: "buyerExternalIdentifier",
            buyer_id: "buyerId",
            buyer_email_address: "buyerEmailAddress",
            payment_service_transaction_id: "paymentServiceTransactionId",
            external_identifier: "externalIdentifier",
            amount_eq: "amountEq",
            amount_lte: "amountLte",
            amount_gte: "amountGte",
            payment_service_id: "paymentServiceId",
            payment_method_id: "paymentMethodId",
            payment_method_label: "paymentMethodLabel",
            payment_method_fingerprint: "paymentMethodFingerprint",
            error_code: "errorCode",
            has_refunds: "hasRefunds",
            pending_review: "pendingReview",
            checkout_session_id: "checkoutSessionId",
            reconciliation_id: "reconciliationId",
            has_gift_card_redemptions: "hasGiftCardRedemptions",
            gift_card_id: "giftCardId",
            gift_card_last4: "giftCardLast4",
        });
    });

/** @internal */
export type ListTransactionsRequest$Outbound = {
    cursor?: string | undefined;
    limit: number;
    before_created_at?: string | undefined;
    after_created_at?: string | undefined;
    before_updated_at?: string | undefined;
    after_updated_at?: string | undefined;
    transaction_status?: Array<string> | undefined;
    created_at_lte?: string | undefined;
    created_at_gte?: string | undefined;
    updated_at_lte?: string | undefined;
    updated_at_gte?: string | undefined;
    search?: string | undefined;
    buyer_external_identifier?: string | undefined;
    buyer_id?: string | undefined;
    buyer_email_address?: string | undefined;
    status?: Array<string> | undefined;
    id?: string | undefined;
    payment_service_transaction_id?: string | undefined;
    external_identifier?: string | undefined;
    metadata?: Array<string> | undefined;
    amount_eq?: number | undefined;
    amount_lte?: number | undefined;
    amount_gte?: number | undefined;
    currency?: Array<string> | undefined;
    payment_service_id?: Array<string> | undefined;
    payment_method_id?: string | undefined;
    payment_method_label?: string | undefined;
    payment_method_fingerprint?: string | undefined;
    method?: Array<string> | undefined;
    error_code?: Array<string> | undefined;
    has_refunds?: boolean | undefined;
    pending_review?: boolean | undefined;
    checkout_session_id?: string | undefined;
    reconciliation_id?: string | undefined;
    has_gift_card_redemptions?: boolean | undefined;
    gift_card_id?: string | undefined;
    gift_card_last4?: string | undefined;
};

/** @internal */
export const ListTransactionsRequest$outboundSchema: z.ZodType<
    ListTransactionsRequest$Outbound,
    z.ZodTypeDef,
    ListTransactionsRequest
> = z
    .object({
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        beforeCreatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        afterCreatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        beforeUpdatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        afterUpdatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        transactionStatus: z.array(components.TransactionStatus$outboundSchema).optional(),
        createdAtLte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        createdAtGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAtLte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAtGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        search: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
        buyerId: z.string().optional(),
        buyerEmailAddress: z.string().optional(),
        status: z.array(components.TransactionStatus$outboundSchema).optional(),
        id: z.string().optional(),
        paymentServiceTransactionId: z.string().optional(),
        externalIdentifier: z.string().optional(),
        metadata: z.array(z.string()).optional(),
        amountEq: z.number().int().optional(),
        amountLte: z.number().int().optional(),
        amountGte: z.number().int().optional(),
        currency: z.array(z.string()).optional(),
        paymentServiceId: z.array(z.string()).optional(),
        paymentMethodId: z.string().optional(),
        paymentMethodLabel: z.string().optional(),
        paymentMethodFingerprint: z.string().optional(),
        method: z.array(components.PaymentMethod$outboundSchema).optional(),
        errorCode: z.array(z.string()).optional(),
        hasRefunds: z.boolean().optional(),
        pendingReview: z.boolean().optional(),
        checkoutSessionId: z.string().optional(),
        reconciliationId: z.string().optional(),
        hasGiftCardRedemptions: z.boolean().optional(),
        giftCardId: z.string().optional(),
        giftCardLast4: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            beforeCreatedAt: "before_created_at",
            afterCreatedAt: "after_created_at",
            beforeUpdatedAt: "before_updated_at",
            afterUpdatedAt: "after_updated_at",
            transactionStatus: "transaction_status",
            createdAtLte: "created_at_lte",
            createdAtGte: "created_at_gte",
            updatedAtLte: "updated_at_lte",
            updatedAtGte: "updated_at_gte",
            buyerExternalIdentifier: "buyer_external_identifier",
            buyerId: "buyer_id",
            buyerEmailAddress: "buyer_email_address",
            paymentServiceTransactionId: "payment_service_transaction_id",
            externalIdentifier: "external_identifier",
            amountEq: "amount_eq",
            amountLte: "amount_lte",
            amountGte: "amount_gte",
            paymentServiceId: "payment_service_id",
            paymentMethodId: "payment_method_id",
            paymentMethodLabel: "payment_method_label",
            paymentMethodFingerprint: "payment_method_fingerprint",
            errorCode: "error_code",
            hasRefunds: "has_refunds",
            pendingReview: "pending_review",
            checkoutSessionId: "checkout_session_id",
            reconciliationId: "reconciliation_id",
            hasGiftCardRedemptions: "has_gift_card_redemptions",
            giftCardId: "gift_card_id",
            giftCardLast4: "gift_card_last4",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsRequest$ {
    /** @deprecated use `ListTransactionsRequest$inboundSchema` instead. */
    export const inboundSchema = ListTransactionsRequest$inboundSchema;
    /** @deprecated use `ListTransactionsRequest$outboundSchema` instead. */
    export const outboundSchema = ListTransactionsRequest$outboundSchema;
    /** @deprecated use `ListTransactionsRequest$Outbound` instead. */
    export type Outbound = ListTransactionsRequest$Outbound;
}

/** @internal */
export const ListTransactionsResponse$inboundSchema: z.ZodType<
    ListTransactionsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListTransactionsResponse$Outbound = {
    Result?: any | undefined;
};

/** @internal */
export const ListTransactionsResponse$outboundSchema: z.ZodType<
    ListTransactionsResponse$Outbound,
    z.ZodTypeDef,
    ListTransactionsResponse
> = z
    .object({
        result: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsResponse$ {
    /** @deprecated use `ListTransactionsResponse$inboundSchema` instead. */
    export const inboundSchema = ListTransactionsResponse$inboundSchema;
    /** @deprecated use `ListTransactionsResponse$outboundSchema` instead. */
    export const outboundSchema = ListTransactionsResponse$outboundSchema;
    /** @deprecated use `ListTransactionsResponse$Outbound` instead. */
    export type Outbound = ListTransactionsResponse$Outbound;
}
