/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

export const QueryParamMethod = {
    Afterpay: "afterpay",
    Alipay: "alipay",
    Alipayhk: "alipayhk",
    Applepay: "applepay",
    Bacs: "bacs",
    Bancontact: "bancontact",
    Banked: "banked",
    Becs: "becs",
    Bitpay: "bitpay",
    Boleto: "boleto",
    Boost: "boost",
    Card: "card",
    Cashapp: "cashapp",
    Chaseorbital: "chaseorbital",
    CheckoutSession: "checkout-session",
    Clearpay: "clearpay",
    ClickToPay: "click-to-pay",
    Dana: "dana",
    Dcb: "dcb",
    Dlocal: "dlocal",
    Ebanx: "ebanx",
    Eps: "eps",
    Everydaypay: "everydaypay",
    Gcash: "gcash",
    Giropay: "giropay",
    Givingblock: "givingblock",
    Gocardless: "gocardless",
    Googlepay: "googlepay",
    Gopay: "gopay",
    Grabpay: "grabpay",
    Ideal: "ideal",
    Kakaopay: "kakaopay",
    Kcp: "kcp",
    Klarna: "klarna",
    Laybuy: "laybuy",
    Linepay: "linepay",
    Linkaja: "linkaja",
    Maybankqrpay: "maybankqrpay",
    Multibanco: "multibanco",
    Multipago: "multipago",
    NetworkToken: "network-token",
    Oney3x: "oney_3x",
    Oney4x: "oney_4x",
    Oney6x: "oney_6x",
    Oney10x: "oney_10x",
    Oney12x: "oney_12x",
    Ovo: "ovo",
    Oxxo: "oxxo",
    Payid: "payid",
    Paymaya: "paymaya",
    Paypal: "paypal",
    Paypalpaylater: "paypalpaylater",
    Payto: "payto",
    Venmo: "venmo",
    Pix: "pix",
    Rabbitlinepay: "rabbitlinepay",
    Razorpay: "razorpay",
    Scalapay: "scalapay",
    Sepa: "sepa",
    Shopeepay: "shopeepay",
    Singteldash: "singteldash",
    Smartpay: "smartpay",
    Sofort: "sofort",
    Spei: "spei",
    Stripedd: "stripedd",
    Thaiqr: "thaiqr",
    Touchngo: "touchngo",
    Truemoney: "truemoney",
    Trustly: "trustly",
    Trustlyeurope: "trustlyeurope",
    Vipps: "vipps",
    Waave: "waave",
    Wechat: "wechat",
    Zippay: "zippay",
} as const;
export type QueryParamMethod = ClosedEnum<typeof QueryParamMethod>;

export const QueryParamStatus = {
    Processing: "processing",
    BuyerApprovalPending: "buyer_approval_pending",
    AuthorizationSucceeded: "authorization_succeeded",
    AuthorizationFailed: "authorization_failed",
    AuthorizationDeclined: "authorization_declined",
    CapturePending: "capture_pending",
    CaptureSucceeded: "capture_succeeded",
    AuthorizationVoidPending: "authorization_void_pending",
    AuthorizationVoided: "authorization_voided",
} as const;
export type QueryParamStatus = ClosedEnum<typeof QueryParamStatus>;

export type ListTransactionsRequest = {
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    buyerId?: string | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * Filters for transactions that have an `amount` that is
     *
     * @remarks
     * equal to the provided `amount_eq` value.
     */
    amountEq?: number | undefined;
    /**
     * Filters for transactions that have an `amount` that is
     *
     * @remarks
     * greater than or equal to the `amount_gte` value.
     */
    amountGte?: number | undefined;
    /**
     * Filters for transactions that have an `amount` that is
     *
     * @remarks
     * less than or equal to the `amount_lte` value.
     */
    amountLte?: number | undefined;
    /**
     * Filters for transactions that are linked to the unique ID for a Checkout Session.
     */
    checkoutSessionId?: string | undefined;
    /**
     * Filters the results to only transactions created after this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    createdAtGte?: Date | undefined;
    /**
     * Filters the results to only transactions created before this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    createdAtLte?: Date | undefined;
    /**
     * Filters for transactions that have matching `currency` values.
     *
     * @remarks
     * The `currency` values provided must be formatted as 3-letter ISO
     * currency code.
     */
    currency?: Array<string> | undefined;
    /**
     * Filters the results to only the items for which the `external_identifier`
     *
     * @remarks
     * matches this value.
     */
    externalIdentifier?: string | undefined;
    /**
     * Filters for transactions that have at least one gift card
     *
     * @remarks
     * redemption with a matching `gift_card_id` value.
     */
    giftCardId?: string | undefined;
    /**
     * Filters for transactions that have at least one gift card
     *
     * @remarks
     * redemption where the last 4 digits of its gift card number
     * matches exactly with the provided value.
     */
    giftCardLast4?: string | undefined;
    /**
     * When set to `true`, filters for transactions that have at least one gift
     *
     * @remarks
     * card redemption associated with it. When set to `false`, filter for
     * transactions that have no gift card redemptions.
     */
    hasGiftCardRedemptions?: boolean | undefined;
    /**
     * When set to `true`, filter for transactions that have at least one completed
     *
     * @remarks
     * refund (including gift card refunds) associated with it. When set to `false`,
     * filter for transactions that have no completed refunds.
     */
    hasRefunds?: boolean | undefined;
    /**
     * Filters for the transaction that has a matching `id` value.
     */
    id?: string | undefined;
    /**
     * Filters for transactions where their `metadata` values
     *
     * @remarks
     * contain all of the provided `metadata` keys. The value sent
     * for `metadata` must be formatted as a JSON string, and all
     * keys and values must be strings. This value should also be URL
     * encoded.
     *
     * Duplicate keys are not supported. If a key is duplicated, only the
     * last appearing value will be used.
     */
    metadata?: Array<string> | undefined;
    /**
     * Filters the results to only the items for which the `method` has been set to
     *
     * @remarks
     * this value.
     */
    method?: Array<QueryParamMethod> | undefined;
    /**
     * Filters for transactions that have a payment method with an ID that matches exactly with the provided value.
     */
    paymentMethodId?: string | undefined;
    /**
     * Filters for transactions that have a payment method with a label
     *
     * @remarks
     * that matches exactly with the provided value.
     */
    paymentMethodLabel?: string | undefined;
    /**
     * Filters for transactions that were processed by the provided
     *
     * @remarks
     * `payment_service_id` values.
     */
    paymentServiceId?: Array<string> | undefined;
    /**
     * Filters for transactions that have a matching
     *
     * @remarks
     * `payment_service_transaction_id` value. The `payment_service_transaction_id`
     * is the identifier of the transaction given by the payment service.
     */
    paymentServiceTransactionId?: string | undefined;
    /**
     * When set to `true`, filter for transactions that have a manual review pending.
     *
     * @remarks
     * When set to `false`, filter for transactions that don't have a manual review pending.
     */
    pendingReview?: boolean | undefined;
    /**
     * Filters for transactions based on their transaction reconciliation identifier.
     */
    reconciliationId?: string | undefined;
    /**
     * Filters for transactions that have one of the following fields
     *
     * @remarks
     * match exactly with the provided `search` value.
     *
     * * `buyer_external_identifier`
     * * `buyer_id`
     * * `external_identifier`
     * * `id`
     * * `payment_service_transaction_id`
     *
     * The search will apply against all fields at the same time.
     * Please do not use this query parameter in a production application, as this API call is
     * very inefficient and may negatively impact transaction performance.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    search?: string | undefined;
    /**
     * Filters the results to only the transactions that have a `status`
     *
     * @remarks
     * that matches with any of the provided status values.
     */
    status?: Array<QueryParamStatus> | undefined;
    /**
     * Filters the results to only transactions last updated after this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    updatedAtGte?: Date | undefined;
    /**
     * Filters the results to only transactions last updated before this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    updatedAtLte?: Date | undefined;
};

export type ListTransactionsResponse = {
    result: components.Transactions;
};

/** @internal */
export const QueryParamMethod$inboundSchema: z.ZodNativeEnum<typeof QueryParamMethod> =
    z.nativeEnum(QueryParamMethod);

/** @internal */
export const QueryParamMethod$outboundSchema: z.ZodNativeEnum<typeof QueryParamMethod> =
    QueryParamMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamMethod$ {
    /** @deprecated use `QueryParamMethod$inboundSchema` instead. */
    export const inboundSchema = QueryParamMethod$inboundSchema;
    /** @deprecated use `QueryParamMethod$outboundSchema` instead. */
    export const outboundSchema = QueryParamMethod$outboundSchema;
}

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<typeof QueryParamStatus> =
    z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<typeof QueryParamStatus> =
    QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
    /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
    export const inboundSchema = QueryParamStatus$inboundSchema;
    /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
    export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const ListTransactionsRequest$inboundSchema: z.ZodType<
    ListTransactionsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        buyer_external_identifier: z.string().optional(),
        buyer_id: z.string().optional(),
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        amount_eq: z.number().int().optional(),
        amount_gte: z.number().int().optional(),
        amount_lte: z.number().int().optional(),
        checkout_session_id: z.string().optional(),
        created_at_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        created_at_lte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        currency: z.array(z.string()).optional(),
        external_identifier: z.string().optional(),
        gift_card_id: z.string().optional(),
        gift_card_last4: z.string().optional(),
        has_gift_card_redemptions: z.boolean().optional(),
        has_refunds: z.boolean().optional(),
        id: z.string().optional(),
        metadata: z.array(z.string()).optional(),
        method: z.array(QueryParamMethod$inboundSchema).optional(),
        payment_method_id: z.string().optional(),
        payment_method_label: z.string().optional(),
        payment_service_id: z.array(z.string()).optional(),
        payment_service_transaction_id: z.string().optional(),
        pending_review: z.boolean().optional(),
        reconciliation_id: z.string().optional(),
        search: z.string().optional(),
        status: z.array(QueryParamStatus$inboundSchema).optional(),
        updated_at_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updated_at_lte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyer_external_identifier: "buyerExternalIdentifier",
            buyer_id: "buyerId",
            amount_eq: "amountEq",
            amount_gte: "amountGte",
            amount_lte: "amountLte",
            checkout_session_id: "checkoutSessionId",
            created_at_gte: "createdAtGte",
            created_at_lte: "createdAtLte",
            external_identifier: "externalIdentifier",
            gift_card_id: "giftCardId",
            gift_card_last4: "giftCardLast4",
            has_gift_card_redemptions: "hasGiftCardRedemptions",
            has_refunds: "hasRefunds",
            payment_method_id: "paymentMethodId",
            payment_method_label: "paymentMethodLabel",
            payment_service_id: "paymentServiceId",
            payment_service_transaction_id: "paymentServiceTransactionId",
            pending_review: "pendingReview",
            reconciliation_id: "reconciliationId",
            updated_at_gte: "updatedAtGte",
            updated_at_lte: "updatedAtLte",
        });
    });

/** @internal */
export type ListTransactionsRequest$Outbound = {
    buyer_external_identifier?: string | undefined;
    buyer_id?: string | undefined;
    cursor?: string | undefined;
    limit: number;
    amount_eq?: number | undefined;
    amount_gte?: number | undefined;
    amount_lte?: number | undefined;
    checkout_session_id?: string | undefined;
    created_at_gte?: string | undefined;
    created_at_lte?: string | undefined;
    currency?: Array<string> | undefined;
    external_identifier?: string | undefined;
    gift_card_id?: string | undefined;
    gift_card_last4?: string | undefined;
    has_gift_card_redemptions?: boolean | undefined;
    has_refunds?: boolean | undefined;
    id?: string | undefined;
    metadata?: Array<string> | undefined;
    method?: Array<string> | undefined;
    payment_method_id?: string | undefined;
    payment_method_label?: string | undefined;
    payment_service_id?: Array<string> | undefined;
    payment_service_transaction_id?: string | undefined;
    pending_review?: boolean | undefined;
    reconciliation_id?: string | undefined;
    search?: string | undefined;
    status?: Array<string> | undefined;
    updated_at_gte?: string | undefined;
    updated_at_lte?: string | undefined;
};

/** @internal */
export const ListTransactionsRequest$outboundSchema: z.ZodType<
    ListTransactionsRequest$Outbound,
    z.ZodTypeDef,
    ListTransactionsRequest
> = z
    .object({
        buyerExternalIdentifier: z.string().optional(),
        buyerId: z.string().optional(),
        cursor: z.string().optional(),
        limit: z.number().int().default(20),
        amountEq: z.number().int().optional(),
        amountGte: z.number().int().optional(),
        amountLte: z.number().int().optional(),
        checkoutSessionId: z.string().optional(),
        createdAtGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        createdAtLte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        currency: z.array(z.string()).optional(),
        externalIdentifier: z.string().optional(),
        giftCardId: z.string().optional(),
        giftCardLast4: z.string().optional(),
        hasGiftCardRedemptions: z.boolean().optional(),
        hasRefunds: z.boolean().optional(),
        id: z.string().optional(),
        metadata: z.array(z.string()).optional(),
        method: z.array(QueryParamMethod$outboundSchema).optional(),
        paymentMethodId: z.string().optional(),
        paymentMethodLabel: z.string().optional(),
        paymentServiceId: z.array(z.string()).optional(),
        paymentServiceTransactionId: z.string().optional(),
        pendingReview: z.boolean().optional(),
        reconciliationId: z.string().optional(),
        search: z.string().optional(),
        status: z.array(QueryParamStatus$outboundSchema).optional(),
        updatedAtGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        updatedAtLte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyerExternalIdentifier: "buyer_external_identifier",
            buyerId: "buyer_id",
            amountEq: "amount_eq",
            amountGte: "amount_gte",
            amountLte: "amount_lte",
            checkoutSessionId: "checkout_session_id",
            createdAtGte: "created_at_gte",
            createdAtLte: "created_at_lte",
            externalIdentifier: "external_identifier",
            giftCardId: "gift_card_id",
            giftCardLast4: "gift_card_last4",
            hasGiftCardRedemptions: "has_gift_card_redemptions",
            hasRefunds: "has_refunds",
            paymentMethodId: "payment_method_id",
            paymentMethodLabel: "payment_method_label",
            paymentServiceId: "payment_service_id",
            paymentServiceTransactionId: "payment_service_transaction_id",
            pendingReview: "pending_review",
            reconciliationId: "reconciliation_id",
            updatedAtGte: "updated_at_gte",
            updatedAtLte: "updated_at_lte",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsRequest$ {
    /** @deprecated use `ListTransactionsRequest$inboundSchema` instead. */
    export const inboundSchema = ListTransactionsRequest$inboundSchema;
    /** @deprecated use `ListTransactionsRequest$outboundSchema` instead. */
    export const outboundSchema = ListTransactionsRequest$outboundSchema;
    /** @deprecated use `ListTransactionsRequest$Outbound` instead. */
    export type Outbound = ListTransactionsRequest$Outbound;
}

/** @internal */
export const ListTransactionsResponse$inboundSchema: z.ZodType<
    ListTransactionsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.Transactions$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListTransactionsResponse$Outbound = {
    Result: components.Transactions$Outbound;
};

/** @internal */
export const ListTransactionsResponse$outboundSchema: z.ZodType<
    ListTransactionsResponse$Outbound,
    z.ZodTypeDef,
    ListTransactionsResponse
> = z
    .object({
        result: components.Transactions$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsResponse$ {
    /** @deprecated use `ListTransactionsResponse$inboundSchema` instead. */
    export const inboundSchema = ListTransactionsResponse$inboundSchema;
    /** @deprecated use `ListTransactionsResponse$outboundSchema` instead. */
    export const outboundSchema = ListTransactionsResponse$outboundSchema;
    /** @deprecated use `ListTransactionsResponse$Outbound` instead. */
    export type Outbound = ListTransactionsResponse$Outbound;
}
