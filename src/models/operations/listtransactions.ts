/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export enum QueryParamMethod {
    Afterpay = "afterpay",
    Alipay = "alipay",
    Alipayhk = "alipayhk",
    Applepay = "applepay",
    Bacs = "bacs",
    Bancontact = "bancontact",
    Banked = "banked",
    Becs = "becs",
    Bitpay = "bitpay",
    Boleto = "boleto",
    Boost = "boost",
    Card = "card",
    CheckoutSession = "checkout-session",
    ClickToPay = "click-to-pay",
    Clearpay = "clearpay",
    Dana = "dana",
    Dcb = "dcb",
    Eps = "eps",
    Fortumo = "fortumo",
    Gcash = "gcash",
    Giropay = "giropay",
    Givingblock = "givingblock",
    Gocardless = "gocardless",
    Googlepay = "googlepay",
    Gopay = "gopay",
    Grabpay = "grabpay",
    Ideal = "ideal",
    Id = "id",
    Kakaopay = "kakaopay",
    Klarna = "klarna",
    Laybuy = "laybuy",
    Linepay = "linepay",
    Linkaja = "linkaja",
    Maybankqrpay = "maybankqrpay",
    Multibanco = "multibanco",
    Oney3x = "oney_3x",
    Oney4x = "oney_4x",
    Oney6x = "oney_6x",
    Oney10x = "oney_10x",
    Oney12x = "oney_12x",
    Ovo = "ovo",
    Oxxo = "oxxo",
    Paymaya = "paymaya",
    Paypal = "paypal",
    Paypalpaylater = "paypalpaylater",
    Pix = "pix",
    Rabbitlinepay = "rabbitlinepay",
    Razorpay = "razorpay",
    Scalapay = "scalapay",
    Sepa = "sepa",
    Shopeepay = "shopeepay",
    Singteldash = "singteldash",
    Sofort = "sofort",
    Stripedd = "stripedd",
    Thaiqr = "thaiqr",
    Touchngo = "touchngo",
    Truemoney = "truemoney",
    Trustly = "trustly",
    Venmo = "venmo",
    Waave = "waave",
    Wechat = "wechat",
    Zippay = "zippay",
}

export enum QueryParamStatus {
    Processing = "processing",
    BuyerApprovalPending = "buyer_approval_pending",
    AuthorizationSucceeded = "authorization_succeeded",
    AuthorizationFailed = "authorization_failed",
    AuthorizationDeclined = "authorization_declined",
    CapturePending = "capture_pending",
    CaptureSucceeded = "capture_succeeded",
    AuthorizationVoidPending = "authorization_void_pending",
    AuthorizationVoided = "authorization_voided",
}

export type ListTransactionsRequest = {
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    buyerId?: string | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * Filters for transactions that have an `amount` that is
     *
     * @remarks
     * equal to the provided `amount_eq` value.
     */
    amountEq?: number | undefined;
    /**
     * Filters for transactions that have an `amount` that is
     *
     * @remarks
     * greater than or equal to the `amount_gte` value.
     */
    amountGte?: number | undefined;
    /**
     * Filters for transactions that have an `amount` that is
     *
     * @remarks
     * less than or equal to the `amount_lte` value.
     */
    amountLte?: number | undefined;
    /**
     * Filters for transactions that are linked to the unique ID for a Checkout Session.
     */
    checkoutSessionId?: string | undefined;
    /**
     * Filters the results to only transactions created after this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    createdAtGte?: Date | undefined;
    /**
     * Filters the results to only transactions created before this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    createdAtLte?: Date | undefined;
    /**
     * Filters for transactions that have matching `currency` values.
     *
     * @remarks
     * The `currency` values provided must be formatted as 3-letter ISO
     * currency code.
     */
    currency?: Array<string> | undefined;
    /**
     * Filters the results to only the items for which the `external_identifier`
     *
     * @remarks
     * matches this value.
     */
    externalIdentifier?: string | undefined;
    /**
     * Filters for transactions that have at least one gift card
     *
     * @remarks
     * redemption with a matching `gift_card_id` value.
     */
    giftCardId?: string | undefined;
    /**
     * Filters for transactions that have at least one gift card
     *
     * @remarks
     * redemption where the last 4 digits of its gift card number
     * matches exactly with the provided value.
     */
    giftCardLast4?: string | undefined;
    /**
     * When set to `true`, filters for transactions that have at least one gift
     *
     * @remarks
     * card redemption associated with it. When set to `false`, filter for
     * transactions that have no gift card redemptions.
     */
    hasGiftCardRedemptions?: boolean | undefined;
    /**
     * When set to `true`, filter for transactions that have at least one completed
     *
     * @remarks
     * refund (including gift card refunds) associated with it. When set to `false`,
     * filter for transactions that have no completed refunds.
     */
    hasRefunds?: boolean | undefined;
    /**
     * Filters for the transaction that has a matching `id` value.
     */
    id?: string | undefined;
    /**
     * Filters for transactions where their `metadata` values
     *
     * @remarks
     * contain all of the provided `metadata` keys. The value sent
     * for `metadata` must be formatted as a JSON string, and all
     * keys and values must be strings. This value should also be URL
     * encoded.
     *
     * Duplicate keys are not supported. If a key is duplicated, only the
     * last appearing value will be used.
     */
    metadata?: Array<string> | undefined;
    /**
     * Filters the results to only the items for which the `method` has been set to
     *
     * @remarks
     * this value.
     */
    method?: Array<QueryParamMethod> | undefined;
    /**
     * Filters for transactions that have a payment method with an ID that matches exactly with the provided value.
     */
    paymentMethodId?: string | undefined;
    /**
     * Filters for transactions that have a payment method with a label
     *
     * @remarks
     * that matches exactly with the provided value.
     */
    paymentMethodLabel?: string | undefined;
    /**
     * Filters for transactions that were processed by the provided
     *
     * @remarks
     * `payment_service_id` values.
     */
    paymentServiceId?: Array<string> | undefined;
    /**
     * Filters for transactions that have a matching
     *
     * @remarks
     * `payment_service_transaction_id` value. The `payment_service_transaction_id`
     * is the identifier of the transaction given by the payment service.
     */
    paymentServiceTransactionId?: string | undefined;
    /**
     * When set to `true`, filter for transactions that have a manual review pending.
     *
     * @remarks
     * When set to `false`, filter for transactions that don't have a manual review pending.
     */
    pendingReview?: boolean | undefined;
    /**
     * Filters for transactions based on their transaction reconciliation identifier.
     */
    reconciliationId?: string | undefined;
    /**
     * Filters for transactions that have one of the following fields
     *
     * @remarks
     * match exactly with the provided `search` value.
     *
     * * `buyer_external_identifier`
     * * `buyer_id`
     * * `external_identifier`
     * * `id`
     * * `payment_service_transaction_id`
     *
     * The search will apply against all fields at the same time.
     * Please do not use this query parameter in a production application, as this API call is
     * very inefficient and may negatively impact transaction performance.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    search?: string | undefined;
    /**
     * Filters the results to only the transactions that have a `status`
     *
     * @remarks
     * that matches with any of the provided status values.
     */
    status?: Array<QueryParamStatus> | undefined;
    /**
     * Filters the results to only transactions last updated after this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    updatedAtGte?: Date | undefined;
    /**
     * Filters the results to only transactions last updated before this ISO
     *
     * @remarks
     * date-time string. The time zone must be included.
     *
     * Ensure that the date-time string is URL encoded, e.g.
     * `2022-01-01T12:00:00+08:00` must be encoded as
     * `2022-01-01T12%3A00%3A00%2B08%3A00`.
     */
    updatedAtLte?: Date | undefined;
};

export type ListTransactionsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a paginated list of transactions for an account.
     */
    transactions?: components.Transactions | undefined;
};

/** @internal */
export const QueryParamMethod$ = z.nativeEnum(QueryParamMethod);

/** @internal */
export const QueryParamStatus$ = z.nativeEnum(QueryParamStatus);

/** @internal */
export namespace ListTransactionsRequest$ {
    export type Inbound = {
        buyer_external_identifier?: string | undefined;
        buyer_id?: string | undefined;
        cursor?: string | undefined;
        limit?: number | undefined;
        amount_eq?: number | undefined;
        amount_gte?: number | undefined;
        amount_lte?: number | undefined;
        checkout_session_id?: string | undefined;
        created_at_gte?: string | undefined;
        created_at_lte?: string | undefined;
        currency?: Array<string> | undefined;
        external_identifier?: string | undefined;
        gift_card_id?: string | undefined;
        gift_card_last4?: string | undefined;
        has_gift_card_redemptions?: boolean | undefined;
        has_refunds?: boolean | undefined;
        id?: string | undefined;
        metadata?: Array<string> | undefined;
        method?: Array<QueryParamMethod> | undefined;
        payment_method_id?: string | undefined;
        payment_method_label?: string | undefined;
        payment_service_id?: Array<string> | undefined;
        payment_service_transaction_id?: string | undefined;
        pending_review?: boolean | undefined;
        reconciliation_id?: string | undefined;
        search?: string | undefined;
        status?: Array<QueryParamStatus> | undefined;
        updated_at_gte?: string | undefined;
        updated_at_lte?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListTransactionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_external_identifier: z.string().optional(),
            buyer_id: z.string().optional(),
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
            amount_eq: z.number().int().optional(),
            amount_gte: z.number().int().optional(),
            amount_lte: z.number().int().optional(),
            checkout_session_id: z.string().optional(),
            created_at_gte: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            created_at_lte: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency: z.array(z.string()).optional(),
            external_identifier: z.string().optional(),
            gift_card_id: z.string().optional(),
            gift_card_last4: z.string().optional(),
            has_gift_card_redemptions: z.boolean().optional(),
            has_refunds: z.boolean().optional(),
            id: z.string().optional(),
            metadata: z.array(z.string()).optional(),
            method: z.array(QueryParamMethod$).optional(),
            payment_method_id: z.string().optional(),
            payment_method_label: z.string().optional(),
            payment_service_id: z.array(z.string()).optional(),
            payment_service_transaction_id: z.string().optional(),
            pending_review: z.boolean().optional(),
            reconciliation_id: z.string().optional(),
            search: z.string().optional(),
            status: z.array(QueryParamStatus$).optional(),
            updated_at_gte: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updated_at_lte: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.buyer_external_identifier === undefined
                    ? null
                    : { buyerExternalIdentifier: v.buyer_external_identifier }),
                ...(v.buyer_id === undefined ? null : { buyerId: v.buyer_id }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                limit: v.limit,
                ...(v.amount_eq === undefined ? null : { amountEq: v.amount_eq }),
                ...(v.amount_gte === undefined ? null : { amountGte: v.amount_gte }),
                ...(v.amount_lte === undefined ? null : { amountLte: v.amount_lte }),
                ...(v.checkout_session_id === undefined
                    ? null
                    : { checkoutSessionId: v.checkout_session_id }),
                ...(v.created_at_gte === undefined ? null : { createdAtGte: v.created_at_gte }),
                ...(v.created_at_lte === undefined ? null : { createdAtLte: v.created_at_lte }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.external_identifier === undefined
                    ? null
                    : { externalIdentifier: v.external_identifier }),
                ...(v.gift_card_id === undefined ? null : { giftCardId: v.gift_card_id }),
                ...(v.gift_card_last4 === undefined ? null : { giftCardLast4: v.gift_card_last4 }),
                ...(v.has_gift_card_redemptions === undefined
                    ? null
                    : { hasGiftCardRedemptions: v.has_gift_card_redemptions }),
                ...(v.has_refunds === undefined ? null : { hasRefunds: v.has_refunds }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.payment_method_id === undefined
                    ? null
                    : { paymentMethodId: v.payment_method_id }),
                ...(v.payment_method_label === undefined
                    ? null
                    : { paymentMethodLabel: v.payment_method_label }),
                ...(v.payment_service_id === undefined
                    ? null
                    : { paymentServiceId: v.payment_service_id }),
                ...(v.payment_service_transaction_id === undefined
                    ? null
                    : { paymentServiceTransactionId: v.payment_service_transaction_id }),
                ...(v.pending_review === undefined ? null : { pendingReview: v.pending_review }),
                ...(v.reconciliation_id === undefined
                    ? null
                    : { reconciliationId: v.reconciliation_id }),
                ...(v.search === undefined ? null : { search: v.search }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updated_at_gte === undefined ? null : { updatedAtGte: v.updated_at_gte }),
                ...(v.updated_at_lte === undefined ? null : { updatedAtLte: v.updated_at_lte }),
            };
        });

    export type Outbound = {
        buyer_external_identifier?: string | undefined;
        buyer_id?: string | undefined;
        cursor?: string | undefined;
        limit: number;
        amount_eq?: number | undefined;
        amount_gte?: number | undefined;
        amount_lte?: number | undefined;
        checkout_session_id?: string | undefined;
        created_at_gte?: string | undefined;
        created_at_lte?: string | undefined;
        currency?: Array<string> | undefined;
        external_identifier?: string | undefined;
        gift_card_id?: string | undefined;
        gift_card_last4?: string | undefined;
        has_gift_card_redemptions?: boolean | undefined;
        has_refunds?: boolean | undefined;
        id?: string | undefined;
        metadata?: Array<string> | undefined;
        method?: Array<QueryParamMethod> | undefined;
        payment_method_id?: string | undefined;
        payment_method_label?: string | undefined;
        payment_service_id?: Array<string> | undefined;
        payment_service_transaction_id?: string | undefined;
        pending_review?: boolean | undefined;
        reconciliation_id?: string | undefined;
        search?: string | undefined;
        status?: Array<QueryParamStatus> | undefined;
        updated_at_gte?: string | undefined;
        updated_at_lte?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListTransactionsRequest> = z
        .object({
            buyerExternalIdentifier: z.string().optional(),
            buyerId: z.string().optional(),
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
            amountEq: z.number().int().optional(),
            amountGte: z.number().int().optional(),
            amountLte: z.number().int().optional(),
            checkoutSessionId: z.string().optional(),
            createdAtGte: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            createdAtLte: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currency: z.array(z.string()).optional(),
            externalIdentifier: z.string().optional(),
            giftCardId: z.string().optional(),
            giftCardLast4: z.string().optional(),
            hasGiftCardRedemptions: z.boolean().optional(),
            hasRefunds: z.boolean().optional(),
            id: z.string().optional(),
            metadata: z.array(z.string()).optional(),
            method: z.array(QueryParamMethod$).optional(),
            paymentMethodId: z.string().optional(),
            paymentMethodLabel: z.string().optional(),
            paymentServiceId: z.array(z.string()).optional(),
            paymentServiceTransactionId: z.string().optional(),
            pendingReview: z.boolean().optional(),
            reconciliationId: z.string().optional(),
            search: z.string().optional(),
            status: z.array(QueryParamStatus$).optional(),
            updatedAtGte: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAtLte: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.buyerExternalIdentifier === undefined
                    ? null
                    : { buyer_external_identifier: v.buyerExternalIdentifier }),
                ...(v.buyerId === undefined ? null : { buyer_id: v.buyerId }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                limit: v.limit,
                ...(v.amountEq === undefined ? null : { amount_eq: v.amountEq }),
                ...(v.amountGte === undefined ? null : { amount_gte: v.amountGte }),
                ...(v.amountLte === undefined ? null : { amount_lte: v.amountLte }),
                ...(v.checkoutSessionId === undefined
                    ? null
                    : { checkout_session_id: v.checkoutSessionId }),
                ...(v.createdAtGte === undefined ? null : { created_at_gte: v.createdAtGte }),
                ...(v.createdAtLte === undefined ? null : { created_at_lte: v.createdAtLte }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.externalIdentifier === undefined
                    ? null
                    : { external_identifier: v.externalIdentifier }),
                ...(v.giftCardId === undefined ? null : { gift_card_id: v.giftCardId }),
                ...(v.giftCardLast4 === undefined ? null : { gift_card_last4: v.giftCardLast4 }),
                ...(v.hasGiftCardRedemptions === undefined
                    ? null
                    : { has_gift_card_redemptions: v.hasGiftCardRedemptions }),
                ...(v.hasRefunds === undefined ? null : { has_refunds: v.hasRefunds }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.method === undefined ? null : { method: v.method }),
                ...(v.paymentMethodId === undefined
                    ? null
                    : { payment_method_id: v.paymentMethodId }),
                ...(v.paymentMethodLabel === undefined
                    ? null
                    : { payment_method_label: v.paymentMethodLabel }),
                ...(v.paymentServiceId === undefined
                    ? null
                    : { payment_service_id: v.paymentServiceId }),
                ...(v.paymentServiceTransactionId === undefined
                    ? null
                    : { payment_service_transaction_id: v.paymentServiceTransactionId }),
                ...(v.pendingReview === undefined ? null : { pending_review: v.pendingReview }),
                ...(v.reconciliationId === undefined
                    ? null
                    : { reconciliation_id: v.reconciliationId }),
                ...(v.search === undefined ? null : { search: v.search }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAtGte === undefined ? null : { updated_at_gte: v.updatedAtGte }),
                ...(v.updatedAtLte === undefined ? null : { updated_at_lte: v.updatedAtLte }),
            };
        });
}

/** @internal */
export namespace ListTransactionsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Transactions?: components.Transactions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListTransactionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Transactions: components.Transactions$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Transactions === undefined ? null : { transactions: v.Transactions }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Transactions?: components.Transactions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListTransactionsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            transactions: components.Transactions$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.transactions === undefined ? null : { Transactions: v.transactions }),
            };
        });
}
