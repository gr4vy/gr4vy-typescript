/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBuyerGlobals = {
  merchantAccountId?: string | undefined;
};

export type DeleteBuyerRequest = {
  /**
   * The ID of the buyer to delete.
   */
  buyerId: string;
  timeoutInSeconds?: number | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const DeleteBuyerGlobals$inboundSchema: z.ZodType<
  DeleteBuyerGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type DeleteBuyerGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const DeleteBuyerGlobals$outboundSchema: z.ZodType<
  DeleteBuyerGlobals$Outbound,
  z.ZodTypeDef,
  DeleteBuyerGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBuyerGlobals$ {
  /** @deprecated use `DeleteBuyerGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteBuyerGlobals$inboundSchema;
  /** @deprecated use `DeleteBuyerGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteBuyerGlobals$outboundSchema;
  /** @deprecated use `DeleteBuyerGlobals$Outbound` instead. */
  export type Outbound = DeleteBuyerGlobals$Outbound;
}

export function deleteBuyerGlobalsToJSON(
  deleteBuyerGlobals: DeleteBuyerGlobals,
): string {
  return JSON.stringify(
    DeleteBuyerGlobals$outboundSchema.parse(deleteBuyerGlobals),
  );
}

export function deleteBuyerGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBuyerGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBuyerGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBuyerGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteBuyerRequest$inboundSchema: z.ZodType<
  DeleteBuyerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  buyer_id: z.string(),
  timeout_in_seconds: z.number().default(1),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "buyer_id": "buyerId",
    "timeout_in_seconds": "timeoutInSeconds",
  });
});

/** @internal */
export type DeleteBuyerRequest$Outbound = {
  buyer_id: string;
  timeout_in_seconds: number;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const DeleteBuyerRequest$outboundSchema: z.ZodType<
  DeleteBuyerRequest$Outbound,
  z.ZodTypeDef,
  DeleteBuyerRequest
> = z.object({
  buyerId: z.string(),
  timeoutInSeconds: z.number().default(1),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    buyerId: "buyer_id",
    timeoutInSeconds: "timeout_in_seconds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBuyerRequest$ {
  /** @deprecated use `DeleteBuyerRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBuyerRequest$inboundSchema;
  /** @deprecated use `DeleteBuyerRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBuyerRequest$outboundSchema;
  /** @deprecated use `DeleteBuyerRequest$Outbound` instead. */
  export type Outbound = DeleteBuyerRequest$Outbound;
}

export function deleteBuyerRequestToJSON(
  deleteBuyerRequest: DeleteBuyerRequest,
): string {
  return JSON.stringify(
    DeleteBuyerRequest$outboundSchema.parse(deleteBuyerRequest),
  );
}

export function deleteBuyerRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBuyerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBuyerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBuyerRequest' from JSON`,
  );
}
