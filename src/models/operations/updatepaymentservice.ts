/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type UpdatePaymentServiceRequest = {
    /**
     * The ID of the payment service.
     */
    paymentServiceId: string;
    paymentServiceUpdate?: components.PaymentServiceUpdate | undefined;
};

/** @internal */
export namespace UpdatePaymentServiceRequest$ {
    export const inboundSchema: z.ZodType<UpdatePaymentServiceRequest, z.ZodTypeDef, unknown> = z
        .object({
            payment_service_id: z.string(),
            PaymentServiceUpdate: components.PaymentServiceUpdate$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_service_id: "paymentServiceId",
                PaymentServiceUpdate: "paymentServiceUpdate",
            });
        });

    export type Outbound = {
        payment_service_id: string;
        PaymentServiceUpdate?: components.PaymentServiceUpdate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePaymentServiceRequest> = z
        .object({
            paymentServiceId: z.string(),
            paymentServiceUpdate: components.PaymentServiceUpdate$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                paymentServiceId: "payment_service_id",
                paymentServiceUpdate: "PaymentServiceUpdate",
            });
        });
}
