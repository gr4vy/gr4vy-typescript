/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SuspendPaymentMethodNetworkTokenGlobals = {
  merchantAccountId?: string | undefined;
};

export type SuspendPaymentMethodNetworkTokenRequest = {
  /**
   * The ID of the payment method
   */
  paymentMethodId: string;
  /**
   * The ID of the network token
   */
  networkTokenId: string;
  applicationName?: string | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const SuspendPaymentMethodNetworkTokenGlobals$inboundSchema: z.ZodType<
  SuspendPaymentMethodNetworkTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type SuspendPaymentMethodNetworkTokenGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const SuspendPaymentMethodNetworkTokenGlobals$outboundSchema: z.ZodType<
  SuspendPaymentMethodNetworkTokenGlobals$Outbound,
  z.ZodTypeDef,
  SuspendPaymentMethodNetworkTokenGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuspendPaymentMethodNetworkTokenGlobals$ {
  /** @deprecated use `SuspendPaymentMethodNetworkTokenGlobals$inboundSchema` instead. */
  export const inboundSchema =
    SuspendPaymentMethodNetworkTokenGlobals$inboundSchema;
  /** @deprecated use `SuspendPaymentMethodNetworkTokenGlobals$outboundSchema` instead. */
  export const outboundSchema =
    SuspendPaymentMethodNetworkTokenGlobals$outboundSchema;
  /** @deprecated use `SuspendPaymentMethodNetworkTokenGlobals$Outbound` instead. */
  export type Outbound = SuspendPaymentMethodNetworkTokenGlobals$Outbound;
}

export function suspendPaymentMethodNetworkTokenGlobalsToJSON(
  suspendPaymentMethodNetworkTokenGlobals:
    SuspendPaymentMethodNetworkTokenGlobals,
): string {
  return JSON.stringify(
    SuspendPaymentMethodNetworkTokenGlobals$outboundSchema.parse(
      suspendPaymentMethodNetworkTokenGlobals,
    ),
  );
}

export function suspendPaymentMethodNetworkTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  SuspendPaymentMethodNetworkTokenGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SuspendPaymentMethodNetworkTokenGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SuspendPaymentMethodNetworkTokenGlobals' from JSON`,
  );
}

/** @internal */
export const SuspendPaymentMethodNetworkTokenRequest$inboundSchema: z.ZodType<
  SuspendPaymentMethodNetworkTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method_id: z.string(),
  network_token_id: z.string(),
  application_name: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_method_id": "paymentMethodId",
    "network_token_id": "networkTokenId",
    "application_name": "applicationName",
  });
});

/** @internal */
export type SuspendPaymentMethodNetworkTokenRequest$Outbound = {
  payment_method_id: string;
  network_token_id: string;
  application_name: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const SuspendPaymentMethodNetworkTokenRequest$outboundSchema: z.ZodType<
  SuspendPaymentMethodNetworkTokenRequest$Outbound,
  z.ZodTypeDef,
  SuspendPaymentMethodNetworkTokenRequest
> = z.object({
  paymentMethodId: z.string(),
  networkTokenId: z.string(),
  applicationName: z.string().default("core-api"),
  merchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentMethodId: "payment_method_id",
    networkTokenId: "network_token_id",
    applicationName: "application_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuspendPaymentMethodNetworkTokenRequest$ {
  /** @deprecated use `SuspendPaymentMethodNetworkTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    SuspendPaymentMethodNetworkTokenRequest$inboundSchema;
  /** @deprecated use `SuspendPaymentMethodNetworkTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    SuspendPaymentMethodNetworkTokenRequest$outboundSchema;
  /** @deprecated use `SuspendPaymentMethodNetworkTokenRequest$Outbound` instead. */
  export type Outbound = SuspendPaymentMethodNetworkTokenRequest$Outbound;
}

export function suspendPaymentMethodNetworkTokenRequestToJSON(
  suspendPaymentMethodNetworkTokenRequest:
    SuspendPaymentMethodNetworkTokenRequest,
): string {
  return JSON.stringify(
    SuspendPaymentMethodNetworkTokenRequest$outboundSchema.parse(
      suspendPaymentMethodNetworkTokenRequest,
    ),
  );
}

export function suspendPaymentMethodNetworkTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SuspendPaymentMethodNetworkTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SuspendPaymentMethodNetworkTokenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SuspendPaymentMethodNetworkTokenRequest' from JSON`,
  );
}
