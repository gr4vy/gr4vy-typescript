/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetPaymentServiceTokensRequest = {
    /**
     * Filters for transactions that have a payment method with an ID that matches exactly with the provided value.
     */
    paymentMethodId?: string | undefined;
};

export type GetPaymentServiceTokensResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list payment service tokens of the specified
     *
     * @remarks
     * payment method and payment service.
     */
    paymentServiceTokens?: components.PaymentServiceTokens | undefined;
};

/** @internal */
export namespace GetPaymentServiceTokensRequest$ {
    export type Inbound = {
        payment_method_id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetPaymentServiceTokensRequest, z.ZodTypeDef, Inbound> = z
        .object({
            payment_method_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.payment_method_id === undefined
                    ? null
                    : { paymentMethodId: v.payment_method_id }),
            };
        });

    export type Outbound = {
        payment_method_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPaymentServiceTokensRequest> =
        z
            .object({
                paymentMethodId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.paymentMethodId === undefined
                        ? null
                        : { payment_method_id: v.paymentMethodId }),
                };
            });
}

/** @internal */
export namespace GetPaymentServiceTokensResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        PaymentServiceTokens?: components.PaymentServiceTokens$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetPaymentServiceTokensResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                PaymentServiceTokens: components.PaymentServiceTokens$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                    ...(v.PaymentServiceTokens === undefined
                        ? null
                        : { paymentServiceTokens: v.PaymentServiceTokens }),
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        PaymentServiceTokens?: components.PaymentServiceTokens$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPaymentServiceTokensResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            paymentServiceTokens: components.PaymentServiceTokens$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.paymentServiceTokens === undefined
                    ? null
                    : { PaymentServiceTokens: v.paymentServiceTokens }),
            };
        });
}
