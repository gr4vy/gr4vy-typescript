/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type DeleteDigitalWalletDomainNameRequest = {
    /**
     * The ID of the registered digital wallet.
     */
    digitalWalletId: string;
    digitalWalletDomain?: components.DigitalWalletDomain | undefined;
};

/** @internal */
export namespace DeleteDigitalWalletDomainNameRequest$ {
    export const inboundSchema: z.ZodType<
        DeleteDigitalWalletDomainNameRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            digital_wallet_id: z.string(),
            DigitalWalletDomain: components.DigitalWalletDomain$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                digital_wallet_id: "digitalWalletId",
                DigitalWalletDomain: "digitalWalletDomain",
            });
        });

    export type Outbound = {
        digital_wallet_id: string;
        DigitalWalletDomain?: components.DigitalWalletDomain$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteDigitalWalletDomainNameRequest
    > = z
        .object({
            digitalWalletId: z.string(),
            digitalWalletDomain: components.DigitalWalletDomain$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                digitalWalletId: "digital_wallet_id",
                digitalWalletDomain: "DigitalWalletDomain",
            });
        });
}
