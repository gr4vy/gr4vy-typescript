/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetReportRequest = {
    /**
     * The unique ID for a report.
     */
    reportId: string;
};

export type GetReportResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a report.
     */
    report?: components.Report | undefined;
};

/** @internal */
export namespace GetReportRequest$ {
    export type Inbound = {
        report_id: string;
    };

    export const inboundSchema: z.ZodType<GetReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            report_id: z.string(),
        })
        .transform((v) => {
            return {
                reportId: v.report_id,
            };
        });

    export type Outbound = {
        report_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetReportRequest> = z
        .object({
            reportId: z.string(),
        })
        .transform((v) => {
            return {
                report_id: v.reportId,
            };
        });
}

/** @internal */
export namespace GetReportResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Report?: components.Report$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetReportResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Report: components.Report$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Report === undefined ? null : { report: v.Report }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Report?: components.Report$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetReportResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            report: components.Report$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.report === undefined ? null : { Report: v.report }),
            };
        });
}
