/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UpdateReportRequest = {
    /**
     * The unique ID for a report.
     */
    reportId: string;
    reportUpdate?: components.ReportUpdate | undefined;
};

/** @internal */
export namespace UpdateReportRequest$ {
    export type Inbound = {
        report_id: string;
        ReportUpdate?: components.ReportUpdate$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            report_id: z.string(),
            ReportUpdate: components.ReportUpdate$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                reportId: v.report_id,
                ...(v.ReportUpdate === undefined ? null : { reportUpdate: v.ReportUpdate }),
            };
        });

    export type Outbound = {
        report_id: string;
        ReportUpdate?: components.ReportUpdate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateReportRequest> = z
        .object({
            reportId: z.string(),
            reportUpdate: components.ReportUpdate$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                report_id: v.reportId,
                ...(v.reportUpdate === undefined ? null : { ReportUpdate: v.reportUpdate }),
            };
        });
}
