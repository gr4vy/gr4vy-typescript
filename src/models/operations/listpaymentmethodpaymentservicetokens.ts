/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPaymentMethodPaymentServiceTokensGlobals = {
  merchantAccountId?: string | undefined;
};

export type ListPaymentMethodPaymentServiceTokensRequest = {
  /**
   * The ID of the payment method
   */
  paymentMethodId: string;
  /**
   * The ID of the payment service
   */
  paymentServiceId?: string | null | undefined;
  applicationName?: string | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListPaymentMethodPaymentServiceTokensGlobals$inboundSchema:
  z.ZodType<
    ListPaymentMethodPaymentServiceTokensGlobals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    merchantAccountId: z.string().optional(),
  });

/** @internal */
export type ListPaymentMethodPaymentServiceTokensGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ListPaymentMethodPaymentServiceTokensGlobals$outboundSchema:
  z.ZodType<
    ListPaymentMethodPaymentServiceTokensGlobals$Outbound,
    z.ZodTypeDef,
    ListPaymentMethodPaymentServiceTokensGlobals
  > = z.object({
    merchantAccountId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodPaymentServiceTokensGlobals$ {
  /** @deprecated use `ListPaymentMethodPaymentServiceTokensGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListPaymentMethodPaymentServiceTokensGlobals$inboundSchema;
  /** @deprecated use `ListPaymentMethodPaymentServiceTokensGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListPaymentMethodPaymentServiceTokensGlobals$outboundSchema;
  /** @deprecated use `ListPaymentMethodPaymentServiceTokensGlobals$Outbound` instead. */
  export type Outbound = ListPaymentMethodPaymentServiceTokensGlobals$Outbound;
}

export function listPaymentMethodPaymentServiceTokensGlobalsToJSON(
  listPaymentMethodPaymentServiceTokensGlobals:
    ListPaymentMethodPaymentServiceTokensGlobals,
): string {
  return JSON.stringify(
    ListPaymentMethodPaymentServiceTokensGlobals$outboundSchema.parse(
      listPaymentMethodPaymentServiceTokensGlobals,
    ),
  );
}

export function listPaymentMethodPaymentServiceTokensGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListPaymentMethodPaymentServiceTokensGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListPaymentMethodPaymentServiceTokensGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListPaymentMethodPaymentServiceTokensGlobals' from JSON`,
  );
}

/** @internal */
export const ListPaymentMethodPaymentServiceTokensRequest$inboundSchema:
  z.ZodType<
    ListPaymentMethodPaymentServiceTokensRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_method_id: z.string(),
    payment_service_id: z.nullable(z.string()).optional(),
    application_name: z.string().default("core-api"),
    merchantAccountId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method_id": "paymentMethodId",
      "payment_service_id": "paymentServiceId",
      "application_name": "applicationName",
    });
  });

/** @internal */
export type ListPaymentMethodPaymentServiceTokensRequest$Outbound = {
  payment_method_id: string;
  payment_service_id?: string | null | undefined;
  application_name: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListPaymentMethodPaymentServiceTokensRequest$outboundSchema:
  z.ZodType<
    ListPaymentMethodPaymentServiceTokensRequest$Outbound,
    z.ZodTypeDef,
    ListPaymentMethodPaymentServiceTokensRequest
  > = z.object({
    paymentMethodId: z.string(),
    paymentServiceId: z.nullable(z.string()).optional(),
    applicationName: z.string().default("core-api"),
    merchantAccountId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentMethodId: "payment_method_id",
      paymentServiceId: "payment_service_id",
      applicationName: "application_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentMethodPaymentServiceTokensRequest$ {
  /** @deprecated use `ListPaymentMethodPaymentServiceTokensRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListPaymentMethodPaymentServiceTokensRequest$inboundSchema;
  /** @deprecated use `ListPaymentMethodPaymentServiceTokensRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListPaymentMethodPaymentServiceTokensRequest$outboundSchema;
  /** @deprecated use `ListPaymentMethodPaymentServiceTokensRequest$Outbound` instead. */
  export type Outbound = ListPaymentMethodPaymentServiceTokensRequest$Outbound;
}

export function listPaymentMethodPaymentServiceTokensRequestToJSON(
  listPaymentMethodPaymentServiceTokensRequest:
    ListPaymentMethodPaymentServiceTokensRequest,
): string {
  return JSON.stringify(
    ListPaymentMethodPaymentServiceTokensRequest$outboundSchema.parse(
      listPaymentMethodPaymentServiceTokensRequest,
    ),
  );
}

export function listPaymentMethodPaymentServiceTokensRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListPaymentMethodPaymentServiceTokensRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListPaymentMethodPaymentServiceTokensRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListPaymentMethodPaymentServiceTokensRequest' from JSON`,
  );
}
