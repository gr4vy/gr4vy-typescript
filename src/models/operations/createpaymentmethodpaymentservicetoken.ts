/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePaymentMethodPaymentServiceTokenGlobals = {
  merchantAccountId?: string | undefined;
};

export type CreatePaymentMethodPaymentServiceTokenRequest = {
  /**
   * The ID of the payment method
   */
  paymentMethodId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  paymentServiceTokenCreate: components.PaymentServiceTokenCreate;
};

/** @internal */
export const CreatePaymentMethodPaymentServiceTokenGlobals$inboundSchema:
  z.ZodType<
    CreatePaymentMethodPaymentServiceTokenGlobals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    merchantAccountId: z.string().optional(),
  });

/** @internal */
export type CreatePaymentMethodPaymentServiceTokenGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const CreatePaymentMethodPaymentServiceTokenGlobals$outboundSchema:
  z.ZodType<
    CreatePaymentMethodPaymentServiceTokenGlobals$Outbound,
    z.ZodTypeDef,
    CreatePaymentMethodPaymentServiceTokenGlobals
  > = z.object({
    merchantAccountId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentMethodPaymentServiceTokenGlobals$ {
  /** @deprecated use `CreatePaymentMethodPaymentServiceTokenGlobals$inboundSchema` instead. */
  export const inboundSchema =
    CreatePaymentMethodPaymentServiceTokenGlobals$inboundSchema;
  /** @deprecated use `CreatePaymentMethodPaymentServiceTokenGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CreatePaymentMethodPaymentServiceTokenGlobals$outboundSchema;
  /** @deprecated use `CreatePaymentMethodPaymentServiceTokenGlobals$Outbound` instead. */
  export type Outbound = CreatePaymentMethodPaymentServiceTokenGlobals$Outbound;
}

export function createPaymentMethodPaymentServiceTokenGlobalsToJSON(
  createPaymentMethodPaymentServiceTokenGlobals:
    CreatePaymentMethodPaymentServiceTokenGlobals,
): string {
  return JSON.stringify(
    CreatePaymentMethodPaymentServiceTokenGlobals$outboundSchema.parse(
      createPaymentMethodPaymentServiceTokenGlobals,
    ),
  );
}

export function createPaymentMethodPaymentServiceTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePaymentMethodPaymentServiceTokenGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePaymentMethodPaymentServiceTokenGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePaymentMethodPaymentServiceTokenGlobals' from JSON`,
  );
}

/** @internal */
export const CreatePaymentMethodPaymentServiceTokenRequest$inboundSchema:
  z.ZodType<
    CreatePaymentMethodPaymentServiceTokenRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_method_id: z.string(),
    merchantAccountId: z.nullable(z.string()).optional(),
    PaymentServiceTokenCreate:
      components.PaymentServiceTokenCreate$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "payment_method_id": "paymentMethodId",
      "PaymentServiceTokenCreate": "paymentServiceTokenCreate",
    });
  });

/** @internal */
export type CreatePaymentMethodPaymentServiceTokenRequest$Outbound = {
  payment_method_id: string;
  merchantAccountId?: string | null | undefined;
  PaymentServiceTokenCreate: components.PaymentServiceTokenCreate$Outbound;
};

/** @internal */
export const CreatePaymentMethodPaymentServiceTokenRequest$outboundSchema:
  z.ZodType<
    CreatePaymentMethodPaymentServiceTokenRequest$Outbound,
    z.ZodTypeDef,
    CreatePaymentMethodPaymentServiceTokenRequest
  > = z.object({
    paymentMethodId: z.string(),
    merchantAccountId: z.nullable(z.string()).optional(),
    paymentServiceTokenCreate:
      components.PaymentServiceTokenCreate$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      paymentMethodId: "payment_method_id",
      paymentServiceTokenCreate: "PaymentServiceTokenCreate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentMethodPaymentServiceTokenRequest$ {
  /** @deprecated use `CreatePaymentMethodPaymentServiceTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreatePaymentMethodPaymentServiceTokenRequest$inboundSchema;
  /** @deprecated use `CreatePaymentMethodPaymentServiceTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreatePaymentMethodPaymentServiceTokenRequest$outboundSchema;
  /** @deprecated use `CreatePaymentMethodPaymentServiceTokenRequest$Outbound` instead. */
  export type Outbound = CreatePaymentMethodPaymentServiceTokenRequest$Outbound;
}

export function createPaymentMethodPaymentServiceTokenRequestToJSON(
  createPaymentMethodPaymentServiceTokenRequest:
    CreatePaymentMethodPaymentServiceTokenRequest,
): string {
  return JSON.stringify(
    CreatePaymentMethodPaymentServiceTokenRequest$outboundSchema.parse(
      createPaymentMethodPaymentServiceTokenRequest,
    ),
  );
}

export function createPaymentMethodPaymentServiceTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreatePaymentMethodPaymentServiceTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePaymentMethodPaymentServiceTokenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreatePaymentMethodPaymentServiceTokenRequest' from JSON`,
  );
}
