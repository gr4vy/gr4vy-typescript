/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type InboundWebhookRequest = {
    /**
     * Opaque data representing the service information associated with
     *
     * @remarks
     * the webhook endpoint.
     */
    payload: string;
    /**
     * Signature of the opaque data with the service information
     *
     * @remarks
     * used for the webhook endpoint.
     */
    signature: string;
};

export type InboundWebhookResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace InboundWebhookRequest$ {
    export type Inbound = {
        payload: string;
        signature: string;
    };

    export const inboundSchema: z.ZodType<InboundWebhookRequest, z.ZodTypeDef, Inbound> = z
        .object({
            payload: z.string(),
            signature: z.string(),
        })
        .transform((v) => {
            return {
                payload: v.payload,
                signature: v.signature,
            };
        });

    export type Outbound = {
        payload: string;
        signature: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InboundWebhookRequest> = z
        .object({
            payload: z.string(),
            signature: z.string(),
        })
        .transform((v) => {
            return {
                payload: v.payload,
                signature: v.signature,
            };
        });
}

/** @internal */
export namespace InboundWebhookResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<InboundWebhookResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InboundWebhookResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
