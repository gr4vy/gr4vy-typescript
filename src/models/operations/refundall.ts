/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RefundAllRequest = {
    /**
     * The ID for the transaction to get the information for.
     */
    transactionId: string;
    transactionRefundAllRequest?: components.TransactionRefundAllRequest | undefined;
};

/** @internal */
export namespace RefundAllRequest$ {
    export type Inbound = {
        transaction_id: string;
        TransactionRefundAllRequest?: components.TransactionRefundAllRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RefundAllRequest, z.ZodTypeDef, Inbound> = z
        .object({
            transaction_id: z.string(),
            TransactionRefundAllRequest:
                components.TransactionRefundAllRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                transactionId: v.transaction_id,
                ...(v.TransactionRefundAllRequest === undefined
                    ? null
                    : { transactionRefundAllRequest: v.TransactionRefundAllRequest }),
            };
        });

    export type Outbound = {
        transaction_id: string;
        TransactionRefundAllRequest?: components.TransactionRefundAllRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefundAllRequest> = z
        .object({
            transactionId: z.string(),
            transactionRefundAllRequest:
                components.TransactionRefundAllRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                transaction_id: v.transactionId,
                ...(v.transactionRefundAllRequest === undefined
                    ? null
                    : { TransactionRefundAllRequest: v.transactionRefundAllRequest }),
            };
        });
}
