/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type ListReportExecutionsRequest = {
    /**
     * The unique ID for a report.
     */
    reportId: string;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
};

/** @internal */
export namespace ListReportExecutionsRequest$ {
    export const inboundSchema: z.ZodType<ListReportExecutionsRequest, z.ZodTypeDef, unknown> = z
        .object({
            report_id: z.string(),
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
        })
        .transform((v) => {
            return remap$(v, {
                report_id: "reportId",
            });
        });

    export type Outbound = {
        report_id: string;
        cursor?: string | undefined;
        limit: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListReportExecutionsRequest> = z
        .object({
            reportId: z.string(),
            cursor: z.string().optional(),
            limit: z.number().int().default(20),
        })
        .transform((v) => {
            return remap$(v, {
                reportId: "report_id",
            });
        });
}
