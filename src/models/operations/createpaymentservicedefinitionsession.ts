/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type CreatePaymentServiceDefinitionSessionRequest = {
    /**
     * The unique ID of the payment service definition.
     */
    paymentServiceDefinitionId: string;
    requestBody?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace CreatePaymentServiceDefinitionSessionRequest$ {
    export const inboundSchema: z.ZodType<
        CreatePaymentServiceDefinitionSessionRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            payment_service_definition_id: z.string(),
            RequestBody: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_service_definition_id: "paymentServiceDefinitionId",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        payment_service_definition_id: string;
        RequestBody?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreatePaymentServiceDefinitionSessionRequest
    > = z
        .object({
            paymentServiceDefinitionId: z.string(),
            requestBody: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                paymentServiceDefinitionId: "payment_service_definition_id",
                requestBody: "RequestBody",
            });
        });
}
