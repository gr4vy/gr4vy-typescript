/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMerchantAccountsRequest = {
  /**
   * A pointer to the page of results to return.
   */
  cursor?: string | null | undefined;
  /**
   * The maximum number of items that are at returned.
   */
  limit?: number | undefined;
  /**
   * The search term to filter merchant accounts by.
   */
  search?: string | null | undefined;
};

export type ListMerchantAccountsResponse = {
  result: components.MerchantAccounts;
};

/** @internal */
export const ListMerchantAccountsRequest$inboundSchema: z.ZodType<
  ListMerchantAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  search: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListMerchantAccountsRequest$Outbound = {
  cursor?: string | null | undefined;
  limit: number;
  search?: string | null | undefined;
};

/** @internal */
export const ListMerchantAccountsRequest$outboundSchema: z.ZodType<
  ListMerchantAccountsRequest$Outbound,
  z.ZodTypeDef,
  ListMerchantAccountsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  search: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMerchantAccountsRequest$ {
  /** @deprecated use `ListMerchantAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = ListMerchantAccountsRequest$inboundSchema;
  /** @deprecated use `ListMerchantAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = ListMerchantAccountsRequest$outboundSchema;
  /** @deprecated use `ListMerchantAccountsRequest$Outbound` instead. */
  export type Outbound = ListMerchantAccountsRequest$Outbound;
}

export function listMerchantAccountsRequestToJSON(
  listMerchantAccountsRequest: ListMerchantAccountsRequest,
): string {
  return JSON.stringify(
    ListMerchantAccountsRequest$outboundSchema.parse(
      listMerchantAccountsRequest,
    ),
  );
}

export function listMerchantAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMerchantAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMerchantAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMerchantAccountsRequest' from JSON`,
  );
}

/** @internal */
export const ListMerchantAccountsResponse$inboundSchema: z.ZodType<
  ListMerchantAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.MerchantAccounts$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListMerchantAccountsResponse$Outbound = {
  Result: components.MerchantAccounts$Outbound;
};

/** @internal */
export const ListMerchantAccountsResponse$outboundSchema: z.ZodType<
  ListMerchantAccountsResponse$Outbound,
  z.ZodTypeDef,
  ListMerchantAccountsResponse
> = z.object({
  result: components.MerchantAccounts$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMerchantAccountsResponse$ {
  /** @deprecated use `ListMerchantAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = ListMerchantAccountsResponse$inboundSchema;
  /** @deprecated use `ListMerchantAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = ListMerchantAccountsResponse$outboundSchema;
  /** @deprecated use `ListMerchantAccountsResponse$Outbound` instead. */
  export type Outbound = ListMerchantAccountsResponse$Outbound;
}

export function listMerchantAccountsResponseToJSON(
  listMerchantAccountsResponse: ListMerchantAccountsResponse,
): string {
  return JSON.stringify(
    ListMerchantAccountsResponse$outboundSchema.parse(
      listMerchantAccountsResponse,
    ),
  );
}

export function listMerchantAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMerchantAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMerchantAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMerchantAccountsResponse' from JSON`,
  );
}
