/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export const GetFlowRulePathParamFlow = {
    Checkout: "checkout",
    CardTransaction: "card-transaction",
    NonCardTransaction: "non-card-transaction",
    RedirectTransaction: "redirect-transaction",
} as const;
/**
 * The name of the Flow.
 */
export type GetFlowRulePathParamFlow = ClosedEnum<typeof GetFlowRulePathParamFlow>;

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export const GetFlowRulePathParamAction = {
    SelectPaymentOptions: "select-payment-options",
    DeclineEarly: "decline-early",
    RouteTransaction: "route-transaction",
    Skip3ds: "skip-3ds",
} as const;
/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export type GetFlowRulePathParamAction = ClosedEnum<typeof GetFlowRulePathParamAction>;

export type GetFlowRuleRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: GetFlowRulePathParamFlow;
    /**
     * The flow action.
     */
    action: GetFlowRulePathParamAction;
    /**
     * The unique ID for a rule.
     */
    ruleId: string;
};

/** @internal */
export const GetFlowRulePathParamFlow$inboundSchema: z.ZodNativeEnum<
    typeof GetFlowRulePathParamFlow
> = z.nativeEnum(GetFlowRulePathParamFlow);

/** @internal */
export const GetFlowRulePathParamFlow$outboundSchema: z.ZodNativeEnum<
    typeof GetFlowRulePathParamFlow
> = GetFlowRulePathParamFlow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlowRulePathParamFlow$ {
    /** @deprecated use `GetFlowRulePathParamFlow$inboundSchema` instead. */
    export const inboundSchema = GetFlowRulePathParamFlow$inboundSchema;
    /** @deprecated use `GetFlowRulePathParamFlow$outboundSchema` instead. */
    export const outboundSchema = GetFlowRulePathParamFlow$outboundSchema;
}

/** @internal */
export const GetFlowRulePathParamAction$inboundSchema: z.ZodNativeEnum<
    typeof GetFlowRulePathParamAction
> = z.nativeEnum(GetFlowRulePathParamAction);

/** @internal */
export const GetFlowRulePathParamAction$outboundSchema: z.ZodNativeEnum<
    typeof GetFlowRulePathParamAction
> = GetFlowRulePathParamAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlowRulePathParamAction$ {
    /** @deprecated use `GetFlowRulePathParamAction$inboundSchema` instead. */
    export const inboundSchema = GetFlowRulePathParamAction$inboundSchema;
    /** @deprecated use `GetFlowRulePathParamAction$outboundSchema` instead. */
    export const outboundSchema = GetFlowRulePathParamAction$outboundSchema;
}

/** @internal */
export const GetFlowRuleRequest$inboundSchema: z.ZodType<
    GetFlowRuleRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        flow: GetFlowRulePathParamFlow$inboundSchema,
        action: GetFlowRulePathParamAction$inboundSchema,
        rule_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            rule_id: "ruleId",
        });
    });

/** @internal */
export type GetFlowRuleRequest$Outbound = {
    flow: string;
    action: string;
    rule_id: string;
};

/** @internal */
export const GetFlowRuleRequest$outboundSchema: z.ZodType<
    GetFlowRuleRequest$Outbound,
    z.ZodTypeDef,
    GetFlowRuleRequest
> = z
    .object({
        flow: GetFlowRulePathParamFlow$outboundSchema,
        action: GetFlowRulePathParamAction$outboundSchema,
        ruleId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            ruleId: "rule_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlowRuleRequest$ {
    /** @deprecated use `GetFlowRuleRequest$inboundSchema` instead. */
    export const inboundSchema = GetFlowRuleRequest$inboundSchema;
    /** @deprecated use `GetFlowRuleRequest$outboundSchema` instead. */
    export const outboundSchema = GetFlowRuleRequest$outboundSchema;
    /** @deprecated use `GetFlowRuleRequest$Outbound` instead. */
    export type Outbound = GetFlowRuleRequest$Outbound;
}
