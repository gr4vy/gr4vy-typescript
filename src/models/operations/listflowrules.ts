/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The name of the Flow.
 */
export enum Flow {
    Checkout = "checkout",
    CardTransaction = "card-transaction",
    NonCardTransaction = "non-card-transaction",
    RedirectTransaction = "redirect-transaction",
}

export type ListFlowRulesRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: Flow;
};

/** @internal */
export namespace Flow$ {
    export const inboundSchema = z.nativeEnum(Flow);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListFlowRulesRequest$ {
    export const inboundSchema: z.ZodType<ListFlowRulesRequest, z.ZodTypeDef, unknown> = z.object({
        flow: Flow$.inboundSchema,
    });

    export type Outbound = {
        flow: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListFlowRulesRequest> = z.object(
        {
            flow: Flow$.outboundSchema,
        }
    );
}
