/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export enum Flow {
    Checkout = "checkout",
    CardTransaction = "card-transaction",
    NonCardTransaction = "non-card-transaction",
    RedirectTransaction = "redirect-transaction",
}

export type ListFlowRulesRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: Flow;
};

export type ListFlowRulesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of rules.
     */
    flowRules?: components.FlowRules | undefined;
};

/** @internal */
export const Flow$ = z.nativeEnum(Flow);

/** @internal */
export namespace ListFlowRulesRequest$ {
    export type Inbound = {
        flow: Flow;
    };

    export const inboundSchema: z.ZodType<ListFlowRulesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            flow: Flow$,
        })
        .transform((v) => {
            return {
                flow: v.flow,
            };
        });

    export type Outbound = {
        flow: Flow;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListFlowRulesRequest> = z
        .object({
            flow: Flow$,
        })
        .transform((v) => {
            return {
                flow: v.flow,
            };
        });
}

/** @internal */
export namespace ListFlowRulesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        FlowRules?: components.FlowRules$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListFlowRulesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            FlowRules: components.FlowRules$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.FlowRules === undefined ? null : { flowRules: v.FlowRules }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        FlowRules?: components.FlowRules$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListFlowRulesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            flowRules: components.FlowRules$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.flowRules === undefined ? null : { FlowRules: v.flowRules }),
            };
        });
}
