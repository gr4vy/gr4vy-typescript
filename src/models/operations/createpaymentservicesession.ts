/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePaymentServiceSessionGlobals = {
  merchantAccountId?: string | undefined;
};

export type CreatePaymentServiceSessionRequest = {
  /**
   * the ID of the payment service
   */
  paymentServiceId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  requestBody: { [k: string]: any };
};

/** @internal */
export const CreatePaymentServiceSessionGlobals$inboundSchema: z.ZodType<
  CreatePaymentServiceSessionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type CreatePaymentServiceSessionGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const CreatePaymentServiceSessionGlobals$outboundSchema: z.ZodType<
  CreatePaymentServiceSessionGlobals$Outbound,
  z.ZodTypeDef,
  CreatePaymentServiceSessionGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentServiceSessionGlobals$ {
  /** @deprecated use `CreatePaymentServiceSessionGlobals$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentServiceSessionGlobals$inboundSchema;
  /** @deprecated use `CreatePaymentServiceSessionGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CreatePaymentServiceSessionGlobals$outboundSchema;
  /** @deprecated use `CreatePaymentServiceSessionGlobals$Outbound` instead. */
  export type Outbound = CreatePaymentServiceSessionGlobals$Outbound;
}

export function createPaymentServiceSessionGlobalsToJSON(
  createPaymentServiceSessionGlobals: CreatePaymentServiceSessionGlobals,
): string {
  return JSON.stringify(
    CreatePaymentServiceSessionGlobals$outboundSchema.parse(
      createPaymentServiceSessionGlobals,
    ),
  );
}

export function createPaymentServiceSessionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentServiceSessionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePaymentServiceSessionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentServiceSessionGlobals' from JSON`,
  );
}

/** @internal */
export const CreatePaymentServiceSessionRequest$inboundSchema: z.ZodType<
  CreatePaymentServiceSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_service_id: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
  RequestBody: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "payment_service_id": "paymentServiceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreatePaymentServiceSessionRequest$Outbound = {
  payment_service_id: string;
  merchantAccountId?: string | null | undefined;
  RequestBody: { [k: string]: any };
};

/** @internal */
export const CreatePaymentServiceSessionRequest$outboundSchema: z.ZodType<
  CreatePaymentServiceSessionRequest$Outbound,
  z.ZodTypeDef,
  CreatePaymentServiceSessionRequest
> = z.object({
  paymentServiceId: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
  requestBody: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    paymentServiceId: "payment_service_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentServiceSessionRequest$ {
  /** @deprecated use `CreatePaymentServiceSessionRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentServiceSessionRequest$inboundSchema;
  /** @deprecated use `CreatePaymentServiceSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreatePaymentServiceSessionRequest$outboundSchema;
  /** @deprecated use `CreatePaymentServiceSessionRequest$Outbound` instead. */
  export type Outbound = CreatePaymentServiceSessionRequest$Outbound;
}

export function createPaymentServiceSessionRequestToJSON(
  createPaymentServiceSessionRequest: CreatePaymentServiceSessionRequest,
): string {
  return JSON.stringify(
    CreatePaymentServiceSessionRequest$outboundSchema.parse(
      createPaymentServiceSessionRequest,
    ),
  );
}

export function createPaymentServiceSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePaymentServiceSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePaymentServiceSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePaymentServiceSessionRequest' from JSON`,
  );
}
