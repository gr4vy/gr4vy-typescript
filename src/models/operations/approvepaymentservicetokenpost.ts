/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type ApprovePaymentServiceTokenPostRequest = {
    /**
     * The ID of the payment method.
     */
    paymentMethodId: string;
    /**
     * The ID of the payment service token.
     */
    paymentServiceTokenId: string;
};

/** @internal */
export namespace ApprovePaymentServiceTokenPostRequest$ {
    export const inboundSchema: z.ZodType<
        ApprovePaymentServiceTokenPostRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            payment_method_id: z.string(),
            payment_service_token_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                payment_method_id: "paymentMethodId",
                payment_service_token_id: "paymentServiceTokenId",
            });
        });

    export type Outbound = {
        payment_method_id: string;
        payment_service_token_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ApprovePaymentServiceTokenPostRequest
    > = z
        .object({
            paymentMethodId: z.string(),
            paymentServiceTokenId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                paymentMethodId: "payment_method_id",
                paymentServiceTokenId: "payment_service_token_id",
            });
        });
}
