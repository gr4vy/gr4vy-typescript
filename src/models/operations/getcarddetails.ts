/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The intent of the transaction.
 */
export enum Intent {
    Authorize = "authorize",
    Capture = "capture",
}

/**
 * Used by the Flow engine to filter available options based on the
 *
 * @remarks
 * payment source.
 */
export enum PaymentSource {
    Ecommerce = "ecommerce",
    Moto = "moto",
    Recurring = "recurring",
    Installment = "installment",
    CardOnFile = "card_on_file",
}

export type GetCardDetailsRequest = {
    /**
     * Filters the results to only the items which support this currency code. A
     *
     * @remarks
     * currency is formatted as 3-letter ISO currency code.
     */
    currency: string;
    /**
     * Used by the Flow engine to filter the results based on the transaction amount.
     */
    amount?: number | undefined;
    /**
     * The first 8 digits (the BIN) of the card.
     */
    bin?: string | undefined;
    /**
     * Filters the results to only the items which support this country code. A
     *
     * @remarks
     * country is formatted as 2-letter ISO country code.
     */
    country?: string | undefined;
    /**
     * The intent of the transaction.
     */
    intent?: Intent | undefined;
    /**
     * Used by the Flow engine to filter available options based on the value
     *
     * @remarks
     * of the `is_subsequent_payment` flag.
     */
    isSubsequentPayment?: boolean | undefined;
    /**
     * Used by the Flow engine to filter available options based on the value
     *
     * @remarks
     * of the `merchant_initiated` flag.
     */
    merchantInitiated?: boolean | undefined;
    /**
     * Used by the Flow engine to filter available options based on various
     *
     * @remarks
     * client-defined parameters. If present, this must be a string representing
     * a valid JSON dictionary.
     */
    metadata?: string | undefined;
    /**
     * Filters for transactions that have a payment method with an ID that matches exactly with the provided value.
     */
    paymentMethodId?: string | undefined;
    /**
     * Used by the Flow engine to filter available options based on the
     *
     * @remarks
     * payment source.
     */
    paymentSource?: PaymentSource | undefined;
};

export type GetCardDetailsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns information about a card.
     */
    cardDetails?: components.CardDetails | undefined;
    /**
     * Returns a generic error.
     */
    errorGeneric?: components.ErrorGeneric | undefined;
};

/** @internal */
export const Intent$ = z.nativeEnum(Intent);

/** @internal */
export const PaymentSource$ = z.nativeEnum(PaymentSource);

/** @internal */
export namespace GetCardDetailsRequest$ {
    export type Inbound = {
        currency: string;
        amount?: number | undefined;
        bin?: string | undefined;
        country?: string | undefined;
        intent?: Intent | undefined;
        is_subsequent_payment?: boolean | undefined;
        merchant_initiated?: boolean | undefined;
        metadata?: string | undefined;
        payment_method_id?: string | undefined;
        payment_source?: PaymentSource | undefined;
    };

    export const inboundSchema: z.ZodType<GetCardDetailsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string(),
            amount: z.number().int().optional(),
            bin: z.string().optional(),
            country: z.string().optional(),
            intent: Intent$.optional(),
            is_subsequent_payment: z.boolean().optional(),
            merchant_initiated: z.boolean().optional(),
            metadata: z.string().optional(),
            payment_method_id: z.string().optional(),
            payment_source: PaymentSource$.optional(),
        })
        .transform((v) => {
            return {
                currency: v.currency,
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.intent === undefined ? null : { intent: v.intent }),
                ...(v.is_subsequent_payment === undefined
                    ? null
                    : { isSubsequentPayment: v.is_subsequent_payment }),
                ...(v.merchant_initiated === undefined
                    ? null
                    : { merchantInitiated: v.merchant_initiated }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.payment_method_id === undefined
                    ? null
                    : { paymentMethodId: v.payment_method_id }),
                ...(v.payment_source === undefined ? null : { paymentSource: v.payment_source }),
            };
        });

    export type Outbound = {
        currency: string;
        amount?: number | undefined;
        bin?: string | undefined;
        country?: string | undefined;
        intent?: Intent | undefined;
        is_subsequent_payment?: boolean | undefined;
        merchant_initiated?: boolean | undefined;
        metadata?: string | undefined;
        payment_method_id?: string | undefined;
        payment_source?: PaymentSource | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCardDetailsRequest> = z
        .object({
            currency: z.string(),
            amount: z.number().int().optional(),
            bin: z.string().optional(),
            country: z.string().optional(),
            intent: Intent$.optional(),
            isSubsequentPayment: z.boolean().optional(),
            merchantInitiated: z.boolean().optional(),
            metadata: z.string().optional(),
            paymentMethodId: z.string().optional(),
            paymentSource: PaymentSource$.optional(),
        })
        .transform((v) => {
            return {
                currency: v.currency,
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.bin === undefined ? null : { bin: v.bin }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.intent === undefined ? null : { intent: v.intent }),
                ...(v.isSubsequentPayment === undefined
                    ? null
                    : { is_subsequent_payment: v.isSubsequentPayment }),
                ...(v.merchantInitiated === undefined
                    ? null
                    : { merchant_initiated: v.merchantInitiated }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.paymentMethodId === undefined
                    ? null
                    : { payment_method_id: v.paymentMethodId }),
                ...(v.paymentSource === undefined ? null : { payment_source: v.paymentSource }),
            };
        });
}

/** @internal */
export namespace GetCardDetailsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CardDetails?: components.CardDetails$.Inbound | undefined;
        ErrorGeneric?: components.ErrorGeneric$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCardDetailsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CardDetails: components.CardDetails$.inboundSchema.optional(),
            ErrorGeneric: components.ErrorGeneric$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CardDetails === undefined ? null : { cardDetails: v.CardDetails }),
                ...(v.ErrorGeneric === undefined ? null : { errorGeneric: v.ErrorGeneric }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CardDetails?: components.CardDetails$.Outbound | undefined;
        ErrorGeneric?: components.ErrorGeneric$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCardDetailsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            cardDetails: components.CardDetails$.outboundSchema.optional(),
            errorGeneric: components.ErrorGeneric$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.cardDetails === undefined ? null : { CardDetails: v.cardDetails }),
                ...(v.errorGeneric === undefined ? null : { ErrorGeneric: v.errorGeneric }),
            };
        });
}
