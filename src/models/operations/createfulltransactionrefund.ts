/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFullTransactionRefundRequest = {
  transactionId: string;
  timeoutInSeconds?: number | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  xGr4vyMerchantAccountId?: string | null | undefined;
  transactionRefundAllCreate?:
    | components.TransactionRefundAllCreate
    | null
    | undefined;
};

/** @internal */
export const CreateFullTransactionRefundRequest$inboundSchema: z.ZodType<
  CreateFullTransactionRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  timeout_in_seconds: z.number().default(1),
  "x-gr4vy-merchant-account-id": z.nullable(z.string()).optional(),
  TransactionRefundAllCreate: z.nullable(
    components.TransactionRefundAllCreate$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "timeout_in_seconds": "timeoutInSeconds",
    "x-gr4vy-merchant-account-id": "xGr4vyMerchantAccountId",
    "TransactionRefundAllCreate": "transactionRefundAllCreate",
  });
});

/** @internal */
export type CreateFullTransactionRefundRequest$Outbound = {
  transaction_id: string;
  timeout_in_seconds: number;
  "x-gr4vy-merchant-account-id"?: string | null | undefined;
  TransactionRefundAllCreate?:
    | components.TransactionRefundAllCreate$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateFullTransactionRefundRequest$outboundSchema: z.ZodType<
  CreateFullTransactionRefundRequest$Outbound,
  z.ZodTypeDef,
  CreateFullTransactionRefundRequest
> = z.object({
  transactionId: z.string(),
  timeoutInSeconds: z.number().default(1),
  xGr4vyMerchantAccountId: z.nullable(z.string()).optional(),
  transactionRefundAllCreate: z.nullable(
    components.TransactionRefundAllCreate$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    timeoutInSeconds: "timeout_in_seconds",
    xGr4vyMerchantAccountId: "x-gr4vy-merchant-account-id",
    transactionRefundAllCreate: "TransactionRefundAllCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFullTransactionRefundRequest$ {
  /** @deprecated use `CreateFullTransactionRefundRequest$inboundSchema` instead. */
  export const inboundSchema = CreateFullTransactionRefundRequest$inboundSchema;
  /** @deprecated use `CreateFullTransactionRefundRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateFullTransactionRefundRequest$outboundSchema;
  /** @deprecated use `CreateFullTransactionRefundRequest$Outbound` instead. */
  export type Outbound = CreateFullTransactionRefundRequest$Outbound;
}

export function createFullTransactionRefundRequestToJSON(
  createFullTransactionRefundRequest: CreateFullTransactionRefundRequest,
): string {
  return JSON.stringify(
    CreateFullTransactionRefundRequest$outboundSchema.parse(
      createFullTransactionRefundRequest,
    ),
  );
}

export function createFullTransactionRefundRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFullTransactionRefundRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateFullTransactionRefundRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFullTransactionRefundRequest' from JSON`,
  );
}
