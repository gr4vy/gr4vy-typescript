/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ProvisionPaymentServiceTokenRequest = {
    /**
     * The ID of the payment method.
     */
    paymentMethodId: string;
    paymentServiceTokenRequest?: components.PaymentServiceTokenRequest | undefined;
};

/** @internal */
export namespace ProvisionPaymentServiceTokenRequest$ {
    export type Inbound = {
        payment_method_id: string;
        PaymentServiceTokenRequest?: components.PaymentServiceTokenRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        ProvisionPaymentServiceTokenRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            payment_method_id: z.string(),
            PaymentServiceTokenRequest:
                components.PaymentServiceTokenRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                paymentMethodId: v.payment_method_id,
                ...(v.PaymentServiceTokenRequest === undefined
                    ? null
                    : { paymentServiceTokenRequest: v.PaymentServiceTokenRequest }),
            };
        });

    export type Outbound = {
        payment_method_id: string;
        PaymentServiceTokenRequest?: components.PaymentServiceTokenRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ProvisionPaymentServiceTokenRequest
    > = z
        .object({
            paymentMethodId: z.string(),
            paymentServiceTokenRequest:
                components.PaymentServiceTokenRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                payment_method_id: v.paymentMethodId,
                ...(v.paymentServiceTokenRequest === undefined
                    ? null
                    : { PaymentServiceTokenRequest: v.paymentServiceTokenRequest }),
            };
        });
}
