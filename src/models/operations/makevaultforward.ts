/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The HTTP method that is used when forwarding the request to the `x-vault-forward-url`.
 */
export const XVaultForwardHttpMethod = {
    Post: "POST",
    Put: "PUT",
    Patch: "PATCH",
} as const;
/**
 * The HTTP method that is used when forwarding the request to the `x-vault-forward-url`.
 */
export type XVaultForwardHttpMethod = ClosedEnum<typeof XVaultForwardHttpMethod>;

export type MakeVaultForwardRequest = {
    /**
     * A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted.
     */
    xVaultForwardPaymentMethods: string;
    /**
     * A comma-separated list of IDs for the authentication methods that will be applied
     *
     * @remarks
     * to a Vault Forward request.
     */
    xVaultForwardAuthentications?: string | undefined;
    /**
     * The URL to forward card data to.
     */
    xVaultForwardUrl: string;
    /**
     * The HTTP method that is used when forwarding the request to the `x-vault-forward-url`.
     */
    xVaultForwardHttpMethod: XVaultForwardHttpMethod;
    /**
     * A header that is forwarded to the `x-vault-forward-url`. The header will be
     *
     * @remarks
     * forwarded without the `x-vault-forward-header` part. For example,
     * `x-vault-forward-header-x-frame-options: SAMEORIGIN` is forwarded as
     * `x-frame-options: SAMEORIGIN`.
     */
    xVaultForwardHEADERHEADERNAME?: string | undefined;
    /**
     * The number of seconds to wait before timing out when forwarding the
     *
     * @remarks
     * request.
     */
    xVaultForwardTimeout?: number | undefined;
    /**
     * Payload to forward in the request.
     */
    requestBody?: string | undefined;
};

/** @internal */
export const XVaultForwardHttpMethod$inboundSchema: z.ZodNativeEnum<
    typeof XVaultForwardHttpMethod
> = z.nativeEnum(XVaultForwardHttpMethod);

/** @internal */
export const XVaultForwardHttpMethod$outboundSchema: z.ZodNativeEnum<
    typeof XVaultForwardHttpMethod
> = XVaultForwardHttpMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace XVaultForwardHttpMethod$ {
    /** @deprecated use `XVaultForwardHttpMethod$inboundSchema` instead. */
    export const inboundSchema = XVaultForwardHttpMethod$inboundSchema;
    /** @deprecated use `XVaultForwardHttpMethod$outboundSchema` instead. */
    export const outboundSchema = XVaultForwardHttpMethod$outboundSchema;
}

/** @internal */
export const MakeVaultForwardRequest$inboundSchema: z.ZodType<
    MakeVaultForwardRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-vault-forward-payment-methods": z.string(),
        "x-vault-forward-authentications": z.string().optional(),
        "x-vault-forward-url": z.string(),
        "x-vault-forward-http-method": XVaultForwardHttpMethod$inboundSchema,
        "x-vault-forward-header-{HEADER_NAME}": z.string().optional(),
        "x-vault-forward-timeout": z.number().int().default(30),
        RequestBody: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-vault-forward-payment-methods": "xVaultForwardPaymentMethods",
            "x-vault-forward-authentications": "xVaultForwardAuthentications",
            "x-vault-forward-url": "xVaultForwardUrl",
            "x-vault-forward-http-method": "xVaultForwardHttpMethod",
            "x-vault-forward-header-{HEADER_NAME}": "xVaultForwardHEADERHEADERNAME",
            "x-vault-forward-timeout": "xVaultForwardTimeout",
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type MakeVaultForwardRequest$Outbound = {
    "x-vault-forward-payment-methods": string;
    "x-vault-forward-authentications"?: string | undefined;
    "x-vault-forward-url": string;
    "x-vault-forward-http-method": string;
    "x-vault-forward-header-{HEADER_NAME}"?: string | undefined;
    "x-vault-forward-timeout": number;
    RequestBody?: string | undefined;
};

/** @internal */
export const MakeVaultForwardRequest$outboundSchema: z.ZodType<
    MakeVaultForwardRequest$Outbound,
    z.ZodTypeDef,
    MakeVaultForwardRequest
> = z
    .object({
        xVaultForwardPaymentMethods: z.string(),
        xVaultForwardAuthentications: z.string().optional(),
        xVaultForwardUrl: z.string(),
        xVaultForwardHttpMethod: XVaultForwardHttpMethod$outboundSchema,
        xVaultForwardHEADERHEADERNAME: z.string().optional(),
        xVaultForwardTimeout: z.number().int().default(30),
        requestBody: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xVaultForwardPaymentMethods: "x-vault-forward-payment-methods",
            xVaultForwardAuthentications: "x-vault-forward-authentications",
            xVaultForwardUrl: "x-vault-forward-url",
            xVaultForwardHttpMethod: "x-vault-forward-http-method",
            xVaultForwardHEADERHEADERNAME: "x-vault-forward-header-{HEADER_NAME}",
            xVaultForwardTimeout: "x-vault-forward-timeout",
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MakeVaultForwardRequest$ {
    /** @deprecated use `MakeVaultForwardRequest$inboundSchema` instead. */
    export const inboundSchema = MakeVaultForwardRequest$inboundSchema;
    /** @deprecated use `MakeVaultForwardRequest$outboundSchema` instead. */
    export const outboundSchema = MakeVaultForwardRequest$outboundSchema;
    /** @deprecated use `MakeVaultForwardRequest$Outbound` instead. */
    export type Outbound = MakeVaultForwardRequest$Outbound;
}
