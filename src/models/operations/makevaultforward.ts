/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The HTTP method that is used when forwarding the request to the `x-vault-forward-url`.
 */
export enum XVaultForwardHttpMethod {
    Post = "POST",
    Put = "PUT",
    Patch = "PATCH",
}

export type MakeVaultForwardRequest = {
    /**
     * A comma-separated list of Payment Method IDs that can be used to fill in the request template. At least 1 must be given, and a maximum of 100 are accepted.
     */
    xVaultForwardPaymentMethods: string;
    /**
     * The URL to forward card data to.
     */
    xVaultForwardUrl: string;
    /**
     * The HTTP method that is used when forwarding the request to the `x-vault-forward-url`.
     */
    xVaultForwardHttpMethod: XVaultForwardHttpMethod;
    /**
     * A header that is forwarded to the `x-vault-forward-url`. The header will be
     *
     * @remarks
     * forwarded without the `x-vault-forward-header` part. For example,
     * `x-vault-forward-header-x-frame-options: SAMEORIGIN` is forwarded as
     * `x-frame-options: SAMEORIGIN`.
     */
    xVaultForwardHEADERHEADERNAME?: string | undefined;
    /**
     * The number of seconds to wait before timing out when forwarding the
     *
     * @remarks
     * request.
     */
    xVaultForwardTimeout?: number | undefined;
    /**
     * Payload to forward in the request.
     */
    requestBody?: string | undefined;
};

/** @internal */
export const XVaultForwardHttpMethod$: z.ZodNativeEnum<typeof XVaultForwardHttpMethod> =
    z.nativeEnum(XVaultForwardHttpMethod);

/** @internal */
export namespace MakeVaultForwardRequest$ {
    export type Inbound = {
        "x-vault-forward-payment-methods": string;
        "x-vault-forward-url": string;
        "x-vault-forward-http-method": XVaultForwardHttpMethod;
        "x-vault-forward-header-{HEADER_NAME}"?: string | undefined;
        "x-vault-forward-timeout"?: number | undefined;
        RequestBody?: string | undefined;
    };

    export const inboundSchema: z.ZodType<MakeVaultForwardRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "x-vault-forward-payment-methods": z.string(),
            "x-vault-forward-url": z.string(),
            "x-vault-forward-http-method": XVaultForwardHttpMethod$,
            "x-vault-forward-header-{HEADER_NAME}": z.string().optional(),
            "x-vault-forward-timeout": z.number().int().default(30),
            RequestBody: z.string().optional(),
        })
        .transform((v) => {
            return {
                xVaultForwardPaymentMethods: v["x-vault-forward-payment-methods"],
                xVaultForwardUrl: v["x-vault-forward-url"],
                xVaultForwardHttpMethod: v["x-vault-forward-http-method"],
                ...(v["x-vault-forward-header-{HEADER_NAME}"] === undefined
                    ? null
                    : { xVaultForwardHEADERHEADERNAME: v["x-vault-forward-header-{HEADER_NAME}"] }),
                xVaultForwardTimeout: v["x-vault-forward-timeout"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        "x-vault-forward-payment-methods": string;
        "x-vault-forward-url": string;
        "x-vault-forward-http-method": XVaultForwardHttpMethod;
        "x-vault-forward-header-{HEADER_NAME}"?: string | undefined;
        "x-vault-forward-timeout": number;
        RequestBody?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MakeVaultForwardRequest> = z
        .object({
            xVaultForwardPaymentMethods: z.string(),
            xVaultForwardUrl: z.string(),
            xVaultForwardHttpMethod: XVaultForwardHttpMethod$,
            xVaultForwardHEADERHEADERNAME: z.string().optional(),
            xVaultForwardTimeout: z.number().int().default(30),
            requestBody: z.string().optional(),
        })
        .transform((v) => {
            return {
                "x-vault-forward-payment-methods": v.xVaultForwardPaymentMethods,
                "x-vault-forward-url": v.xVaultForwardUrl,
                "x-vault-forward-http-method": v.xVaultForwardHttpMethod,
                ...(v.xVaultForwardHEADERHEADERNAME === undefined
                    ? null
                    : { "x-vault-forward-header-{HEADER_NAME}": v.xVaultForwardHEADERHEADERNAME }),
                "x-vault-forward-timeout": v.xVaultForwardTimeout,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}
