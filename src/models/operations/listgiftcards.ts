/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListGiftCardsRequest = {
  buyerExternalIdentifier?: string | undefined;
  buyerId?: string | undefined;
  cursor?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const ListGiftCardsRequest$inboundSchema: z.ZodType<
  ListGiftCardsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  buyer_external_identifier: z.string().optional(),
  buyer_id: z.string().optional(),
  cursor: z.string().optional(),
  limit: z.number().int().default(20),
}).transform((v) => {
  return remap$(v, {
    "buyer_external_identifier": "buyerExternalIdentifier",
    "buyer_id": "buyerId",
  });
});

/** @internal */
export type ListGiftCardsRequest$Outbound = {
  buyer_external_identifier?: string | undefined;
  buyer_id?: string | undefined;
  cursor?: string | undefined;
  limit: number;
};

/** @internal */
export const ListGiftCardsRequest$outboundSchema: z.ZodType<
  ListGiftCardsRequest$Outbound,
  z.ZodTypeDef,
  ListGiftCardsRequest
> = z.object({
  buyerExternalIdentifier: z.string().optional(),
  buyerId: z.string().optional(),
  cursor: z.string().optional(),
  limit: z.number().int().default(20),
}).transform((v) => {
  return remap$(v, {
    buyerExternalIdentifier: "buyer_external_identifier",
    buyerId: "buyer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGiftCardsRequest$ {
  /** @deprecated use `ListGiftCardsRequest$inboundSchema` instead. */
  export const inboundSchema = ListGiftCardsRequest$inboundSchema;
  /** @deprecated use `ListGiftCardsRequest$outboundSchema` instead. */
  export const outboundSchema = ListGiftCardsRequest$outboundSchema;
  /** @deprecated use `ListGiftCardsRequest$Outbound` instead. */
  export type Outbound = ListGiftCardsRequest$Outbound;
}

export function listGiftCardsRequestToJSON(
  listGiftCardsRequest: ListGiftCardsRequest,
): string {
  return JSON.stringify(
    ListGiftCardsRequest$outboundSchema.parse(listGiftCardsRequest),
  );
}

export function listGiftCardsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListGiftCardsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListGiftCardsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListGiftCardsRequest' from JSON`,
  );
}
