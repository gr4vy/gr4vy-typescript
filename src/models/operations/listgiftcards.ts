/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListGiftCardsRequest = {
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    buyerId?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
};

export type ListGiftCardsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of gift cards.
     */
    giftCards?: components.GiftCards | undefined;
};

/** @internal */
export namespace ListGiftCardsRequest$ {
    export type Inbound = {
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListGiftCardsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buyer_id: z.string().optional(),
            buyer_external_identifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.buyer_id === undefined ? null : { buyerId: v.buyer_id }),
                ...(v.buyer_external_identifier === undefined
                    ? null
                    : { buyerExternalIdentifier: v.buyer_external_identifier }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        buyer_id?: string | undefined;
        buyer_external_identifier?: string | undefined;
        limit: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGiftCardsRequest> = z
        .object({
            buyerId: z.string().optional(),
            buyerExternalIdentifier: z.string().optional(),
            limit: z.number().int().default(20),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.buyerId === undefined ? null : { buyer_id: v.buyerId }),
                ...(v.buyerExternalIdentifier === undefined
                    ? null
                    : { buyer_external_identifier: v.buyerExternalIdentifier }),
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}

/** @internal */
export namespace ListGiftCardsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        GiftCards?: components.GiftCards$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListGiftCardsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            GiftCards: components.GiftCards$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.GiftCards === undefined ? null : { giftCards: v.GiftCards }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        GiftCards?: components.GiftCards$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGiftCardsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            giftCards: components.GiftCards$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.giftCards === undefined ? null : { GiftCards: v.giftCards }),
            };
        });
}
