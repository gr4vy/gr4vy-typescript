/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ListGiftCardsRequest = {
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `id` that matches this value.
     */
    buyerId?: string | undefined;
    /**
     * Filters the results to only the items for which the `buyer` has an
     *
     * @remarks
     * `external_identifier` that matches this value.
     */
    buyerExternalIdentifier?: string | undefined;
    /**
     * Defines the maximum number of items to return for this request.
     */
    limit?: number | undefined;
    /**
     * A cursor that identifies the page of results to return. This is used to
     *
     * @remarks
     * paginate the results of this API.
     *
     * For the first page of results, this parameter can be left out.
     * For additional pages, use the value returned by the API in
     * the `next_cursor` field. Similarly the `previous_cursor` can be used to
     * reverse backwards in the list.
     */
    cursor?: string | undefined;
};

/** @internal */
export const ListGiftCardsRequest$inboundSchema: z.ZodType<
    ListGiftCardsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        buyer_id: z.string().optional(),
        buyer_external_identifier: z.string().optional(),
        limit: z.number().int().default(20),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyer_id: "buyerId",
            buyer_external_identifier: "buyerExternalIdentifier",
        });
    });

/** @internal */
export type ListGiftCardsRequest$Outbound = {
    buyer_id?: string | undefined;
    buyer_external_identifier?: string | undefined;
    limit: number;
    cursor?: string | undefined;
};

/** @internal */
export const ListGiftCardsRequest$outboundSchema: z.ZodType<
    ListGiftCardsRequest$Outbound,
    z.ZodTypeDef,
    ListGiftCardsRequest
> = z
    .object({
        buyerId: z.string().optional(),
        buyerExternalIdentifier: z.string().optional(),
        limit: z.number().int().default(20),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buyerId: "buyer_id",
            buyerExternalIdentifier: "buyer_external_identifier",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGiftCardsRequest$ {
    /** @deprecated use `ListGiftCardsRequest$inboundSchema` instead. */
    export const inboundSchema = ListGiftCardsRequest$inboundSchema;
    /** @deprecated use `ListGiftCardsRequest$outboundSchema` instead. */
    export const outboundSchema = ListGiftCardsRequest$outboundSchema;
    /** @deprecated use `ListGiftCardsRequest$Outbound` instead. */
    export type Outbound = ListGiftCardsRequest$Outbound;
}
