/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetNetworkTokensRequest = {
    /**
     * Filters for transactions that have a payment method with an ID that matches exactly with the provided value.
     */
    paymentMethodId?: string | undefined;
};

export type GetNetworkTokensResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of network tokens (empty list if there aren't any).
     */
    networkTokens?: components.NetworkTokens | undefined;
};

/** @internal */
export namespace GetNetworkTokensRequest$ {
    export type Inbound = {
        payment_method_id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetNetworkTokensRequest, z.ZodTypeDef, Inbound> = z
        .object({
            payment_method_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.payment_method_id === undefined
                    ? null
                    : { paymentMethodId: v.payment_method_id }),
            };
        });

    export type Outbound = {
        payment_method_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetNetworkTokensRequest> = z
        .object({
            paymentMethodId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.paymentMethodId === undefined
                    ? null
                    : { payment_method_id: v.paymentMethodId }),
            };
        });
}

/** @internal */
export namespace GetNetworkTokensResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        NetworkTokens?: components.NetworkTokens$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetNetworkTokensResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            NetworkTokens: components.NetworkTokens$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.NetworkTokens === undefined ? null : { networkTokens: v.NetworkTokens }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        NetworkTokens?: components.NetworkTokens$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetNetworkTokensResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            networkTokens: components.NetworkTokens$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.networkTokens === undefined ? null : { NetworkTokens: v.networkTokens }),
            };
        });
}
