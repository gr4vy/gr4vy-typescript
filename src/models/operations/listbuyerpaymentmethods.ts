/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The direction to sort the payment methods in.
 */
export const OrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction to sort the payment methods in.
 */
export type OrderBy = OpenEnum<typeof OrderBy>;

export type ListBuyerPaymentMethodsRequest = {
  /**
   * The ID of the buyer to query payment methods for.
   */
  buyerId?: string | null | undefined;
  /**
   * The external identifier of the buyer to query payment methods for.
   */
  buyerExternalIdentifier?: string | null | undefined;
  /**
   * The field to sort the payment methods by.
   */
  sortBy?: "last_used_at" | null | undefined;
  /**
   * The direction to sort the payment methods in.
   */
  orderBy?: OrderBy | undefined;
  /**
   * The country code to filter payment methods by. This only applies to payment methods with a `country` value.
   */
  country?: string | null | undefined;
  /**
   * The currency code to filter payment methods by. This only applies to payment methods with a `currency` value.
   */
  currency?: string | null | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  xGr4vyMerchantAccountId?: string | null | undefined;
};

/** @internal */
export const OrderBy$inboundSchema: z.ZodType<OrderBy, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(OrderBy),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OrderBy$outboundSchema: z.ZodType<OrderBy, z.ZodTypeDef, OrderBy> =
  z.union([
    z.nativeEnum(OrderBy),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBy$ {
  /** @deprecated use `OrderBy$inboundSchema` instead. */
  export const inboundSchema = OrderBy$inboundSchema;
  /** @deprecated use `OrderBy$outboundSchema` instead. */
  export const outboundSchema = OrderBy$outboundSchema;
}

/** @internal */
export const ListBuyerPaymentMethodsRequest$inboundSchema: z.ZodType<
  ListBuyerPaymentMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  buyer_id: z.nullable(z.string()).optional(),
  buyer_external_identifier: z.nullable(z.string()).optional(),
  sort_by: z.nullable(z.literal("last_used_at")).optional(),
  order_by: OrderBy$inboundSchema.default("desc"),
  country: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  "x-gr4vy-merchant-account-id": z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "buyer_id": "buyerId",
    "buyer_external_identifier": "buyerExternalIdentifier",
    "sort_by": "sortBy",
    "order_by": "orderBy",
    "x-gr4vy-merchant-account-id": "xGr4vyMerchantAccountId",
  });
});

/** @internal */
export type ListBuyerPaymentMethodsRequest$Outbound = {
  buyer_id?: string | null | undefined;
  buyer_external_identifier?: string | null | undefined;
  sort_by: "last_used_at" | null;
  order_by: string;
  country?: string | null | undefined;
  currency?: string | null | undefined;
  "x-gr4vy-merchant-account-id"?: string | null | undefined;
};

/** @internal */
export const ListBuyerPaymentMethodsRequest$outboundSchema: z.ZodType<
  ListBuyerPaymentMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListBuyerPaymentMethodsRequest
> = z.object({
  buyerId: z.nullable(z.string()).optional(),
  buyerExternalIdentifier: z.nullable(z.string()).optional(),
  sortBy: z.nullable(
    z.literal("last_used_at").default("last_used_at" as const),
  ),
  orderBy: OrderBy$outboundSchema.default("desc"),
  country: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  xGr4vyMerchantAccountId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    buyerId: "buyer_id",
    buyerExternalIdentifier: "buyer_external_identifier",
    sortBy: "sort_by",
    orderBy: "order_by",
    xGr4vyMerchantAccountId: "x-gr4vy-merchant-account-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBuyerPaymentMethodsRequest$ {
  /** @deprecated use `ListBuyerPaymentMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBuyerPaymentMethodsRequest$inboundSchema;
  /** @deprecated use `ListBuyerPaymentMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBuyerPaymentMethodsRequest$outboundSchema;
  /** @deprecated use `ListBuyerPaymentMethodsRequest$Outbound` instead. */
  export type Outbound = ListBuyerPaymentMethodsRequest$Outbound;
}

export function listBuyerPaymentMethodsRequestToJSON(
  listBuyerPaymentMethodsRequest: ListBuyerPaymentMethodsRequest,
): string {
  return JSON.stringify(
    ListBuyerPaymentMethodsRequest$outboundSchema.parse(
      listBuyerPaymentMethodsRequest,
    ),
  );
}

export function listBuyerPaymentMethodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBuyerPaymentMethodsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBuyerPaymentMethodsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBuyerPaymentMethodsRequest' from JSON`,
  );
}
