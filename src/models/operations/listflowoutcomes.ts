/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export const ListFlowOutcomesPathParamFlow = {
    Checkout: "checkout",
    CardTransaction: "card-transaction",
    NonCardTransaction: "non-card-transaction",
    RedirectTransaction: "redirect-transaction",
} as const;
/**
 * The name of the Flow.
 */
export type ListFlowOutcomesPathParamFlow = ClosedEnum<typeof ListFlowOutcomesPathParamFlow>;

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export const ListFlowOutcomesPathParamAction = {
    SelectPaymentOptions: "select-payment-options",
    DeclineEarly: "decline-early",
    RouteTransaction: "route-transaction",
    Skip3ds: "skip-3ds",
} as const;
/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export type ListFlowOutcomesPathParamAction = ClosedEnum<typeof ListFlowOutcomesPathParamAction>;

export type ListFlowOutcomesRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: ListFlowOutcomesPathParamFlow;
    /**
     * The flow action.
     */
    action: ListFlowOutcomesPathParamAction;
    /**
     * An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
     *
     * @remarks
     * determines the language for the labels returned for every payment option.
     */
    locale?: string | undefined;
};

/** @internal */
export const ListFlowOutcomesPathParamFlow$inboundSchema: z.ZodNativeEnum<
    typeof ListFlowOutcomesPathParamFlow
> = z.nativeEnum(ListFlowOutcomesPathParamFlow);

/** @internal */
export const ListFlowOutcomesPathParamFlow$outboundSchema: z.ZodNativeEnum<
    typeof ListFlowOutcomesPathParamFlow
> = ListFlowOutcomesPathParamFlow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFlowOutcomesPathParamFlow$ {
    /** @deprecated use `ListFlowOutcomesPathParamFlow$inboundSchema` instead. */
    export const inboundSchema = ListFlowOutcomesPathParamFlow$inboundSchema;
    /** @deprecated use `ListFlowOutcomesPathParamFlow$outboundSchema` instead. */
    export const outboundSchema = ListFlowOutcomesPathParamFlow$outboundSchema;
}

/** @internal */
export const ListFlowOutcomesPathParamAction$inboundSchema: z.ZodNativeEnum<
    typeof ListFlowOutcomesPathParamAction
> = z.nativeEnum(ListFlowOutcomesPathParamAction);

/** @internal */
export const ListFlowOutcomesPathParamAction$outboundSchema: z.ZodNativeEnum<
    typeof ListFlowOutcomesPathParamAction
> = ListFlowOutcomesPathParamAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFlowOutcomesPathParamAction$ {
    /** @deprecated use `ListFlowOutcomesPathParamAction$inboundSchema` instead. */
    export const inboundSchema = ListFlowOutcomesPathParamAction$inboundSchema;
    /** @deprecated use `ListFlowOutcomesPathParamAction$outboundSchema` instead. */
    export const outboundSchema = ListFlowOutcomesPathParamAction$outboundSchema;
}

/** @internal */
export const ListFlowOutcomesRequest$inboundSchema: z.ZodType<
    ListFlowOutcomesRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    flow: ListFlowOutcomesPathParamFlow$inboundSchema,
    action: ListFlowOutcomesPathParamAction$inboundSchema,
    locale: z.string().default("en"),
});

/** @internal */
export type ListFlowOutcomesRequest$Outbound = {
    flow: string;
    action: string;
    locale: string;
};

/** @internal */
export const ListFlowOutcomesRequest$outboundSchema: z.ZodType<
    ListFlowOutcomesRequest$Outbound,
    z.ZodTypeDef,
    ListFlowOutcomesRequest
> = z.object({
    flow: ListFlowOutcomesPathParamFlow$outboundSchema,
    action: ListFlowOutcomesPathParamAction$outboundSchema,
    locale: z.string().default("en"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFlowOutcomesRequest$ {
    /** @deprecated use `ListFlowOutcomesRequest$inboundSchema` instead. */
    export const inboundSchema = ListFlowOutcomesRequest$inboundSchema;
    /** @deprecated use `ListFlowOutcomesRequest$outboundSchema` instead. */
    export const outboundSchema = ListFlowOutcomesRequest$outboundSchema;
    /** @deprecated use `ListFlowOutcomesRequest$Outbound` instead. */
    export type Outbound = ListFlowOutcomesRequest$Outbound;
}
