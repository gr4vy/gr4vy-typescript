/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTransactionGlobals = {
  merchantAccountId?: string | undefined;
};

export type UpdateTransactionRequest = {
  /**
   * The ID of the transaction
   */
  transactionId: string;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
  transactionUpdate: components.TransactionUpdate;
};

/** @internal */
export const UpdateTransactionGlobals$inboundSchema: z.ZodType<
  UpdateTransactionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type UpdateTransactionGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const UpdateTransactionGlobals$outboundSchema: z.ZodType<
  UpdateTransactionGlobals$Outbound,
  z.ZodTypeDef,
  UpdateTransactionGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionGlobals$ {
  /** @deprecated use `UpdateTransactionGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionGlobals$inboundSchema;
  /** @deprecated use `UpdateTransactionGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionGlobals$outboundSchema;
  /** @deprecated use `UpdateTransactionGlobals$Outbound` instead. */
  export type Outbound = UpdateTransactionGlobals$Outbound;
}

export function updateTransactionGlobalsToJSON(
  updateTransactionGlobals: UpdateTransactionGlobals,
): string {
  return JSON.stringify(
    UpdateTransactionGlobals$outboundSchema.parse(updateTransactionGlobals),
  );
}

export function updateTransactionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateTransactionRequest$inboundSchema: z.ZodType<
  UpdateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
  TransactionUpdate: components.TransactionUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "TransactionUpdate": "transactionUpdate",
  });
});

/** @internal */
export type UpdateTransactionRequest$Outbound = {
  transaction_id: string;
  merchantAccountId?: string | null | undefined;
  TransactionUpdate: components.TransactionUpdate$Outbound;
};

/** @internal */
export const UpdateTransactionRequest$outboundSchema: z.ZodType<
  UpdateTransactionRequest$Outbound,
  z.ZodTypeDef,
  UpdateTransactionRequest
> = z.object({
  transactionId: z.string(),
  merchantAccountId: z.nullable(z.string()).optional(),
  transactionUpdate: components.TransactionUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    transactionUpdate: "TransactionUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionRequest$ {
  /** @deprecated use `UpdateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionRequest$inboundSchema;
  /** @deprecated use `UpdateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionRequest$outboundSchema;
  /** @deprecated use `UpdateTransactionRequest$Outbound` instead. */
  export type Outbound = UpdateTransactionRequest$Outbound;
}

export function updateTransactionRequestToJSON(
  updateTransactionRequest: UpdateTransactionRequest,
): string {
  return JSON.stringify(
    UpdateTransactionRequest$outboundSchema.parse(updateTransactionRequest),
  );
}

export function updateTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionRequest' from JSON`,
  );
}
