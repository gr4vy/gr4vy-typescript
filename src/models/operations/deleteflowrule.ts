/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export enum DeleteFlowRulePathParamFlow {
    Checkout = "checkout",
    CardTransaction = "card-transaction",
    NonCardTransaction = "non-card-transaction",
    RedirectTransaction = "redirect-transaction",
}

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export enum DeleteFlowRulePathParamAction {
    SelectPaymentOptions = "select-payment-options",
    DeclineEarly = "decline-early",
    RouteTransaction = "route-transaction",
    Skip3ds = "skip-3ds",
}

export type DeleteFlowRuleRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: DeleteFlowRulePathParamFlow;
    /**
     * The flow action.
     */
    action: DeleteFlowRulePathParamAction;
    /**
     * The unique ID for a rule.
     */
    ruleId: string;
};

export type DeleteFlowRuleResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export const DeleteFlowRulePathParamFlow$ = z.nativeEnum(DeleteFlowRulePathParamFlow);

/** @internal */
export const DeleteFlowRulePathParamAction$ = z.nativeEnum(DeleteFlowRulePathParamAction);

/** @internal */
export namespace DeleteFlowRuleRequest$ {
    export type Inbound = {
        flow: DeleteFlowRulePathParamFlow;
        action: DeleteFlowRulePathParamAction;
        rule_id: string;
    };

    export const inboundSchema: z.ZodType<DeleteFlowRuleRequest, z.ZodTypeDef, Inbound> = z
        .object({
            flow: DeleteFlowRulePathParamFlow$,
            action: DeleteFlowRulePathParamAction$,
            rule_id: z.string(),
        })
        .transform((v) => {
            return {
                flow: v.flow,
                action: v.action,
                ruleId: v.rule_id,
            };
        });

    export type Outbound = {
        flow: DeleteFlowRulePathParamFlow;
        action: DeleteFlowRulePathParamAction;
        rule_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteFlowRuleRequest> = z
        .object({
            flow: DeleteFlowRulePathParamFlow$,
            action: DeleteFlowRulePathParamAction$,
            ruleId: z.string(),
        })
        .transform((v) => {
            return {
                flow: v.flow,
                action: v.action,
                rule_id: v.ruleId,
            };
        });
}

/** @internal */
export namespace DeleteFlowRuleResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<DeleteFlowRuleResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteFlowRuleResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
