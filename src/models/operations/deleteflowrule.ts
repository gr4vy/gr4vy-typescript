/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export const DeleteFlowRulePathParamFlow = {
    Checkout: "checkout",
    CardTransaction: "card-transaction",
    NonCardTransaction: "non-card-transaction",
    RedirectTransaction: "redirect-transaction",
} as const;
/**
 * The name of the Flow.
 */
export type DeleteFlowRulePathParamFlow = ClosedEnum<typeof DeleteFlowRulePathParamFlow>;

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export const DeleteFlowRulePathParamAction = {
    SelectPaymentOptions: "select-payment-options",
    DeclineEarly: "decline-early",
    RouteTransaction: "route-transaction",
    Skip3ds: "skip-3ds",
} as const;
/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export type DeleteFlowRulePathParamAction = ClosedEnum<typeof DeleteFlowRulePathParamAction>;

export type DeleteFlowRuleRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: DeleteFlowRulePathParamFlow;
    /**
     * The flow action.
     */
    action: DeleteFlowRulePathParamAction;
    /**
     * The unique ID for a rule.
     */
    ruleId: string;
};

/** @internal */
export const DeleteFlowRulePathParamFlow$inboundSchema: z.ZodNativeEnum<
    typeof DeleteFlowRulePathParamFlow
> = z.nativeEnum(DeleteFlowRulePathParamFlow);

/** @internal */
export const DeleteFlowRulePathParamFlow$outboundSchema: z.ZodNativeEnum<
    typeof DeleteFlowRulePathParamFlow
> = DeleteFlowRulePathParamFlow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFlowRulePathParamFlow$ {
    /** @deprecated use `DeleteFlowRulePathParamFlow$inboundSchema` instead. */
    export const inboundSchema = DeleteFlowRulePathParamFlow$inboundSchema;
    /** @deprecated use `DeleteFlowRulePathParamFlow$outboundSchema` instead. */
    export const outboundSchema = DeleteFlowRulePathParamFlow$outboundSchema;
}

/** @internal */
export const DeleteFlowRulePathParamAction$inboundSchema: z.ZodNativeEnum<
    typeof DeleteFlowRulePathParamAction
> = z.nativeEnum(DeleteFlowRulePathParamAction);

/** @internal */
export const DeleteFlowRulePathParamAction$outboundSchema: z.ZodNativeEnum<
    typeof DeleteFlowRulePathParamAction
> = DeleteFlowRulePathParamAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFlowRulePathParamAction$ {
    /** @deprecated use `DeleteFlowRulePathParamAction$inboundSchema` instead. */
    export const inboundSchema = DeleteFlowRulePathParamAction$inboundSchema;
    /** @deprecated use `DeleteFlowRulePathParamAction$outboundSchema` instead. */
    export const outboundSchema = DeleteFlowRulePathParamAction$outboundSchema;
}

/** @internal */
export const DeleteFlowRuleRequest$inboundSchema: z.ZodType<
    DeleteFlowRuleRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        flow: DeleteFlowRulePathParamFlow$inboundSchema,
        action: DeleteFlowRulePathParamAction$inboundSchema,
        rule_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            rule_id: "ruleId",
        });
    });

/** @internal */
export type DeleteFlowRuleRequest$Outbound = {
    flow: string;
    action: string;
    rule_id: string;
};

/** @internal */
export const DeleteFlowRuleRequest$outboundSchema: z.ZodType<
    DeleteFlowRuleRequest$Outbound,
    z.ZodTypeDef,
    DeleteFlowRuleRequest
> = z
    .object({
        flow: DeleteFlowRulePathParamFlow$outboundSchema,
        action: DeleteFlowRulePathParamAction$outboundSchema,
        ruleId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            ruleId: "rule_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFlowRuleRequest$ {
    /** @deprecated use `DeleteFlowRuleRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteFlowRuleRequest$inboundSchema;
    /** @deprecated use `DeleteFlowRuleRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteFlowRuleRequest$outboundSchema;
    /** @deprecated use `DeleteFlowRuleRequest$Outbound` instead. */
    export type Outbound = DeleteFlowRuleRequest$Outbound;
}
