/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPayoutsGlobals = {
  merchantAccountId?: string | undefined;
};

export type ListPayoutsRequest = {
  /**
   * A pointer to the page of results to return.
   */
  cursor?: string | null | undefined;
  /**
   * The maximum number of items that are at returned.
   */
  limit?: number | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

export type ListPayoutsResponse = {
  result: components.PayoutSummaries;
};

/** @internal */
export const ListPayoutsGlobals$inboundSchema: z.ZodType<
  ListPayoutsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type ListPayoutsGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ListPayoutsGlobals$outboundSchema: z.ZodType<
  ListPayoutsGlobals$Outbound,
  z.ZodTypeDef,
  ListPayoutsGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPayoutsGlobals$ {
  /** @deprecated use `ListPayoutsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListPayoutsGlobals$inboundSchema;
  /** @deprecated use `ListPayoutsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListPayoutsGlobals$outboundSchema;
  /** @deprecated use `ListPayoutsGlobals$Outbound` instead. */
  export type Outbound = ListPayoutsGlobals$Outbound;
}

export function listPayoutsGlobalsToJSON(
  listPayoutsGlobals: ListPayoutsGlobals,
): string {
  return JSON.stringify(
    ListPayoutsGlobals$outboundSchema.parse(listPayoutsGlobals),
  );
}

export function listPayoutsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPayoutsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPayoutsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPayoutsGlobals' from JSON`,
  );
}

/** @internal */
export const ListPayoutsRequest$inboundSchema: z.ZodType<
  ListPayoutsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  merchantAccountId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPayoutsRequest$Outbound = {
  cursor?: string | null | undefined;
  limit: number;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListPayoutsRequest$outboundSchema: z.ZodType<
  ListPayoutsRequest$Outbound,
  z.ZodTypeDef,
  ListPayoutsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  merchantAccountId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPayoutsRequest$ {
  /** @deprecated use `ListPayoutsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPayoutsRequest$inboundSchema;
  /** @deprecated use `ListPayoutsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPayoutsRequest$outboundSchema;
  /** @deprecated use `ListPayoutsRequest$Outbound` instead. */
  export type Outbound = ListPayoutsRequest$Outbound;
}

export function listPayoutsRequestToJSON(
  listPayoutsRequest: ListPayoutsRequest,
): string {
  return JSON.stringify(
    ListPayoutsRequest$outboundSchema.parse(listPayoutsRequest),
  );
}

export function listPayoutsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPayoutsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPayoutsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPayoutsRequest' from JSON`,
  );
}

/** @internal */
export const ListPayoutsResponse$inboundSchema: z.ZodType<
  ListPayoutsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.PayoutSummaries$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListPayoutsResponse$Outbound = {
  Result: components.PayoutSummaries$Outbound;
};

/** @internal */
export const ListPayoutsResponse$outboundSchema: z.ZodType<
  ListPayoutsResponse$Outbound,
  z.ZodTypeDef,
  ListPayoutsResponse
> = z.object({
  result: components.PayoutSummaries$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPayoutsResponse$ {
  /** @deprecated use `ListPayoutsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPayoutsResponse$inboundSchema;
  /** @deprecated use `ListPayoutsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPayoutsResponse$outboundSchema;
  /** @deprecated use `ListPayoutsResponse$Outbound` instead. */
  export type Outbound = ListPayoutsResponse$Outbound;
}

export function listPayoutsResponseToJSON(
  listPayoutsResponse: ListPayoutsResponse,
): string {
  return JSON.stringify(
    ListPayoutsResponse$outboundSchema.parse(listPayoutsResponse),
  );
}

export function listPayoutsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPayoutsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPayoutsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPayoutsResponse' from JSON`,
  );
}
