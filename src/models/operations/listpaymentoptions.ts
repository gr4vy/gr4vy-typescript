/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListPaymentOptionsRequest = {
    /**
     * Filters the results to only the items which support this country code. A
     *
     * @remarks
     * country is formatted as 2-letter ISO country code.
     */
    country?: string | undefined;
    /**
     * Filters the results to only the items which support this currency code. A
     *
     * @remarks
     * currency is formatted as 3-letter ISO currency code.
     */
    currency?: string | undefined;
    /**
     * Used by the Flow engine to filter the results based on the transaction amount.
     */
    amount?: number | undefined;
    /**
     * Used by the Flow engine to filter available options based on various
     *
     * @remarks
     * client-defined parameters. If present, this must be a string representing
     * a valid JSON dictionary.
     */
    metadata?: string | undefined;
    /**
     * An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
     *
     * @remarks
     * determines the language for the labels returned for every payment option.
     */
    locale?: string | undefined;
};

export type ListPaymentOptionsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of available payment options for the given query
     *
     * @remarks
     * parameters.
     */
    paymentOptions?: components.PaymentOptions | undefined;
};

/** @internal */
export namespace ListPaymentOptionsRequest$ {
    export type Inbound = {
        country?: string | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
        metadata?: string | undefined;
        locale?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListPaymentOptionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            country: z.string().optional(),
            currency: z.string().optional(),
            amount: z.number().int().optional(),
            metadata: z.string().optional(),
            locale: z.string().default("en"),
        })
        .transform((v) => {
            return {
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                locale: v.locale,
            };
        });

    export type Outbound = {
        country?: string | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
        metadata?: string | undefined;
        locale: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentOptionsRequest> = z
        .object({
            country: z.string().optional(),
            currency: z.string().optional(),
            amount: z.number().int().optional(),
            metadata: z.string().optional(),
            locale: z.string().default("en"),
        })
        .transform((v) => {
            return {
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                locale: v.locale,
            };
        });
}

/** @internal */
export namespace ListPaymentOptionsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        PaymentOptions?: components.PaymentOptions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListPaymentOptionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            PaymentOptions: components.PaymentOptions$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.PaymentOptions === undefined ? null : { paymentOptions: v.PaymentOptions }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        PaymentOptions?: components.PaymentOptions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentOptionsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            paymentOptions: components.PaymentOptions$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.paymentOptions === undefined ? null : { PaymentOptions: v.paymentOptions }),
            };
        });
}
