/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPaymentLinksGlobals = {
  merchantAccountId?: string | undefined;
};

export type ListPaymentLinksRequest = {
  /**
   * A pointer to the page of results to return.
   */
  cursor?: string | null | undefined;
  /**
   * The maximum number of items that are returned.
   */
  limit?: number | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

export type ListPaymentLinksResponse = {
  result: components.CollectionPaymentLink;
};

/** @internal */
export const ListPaymentLinksGlobals$inboundSchema: z.ZodType<
  ListPaymentLinksGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchantAccountId: z.string().optional(),
});

/** @internal */
export type ListPaymentLinksGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const ListPaymentLinksGlobals$outboundSchema: z.ZodType<
  ListPaymentLinksGlobals$Outbound,
  z.ZodTypeDef,
  ListPaymentLinksGlobals
> = z.object({
  merchantAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentLinksGlobals$ {
  /** @deprecated use `ListPaymentLinksGlobals$inboundSchema` instead. */
  export const inboundSchema = ListPaymentLinksGlobals$inboundSchema;
  /** @deprecated use `ListPaymentLinksGlobals$outboundSchema` instead. */
  export const outboundSchema = ListPaymentLinksGlobals$outboundSchema;
  /** @deprecated use `ListPaymentLinksGlobals$Outbound` instead. */
  export type Outbound = ListPaymentLinksGlobals$Outbound;
}

export function listPaymentLinksGlobalsToJSON(
  listPaymentLinksGlobals: ListPaymentLinksGlobals,
): string {
  return JSON.stringify(
    ListPaymentLinksGlobals$outboundSchema.parse(listPaymentLinksGlobals),
  );
}

export function listPaymentLinksGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentLinksGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentLinksGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentLinksGlobals' from JSON`,
  );
}

/** @internal */
export const ListPaymentLinksRequest$inboundSchema: z.ZodType<
  ListPaymentLinksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  merchantAccountId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPaymentLinksRequest$Outbound = {
  cursor?: string | null | undefined;
  limit: number;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const ListPaymentLinksRequest$outboundSchema: z.ZodType<
  ListPaymentLinksRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentLinksRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  merchantAccountId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentLinksRequest$ {
  /** @deprecated use `ListPaymentLinksRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentLinksRequest$inboundSchema;
  /** @deprecated use `ListPaymentLinksRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentLinksRequest$outboundSchema;
  /** @deprecated use `ListPaymentLinksRequest$Outbound` instead. */
  export type Outbound = ListPaymentLinksRequest$Outbound;
}

export function listPaymentLinksRequestToJSON(
  listPaymentLinksRequest: ListPaymentLinksRequest,
): string {
  return JSON.stringify(
    ListPaymentLinksRequest$outboundSchema.parse(listPaymentLinksRequest),
  );
}

export function listPaymentLinksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentLinksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentLinksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentLinksRequest' from JSON`,
  );
}

/** @internal */
export const ListPaymentLinksResponse$inboundSchema: z.ZodType<
  ListPaymentLinksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.CollectionPaymentLink$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListPaymentLinksResponse$Outbound = {
  Result: components.CollectionPaymentLink$Outbound;
};

/** @internal */
export const ListPaymentLinksResponse$outboundSchema: z.ZodType<
  ListPaymentLinksResponse$Outbound,
  z.ZodTypeDef,
  ListPaymentLinksResponse
> = z.object({
  result: components.CollectionPaymentLink$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentLinksResponse$ {
  /** @deprecated use `ListPaymentLinksResponse$inboundSchema` instead. */
  export const inboundSchema = ListPaymentLinksResponse$inboundSchema;
  /** @deprecated use `ListPaymentLinksResponse$outboundSchema` instead. */
  export const outboundSchema = ListPaymentLinksResponse$outboundSchema;
  /** @deprecated use `ListPaymentLinksResponse$Outbound` instead. */
  export type Outbound = ListPaymentLinksResponse$Outbound;
}

export function listPaymentLinksResponseToJSON(
  listPaymentLinksResponse: ListPaymentLinksResponse,
): string {
  return JSON.stringify(
    ListPaymentLinksResponse$outboundSchema.parse(listPaymentLinksResponse),
  );
}

export function listPaymentLinksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPaymentLinksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaymentLinksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaymentLinksResponse' from JSON`,
  );
}
