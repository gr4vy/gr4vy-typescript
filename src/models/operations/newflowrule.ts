/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export const PathParamFlow = {
    Checkout: "checkout",
    CardTransaction: "card-transaction",
    NonCardTransaction: "non-card-transaction",
    RedirectTransaction: "redirect-transaction",
} as const;
/**
 * The name of the Flow.
 */
export type PathParamFlow = ClosedEnum<typeof PathParamFlow>;

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export const PathParamAction = {
    SelectPaymentOptions: "select-payment-options",
    DeclineEarly: "decline-early",
    RouteTransaction: "route-transaction",
    Skip3ds: "skip-3ds",
} as const;
/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export type PathParamAction = ClosedEnum<typeof PathParamAction>;

export type NewFlowRuleRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: PathParamFlow;
    /**
     * The flow action.
     */
    action: PathParamAction;
    flowRuleCreateRequest?: components.FlowRuleCreateRequest | undefined;
};

/** @internal */
export const PathParamFlow$inboundSchema: z.ZodNativeEnum<typeof PathParamFlow> =
    z.nativeEnum(PathParamFlow);

/** @internal */
export const PathParamFlow$outboundSchema: z.ZodNativeEnum<typeof PathParamFlow> =
    PathParamFlow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PathParamFlow$ {
    /** @deprecated use `PathParamFlow$inboundSchema` instead. */
    export const inboundSchema = PathParamFlow$inboundSchema;
    /** @deprecated use `PathParamFlow$outboundSchema` instead. */
    export const outboundSchema = PathParamFlow$outboundSchema;
}

/** @internal */
export const PathParamAction$inboundSchema: z.ZodNativeEnum<typeof PathParamAction> =
    z.nativeEnum(PathParamAction);

/** @internal */
export const PathParamAction$outboundSchema: z.ZodNativeEnum<typeof PathParamAction> =
    PathParamAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PathParamAction$ {
    /** @deprecated use `PathParamAction$inboundSchema` instead. */
    export const inboundSchema = PathParamAction$inboundSchema;
    /** @deprecated use `PathParamAction$outboundSchema` instead. */
    export const outboundSchema = PathParamAction$outboundSchema;
}

/** @internal */
export const NewFlowRuleRequest$inboundSchema: z.ZodType<
    NewFlowRuleRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        flow: PathParamFlow$inboundSchema,
        action: PathParamAction$inboundSchema,
        FlowRuleCreateRequest: components.FlowRuleCreateRequest$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            FlowRuleCreateRequest: "flowRuleCreateRequest",
        });
    });

/** @internal */
export type NewFlowRuleRequest$Outbound = {
    flow: string;
    action: string;
    FlowRuleCreateRequest?: components.FlowRuleCreateRequest$Outbound | undefined;
};

/** @internal */
export const NewFlowRuleRequest$outboundSchema: z.ZodType<
    NewFlowRuleRequest$Outbound,
    z.ZodTypeDef,
    NewFlowRuleRequest
> = z
    .object({
        flow: PathParamFlow$outboundSchema,
        action: PathParamAction$outboundSchema,
        flowRuleCreateRequest: components.FlowRuleCreateRequest$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            flowRuleCreateRequest: "FlowRuleCreateRequest",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewFlowRuleRequest$ {
    /** @deprecated use `NewFlowRuleRequest$inboundSchema` instead. */
    export const inboundSchema = NewFlowRuleRequest$inboundSchema;
    /** @deprecated use `NewFlowRuleRequest$outboundSchema` instead. */
    export const outboundSchema = NewFlowRuleRequest$outboundSchema;
    /** @deprecated use `NewFlowRuleRequest$Outbound` instead. */
    export type Outbound = NewFlowRuleRequest$Outbound;
}
