/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

/**
 * The name of the Flow.
 */
export enum PathParamFlow {
    Checkout = "checkout",
    CardTransaction = "card-transaction",
    NonCardTransaction = "non-card-transaction",
    RedirectTransaction = "redirect-transaction",
}

/**
 * Action for the given rule. Actions can only be used in
 *
 * @remarks
 * flows that support them.
 *
 * * The `checkout` flow only supports the
 * `select-payment-options` action.
 * * The `card-transaction` supports the `route-transaction`,
 * `skip-3ds`, and `decline-early` actions.
 * * The `non-card-transaction` flow only supports the
 * `decline-early` action.
 * * The `redirect-transaction` flow only supports
 * the `route-transaction` action.
 *
 */
export enum PathParamAction {
    SelectPaymentOptions = "select-payment-options",
    DeclineEarly = "decline-early",
    RouteTransaction = "route-transaction",
    Skip3ds = "skip-3ds",
}

export type NewFlowRuleRequest = {
    /**
     * The flow name. This can be one of the following.
     *
     * @remarks
     *
     * - `checkout` - Applies during checkout to determine what payment options are shown.
     * - `card-transaction` - Applies when processing a card transaction.
     * - `non-card-transaction` - Applies when processing a gift card only transaction, or a
     * redirect transaction using the `decline-early` action.
     * - `redirect-transaction` - Applies when processing any other transaction.
     */
    flow: PathParamFlow;
    /**
     * The flow action.
     */
    action: PathParamAction;
    flowRuleCreateRequest?: components.FlowRuleCreateRequest | undefined;
};

/** @internal */
export namespace PathParamFlow$ {
    export const inboundSchema = z.nativeEnum(PathParamFlow);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PathParamAction$ {
    export const inboundSchema = z.nativeEnum(PathParamAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace NewFlowRuleRequest$ {
    export const inboundSchema: z.ZodType<NewFlowRuleRequest, z.ZodTypeDef, unknown> = z
        .object({
            flow: PathParamFlow$.inboundSchema,
            action: PathParamAction$.inboundSchema,
            FlowRuleCreateRequest: components.FlowRuleCreateRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                FlowRuleCreateRequest: "flowRuleCreateRequest",
            });
        });

    export type Outbound = {
        flow: string;
        action: string;
        FlowRuleCreateRequest?: components.FlowRuleCreateRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewFlowRuleRequest> = z
        .object({
            flow: PathParamFlow$.outboundSchema,
            action: PathParamAction$.outboundSchema,
            flowRuleCreateRequest: components.FlowRuleCreateRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                flowRuleCreateRequest: "FlowRuleCreateRequest",
            });
        });
}
