/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListConnectionsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Returns a list of connections.
     */
    connections?: components.Connections | undefined;
};

/** @internal */
export namespace ListConnectionsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Connections?: components.Connections$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListConnectionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Connections: components.Connections$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Connections === undefined ? null : { connections: v.Connections }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Connections?: components.Connections$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListConnectionsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            connections: components.Connections$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.connections === undefined ? null : { Connections: v.connections }),
            };
        });
}
