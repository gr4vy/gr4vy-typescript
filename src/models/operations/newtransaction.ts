/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type NewTransactionRequest = {
    /**
     * A unique key that identifies this request. Providing this header will make
     *
     * @remarks
     * this an idempotent request. We recommend using V4 UUIDs, or another random
     * string with enough entropy to avoid collisions.
     */
    idempotencyKey?: string | undefined;
    transactionRequest?: components.TransactionRequest | undefined;
};

/** @internal */
export namespace NewTransactionRequest$ {
    export const inboundSchema: z.ZodType<NewTransactionRequest, z.ZodTypeDef, unknown> = z
        .object({
            "Idempotency-Key": z.string().optional(),
            TransactionRequest: components.TransactionRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "Idempotency-Key": "idempotencyKey",
                TransactionRequest: "transactionRequest",
            });
        });

    export type Outbound = {
        "Idempotency-Key"?: string | undefined;
        TransactionRequest?: components.TransactionRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewTransactionRequest> = z
        .object({
            idempotencyKey: z.string().optional(),
            transactionRequest: components.TransactionRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                idempotencyKey: "Idempotency-Key",
                transactionRequest: "TransactionRequest",
            });
        });
}
