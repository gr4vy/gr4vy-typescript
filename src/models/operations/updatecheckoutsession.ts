/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCheckoutSessionRequest = {
  /**
   * The ID of the checkout session.
   */
  sessionId: string;
  timeoutInSeconds?: number | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  xGr4vyMerchantAccountId?: string | null | undefined;
  checkoutSessionUpdate: components.CheckoutSessionUpdate;
};

/** @internal */
export const UpdateCheckoutSessionRequest$inboundSchema: z.ZodType<
  UpdateCheckoutSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  session_id: z.string(),
  timeout_in_seconds: z.number().default(1),
  "x-gr4vy-merchant-account-id": z.nullable(z.string()).optional(),
  CheckoutSessionUpdate: components.CheckoutSessionUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
    "timeout_in_seconds": "timeoutInSeconds",
    "x-gr4vy-merchant-account-id": "xGr4vyMerchantAccountId",
    "CheckoutSessionUpdate": "checkoutSessionUpdate",
  });
});

/** @internal */
export type UpdateCheckoutSessionRequest$Outbound = {
  session_id: string;
  timeout_in_seconds: number;
  "x-gr4vy-merchant-account-id"?: string | null | undefined;
  CheckoutSessionUpdate: components.CheckoutSessionUpdate$Outbound;
};

/** @internal */
export const UpdateCheckoutSessionRequest$outboundSchema: z.ZodType<
  UpdateCheckoutSessionRequest$Outbound,
  z.ZodTypeDef,
  UpdateCheckoutSessionRequest
> = z.object({
  sessionId: z.string(),
  timeoutInSeconds: z.number().default(1),
  xGr4vyMerchantAccountId: z.nullable(z.string()).optional(),
  checkoutSessionUpdate: components.CheckoutSessionUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    timeoutInSeconds: "timeout_in_seconds",
    xGr4vyMerchantAccountId: "x-gr4vy-merchant-account-id",
    checkoutSessionUpdate: "CheckoutSessionUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCheckoutSessionRequest$ {
  /** @deprecated use `UpdateCheckoutSessionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCheckoutSessionRequest$inboundSchema;
  /** @deprecated use `UpdateCheckoutSessionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCheckoutSessionRequest$outboundSchema;
  /** @deprecated use `UpdateCheckoutSessionRequest$Outbound` instead. */
  export type Outbound = UpdateCheckoutSessionRequest$Outbound;
}

export function updateCheckoutSessionRequestToJSON(
  updateCheckoutSessionRequest: UpdateCheckoutSessionRequest,
): string {
  return JSON.stringify(
    UpdateCheckoutSessionRequest$outboundSchema.parse(
      updateCheckoutSessionRequest,
    ),
  );
}

export function updateCheckoutSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCheckoutSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCheckoutSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCheckoutSessionRequest' from JSON`,
  );
}
