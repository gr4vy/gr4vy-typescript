/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UpdateCheckoutSessionRequest = {
    /**
     * The unique ID for a Checkout Session.
     */
    checkoutSessionId: string;
    checkoutSessionUpdateRequest?: components.CheckoutSessionUpdateRequest | undefined;
};

/** @internal */
export namespace UpdateCheckoutSessionRequest$ {
    export type Inbound = {
        checkout_session_id: string;
        CheckoutSessionUpdateRequest?: components.CheckoutSessionUpdateRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateCheckoutSessionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            checkout_session_id: z.string(),
            CheckoutSessionUpdateRequest:
                components.CheckoutSessionUpdateRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                checkoutSessionId: v.checkout_session_id,
                ...(v.CheckoutSessionUpdateRequest === undefined
                    ? null
                    : { checkoutSessionUpdateRequest: v.CheckoutSessionUpdateRequest }),
            };
        });

    export type Outbound = {
        checkout_session_id: string;
        CheckoutSessionUpdateRequest?:
            | components.CheckoutSessionUpdateRequest$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateCheckoutSessionRequest> = z
        .object({
            checkoutSessionId: z.string(),
            checkoutSessionUpdateRequest:
                components.CheckoutSessionUpdateRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                checkout_session_id: v.checkoutSessionId,
                ...(v.checkoutSessionUpdateRequest === undefined
                    ? null
                    : { CheckoutSessionUpdateRequest: v.checkoutSessionUpdateRequest }),
            };
        });
}
