/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type DeletePaymentServiceRequest = {
    /**
     * The ID of the payment service.
     */
    paymentServiceId: string;
};

export type DeletePaymentServiceResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace DeletePaymentServiceRequest$ {
    export type Inbound = {
        payment_service_id: string;
    };

    export const inboundSchema: z.ZodType<DeletePaymentServiceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            payment_service_id: z.string(),
        })
        .transform((v) => {
            return {
                paymentServiceId: v.payment_service_id,
            };
        });

    export type Outbound = {
        payment_service_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeletePaymentServiceRequest> = z
        .object({
            paymentServiceId: z.string(),
        })
        .transform((v) => {
            return {
                payment_service_id: v.paymentServiceId,
            };
        });
}

/** @internal */
export namespace DeletePaymentServiceResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<DeletePaymentServiceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeletePaymentServiceResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
