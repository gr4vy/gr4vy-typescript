/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type GetReportExecutionRequest = {
    reportExecutionId: string;
};

/** @internal */
export const GetReportExecutionRequest$inboundSchema: z.ZodType<
    GetReportExecutionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        report_execution_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            report_execution_id: "reportExecutionId",
        });
    });

/** @internal */
export type GetReportExecutionRequest$Outbound = {
    report_execution_id: string;
};

/** @internal */
export const GetReportExecutionRequest$outboundSchema: z.ZodType<
    GetReportExecutionRequest$Outbound,
    z.ZodTypeDef,
    GetReportExecutionRequest
> = z
    .object({
        reportExecutionId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            reportExecutionId: "report_execution_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReportExecutionRequest$ {
    /** @deprecated use `GetReportExecutionRequest$inboundSchema` instead. */
    export const inboundSchema = GetReportExecutionRequest$inboundSchema;
    /** @deprecated use `GetReportExecutionRequest$outboundSchema` instead. */
    export const outboundSchema = GetReportExecutionRequest$outboundSchema;
    /** @deprecated use `GetReportExecutionRequest$Outbound` instead. */
    export type Outbound = GetReportExecutionRequest$Outbound;
}
