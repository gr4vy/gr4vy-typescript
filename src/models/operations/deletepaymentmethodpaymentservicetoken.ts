/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePaymentMethodPaymentServiceTokenGlobals = {
  merchantAccountId?: string | undefined;
};

export type DeletePaymentMethodPaymentServiceTokenRequest = {
  /**
   * The ID of the payment method
   */
  paymentMethodId: string;
  /**
   * The ID of the payment service token
   */
  paymentServiceTokenId: string;
  applicationName?: string | undefined;
  /**
   * The ID of the merchant account to use for this request.
   */
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const DeletePaymentMethodPaymentServiceTokenGlobals$inboundSchema:
  z.ZodType<
    DeletePaymentMethodPaymentServiceTokenGlobals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    merchantAccountId: z.string().optional(),
  });

/** @internal */
export type DeletePaymentMethodPaymentServiceTokenGlobals$Outbound = {
  merchantAccountId?: string | undefined;
};

/** @internal */
export const DeletePaymentMethodPaymentServiceTokenGlobals$outboundSchema:
  z.ZodType<
    DeletePaymentMethodPaymentServiceTokenGlobals$Outbound,
    z.ZodTypeDef,
    DeletePaymentMethodPaymentServiceTokenGlobals
  > = z.object({
    merchantAccountId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentMethodPaymentServiceTokenGlobals$ {
  /** @deprecated use `DeletePaymentMethodPaymentServiceTokenGlobals$inboundSchema` instead. */
  export const inboundSchema =
    DeletePaymentMethodPaymentServiceTokenGlobals$inboundSchema;
  /** @deprecated use `DeletePaymentMethodPaymentServiceTokenGlobals$outboundSchema` instead. */
  export const outboundSchema =
    DeletePaymentMethodPaymentServiceTokenGlobals$outboundSchema;
  /** @deprecated use `DeletePaymentMethodPaymentServiceTokenGlobals$Outbound` instead. */
  export type Outbound = DeletePaymentMethodPaymentServiceTokenGlobals$Outbound;
}

export function deletePaymentMethodPaymentServiceTokenGlobalsToJSON(
  deletePaymentMethodPaymentServiceTokenGlobals:
    DeletePaymentMethodPaymentServiceTokenGlobals,
): string {
  return JSON.stringify(
    DeletePaymentMethodPaymentServiceTokenGlobals$outboundSchema.parse(
      deletePaymentMethodPaymentServiceTokenGlobals,
    ),
  );
}

export function deletePaymentMethodPaymentServiceTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  DeletePaymentMethodPaymentServiceTokenGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeletePaymentMethodPaymentServiceTokenGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeletePaymentMethodPaymentServiceTokenGlobals' from JSON`,
  );
}

/** @internal */
export const DeletePaymentMethodPaymentServiceTokenRequest$inboundSchema:
  z.ZodType<
    DeletePaymentMethodPaymentServiceTokenRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_method_id: z.string(),
    payment_service_token_id: z.string(),
    application_name: z.string().default("core-api"),
    merchantAccountId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method_id": "paymentMethodId",
      "payment_service_token_id": "paymentServiceTokenId",
      "application_name": "applicationName",
    });
  });

/** @internal */
export type DeletePaymentMethodPaymentServiceTokenRequest$Outbound = {
  payment_method_id: string;
  payment_service_token_id: string;
  application_name: string;
  merchantAccountId?: string | null | undefined;
};

/** @internal */
export const DeletePaymentMethodPaymentServiceTokenRequest$outboundSchema:
  z.ZodType<
    DeletePaymentMethodPaymentServiceTokenRequest$Outbound,
    z.ZodTypeDef,
    DeletePaymentMethodPaymentServiceTokenRequest
  > = z.object({
    paymentMethodId: z.string(),
    paymentServiceTokenId: z.string(),
    applicationName: z.string().default("core-api"),
    merchantAccountId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentMethodId: "payment_method_id",
      paymentServiceTokenId: "payment_service_token_id",
      applicationName: "application_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePaymentMethodPaymentServiceTokenRequest$ {
  /** @deprecated use `DeletePaymentMethodPaymentServiceTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeletePaymentMethodPaymentServiceTokenRequest$inboundSchema;
  /** @deprecated use `DeletePaymentMethodPaymentServiceTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeletePaymentMethodPaymentServiceTokenRequest$outboundSchema;
  /** @deprecated use `DeletePaymentMethodPaymentServiceTokenRequest$Outbound` instead. */
  export type Outbound = DeletePaymentMethodPaymentServiceTokenRequest$Outbound;
}

export function deletePaymentMethodPaymentServiceTokenRequestToJSON(
  deletePaymentMethodPaymentServiceTokenRequest:
    DeletePaymentMethodPaymentServiceTokenRequest,
): string {
  return JSON.stringify(
    DeletePaymentMethodPaymentServiceTokenRequest$outboundSchema.parse(
      deletePaymentMethodPaymentServiceTokenRequest,
    ),
  );
}

export function deletePaymentMethodPaymentServiceTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeletePaymentMethodPaymentServiceTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeletePaymentMethodPaymentServiceTokenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeletePaymentMethodPaymentServiceTokenRequest' from JSON`,
  );
}
